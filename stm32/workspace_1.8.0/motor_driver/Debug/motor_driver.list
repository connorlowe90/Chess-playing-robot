
motor_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebf4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000768  0800ed88  0800ed88  0001ed88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f4f0  0800f4f0  000205a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f4f0  0800f4f0  0001f4f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f4f8  0800f4f8  000205a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f4f8  0800f4f8  0001f4f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f4fc  0800f4fc  0001f4fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005a4  20000000  0800f500  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000205a4  2**0
                  CONTENTS
 10 .bss          0000083c  200005a4  200005a4  000205a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000de0  20000de0  000205a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000205a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ec1a  00000000  00000000  000205d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040b7  00000000  00000000  0003f1ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f0  00000000  00000000  000432a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001278  00000000  00000000  00044698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000256cd  00000000  00000000  00045910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000189a3  00000000  00000000  0006afdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d226d  00000000  00000000  00083980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00155bed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006be8  00000000  00000000  00155c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200005a4 	.word	0x200005a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ed6c 	.word	0x0800ed6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200005a8 	.word	0x200005a8
 80001cc:	0800ed6c 	.word	0x0800ed6c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <initPins>:
 Z dir0 pin = PA3

 */

// Initialize all pins and timers needed
void initPins(){
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  TIM6->PSC = 89;
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <initPins+0x28>)
 8000ff2:	2259      	movs	r2, #89	; 0x59
 8000ff4:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 0xffff;
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <initPins+0x28>)
 8000ff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ffc:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM6->CR1 |= (1 << 0);
 8000ffe:	4b05      	ldr	r3, [pc, #20]	; (8001014 <initPins+0x28>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a04      	ldr	r2, [pc, #16]	; (8001014 <initPins+0x28>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6013      	str	r3, [r2, #0]
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	40001000 	.word	0x40001000

08001018 <pinWrite>:

// Write to a pin for a given axis
void pinWrite(axis writeAxis, pin writePin, int state){
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	603a      	str	r2, [r7, #0]
 8001022:	71fb      	strb	r3, [r7, #7]
 8001024:	460b      	mov	r3, r1
 8001026:	71bb      	strb	r3, [r7, #6]
	int shift = state * 16;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	011b      	lsls	r3, r3, #4
 800102c:	60fb      	str	r3, [r7, #12]
  switch(writeAxis){
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	2b02      	cmp	r3, #2
 8001032:	d062      	beq.n	80010fa <pinWrite+0xe2>
 8001034:	2b02      	cmp	r3, #2
 8001036:	f300 8087 	bgt.w	8001148 <pinWrite+0x130>
 800103a:	2b00      	cmp	r3, #0
 800103c:	d002      	beq.n	8001044 <pinWrite+0x2c>
 800103e:	2b01      	cmp	r3, #1
 8001040:	d02f      	beq.n	80010a2 <pinWrite+0x8a>
		  case dir1:
			break;
		}
		break;
  }
}
 8001042:	e081      	b.n	8001148 <pinWrite+0x130>
      switch(writePin){
 8001044:	79bb      	ldrb	r3, [r7, #6]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d01e      	beq.n	8001088 <pinWrite+0x70>
 800104a:	2b02      	cmp	r3, #2
 800104c:	dc77      	bgt.n	800113e <pinWrite+0x126>
 800104e:	2b00      	cmp	r3, #0
 8001050:	d002      	beq.n	8001058 <pinWrite+0x40>
 8001052:	2b01      	cmp	r3, #1
 8001054:	d00c      	beq.n	8001070 <pinWrite+0x58>
      break;
 8001056:	e072      	b.n	800113e <pinWrite+0x126>
        	GPIOC->BSRR |= (1<<14) << shift;
 8001058:	4b3e      	ldr	r3, [pc, #248]	; (8001154 <pinWrite+0x13c>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001060:	68fa      	ldr	r2, [r7, #12]
 8001062:	fa01 f202 	lsl.w	r2, r1, r2
 8001066:	4611      	mov	r1, r2
 8001068:	4a3a      	ldr	r2, [pc, #232]	; (8001154 <pinWrite+0x13c>)
 800106a:	430b      	orrs	r3, r1
 800106c:	6193      	str	r3, [r2, #24]
          break;
 800106e:	e017      	b.n	80010a0 <pinWrite+0x88>
        	GPIOC->BSRR |= (1<<15) << shift;
 8001070:	4b38      	ldr	r3, [pc, #224]	; (8001154 <pinWrite+0x13c>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001078:	68fa      	ldr	r2, [r7, #12]
 800107a:	fa01 f202 	lsl.w	r2, r1, r2
 800107e:	4611      	mov	r1, r2
 8001080:	4a34      	ldr	r2, [pc, #208]	; (8001154 <pinWrite+0x13c>)
 8001082:	430b      	orrs	r3, r1
 8001084:	6193      	str	r3, [r2, #24]
          break;
 8001086:	e00b      	b.n	80010a0 <pinWrite+0x88>
        	GPIOC->BSRR |= (1<<13) << shift;
 8001088:	4b32      	ldr	r3, [pc, #200]	; (8001154 <pinWrite+0x13c>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	fa01 f202 	lsl.w	r2, r1, r2
 8001096:	4611      	mov	r1, r2
 8001098:	4a2e      	ldr	r2, [pc, #184]	; (8001154 <pinWrite+0x13c>)
 800109a:	430b      	orrs	r3, r1
 800109c:	6193      	str	r3, [r2, #24]
          break;
 800109e:	bf00      	nop
      break;
 80010a0:	e04d      	b.n	800113e <pinWrite+0x126>
      switch(writePin){
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d01c      	beq.n	80010e2 <pinWrite+0xca>
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	dc4a      	bgt.n	8001142 <pinWrite+0x12a>
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d002      	beq.n	80010b6 <pinWrite+0x9e>
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d00b      	beq.n	80010cc <pinWrite+0xb4>
      break;
 80010b4:	e045      	b.n	8001142 <pinWrite+0x12a>
        	GPIOC->BSRR |= (1<<5) << shift;
 80010b6:	4b27      	ldr	r3, [pc, #156]	; (8001154 <pinWrite+0x13c>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	2120      	movs	r1, #32
 80010bc:	68fa      	ldr	r2, [r7, #12]
 80010be:	fa01 f202 	lsl.w	r2, r1, r2
 80010c2:	4611      	mov	r1, r2
 80010c4:	4a23      	ldr	r2, [pc, #140]	; (8001154 <pinWrite+0x13c>)
 80010c6:	430b      	orrs	r3, r1
 80010c8:	6193      	str	r3, [r2, #24]
          break;
 80010ca:	e015      	b.n	80010f8 <pinWrite+0xe0>
        	GPIOA->BSRR |= (1<<1) << shift;
 80010cc:	4b22      	ldr	r3, [pc, #136]	; (8001158 <pinWrite+0x140>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	2102      	movs	r1, #2
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	fa01 f202 	lsl.w	r2, r1, r2
 80010d8:	4611      	mov	r1, r2
 80010da:	4a1f      	ldr	r2, [pc, #124]	; (8001158 <pinWrite+0x140>)
 80010dc:	430b      	orrs	r3, r1
 80010de:	6193      	str	r3, [r2, #24]
          break;
 80010e0:	e00a      	b.n	80010f8 <pinWrite+0xe0>
        	GPIOA->BSRR |= (1<<2) << shift;
 80010e2:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <pinWrite+0x140>)
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	2104      	movs	r1, #4
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	fa01 f202 	lsl.w	r2, r1, r2
 80010ee:	4611      	mov	r1, r2
 80010f0:	4a19      	ldr	r2, [pc, #100]	; (8001158 <pinWrite+0x140>)
 80010f2:	430b      	orrs	r3, r1
 80010f4:	6193      	str	r3, [r2, #24]
          break;
 80010f6:	bf00      	nop
      break;
 80010f8:	e023      	b.n	8001142 <pinWrite+0x12a>
		switch(writePin){
 80010fa:	79bb      	ldrb	r3, [r7, #6]
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d01c      	beq.n	800113a <pinWrite+0x122>
 8001100:	2b02      	cmp	r3, #2
 8001102:	dc20      	bgt.n	8001146 <pinWrite+0x12e>
 8001104:	2b00      	cmp	r3, #0
 8001106:	d002      	beq.n	800110e <pinWrite+0xf6>
 8001108:	2b01      	cmp	r3, #1
 800110a:	d00b      	beq.n	8001124 <pinWrite+0x10c>
		break;
 800110c:	e01b      	b.n	8001146 <pinWrite+0x12e>
			GPIOA->BSRR |= (1<<5) << shift;
 800110e:	4b12      	ldr	r3, [pc, #72]	; (8001158 <pinWrite+0x140>)
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	2120      	movs	r1, #32
 8001114:	68fa      	ldr	r2, [r7, #12]
 8001116:	fa01 f202 	lsl.w	r2, r1, r2
 800111a:	4611      	mov	r1, r2
 800111c:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <pinWrite+0x140>)
 800111e:	430b      	orrs	r3, r1
 8001120:	6193      	str	r3, [r2, #24]
			break;
 8001122:	e00b      	b.n	800113c <pinWrite+0x124>
			GPIOA->BSRR |= (1<<3) << shift;
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <pinWrite+0x140>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	2108      	movs	r1, #8
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	fa01 f202 	lsl.w	r2, r1, r2
 8001130:	4611      	mov	r1, r2
 8001132:	4a09      	ldr	r2, [pc, #36]	; (8001158 <pinWrite+0x140>)
 8001134:	430b      	orrs	r3, r1
 8001136:	6193      	str	r3, [r2, #24]
			break;
 8001138:	e000      	b.n	800113c <pinWrite+0x124>
			break;
 800113a:	bf00      	nop
		break;
 800113c:	e003      	b.n	8001146 <pinWrite+0x12e>
      break;
 800113e:	bf00      	nop
 8001140:	e002      	b.n	8001148 <pinWrite+0x130>
      break;
 8001142:	bf00      	nop
 8001144:	e000      	b.n	8001148 <pinWrite+0x130>
		break;
 8001146:	bf00      	nop
}
 8001148:	bf00      	nop
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	40020800 	.word	0x40020800
 8001158:	40020000 	.word	0x40020000

0800115c <setMagnet>:

// Turn the electromagnet on or off
void setMagnet(int state){
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	int shift = state * 16;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	011b      	lsls	r3, r3, #4
 8001168:	60fb      	str	r3, [r7, #12]
	GPIOE->BSRR |= (1<<9) << shift;
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <setMagnet+0x30>)
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	fa01 f202 	lsl.w	r2, r1, r2
 8001178:	4611      	mov	r1, r2
 800117a:	4a04      	ldr	r2, [pc, #16]	; (800118c <setMagnet+0x30>)
 800117c:	430b      	orrs	r3, r1
 800117e:	6193      	str	r3, [r2, #24]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	40021000 	.word	0x40021000

08001190 <delayMicro>:

// Delays a given amount of microseconds (blocking)
void delayMicro(long time){
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	TIM6->CNT = 0;
 8001198:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <delayMicro+0x28>)
 800119a:	2200      	movs	r2, #0
 800119c:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM6->CNT < time){}
 800119e:	bf00      	nop
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <delayMicro+0x28>)
 80011a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d3fa      	bcc.n	80011a0 <delayMicro+0x10>
}
 80011aa:	bf00      	nop
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	40001000 	.word	0x40001000

080011bc <getMessage>:
char messageBuffer[50];

/*
 * Waits to receive message from UART. Blocking, waits until a '\n' char is read
 */
void getMessage(char* buffer){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	char incomingChar;
	strcpy(buffer, "");
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
	while (incomingChar != '\n') {
 80011ca:	e010      	b.n	80011ee <getMessage+0x32>
		HAL_UART_Receive(&huart3, (uint8_t*) &incomingChar, 1, 10);
 80011cc:	f107 010f 	add.w	r1, r7, #15
 80011d0:	230a      	movs	r3, #10
 80011d2:	2201      	movs	r2, #1
 80011d4:	480a      	ldr	r0, [pc, #40]	; (8001200 <getMessage+0x44>)
 80011d6:	f004 fe42 	bl	8005e5e <HAL_UART_Receive>
		if(incomingChar != '\b'){
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d006      	beq.n	80011ee <getMessage+0x32>
			strncat(buffer, &incomingChar,1);
 80011e0:	f107 030f 	add.w	r3, r7, #15
 80011e4:	2201      	movs	r2, #1
 80011e6:	4619      	mov	r1, r3
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f008 fbe9 	bl	80099c0 <strncat>
	while (incomingChar != '\n') {
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	2b0a      	cmp	r3, #10
 80011f2:	d1eb      	bne.n	80011cc <getMessage+0x10>
		}
	}
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000630 	.word	0x20000630

08001204 <printMessage>:

/*
 * Prints a given message over UART. Blocking call, prints each char one at a time
 */
void printMessage(char* buffer){
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i<strlen(buffer); i++){
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	e00e      	b.n	8001230 <printMessage+0x2c>
		HAL_UART_Transmit (&huart3, (uint8_t*) buffer+i, 1, 10);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	18d1      	adds	r1, r2, r3
 8001218:	230a      	movs	r3, #10
 800121a:	2201      	movs	r2, #1
 800121c:	480c      	ldr	r0, [pc, #48]	; (8001250 <printMessage+0x4c>)
 800121e:	f004 fd8c 	bl	8005d3a <HAL_UART_Transmit>
		delayMicro(pow(2,10));
 8001222:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001226:	f7ff ffb3 	bl	8001190 <delayMicro>
	for(int i = 0; i<strlen(buffer); i++){
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	3301      	adds	r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7fe ffcd 	bl	80001d0 <strlen>
 8001236:	4602      	mov	r2, r0
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	429a      	cmp	r2, r3
 800123c:	d8e9      	bhi.n	8001212 <printMessage+0xe>
	}
	delayMicro(pow(2,15));
 800123e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001242:	f7ff ffa5 	bl	8001190 <delayMicro>

}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000630 	.word	0x20000630

08001254 <parse>:

/*
 * Parse the incoming message and do the corresponding move
 */
void parse(char *buffer){
 8001254:	b580      	push	{r7, lr}
 8001256:	b096      	sub	sp, #88	; 0x58
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	char message[50];
	char* s;
	switch(buffer[0]){
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b7a      	cmp	r3, #122	; 0x7a
 8001262:	d014      	beq.n	800128e <parse+0x3a>
 8001264:	2b7a      	cmp	r3, #122	; 0x7a
 8001266:	dc7a      	bgt.n	800135e <parse+0x10a>
 8001268:	2b68      	cmp	r3, #104	; 0x68
 800126a:	d002      	beq.n	8001272 <parse+0x1e>
 800126c:	2b6d      	cmp	r3, #109	; 0x6d
 800126e:	d034      	beq.n	80012da <parse+0x86>
 8001270:	e075      	b.n	800135e <parse+0x10a>
		case 'h':
			setHomeZ();
 8001272:	f000 ff75 	bl	8002160 <setHomeZ>
			sprintf(message, "Home set\r\n");
 8001276:	f107 0308 	add.w	r3, r7, #8
 800127a:	4957      	ldr	r1, [pc, #348]	; (80013d8 <parse+0x184>)
 800127c:	4618      	mov	r0, r3
 800127e:	f008 fb7f 	bl	8009980 <siprintf>
			printMessage(message);
 8001282:	f107 0308 	add.w	r3, r7, #8
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ffbc 	bl	8001204 <printMessage>
			break;
 800128c:	e09f      	b.n	80013ce <parse+0x17a>
		case 'z':
			s = strtok(buffer, "=");
 800128e:	4953      	ldr	r1, [pc, #332]	; (80013dc <parse+0x188>)
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f009 f9db 	bl	800a64c <strtok>
 8001296:	6578      	str	r0, [r7, #84]	; 0x54
			s = strtok(NULL, "=");
 8001298:	4950      	ldr	r1, [pc, #320]	; (80013dc <parse+0x188>)
 800129a:	2000      	movs	r0, #0
 800129c:	f009 f9d6 	bl	800a64c <strtok>
 80012a0:	6578      	str	r0, [r7, #84]	; 0x54
			float z = atof(s);
 80012a2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80012a4:	f008 fa68 	bl	8009778 <atof>
 80012a8:	ec53 2b10 	vmov	r2, r3, d0
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	f7ff fc9a 	bl	8000be8 <__aeabi_d2f>
 80012b4:	4603      	mov	r3, r0
 80012b6:	653b      	str	r3, [r7, #80]	; 0x50
			moveZAbsolute(z);
 80012b8:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 80012bc:	f000 ffb8 	bl	8002230 <moveZAbsolute>

			sprintf(message, "Z is set to %s \r\n", s);
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80012c6:	4946      	ldr	r1, [pc, #280]	; (80013e0 <parse+0x18c>)
 80012c8:	4618      	mov	r0, r3
 80012ca:	f008 fb59 	bl	8009980 <siprintf>
			printMessage(message);
 80012ce:	f107 0308 	add.w	r3, r7, #8
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ff96 	bl	8001204 <printMessage>
			break;
 80012d8:	e079      	b.n	80013ce <parse+0x17a>
		case 'm':
			sprintf(message, "Starting Move\r\n");
 80012da:	f107 0308 	add.w	r3, r7, #8
 80012de:	4941      	ldr	r1, [pc, #260]	; (80013e4 <parse+0x190>)
 80012e0:	4618      	mov	r0, r3
 80012e2:	f008 fb4d 	bl	8009980 <siprintf>
			printMessage(message);
 80012e6:	f107 0308 	add.w	r3, r7, #8
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff ff8a 	bl	8001204 <printMessage>

			s = strtok(buffer, " ");
 80012f0:	493d      	ldr	r1, [pc, #244]	; (80013e8 <parse+0x194>)
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f009 f9aa 	bl	800a64c <strtok>
 80012f8:	6578      	str	r0, [r7, #84]	; 0x54
			s = strtok(NULL, ",");
 80012fa:	493c      	ldr	r1, [pc, #240]	; (80013ec <parse+0x198>)
 80012fc:	2000      	movs	r0, #0
 80012fe:	f009 f9a5 	bl	800a64c <strtok>
 8001302:	6578      	str	r0, [r7, #84]	; 0x54
			float x = atof(s);
 8001304:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001306:	f008 fa37 	bl	8009778 <atof>
 800130a:	ec53 2b10 	vmov	r2, r3, d0
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	f7ff fc69 	bl	8000be8 <__aeabi_d2f>
 8001316:	4603      	mov	r3, r0
 8001318:	64fb      	str	r3, [r7, #76]	; 0x4c
			s = strtok(NULL, ",");
 800131a:	4934      	ldr	r1, [pc, #208]	; (80013ec <parse+0x198>)
 800131c:	2000      	movs	r0, #0
 800131e:	f009 f995 	bl	800a64c <strtok>
 8001322:	6578      	str	r0, [r7, #84]	; 0x54
			float y = atof(s);
 8001324:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001326:	f008 fa27 	bl	8009778 <atof>
 800132a:	ec53 2b10 	vmov	r2, r3, d0
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f7ff fc59 	bl	8000be8 <__aeabi_d2f>
 8001336:	4603      	mov	r3, r0
 8001338:	64bb      	str	r3, [r7, #72]	; 0x48
			moveXYAbsolute(x,y);
 800133a:	edd7 0a12 	vldr	s1, [r7, #72]	; 0x48
 800133e:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8001342:	f000 fea1 	bl	8002088 <moveXYAbsolute>

			sprintf(message, "Move Complete\r\n");
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	4929      	ldr	r1, [pc, #164]	; (80013f0 <parse+0x19c>)
 800134c:	4618      	mov	r0, r3
 800134e:	f008 fb17 	bl	8009980 <siprintf>
			printMessage(message);
 8001352:	f107 0308 	add.w	r3, r7, #8
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ff54 	bl	8001204 <printMessage>
			break;
 800135c:	e037      	b.n	80013ce <parse+0x17a>
		default:
			s = strtok(buffer,",/");
 800135e:	4925      	ldr	r1, [pc, #148]	; (80013f4 <parse+0x1a0>)
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f009 f973 	bl	800a64c <strtok>
 8001366:	6578      	str	r0, [r7, #84]	; 0x54
			while(s[0] != '$'){
 8001368:	e01f      	b.n	80013aa <parse+0x156>
				int pieceIndex = atoi(s);
 800136a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800136c:	f008 fa07 	bl	800977e <atoi>
 8001370:	6478      	str	r0, [r7, #68]	; 0x44
				s = strtok(NULL, ",/");
 8001372:	4920      	ldr	r1, [pc, #128]	; (80013f4 <parse+0x1a0>)
 8001374:	2000      	movs	r0, #0
 8001376:	f009 f969 	bl	800a64c <strtok>
 800137a:	6578      	str	r0, [r7, #84]	; 0x54
				int startIndex = atoi(s);
 800137c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800137e:	f008 f9fe 	bl	800977e <atoi>
 8001382:	6438      	str	r0, [r7, #64]	; 0x40
				s = strtok(NULL, ",/");
 8001384:	491b      	ldr	r1, [pc, #108]	; (80013f4 <parse+0x1a0>)
 8001386:	2000      	movs	r0, #0
 8001388:	f009 f960 	bl	800a64c <strtok>
 800138c:	6578      	str	r0, [r7, #84]	; 0x54
				int endIndex = atoi(s);
 800138e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001390:	f008 f9f5 	bl	800977e <atoi>
 8001394:	63f8      	str	r0, [r7, #60]	; 0x3c
				movePieceByIndex(startIndex, endIndex, pieceIndex);
 8001396:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001398:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800139a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800139c:	f001 f834 	bl	8002408 <movePieceByIndex>
				s = strtok(NULL,",/");
 80013a0:	4914      	ldr	r1, [pc, #80]	; (80013f4 <parse+0x1a0>)
 80013a2:	2000      	movs	r0, #0
 80013a4:	f009 f952 	bl	800a64c <strtok>
 80013a8:	6578      	str	r0, [r7, #84]	; 0x54
			while(s[0] != '$'){
 80013aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b24      	cmp	r3, #36	; 0x24
 80013b0:	d1db      	bne.n	800136a <parse+0x116>
			}
			moveToStandbyPosition();
 80013b2:	f001 f815 	bl	80023e0 <moveToStandbyPosition>
			sprintf(message, "Move Complete\r\n");
 80013b6:	f107 0308 	add.w	r3, r7, #8
 80013ba:	490d      	ldr	r1, [pc, #52]	; (80013f0 <parse+0x19c>)
 80013bc:	4618      	mov	r0, r3
 80013be:	f008 fadf 	bl	8009980 <siprintf>
			printMessage(message);
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ff1c 	bl	8001204 <printMessage>
	}
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3758      	adds	r7, #88	; 0x58
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	0800ed88 	.word	0x0800ed88
 80013dc:	0800ed94 	.word	0x0800ed94
 80013e0:	0800ed98 	.word	0x0800ed98
 80013e4:	0800edac 	.word	0x0800edac
 80013e8:	0800edbc 	.word	0x0800edbc
 80013ec:	0800edc0 	.word	0x0800edc0
 80013f0:	0800edc4 	.word	0x0800edc4
 80013f4:	0800edd4 	.word	0x0800edd4

080013f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013fc:	f001 fab8 	bl	8002970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001400:	f000 f81e 	bl	8001440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001404:	f000 f908 	bl	8001618 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 8001408:	f007 feae 	bl	8009168 <MX_USB_HOST_Init>
  MX_TIM6_Init();
 800140c:	f000 f884 	bl	8001518 <MX_TIM6_Init>
  MX_DMA_Init();
 8001410:	f000 f8e2 	bl	80015d8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001414:	f000 f8b6 	bl	8001584 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  	// Initialize pins and timers
	initPins();
 8001418:	f7ff fde8 	bl	8000fec <initPins>

	// If not at standby height, move to standby height
	moveZAbsolute(TRAVEL_Z);
 800141c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001438 <main+0x40>
 8001420:	f000 ff06 	bl	8002230 <moveZAbsolute>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001424:	f007 fec6 	bl	80091b4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    // Wait for command over UART
    getMessage(messageBuffer);
 8001428:	4804      	ldr	r0, [pc, #16]	; (800143c <main+0x44>)
 800142a:	f7ff fec7 	bl	80011bc <getMessage>

    // Parse and execute command
    parse(messageBuffer);
 800142e:	4803      	ldr	r0, [pc, #12]	; (800143c <main+0x44>)
 8001430:	f7ff ff10 	bl	8001254 <parse>
    MX_USB_HOST_Process();
 8001434:	e7f6      	b.n	8001424 <main+0x2c>
 8001436:	bf00      	nop
 8001438:	42c80000 	.word	0x42c80000
 800143c:	200006bc 	.word	0x200006bc

08001440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b094      	sub	sp, #80	; 0x50
 8001444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001446:	f107 0320 	add.w	r3, r7, #32
 800144a:	2230      	movs	r2, #48	; 0x30
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f008 f9d4 	bl	80097fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	4b29      	ldr	r3, [pc, #164]	; (8001510 <SystemClock_Config+0xd0>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	4a28      	ldr	r2, [pc, #160]	; (8001510 <SystemClock_Config+0xd0>)
 800146e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001472:	6413      	str	r3, [r2, #64]	; 0x40
 8001474:	4b26      	ldr	r3, [pc, #152]	; (8001510 <SystemClock_Config+0xd0>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001480:	2300      	movs	r3, #0
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	4b23      	ldr	r3, [pc, #140]	; (8001514 <SystemClock_Config+0xd4>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a22      	ldr	r2, [pc, #136]	; (8001514 <SystemClock_Config+0xd4>)
 800148a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b20      	ldr	r3, [pc, #128]	; (8001514 <SystemClock_Config+0xd4>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800149c:	2303      	movs	r3, #3
 800149e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a6:	2301      	movs	r3, #1
 80014a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014aa:	2310      	movs	r3, #16
 80014ac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ae:	2302      	movs	r3, #2
 80014b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014b8:	2304      	movs	r3, #4
 80014ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014bc:	23a8      	movs	r3, #168	; 0xa8
 80014be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014c0:	2302      	movs	r3, #2
 80014c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014c4:	2307      	movs	r3, #7
 80014c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c8:	f107 0320 	add.w	r3, r7, #32
 80014cc:	4618      	mov	r0, r3
 80014ce:	f003 fe07 	bl	80050e0 <HAL_RCC_OscConfig>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80014d8:	f000 fa2e 	bl	8001938 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014dc:	230f      	movs	r3, #15
 80014de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014e0:	2300      	movs	r3, #0
 80014e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014f0:	f107 030c 	add.w	r3, r7, #12
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f004 f86a 	bl	80055d0 <HAL_RCC_ClockConfig>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001502:	f000 fa19 	bl	8001938 <Error_Handler>
  }
}
 8001506:	bf00      	nop
 8001508:	3750      	adds	r7, #80	; 0x50
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800
 8001514:	40007000 	.word	0x40007000

08001518 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151e:	463b      	mov	r3, r7
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <MX_TIM6_Init+0x64>)
 8001528:	4a15      	ldr	r2, [pc, #84]	; (8001580 <MX_TIM6_Init+0x68>)
 800152a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <MX_TIM6_Init+0x64>)
 800152e:	2200      	movs	r2, #0
 8001530:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <MX_TIM6_Init+0x64>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001538:	4b10      	ldr	r3, [pc, #64]	; (800157c <MX_TIM6_Init+0x64>)
 800153a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800153e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001540:	4b0e      	ldr	r3, [pc, #56]	; (800157c <MX_TIM6_Init+0x64>)
 8001542:	2200      	movs	r2, #0
 8001544:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001546:	480d      	ldr	r0, [pc, #52]	; (800157c <MX_TIM6_Init+0x64>)
 8001548:	f004 fa3e 	bl	80059c8 <HAL_TIM_Base_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001552:	f000 f9f1 	bl	8001938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001556:	2300      	movs	r3, #0
 8001558:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800155e:	463b      	mov	r3, r7
 8001560:	4619      	mov	r1, r3
 8001562:	4806      	ldr	r0, [pc, #24]	; (800157c <MX_TIM6_Init+0x64>)
 8001564:	f004 fb20 	bl	8005ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800156e:	f000 f9e3 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000674 	.word	0x20000674
 8001580:	40001000 	.word	0x40001000

08001584 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 800158a:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <MX_USART3_UART_Init+0x50>)
 800158c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 8001590:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001594:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 80015bc:	f004 fb70 	bl	8005ca0 <HAL_UART_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015c6:	f000 f9b7 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000630 	.word	0x20000630
 80015d4:	40004800 	.word	0x40004800

080015d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <MX_DMA_Init+0x3c>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a0b      	ldr	r2, [pc, #44]	; (8001614 <MX_DMA_Init+0x3c>)
 80015e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <MX_DMA_Init+0x3c>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2100      	movs	r1, #0
 80015fe:	200c      	movs	r0, #12
 8001600:	f001 fb27 	bl	8002c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001604:	200c      	movs	r0, #12
 8001606:	f001 fb40 	bl	8002c8a <HAL_NVIC_EnableIRQ>

}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40023800 	.word	0x40023800

08001618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08c      	sub	sp, #48	; 0x30
 800161c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161e:	f107 031c 	add.w	r3, r7, #28
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	60da      	str	r2, [r3, #12]
 800162c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	61bb      	str	r3, [r7, #24]
 8001632:	4bb6      	ldr	r3, [pc, #728]	; (800190c <MX_GPIO_Init+0x2f4>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4ab5      	ldr	r2, [pc, #724]	; (800190c <MX_GPIO_Init+0x2f4>)
 8001638:	f043 0310 	orr.w	r3, r3, #16
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4bb3      	ldr	r3, [pc, #716]	; (800190c <MX_GPIO_Init+0x2f4>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0310 	and.w	r3, r3, #16
 8001646:	61bb      	str	r3, [r7, #24]
 8001648:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	4baf      	ldr	r3, [pc, #700]	; (800190c <MX_GPIO_Init+0x2f4>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4aae      	ldr	r2, [pc, #696]	; (800190c <MX_GPIO_Init+0x2f4>)
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4bac      	ldr	r3, [pc, #688]	; (800190c <MX_GPIO_Init+0x2f4>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	4ba8      	ldr	r3, [pc, #672]	; (800190c <MX_GPIO_Init+0x2f4>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4aa7      	ldr	r2, [pc, #668]	; (800190c <MX_GPIO_Init+0x2f4>)
 8001670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4ba5      	ldr	r3, [pc, #660]	; (800190c <MX_GPIO_Init+0x2f4>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	4ba1      	ldr	r3, [pc, #644]	; (800190c <MX_GPIO_Init+0x2f4>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4aa0      	ldr	r2, [pc, #640]	; (800190c <MX_GPIO_Init+0x2f4>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b9e      	ldr	r3, [pc, #632]	; (800190c <MX_GPIO_Init+0x2f4>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	4b9a      	ldr	r3, [pc, #616]	; (800190c <MX_GPIO_Init+0x2f4>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a99      	ldr	r2, [pc, #612]	; (800190c <MX_GPIO_Init+0x2f4>)
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b97      	ldr	r3, [pc, #604]	; (800190c <MX_GPIO_Init+0x2f4>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	4b93      	ldr	r3, [pc, #588]	; (800190c <MX_GPIO_Init+0x2f4>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a92      	ldr	r2, [pc, #584]	; (800190c <MX_GPIO_Init+0x2f4>)
 80016c4:	f043 0308 	orr.w	r3, r3, #8
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b90      	ldr	r3, [pc, #576]	; (800190c <MX_GPIO_Init+0x2f4>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	f44f 7142 	mov.w	r1, #776	; 0x308
 80016dc:	488c      	ldr	r0, [pc, #560]	; (8001910 <MX_GPIO_Init+0x2f8>)
 80016de:	f001 ff75 	bl	80035cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5
 80016e2:	2200      	movs	r2, #0
 80016e4:	f24e 01e0 	movw	r1, #57568	; 0xe0e0
 80016e8:	488a      	ldr	r0, [pc, #552]	; (8001914 <MX_GPIO_Init+0x2fc>)
 80016ea:	f001 ff6f 	bl	80035cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80016ee:	2201      	movs	r2, #1
 80016f0:	2101      	movs	r1, #1
 80016f2:	4888      	ldr	r0, [pc, #544]	; (8001914 <MX_GPIO_Init+0x2fc>)
 80016f4:	f001 ff6a 	bl	80035cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 80016f8:	2200      	movs	r2, #0
 80016fa:	21ae      	movs	r1, #174	; 0xae
 80016fc:	4886      	ldr	r0, [pc, #536]	; (8001918 <MX_GPIO_Init+0x300>)
 80016fe:	f001 ff65 	bl	80035cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001702:	2200      	movs	r2, #0
 8001704:	2102      	movs	r1, #2
 8001706:	4885      	ldr	r0, [pc, #532]	; (800191c <MX_GPIO_Init+0x304>)
 8001708:	f001 ff60 	bl	80035cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800170c:	2200      	movs	r2, #0
 800170e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001712:	4883      	ldr	r0, [pc, #524]	; (8001920 <MX_GPIO_Init+0x308>)
 8001714:	f001 ff5a 	bl	80035cc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE8 PE9 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8001718:	f44f 7342 	mov.w	r3, #776	; 0x308
 800171c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171e:	2301      	movs	r3, #1
 8001720:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800172a:	f107 031c 	add.w	r3, r7, #28
 800172e:	4619      	mov	r1, r3
 8001730:	4877      	ldr	r0, [pc, #476]	; (8001910 <MX_GPIO_Init+0x2f8>)
 8001732:	f001 fdaf 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 OTG_FS_PowerSwitchOn_Pin
                           PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|OTG_FS_PowerSwitchOn_Pin
 8001736:	f24e 03e1 	movw	r3, #57569	; 0xe0e1
 800173a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173c:	2301      	movs	r3, #1
 800173e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2300      	movs	r3, #0
 8001746:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001748:	f107 031c 	add.w	r3, r7, #28
 800174c:	4619      	mov	r1, r3
 800174e:	4871      	ldr	r0, [pc, #452]	; (8001914 <MX_GPIO_Init+0x2fc>)
 8001750:	f001 fda0 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001754:	2308      	movs	r3, #8
 8001756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001758:	2302      	movs	r3, #2
 800175a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001760:	2300      	movs	r3, #0
 8001762:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001764:	2305      	movs	r3, #5
 8001766:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001768:	f107 031c 	add.w	r3, r7, #28
 800176c:	4619      	mov	r1, r3
 800176e:	4869      	ldr	r0, [pc, #420]	; (8001914 <MX_GPIO_Init+0x2fc>)
 8001770:	f001 fd90 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001774:	2301      	movs	r3, #1
 8001776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001778:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800177c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	4619      	mov	r1, r3
 8001788:	4863      	ldr	r0, [pc, #396]	; (8001918 <MX_GPIO_Init+0x300>)
 800178a:	f001 fd83 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA5
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 800178e:	23ae      	movs	r3, #174	; 0xae
 8001790:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001792:	2301      	movs	r3, #1
 8001794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179e:	f107 031c 	add.w	r3, r7, #28
 80017a2:	4619      	mov	r1, r3
 80017a4:	485c      	ldr	r0, [pc, #368]	; (8001918 <MX_GPIO_Init+0x300>)
 80017a6:	f001 fd75 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80017aa:	2310      	movs	r3, #16
 80017ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2300      	movs	r3, #0
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017ba:	2306      	movs	r3, #6
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	4619      	mov	r1, r3
 80017c4:	4854      	ldr	r0, [pc, #336]	; (8001918 <MX_GPIO_Init+0x300>)
 80017c6:	f001 fd65 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_MISO_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 80017ca:	2340      	movs	r3, #64	; 0x40
 80017cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017da:	2305      	movs	r3, #5
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 80017de:	f107 031c 	add.w	r3, r7, #28
 80017e2:	4619      	mov	r1, r3
 80017e4:	484c      	ldr	r0, [pc, #304]	; (8001918 <MX_GPIO_Init+0x300>)
 80017e6:	f001 fd55 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017ea:	2302      	movs	r3, #2
 80017ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ee:	2301      	movs	r3, #1
 80017f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fa:	f107 031c 	add.w	r3, r7, #28
 80017fe:	4619      	mov	r1, r3
 8001800:	4846      	ldr	r0, [pc, #280]	; (800191c <MX_GPIO_Init+0x304>)
 8001802:	f001 fd47 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001806:	2304      	movs	r3, #4
 8001808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800180a:	2300      	movs	r3, #0
 800180c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001812:	f107 031c 	add.w	r3, r7, #28
 8001816:	4619      	mov	r1, r3
 8001818:	4840      	ldr	r0, [pc, #256]	; (800191c <MX_GPIO_Init+0x304>)
 800181a:	f001 fd3b 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800181e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001830:	2305      	movs	r3, #5
 8001832:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001834:	f107 031c 	add.w	r3, r7, #28
 8001838:	4619      	mov	r1, r3
 800183a:	4838      	ldr	r0, [pc, #224]	; (800191c <MX_GPIO_Init+0x304>)
 800183c:	f001 fd2a 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001840:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001844:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001846:	2301      	movs	r3, #1
 8001848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001852:	f107 031c 	add.w	r3, r7, #28
 8001856:	4619      	mov	r1, r3
 8001858:	4831      	ldr	r0, [pc, #196]	; (8001920 <MX_GPIO_Init+0x308>)
 800185a:	f001 fd1b 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800185e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001864:	2300      	movs	r3, #0
 8001866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001868:	2301      	movs	r3, #1
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800186c:	f107 031c 	add.w	r3, r7, #28
 8001870:	4619      	mov	r1, r3
 8001872:	4828      	ldr	r0, [pc, #160]	; (8001914 <MX_GPIO_Init+0x2fc>)
 8001874:	f001 fd0e 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8001878:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800187c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800188a:	2306      	movs	r3, #6
 800188c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800188e:	f107 031c 	add.w	r3, r7, #28
 8001892:	4619      	mov	r1, r3
 8001894:	481f      	ldr	r0, [pc, #124]	; (8001914 <MX_GPIO_Init+0x2fc>)
 8001896:	f001 fcfd 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800189a:	2320      	movs	r3, #32
 800189c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189e:	2300      	movs	r3, #0
 80018a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018a6:	f107 031c 	add.w	r3, r7, #28
 80018aa:	4619      	mov	r1, r3
 80018ac:	481c      	ldr	r0, [pc, #112]	; (8001920 <MX_GPIO_Init+0x308>)
 80018ae:	f001 fcf1 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018b2:	2340      	movs	r3, #64	; 0x40
 80018b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b6:	2302      	movs	r3, #2
 80018b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018be:	2303      	movs	r3, #3
 80018c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018c2:	2307      	movs	r3, #7
 80018c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c6:	f107 031c 	add.w	r3, r7, #28
 80018ca:	4619      	mov	r1, r3
 80018cc:	4813      	ldr	r0, [pc, #76]	; (800191c <MX_GPIO_Init+0x304>)
 80018ce:	f001 fce1 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 80018d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018d8:	2312      	movs	r3, #18
 80018da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018dc:	2301      	movs	r3, #1
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018e4:	2304      	movs	r3, #4
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 80018e8:	f107 031c 	add.w	r3, r7, #28
 80018ec:	4619      	mov	r1, r3
 80018ee:	480b      	ldr	r0, [pc, #44]	; (800191c <MX_GPIO_Init+0x304>)
 80018f0:	f001 fcd0 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80018f4:	2302      	movs	r3, #2
 80018f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018f8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80018fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001902:	f107 031c 	add.w	r3, r7, #28
 8001906:	4619      	mov	r1, r3
 8001908:	e00c      	b.n	8001924 <MX_GPIO_Init+0x30c>
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	40021000 	.word	0x40021000
 8001914:	40020800 	.word	0x40020800
 8001918:	40020000 	.word	0x40020000
 800191c:	40020400 	.word	0x40020400
 8001920:	40020c00 	.word	0x40020c00
 8001924:	4803      	ldr	r0, [pc, #12]	; (8001934 <MX_GPIO_Init+0x31c>)
 8001926:	f001 fcb5 	bl	8003294 <HAL_GPIO_Init>

}
 800192a:	bf00      	nop
 800192c:	3730      	adds	r7, #48	; 0x30
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000

08001938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800193c:	b672      	cpsid	i
}
 800193e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001940:	e7fe      	b.n	8001940 <Error_Handler+0x8>
 8001942:	0000      	movs	r0, r0
 8001944:	0000      	movs	r0, r0
	...

08001948 <moveXYRelative>:
         {237.143, 533.786}, {277.571, 533.643}, {318, 533.5}, {36, 575.5}, {76.357, 575.357},
         {116.714, 575.214}, {157.071, 575.071}, {197.429, 574.929}, {237.786, 574.786},
         {278.143, 574.643}, {318.5, 574.5}, {358.5, 554}};

// Moves the X and Y axes in sync so the toolhead moves in a straight line. Moves relative to current position
void moveXYRelative(float x, float y){
 8001948:	b580      	push	{r7, lr}
 800194a:	b0ba      	sub	sp, #232	; 0xe8
 800194c:	af00      	add	r7, sp, #0
 800194e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001952:	edc7 0a00 	vstr	s1, [r7]
	float XYmicrostepsPerMM = XY_STEPS_PER_MM * MICROSTEP_FACTOR_XY;
 8001956:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <moveXYRelative+0x78>)
 8001958:	67fb      	str	r3, [r7, #124]	; 0x7c

	setDirection(x,y);
 800195a:	edd7 0a00 	vldr	s1, [r7]
 800195e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001962:	f000 fbbb 	bl	80020dc <setDirection>
	double distanceX = fabs(x);
 8001966:	edd7 7a01 	vldr	s15, [r7, #4]
 800196a:	eef0 7ae7 	vabs.f32	s15, s15
 800196e:	ee17 0a90 	vmov	r0, s15
 8001972:	f7fe fde9 	bl	8000548 <__aeabi_f2d>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	double distanceY = fabs(y);
 800197e:	edd7 7a00 	vldr	s15, [r7]
 8001982:	eef0 7ae7 	vabs.f32	s15, s15
 8001986:	ee17 0a90 	vmov	r0, s15
 800198a:	f7fe fddd 	bl	8000548 <__aeabi_f2d>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

	double angle;

	if(distanceX == 0){
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80019a2:	f7ff f891 	bl	8000ac8 <__aeabi_dcmpeq>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00b      	beq.n	80019c4 <moveXYRelative+0x7c>
		angle = PI/2;
 80019ac:	a302      	add	r3, pc, #8	; (adr r3, 80019b8 <moveXYRelative+0x70>)
 80019ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b2:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 80019b6:	e017      	b.n	80019e8 <moveXYRelative+0xa0>
 80019b8:	54442d18 	.word	0x54442d18
 80019bc:	3ff921fb 	.word	0x3ff921fb
 80019c0:	42480000 	.word	0x42480000
	} else {
		angle = atan(distanceY/distanceX);
 80019c4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80019c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80019cc:	f7fe ff3e 	bl	800084c <__aeabi_ddiv>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	ec43 2b17 	vmov	d7, r2, r3
 80019d8:	eeb0 0a47 	vmov.f32	s0, s14
 80019dc:	eef0 0a67 	vmov.f32	s1, s15
 80019e0:	f00b f846 	bl	800ca70 <atan>
 80019e4:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
	}


	// X vars
	double speedX = cos(angle) * XY_SPEED;
 80019e8:	ed97 0b38 	vldr	d0, [r7, #224]	; 0xe0
 80019ec:	f00b f9e0 	bl	800cdb0 <cos>
 80019f0:	ec51 0b10 	vmov	r0, r1, d0
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	4bc1      	ldr	r3, [pc, #772]	; (8001d00 <moveXYRelative+0x3b8>)
 80019fa:	f7fe fdfd 	bl	80005f8 <__aeabi_dmul>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	double accelTimeX = speedX/XY_ACCELERATION;
 8001a06:	a3ba      	add	r3, pc, #744	; (adr r3, 8001cf0 <moveXYRelative+0x3a8>)
 8001a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8001a10:	f7fe ff1c 	bl	800084c <__aeabi_ddiv>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	double accelDistanceX = calcDistance(accelTimeX, 0, XY_ACCELERATION);
 8001a1c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001a20:	f7ff f8e2 	bl	8000be8 <__aeabi_d2f>
 8001a24:	4603      	mov	r3, r0
 8001a26:	ed9f 1ab7 	vldr	s2, [pc, #732]	; 8001d04 <moveXYRelative+0x3bc>
 8001a2a:	eddf 0ab7 	vldr	s1, [pc, #732]	; 8001d08 <moveXYRelative+0x3c0>
 8001a2e:	ee00 3a10 	vmov	s0, r3
 8001a32:	f000 fc19 	bl	8002268 <calcDistance>
 8001a36:	ee10 3a10 	vmov	r3, s0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe fd84 	bl	8000548 <__aeabi_f2d>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double coastDistanceX = distanceX - (accelDistanceX);
 8001a48:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001a4c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001a50:	f7fe fc1a 	bl	8000288 <__aeabi_dsub>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double coastTimeX = coastDistanceX/speedX;
 8001a5c:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8001a60:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001a64:	f7fe fef2 	bl	800084c <__aeabi_ddiv>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8

	if(coastTimeX < 0){
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001a7c:	f7ff f82e 	bl	8000adc <__aeabi_dcmplt>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d03f      	beq.n	8001b06 <moveXYRelative+0x1be>
		accelTimeX = sqrt(distanceX/XY_ACCELERATION);
 8001a86:	a39a      	add	r3, pc, #616	; (adr r3, 8001cf0 <moveXYRelative+0x3a8>)
 8001a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001a90:	f7fe fedc 	bl	800084c <__aeabi_ddiv>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	ec43 2b17 	vmov	d7, r2, r3
 8001a9c:	eeb0 0a47 	vmov.f32	s0, s14
 8001aa0:	eef0 0a67 	vmov.f32	s1, s15
 8001aa4:	f00b fae2 	bl	800d06c <sqrt>
 8001aa8:	ed87 0b34 	vstr	d0, [r7, #208]	; 0xd0
		speedX = accelTimeX * XY_ACCELERATION;
 8001aac:	a390      	add	r3, pc, #576	; (adr r3, 8001cf0 <moveXYRelative+0x3a8>)
 8001aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001ab6:	f7fe fd9f 	bl	80005f8 <__aeabi_dmul>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
		accelDistanceX = calcDistance(accelTimeX, 0, XY_ACCELERATION);
 8001ac2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001ac6:	f7ff f88f 	bl	8000be8 <__aeabi_d2f>
 8001aca:	4603      	mov	r3, r0
 8001acc:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 8001d04 <moveXYRelative+0x3bc>
 8001ad0:	eddf 0a8d 	vldr	s1, [pc, #564]	; 8001d08 <moveXYRelative+0x3c0>
 8001ad4:	ee00 3a10 	vmov	s0, r3
 8001ad8:	f000 fbc6 	bl	8002268 <calcDistance>
 8001adc:	ee10 3a10 	vmov	r3, s0
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fd31 	bl	8000548 <__aeabi_f2d>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		coastTimeX = 0;
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
		coastDistanceX = 0;
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	}

	unsigned long accelTime_usX = accelTimeX * 1000000.0;
 8001b06:	a37c      	add	r3, pc, #496	; (adr r3, 8001cf8 <moveXYRelative+0x3b0>)
 8001b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001b10:	f7fe fd72 	bl	80005f8 <__aeabi_dmul>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f7ff f844 	bl	8000ba8 <__aeabi_d2uiz>
 8001b20:	4603      	mov	r3, r0
 8001b22:	657b      	str	r3, [r7, #84]	; 0x54
	unsigned long coastTime_usX = coastTimeX * 1000000.0;
 8001b24:	a374      	add	r3, pc, #464	; (adr r3, 8001cf8 <moveXYRelative+0x3b0>)
 8001b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001b2e:	f7fe fd63 	bl	80005f8 <__aeabi_dmul>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4610      	mov	r0, r2
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f7ff f835 	bl	8000ba8 <__aeabi_d2uiz>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	653b      	str	r3, [r7, #80]	; 0x50

	unsigned long stepsX = XYmicrostepsPerMM * distanceX;
 8001b42:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001b44:	f7fe fd00 	bl	8000548 <__aeabi_f2d>
 8001b48:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001b4c:	f7fe fd54 	bl	80005f8 <__aeabi_dmul>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	f7ff f826 	bl	8000ba8 <__aeabi_d2uiz>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	double currentSpeedX = 5;
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	4b69      	ldr	r3, [pc, #420]	; (8001d0c <moveXYRelative+0x3c4>)
 8001b68:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	unsigned long pulseLengthX = 1000000.0/(currentSpeedX * XYmicrostepsPerMM);
 8001b6c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001b6e:	f7fe fceb 	bl	8000548 <__aeabi_f2d>
 8001b72:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8001b76:	f7fe fd3f 	bl	80005f8 <__aeabi_dmul>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	a15e      	add	r1, pc, #376	; (adr r1, 8001cf8 <moveXYRelative+0x3b0>)
 8001b80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b84:	f7fe fe62 	bl	800084c <__aeabi_ddiv>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f7ff f80a 	bl	8000ba8 <__aeabi_d2uiz>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	// Y vars
	double speedY = sin(angle) * XY_SPEED;
 8001b9a:	ed97 0b38 	vldr	d0, [r7, #224]	; 0xe0
 8001b9e:	f00b f963 	bl	800ce68 <sin>
 8001ba2:	ec51 0b10 	vmov	r0, r1, d0
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	4b55      	ldr	r3, [pc, #340]	; (8001d00 <moveXYRelative+0x3b8>)
 8001bac:	f7fe fd24 	bl	80005f8 <__aeabi_dmul>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double accelTimeY = speedY/XY_ACCELERATION;
 8001bb8:	a34d      	add	r3, pc, #308	; (adr r3, 8001cf0 <moveXYRelative+0x3a8>)
 8001bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001bc2:	f7fe fe43 	bl	800084c <__aeabi_ddiv>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	double accelDistanceY = calcDistance(accelTimeY, 0, XY_ACCELERATION);
 8001bce:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001bd2:	f7ff f809 	bl	8000be8 <__aeabi_d2f>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	ed9f 1a4a 	vldr	s2, [pc, #296]	; 8001d04 <moveXYRelative+0x3bc>
 8001bdc:	eddf 0a4a 	vldr	s1, [pc, #296]	; 8001d08 <moveXYRelative+0x3c0>
 8001be0:	ee00 3a10 	vmov	s0, r3
 8001be4:	f000 fb40 	bl	8002268 <calcDistance>
 8001be8:	ee10 3a10 	vmov	r3, s0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fcab 	bl	8000548 <__aeabi_f2d>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double coastDistanceY = distanceY - (accelDistanceY);
 8001bfa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001bfe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001c02:	f7fe fb41 	bl	8000288 <__aeabi_dsub>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double coastTimeY = coastDistanceY/speedY;
 8001c0e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c12:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001c16:	f7fe fe19 	bl	800084c <__aeabi_ddiv>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

	if(coastTimeY < 0){
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001c2e:	f7fe ff55 	bl	8000adc <__aeabi_dcmplt>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d03f      	beq.n	8001cb8 <moveXYRelative+0x370>
		accelTimeY = sqrt(distanceY/XY_ACCELERATION);
 8001c38:	a32d      	add	r3, pc, #180	; (adr r3, 8001cf0 <moveXYRelative+0x3a8>)
 8001c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001c42:	f7fe fe03 	bl	800084c <__aeabi_ddiv>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	ec43 2b17 	vmov	d7, r2, r3
 8001c4e:	eeb0 0a47 	vmov.f32	s0, s14
 8001c52:	eef0 0a67 	vmov.f32	s1, s15
 8001c56:	f00b fa09 	bl	800d06c <sqrt>
 8001c5a:	ed87 0b2a 	vstr	d0, [r7, #168]	; 0xa8
		speedX = accelTimeY * XY_ACCELERATION;
 8001c5e:	a324      	add	r3, pc, #144	; (adr r3, 8001cf0 <moveXYRelative+0x3a8>)
 8001c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c64:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001c68:	f7fe fcc6 	bl	80005f8 <__aeabi_dmul>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
		accelDistanceY = calcDistance(accelTimeY, 0, XY_ACCELERATION);
 8001c74:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001c78:	f7fe ffb6 	bl	8000be8 <__aeabi_d2f>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8001d04 <moveXYRelative+0x3bc>
 8001c82:	eddf 0a21 	vldr	s1, [pc, #132]	; 8001d08 <moveXYRelative+0x3c0>
 8001c86:	ee00 3a10 	vmov	s0, r3
 8001c8a:	f000 faed 	bl	8002268 <calcDistance>
 8001c8e:	ee10 3a10 	vmov	r3, s0
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fc58 	bl	8000548 <__aeabi_f2d>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		coastTimeY = 0;
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
		coastDistanceY = 0;
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	}

	unsigned long accelTime_usY = accelTimeY * 1000000.0;
 8001cb8:	a30f      	add	r3, pc, #60	; (adr r3, 8001cf8 <moveXYRelative+0x3b0>)
 8001cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbe:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001cc2:	f7fe fc99 	bl	80005f8 <__aeabi_dmul>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4610      	mov	r0, r2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f7fe ff6b 	bl	8000ba8 <__aeabi_d2uiz>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	637b      	str	r3, [r7, #52]	; 0x34
	unsigned long coastTime_usY = coastTimeY * 1000000.0;
 8001cd6:	a308      	add	r3, pc, #32	; (adr r3, 8001cf8 <moveXYRelative+0x3b0>)
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001ce0:	f7fe fc8a 	bl	80005f8 <__aeabi_dmul>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4610      	mov	r0, r2
 8001cea:	4619      	mov	r1, r3
 8001cec:	e010      	b.n	8001d10 <moveXYRelative+0x3c8>
 8001cee:	bf00      	nop
 8001cf0:	00000000 	.word	0x00000000
 8001cf4:	40e86a00 	.word	0x40e86a00
 8001cf8:	00000000 	.word	0x00000000
 8001cfc:	412e8480 	.word	0x412e8480
 8001d00:	408c2000 	.word	0x408c2000
 8001d04:	47435000 	.word	0x47435000
 8001d08:	00000000 	.word	0x00000000
 8001d0c:	40140000 	.word	0x40140000
 8001d10:	f7fe ff4a 	bl	8000ba8 <__aeabi_d2uiz>
 8001d14:	4603      	mov	r3, r0
 8001d16:	633b      	str	r3, [r7, #48]	; 0x30

	unsigned long stepsY = XYmicrostepsPerMM * distanceY;
 8001d18:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001d1a:	f7fe fc15 	bl	8000548 <__aeabi_f2d>
 8001d1e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d22:	f7fe fc69 	bl	80005f8 <__aeabi_dmul>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f7fe ff3b 	bl	8000ba8 <__aeabi_d2uiz>
 8001d32:	4603      	mov	r3, r0
 8001d34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	double currentSpeedY = 5;
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	4ba8      	ldr	r3, [pc, #672]	; (8001fe0 <moveXYRelative+0x698>)
 8001d3e:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	unsigned long pulseLengthY = 1000000.0/(currentSpeedY * XYmicrostepsPerMM);
 8001d42:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001d44:	f7fe fc00 	bl	8000548 <__aeabi_f2d>
 8001d48:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001d4c:	f7fe fc54 	bl	80005f8 <__aeabi_dmul>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	a19e      	add	r1, pc, #632	; (adr r1, 8001fd0 <moveXYRelative+0x688>)
 8001d56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d5a:	f7fe fd77 	bl	800084c <__aeabi_ddiv>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4610      	mov	r0, r2
 8001d64:	4619      	mov	r1, r3
 8001d66:	f7fe ff1f 	bl	8000ba8 <__aeabi_d2uiz>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	// Time
	unsigned long time = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	unsigned long pulseTimerX = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	unsigned long pulseTimerY = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	unsigned long timeStep = 10;
 8001d82:	230a      	movs	r3, #10
 8001d84:	62fb      	str	r3, [r7, #44]	; 0x2c

	while(stepsX > 0 || stepsY > 0){
 8001d86:	e169      	b.n	800205c <moveXYRelative+0x714>
		delayMicro(timeStep);
 8001d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fa00 	bl	8001190 <delayMicro>
		time += timeStep;
 8001d90:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d96:	4413      	add	r3, r2
 8001d98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		pulseTimerX += timeStep;
 8001d9c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da2:	4413      	add	r3, r2
 8001da4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		pulseTimerY += timeStep;
 8001da8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dae:	4413      	add	r3, r2
 8001db0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		// Update X
		if(stepsX > 0 && pulseTimerX >= pulseLengthX){
 8001db4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 809f 	beq.w	8001efc <moveXYRelative+0x5b4>
 8001dbe:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001dc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	f0c0 8098 	bcc.w	8001efc <moveXYRelative+0x5b4>
			pulseTimerX = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if(time <= accelTime_usX){
 8001dd2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d816      	bhi.n	8001e0a <moveXYRelative+0x4c2>
				currentSpeedX = XY_ACCELERATION * (time/1000000.0);
 8001ddc:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001de0:	f7fe fb90 	bl	8000504 <__aeabi_ui2d>
 8001de4:	a37a      	add	r3, pc, #488	; (adr r3, 8001fd0 <moveXYRelative+0x688>)
 8001de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dea:	f7fe fd2f 	bl	800084c <__aeabi_ddiv>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4610      	mov	r0, r2
 8001df4:	4619      	mov	r1, r3
 8001df6:	a378      	add	r3, pc, #480	; (adr r3, 8001fd8 <moveXYRelative+0x690>)
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	f7fe fbfc 	bl	80005f8 <__aeabi_dmul>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
 8001e08:	e040      	b.n	8001e8c <moveXYRelative+0x544>
			} else if(time > accelTime_usX && time <= (accelTime_usX + coastTime_usX)){
 8001e0a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d90b      	bls.n	8001e2c <moveXYRelative+0x4e4>
 8001e14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e18:	4413      	add	r3, r2
 8001e1a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d804      	bhi.n	8001e2c <moveXYRelative+0x4e4>
				currentSpeedX = speedX;
 8001e22:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8001e26:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
 8001e2a:	e02f      	b.n	8001e8c <moveXYRelative+0x544>
			} else {
				currentSpeedX = max((speedX - (XY_ACCELERATION * (time-(accelTime_usX + coastTime_usX))/1000000.0)),speedX);
 8001e2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e30:	4413      	add	r3, r2
 8001e32:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001e3c:	fb02 f303 	mul.w	r3, r2, r3
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fb5f 	bl	8000504 <__aeabi_ui2d>
 8001e46:	a362      	add	r3, pc, #392	; (adr r3, 8001fd0 <moveXYRelative+0x688>)
 8001e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4c:	f7fe fcfe 	bl	800084c <__aeabi_ddiv>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8001e58:	f7fe fa16 	bl	8000288 <__aeabi_dsub>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001e64:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8001e68:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001e6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e70:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e74:	f7fe fe50 	bl	8000b18 <__aeabi_dcmpgt>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d002      	beq.n	8001e84 <moveXYRelative+0x53c>
 8001e7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e82:	e001      	b.n	8001e88 <moveXYRelative+0x540>
 8001e84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e88:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
			}
			pulseLengthX = 1000000/(currentSpeedX * XYmicrostepsPerMM);
 8001e8c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001e8e:	f7fe fb5b 	bl	8000548 <__aeabi_f2d>
 8001e92:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8001e96:	f7fe fbaf 	bl	80005f8 <__aeabi_dmul>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	a14c      	add	r1, pc, #304	; (adr r1, 8001fd0 <moveXYRelative+0x688>)
 8001ea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ea4:	f7fe fcd2 	bl	800084c <__aeabi_ddiv>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4610      	mov	r0, r2
 8001eae:	4619      	mov	r1, r3
 8001eb0:	f7fe fe7a 	bl	8000ba8 <__aeabi_d2uiz>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			pinWrite(X, step,1);
 8001eba:	2201      	movs	r2, #1
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f7ff f8aa 	bl	8001018 <pinWrite>
			delayMicro(10);
 8001ec4:	200a      	movs	r0, #10
 8001ec6:	f7ff f963 	bl	8001190 <delayMicro>
			pinWrite(X, step,0);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2100      	movs	r1, #0
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f7ff f8a2 	bl	8001018 <pinWrite>
			time += 10;
 8001ed4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ed8:	330a      	adds	r3, #10
 8001eda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			pulseTimerX += 10;
 8001ede:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ee2:	330a      	adds	r3, #10
 8001ee4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			pulseTimerY += 10;
 8001ee8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001eec:	330a      	adds	r3, #10
 8001eee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			stepsX--;
 8001ef2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		}

		// Update Y
		if(stepsY > 0 && pulseTimerY >= pulseLengthY){
 8001efc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 80ab 	beq.w	800205c <moveXYRelative+0x714>
 8001f06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001f0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	f0c0 80a4 	bcc.w	800205c <moveXYRelative+0x714>
			pulseTimerY = 0;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			if(time <= accelTime_usY){
 8001f1a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d816      	bhi.n	8001f52 <moveXYRelative+0x60a>
				currentSpeedY = XY_ACCELERATION * (time/1000000.0);
 8001f24:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001f28:	f7fe faec 	bl	8000504 <__aeabi_ui2d>
 8001f2c:	a328      	add	r3, pc, #160	; (adr r3, 8001fd0 <moveXYRelative+0x688>)
 8001f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f32:	f7fe fc8b 	bl	800084c <__aeabi_ddiv>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	a326      	add	r3, pc, #152	; (adr r3, 8001fd8 <moveXYRelative+0x690>)
 8001f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f44:	f7fe fb58 	bl	80005f8 <__aeabi_dmul>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 8001f50:	e04c      	b.n	8001fec <moveXYRelative+0x6a4>
			} else if(time > accelTime_usY && time <= (accelTime_usY + coastTime_usY)){
 8001f52:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d90b      	bls.n	8001f74 <moveXYRelative+0x62c>
 8001f5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f60:	4413      	add	r3, r2
 8001f62:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d804      	bhi.n	8001f74 <moveXYRelative+0x62c>
				currentSpeedY = speedY;
 8001f6a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f6e:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 8001f72:	e03b      	b.n	8001fec <moveXYRelative+0x6a4>
			} else {
				currentSpeedY = max((speedY - (XY_ACCELERATION * (time-(accelTime_usY + coastTime_usY))/1000000.0)),speedY);
 8001f74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f78:	4413      	add	r3, r2
 8001f7a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001f84:	fb02 f303 	mul.w	r3, r2, r3
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fabb 	bl	8000504 <__aeabi_ui2d>
 8001f8e:	a310      	add	r3, pc, #64	; (adr r3, 8001fd0 <moveXYRelative+0x688>)
 8001f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f94:	f7fe fc5a 	bl	800084c <__aeabi_ddiv>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001fa0:	f7fe f972 	bl	8000288 <__aeabi_dsub>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001fac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001fb0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001fb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fb8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001fbc:	f7fe fdac 	bl	8000b18 <__aeabi_dcmpgt>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00e      	beq.n	8001fe4 <moveXYRelative+0x69c>
 8001fc6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001fca:	e00d      	b.n	8001fe8 <moveXYRelative+0x6a0>
 8001fcc:	f3af 8000 	nop.w
 8001fd0:	00000000 	.word	0x00000000
 8001fd4:	412e8480 	.word	0x412e8480
 8001fd8:	00000000 	.word	0x00000000
 8001fdc:	40e86a00 	.word	0x40e86a00
 8001fe0:	40140000 	.word	0x40140000
 8001fe4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fe8:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
			}
			pulseLengthY = 1000000.0/(currentSpeedY * XYmicrostepsPerMM);
 8001fec:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001fee:	f7fe faab 	bl	8000548 <__aeabi_f2d>
 8001ff2:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001ff6:	f7fe faff 	bl	80005f8 <__aeabi_dmul>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	a120      	add	r1, pc, #128	; (adr r1, 8002080 <moveXYRelative+0x738>)
 8002000:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002004:	f7fe fc22 	bl	800084c <__aeabi_ddiv>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4610      	mov	r0, r2
 800200e:	4619      	mov	r1, r3
 8002010:	f7fe fdca 	bl	8000ba8 <__aeabi_d2uiz>
 8002014:	4603      	mov	r3, r0
 8002016:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			pinWrite(Y, step,1);
 800201a:	2201      	movs	r2, #1
 800201c:	2100      	movs	r1, #0
 800201e:	2001      	movs	r0, #1
 8002020:	f7fe fffa 	bl	8001018 <pinWrite>
			delayMicro(10);
 8002024:	200a      	movs	r0, #10
 8002026:	f7ff f8b3 	bl	8001190 <delayMicro>
			pinWrite(Y, step,0);
 800202a:	2200      	movs	r2, #0
 800202c:	2100      	movs	r1, #0
 800202e:	2001      	movs	r0, #1
 8002030:	f7fe fff2 	bl	8001018 <pinWrite>
			time += 10;
 8002034:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002038:	330a      	adds	r3, #10
 800203a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			pulseTimerX += 10;
 800203e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002042:	330a      	adds	r3, #10
 8002044:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			pulseTimerY += 10;
 8002048:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800204c:	330a      	adds	r3, #10
 800204e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			stepsY--;
 8002052:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002056:	3b01      	subs	r3, #1
 8002058:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	while(stepsX > 0 || stepsY > 0){
 800205c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002060:	2b00      	cmp	r3, #0
 8002062:	f47f ae91 	bne.w	8001d88 <moveXYRelative+0x440>
 8002066:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800206a:	2b00      	cmp	r3, #0
 800206c:	f47f ae8c 	bne.w	8001d88 <moveXYRelative+0x440>
		}

	}

}
 8002070:	bf00      	nop
 8002072:	bf00      	nop
 8002074:	37e8      	adds	r7, #232	; 0xe8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	f3af 8000 	nop.w
 8002080:	00000000 	.word	0x00000000
 8002084:	412e8480 	.word	0x412e8480

08002088 <moveXYAbsolute>:

/*
 * Moves the toolhead on XY to coordinates
 */
void moveXYAbsolute(float x, float y){
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002092:	edc7 0a00 	vstr	s1, [r7]
  moveXYRelative(x-currentX, y-currentY);
 8002096:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <moveXYAbsolute+0x4c>)
 8002098:	edd3 7a00 	vldr	s15, [r3]
 800209c:	ed97 7a01 	vldr	s14, [r7, #4]
 80020a0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <moveXYAbsolute+0x50>)
 80020a6:	edd3 7a00 	vldr	s15, [r3]
 80020aa:	ed97 7a00 	vldr	s14, [r7]
 80020ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020b2:	eef0 0a67 	vmov.f32	s1, s15
 80020b6:	eeb0 0a66 	vmov.f32	s0, s13
 80020ba:	f7ff fc45 	bl	8001948 <moveXYRelative>
  currentX = x;
 80020be:	4a05      	ldr	r2, [pc, #20]	; (80020d4 <moveXYAbsolute+0x4c>)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6013      	str	r3, [r2, #0]
  currentY = y;
 80020c4:	4a04      	ldr	r2, [pc, #16]	; (80020d8 <moveXYAbsolute+0x50>)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	6013      	str	r3, [r2, #0]
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000000 	.word	0x20000000
 80020d8:	20000004 	.word	0x20000004

080020dc <setDirection>:

 /*
  * Set the directions of the XY motors
  */
void setDirection(float x, float y){
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80020e6:	edc7 0a00 	vstr	s1, [r7]
  int directionX = x >= 0;
 80020ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80020ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f6:	bfac      	ite	ge
 80020f8:	2301      	movge	r3, #1
 80020fa:	2300      	movlt	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	60fb      	str	r3, [r7, #12]
  int directionY = y >= 0;
 8002100:	edd7 7a00 	vldr	s15, [r7]
 8002104:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210c:	bfac      	ite	ge
 800210e:	2301      	movge	r3, #1
 8002110:	2300      	movlt	r3, #0
 8002112:	b2db      	uxtb	r3, r3
 8002114:	60bb      	str	r3, [r7, #8]
  pinWrite(X, dir0, directionX);
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	2101      	movs	r1, #1
 800211a:	2000      	movs	r0, #0
 800211c:	f7fe ff7c 	bl	8001018 <pinWrite>
  pinWrite(X, dir1, !directionX);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b00      	cmp	r3, #0
 8002124:	bf0c      	ite	eq
 8002126:	2301      	moveq	r3, #1
 8002128:	2300      	movne	r3, #0
 800212a:	b2db      	uxtb	r3, r3
 800212c:	461a      	mov	r2, r3
 800212e:	2102      	movs	r1, #2
 8002130:	2000      	movs	r0, #0
 8002132:	f7fe ff71 	bl	8001018 <pinWrite>
  pinWrite(Y, dir0, directionY);
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	2101      	movs	r1, #1
 800213a:	2001      	movs	r0, #1
 800213c:	f7fe ff6c 	bl	8001018 <pinWrite>
  pinWrite(Y, dir1, !directionY);
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	bf0c      	ite	eq
 8002146:	2301      	moveq	r3, #1
 8002148:	2300      	movne	r3, #0
 800214a:	b2db      	uxtb	r3, r3
 800214c:	461a      	mov	r2, r3
 800214e:	2102      	movs	r1, #2
 8002150:	2001      	movs	r0, #1
 8002152:	f7fe ff61 	bl	8001018 <pinWrite>
}
 8002156:	bf00      	nop
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <setHomeZ>:

/*
 * Sets current Z position to be 0
 * Z home should be the top of a pawn
 */
void setHomeZ(){
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
	currentZ = 0.0;
 8002164:	4b04      	ldr	r3, [pc, #16]	; (8002178 <setHomeZ+0x18>)
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	20000008 	.word	0x20000008

0800217c <moveZRelative>:

/*
 * Moves the z axis up or down by a given value
 */
void moveZRelative(float z) {
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	ed87 0a01 	vstr	s0, [r7, #4]
	float ZmicrostepsPerMM = Z_STEPS_PER_MM * MICROSTEP_FACTOR_Z;
 8002186:	4b27      	ldr	r3, [pc, #156]	; (8002224 <moveZRelative+0xa8>)
 8002188:	613b      	str	r3, [r7, #16]

	pinWrite(Z,dir0, z < 0);
 800218a:	edd7 7a01 	vldr	s15, [r7, #4]
 800218e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002196:	bf4c      	ite	mi
 8002198:	2301      	movmi	r3, #1
 800219a:	2300      	movpl	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	461a      	mov	r2, r3
 80021a0:	2101      	movs	r1, #1
 80021a2:	2002      	movs	r0, #2
 80021a4:	f7fe ff38 	bl	8001018 <pinWrite>
	unsigned long delay = 1000000/(Z_SPEED * ZmicrostepsPerMM);
 80021a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80021ac:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002228 <moveZRelative+0xac>
 80021b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021b4:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800222c <moveZRelative+0xb0>
 80021b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021c0:	ee17 3a90 	vmov	r3, s15
 80021c4:	60fb      	str	r3, [r7, #12]

	float travelDistance = fabs(z);
 80021c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80021ca:	eef0 7ae7 	vabs.f32	s15, s15
 80021ce:	edc7 7a02 	vstr	s15, [r7, #8]
	unsigned long steps = ZmicrostepsPerMM * travelDistance;
 80021d2:	ed97 7a04 	vldr	s14, [r7, #16]
 80021d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80021da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021e2:	ee17 3a90 	vmov	r3, s15
 80021e6:	617b      	str	r3, [r7, #20]
	for(; steps > 0; steps --){
 80021e8:	e013      	b.n	8002212 <moveZRelative+0x96>
		pinWrite(Z, step,1);
 80021ea:	2201      	movs	r2, #1
 80021ec:	2100      	movs	r1, #0
 80021ee:	2002      	movs	r0, #2
 80021f0:	f7fe ff12 	bl	8001018 <pinWrite>
		delayMicro(10);
 80021f4:	200a      	movs	r0, #10
 80021f6:	f7fe ffcb 	bl	8001190 <delayMicro>
		pinWrite(Z, step,0);
 80021fa:	2200      	movs	r2, #0
 80021fc:	2100      	movs	r1, #0
 80021fe:	2002      	movs	r0, #2
 8002200:	f7fe ff0a 	bl	8001018 <pinWrite>
		delayMicro(delay);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe ffc2 	bl	8001190 <delayMicro>
	for(; steps > 0; steps --){
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	3b01      	subs	r3, #1
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1e8      	bne.n	80021ea <moveZRelative+0x6e>
	}
}
 8002218:	bf00      	nop
 800221a:	bf00      	nop
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	42bb8000 	.word	0x42bb8000
 8002228:	425c0000 	.word	0x425c0000
 800222c:	49742400 	.word	0x49742400

08002230 <moveZAbsolute>:

/*
 * Moves the z axis to a given height
 */
void moveZAbsolute(float z){
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	ed87 0a01 	vstr	s0, [r7, #4]
	moveZRelative(z-currentZ);
 800223a:	4b09      	ldr	r3, [pc, #36]	; (8002260 <moveZAbsolute+0x30>)
 800223c:	edd3 7a00 	vldr	s15, [r3]
 8002240:	ed97 7a01 	vldr	s14, [r7, #4]
 8002244:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002248:	eeb0 0a67 	vmov.f32	s0, s15
 800224c:	f7ff ff96 	bl	800217c <moveZRelative>
	currentZ = z;
 8002250:	4a03      	ldr	r2, [pc, #12]	; (8002260 <moveZAbsolute+0x30>)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6013      	str	r3, [r2, #0]
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000008 	.word	0x20000008
 8002264:	00000000 	.word	0x00000000

08002268 <calcDistance>:

/*
 * Calculates the distance in mm that will be covered in a given time, in seconds
 * Uses speed (mm/s) and acceleration(mm/s^2)
 */
float calcDistance(float time, float speed, float acceleration){
 8002268:	b5b0      	push	{r4, r5, r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002272:	edc7 0a02 	vstr	s1, [r7, #8]
 8002276:	ed87 1a01 	vstr	s2, [r7, #4]
	return (0.5 * acceleration * pow(time,2)) + (speed * time);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7fe f964 	bl	8000548 <__aeabi_f2d>
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	4b1e      	ldr	r3, [pc, #120]	; (8002300 <calcDistance+0x98>)
 8002286:	f7fe f9b7 	bl	80005f8 <__aeabi_dmul>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4614      	mov	r4, r2
 8002290:	461d      	mov	r5, r3
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f7fe f958 	bl	8000548 <__aeabi_f2d>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	ed9f 1b16 	vldr	d1, [pc, #88]	; 80022f8 <calcDistance+0x90>
 80022a0:	ec43 2b10 	vmov	d0, r2, r3
 80022a4:	f00a fe34 	bl	800cf10 <pow>
 80022a8:	ec53 2b10 	vmov	r2, r3, d0
 80022ac:	4620      	mov	r0, r4
 80022ae:	4629      	mov	r1, r5
 80022b0:	f7fe f9a2 	bl	80005f8 <__aeabi_dmul>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4614      	mov	r4, r2
 80022ba:	461d      	mov	r5, r3
 80022bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80022c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80022c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c8:	ee17 0a90 	vmov	r0, s15
 80022cc:	f7fe f93c 	bl	8000548 <__aeabi_f2d>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4620      	mov	r0, r4
 80022d6:	4629      	mov	r1, r5
 80022d8:	f7fd ffd8 	bl	800028c <__adddf3>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4610      	mov	r0, r2
 80022e2:	4619      	mov	r1, r3
 80022e4:	f7fe fc80 	bl	8000be8 <__aeabi_d2f>
 80022e8:	4603      	mov	r3, r0
 80022ea:	ee07 3a90 	vmov	s15, r3
}
 80022ee:	eeb0 0a67 	vmov.f32	s0, s15
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bdb0      	pop	{r4, r5, r7, pc}
 80022f8:	00000000 	.word	0x00000000
 80022fc:	40000000 	.word	0x40000000
 8002300:	3fe00000 	.word	0x3fe00000
 8002304:	00000000 	.word	0x00000000

08002308 <movePiece>:

/*
 * Moves a piece between two squares
 * Takes the coordintes of the start and end squares, along with the height of the piece
 */
void movePiece(float startX, float startY, float endX, float endY, float pieceZ){
 8002308:	b5b0      	push	{r4, r5, r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	ed87 0a05 	vstr	s0, [r7, #20]
 8002312:	edc7 0a04 	vstr	s1, [r7, #16]
 8002316:	ed87 1a03 	vstr	s2, [r7, #12]
 800231a:	edc7 1a02 	vstr	s3, [r7, #8]
 800231e:	ed87 2a01 	vstr	s4, [r7, #4]

	// Move to the travel height, if not there already
	moveZAbsolute(TRAVEL_Z);
 8002322:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80023d8 <movePiece+0xd0>
 8002326:	f7ff ff83 	bl	8002230 <moveZAbsolute>

	// Move the the starting square
	moveXYAbsolute(startX,startY);
 800232a:	edd7 0a04 	vldr	s1, [r7, #16]
 800232e:	ed97 0a05 	vldr	s0, [r7, #20]
 8002332:	f7ff fea9 	bl	8002088 <moveXYAbsolute>

	// Turn on the magnet
	setMagnet(0);
 8002336:	2000      	movs	r0, #0
 8002338:	f7fe ff10 	bl	800115c <setMagnet>

	// Move down to grab the piece
	moveZAbsolute(pieceZ);
 800233c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002340:	f7ff ff76 	bl	8002230 <moveZAbsolute>


	// Piece is now grabbed

	delayMicro(10000);
 8002344:	f242 7010 	movw	r0, #10000	; 0x2710
 8002348:	f7fe ff22 	bl	8001190 <delayMicro>

	// Move up to be above the other pieces
	moveZAbsolute(MOVE_Z-(arr[5].value - pieceZ - arr[0].value));
 800234c:	4b23      	ldr	r3, [pc, #140]	; (80023dc <movePiece+0xd4>)
 800234e:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7fe f8f8 	bl	8000548 <__aeabi_f2d>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4620      	mov	r0, r4
 800235e:	4629      	mov	r1, r5
 8002360:	f7fd ff92 	bl	8000288 <__aeabi_dsub>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4610      	mov	r0, r2
 800236a:	4619      	mov	r1, r3
 800236c:	4b1b      	ldr	r3, [pc, #108]	; (80023dc <movePiece+0xd4>)
 800236e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002372:	f7fd ff89 	bl	8000288 <__aeabi_dsub>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	a115      	add	r1, pc, #84	; (adr r1, 80023d0 <movePiece+0xc8>)
 800237c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002380:	f7fd ff82 	bl	8000288 <__aeabi_dsub>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4610      	mov	r0, r2
 800238a:	4619      	mov	r1, r3
 800238c:	f7fe fc2c 	bl	8000be8 <__aeabi_d2f>
 8002390:	4603      	mov	r3, r0
 8002392:	ee00 3a10 	vmov	s0, r3
 8002396:	f7ff ff4b 	bl	8002230 <moveZAbsolute>

	// Move to target square
	moveXYAbsolute(endX,endY);
 800239a:	edd7 0a02 	vldr	s1, [r7, #8]
 800239e:	ed97 0a03 	vldr	s0, [r7, #12]
 80023a2:	f7ff fe71 	bl	8002088 <moveXYAbsolute>

	// Move down to board
	moveZAbsolute(pieceZ);
 80023a6:	ed97 0a01 	vldr	s0, [r7, #4]
 80023aa:	f7ff ff41 	bl	8002230 <moveZAbsolute>

	// Release the piece
	setMagnet(1);
 80023ae:	2001      	movs	r0, #1
 80023b0:	f7fe fed4 	bl	800115c <setMagnet>
	delayMicro(10000);
 80023b4:	f242 7010 	movw	r0, #10000	; 0x2710
 80023b8:	f7fe feea 	bl	8001190 <delayMicro>

	// Move back up to travel height
	moveZAbsolute(TRAVEL_Z);
 80023bc:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80023d8 <movePiece+0xd0>
 80023c0:	f7ff ff36 	bl	8002230 <moveZAbsolute>
}
 80023c4:	bf00      	nop
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bdb0      	pop	{r4, r5, r7, pc}
 80023cc:	f3af 8000 	nop.w
 80023d0:	00000000 	.word	0x00000000
 80023d4:	4062c000 	.word	0x4062c000
 80023d8:	42c80000 	.word	0x42c80000
 80023dc:	20000010 	.word	0x20000010

080023e0 <moveToStandbyPosition>:

/*
 * Moves to the standby position described in motor.h, to be out of the way of the player and the camera
 */
void moveToStandbyPosition(){
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
	// Move to the travel height, if not there already
	moveZAbsolute(TRAVEL_Z);
 80023e4:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80023fc <moveToStandbyPosition+0x1c>
 80023e8:	f7ff ff22 	bl	8002230 <moveZAbsolute>

	// Move to target square
	moveXYAbsolute(STANDBY_X,STANDBY_Y);
 80023ec:	eddf 0a04 	vldr	s1, [pc, #16]	; 8002400 <moveToStandbyPosition+0x20>
 80023f0:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002404 <moveToStandbyPosition+0x24>
 80023f4:	f7ff fe48 	bl	8002088 <moveXYAbsolute>
}
 80023f8:	bf00      	nop
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	42c80000 	.word	0x42c80000
 8002400:	4411c000 	.word	0x4411c000
 8002404:	43e40000 	.word	0x43e40000

08002408 <movePieceByIndex>:

/*
 * Moves piece using indexes for starting square, ending square, and piece height
 */
void movePieceByIndex(int startIndex, int endIndex, int pieceIndex){
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	; 0x28
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
	point startPoint = getCoordsFromIndex(startIndex);
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 f841 	bl	800249c <getCoordsFromIndex>
 800241a:	eeb0 7a40 	vmov.f32	s14, s0
 800241e:	eef0 7a60 	vmov.f32	s15, s1
 8002422:	ed87 7a07 	vstr	s14, [r7, #28]
 8002426:	edc7 7a08 	vstr	s15, [r7, #32]
	point endPoint = getCoordsFromIndex(endIndex);
 800242a:	68b8      	ldr	r0, [r7, #8]
 800242c:	f000 f836 	bl	800249c <getCoordsFromIndex>
 8002430:	eeb0 7a40 	vmov.f32	s14, s0
 8002434:	eef0 7a60 	vmov.f32	s15, s1
 8002438:	ed87 7a05 	vstr	s14, [r7, #20]
 800243c:	edc7 7a06 	vstr	s15, [r7, #24]
	float pieceHeight = arr[pieceIndex].value - arr[0].value;
 8002440:	4a15      	ldr	r2, [pc, #84]	; (8002498 <movePieceByIndex+0x90>)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	4413      	add	r3, r2
 8002448:	3308      	adds	r3, #8
 800244a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800244e:	4b12      	ldr	r3, [pc, #72]	; (8002498 <movePieceByIndex+0x90>)
 8002450:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002454:	f7fd ff18 	bl	8000288 <__aeabi_dsub>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4610      	mov	r0, r2
 800245e:	4619      	mov	r1, r3
 8002460:	f7fe fbc2 	bl	8000be8 <__aeabi_d2f>
 8002464:	4603      	mov	r3, r0
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
	movePiece(startPoint.x, startPoint.y, endPoint.x, endPoint.y, pieceHeight);
 8002468:	edd7 7a07 	vldr	s15, [r7, #28]
 800246c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002470:	edd7 6a05 	vldr	s13, [r7, #20]
 8002474:	ed97 6a06 	vldr	s12, [r7, #24]
 8002478:	ed97 2a09 	vldr	s4, [r7, #36]	; 0x24
 800247c:	eef0 1a46 	vmov.f32	s3, s12
 8002480:	eeb0 1a66 	vmov.f32	s2, s13
 8002484:	eef0 0a47 	vmov.f32	s1, s14
 8002488:	eeb0 0a67 	vmov.f32	s0, s15
 800248c:	f7ff ff3c 	bl	8002308 <movePiece>

}
 8002490:	bf00      	nop
 8002492:	3728      	adds	r7, #40	; 0x28
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	20000010 	.word	0x20000010

0800249c <getCoordsFromIndex>:

/*
 * Uses index to get the XY coordinates of a square on the board
 */
point getCoordsFromIndex(int index){
 800249c:	b480      	push	{r7}
 800249e:	b087      	sub	sp, #28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
	if(index > 63 && index < 81){
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2b3f      	cmp	r3, #63	; 0x3f
 80024a8:	dd0e      	ble.n	80024c8 <getCoordsFromIndex+0x2c>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2b50      	cmp	r3, #80	; 0x50
 80024ae:	dc0b      	bgt.n	80024c8 <getCoordsFromIndex+0x2c>
		return whiteCaptured[index-64];
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	3b40      	subs	r3, #64	; 0x40
 80024b4:	4918      	ldr	r1, [pc, #96]	; (8002518 <getCoordsFromIndex+0x7c>)
 80024b6:	f107 0210 	add.w	r2, r7, #16
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	440b      	add	r3, r1
 80024be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80024c2:	e882 0003 	stmia.w	r2, {r0, r1}
 80024c6:	e018      	b.n	80024fa <getCoordsFromIndex+0x5e>
	} else if (index >= 81){
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2b50      	cmp	r3, #80	; 0x50
 80024cc:	dd0b      	ble.n	80024e6 <getCoordsFromIndex+0x4a>
		return blackCaptured[index-81];
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	3b51      	subs	r3, #81	; 0x51
 80024d2:	4912      	ldr	r1, [pc, #72]	; (800251c <getCoordsFromIndex+0x80>)
 80024d4:	f107 0210 	add.w	r2, r7, #16
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	440b      	add	r3, r1
 80024dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80024e0:	e882 0003 	stmia.w	r2, {r0, r1}
 80024e4:	e009      	b.n	80024fa <getCoordsFromIndex+0x5e>
	} else {
		return board[index];
 80024e6:	490e      	ldr	r1, [pc, #56]	; (8002520 <getCoordsFromIndex+0x84>)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f107 0210 	add.w	r2, r7, #16
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	440b      	add	r3, r1
 80024f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80024f6:	e882 0003 	stmia.w	r2, {r0, r1}
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	ee07 2a10 	vmov	s14, r2
 8002502:	ee07 3a90 	vmov	s15, r3
	}
}
 8002506:	eeb0 0a47 	vmov.f32	s0, s14
 800250a:	eef0 0a67 	vmov.f32	s1, s15
 800250e:	371c      	adds	r7, #28
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	20000290 	.word	0x20000290
 800251c:	20000318 	.word	0x20000318
 8002520:	20000090 	.word	0x20000090

08002524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <HAL_MspInit+0x4c>)
 8002530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002532:	4a0f      	ldr	r2, [pc, #60]	; (8002570 <HAL_MspInit+0x4c>)
 8002534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002538:	6453      	str	r3, [r2, #68]	; 0x44
 800253a:	4b0d      	ldr	r3, [pc, #52]	; (8002570 <HAL_MspInit+0x4c>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002542:	607b      	str	r3, [r7, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	603b      	str	r3, [r7, #0]
 800254a:	4b09      	ldr	r3, [pc, #36]	; (8002570 <HAL_MspInit+0x4c>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	4a08      	ldr	r2, [pc, #32]	; (8002570 <HAL_MspInit+0x4c>)
 8002550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002554:	6413      	str	r3, [r2, #64]	; 0x40
 8002556:	4b06      	ldr	r3, [pc, #24]	; (8002570 <HAL_MspInit+0x4c>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255e:	603b      	str	r3, [r7, #0]
 8002560:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002562:	2007      	movs	r0, #7
 8002564:	f000 fb6a 	bl	8002c3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40023800 	.word	0x40023800

08002574 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a0b      	ldr	r2, [pc, #44]	; (80025b0 <HAL_TIM_Base_MspInit+0x3c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d10d      	bne.n	80025a2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <HAL_TIM_Base_MspInit+0x40>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	4a09      	ldr	r2, [pc, #36]	; (80025b4 <HAL_TIM_Base_MspInit+0x40>)
 8002590:	f043 0310 	orr.w	r3, r3, #16
 8002594:	6413      	str	r3, [r2, #64]	; 0x40
 8002596:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <HAL_TIM_Base_MspInit+0x40>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 0310 	and.w	r3, r3, #16
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80025a2:	bf00      	nop
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40001000 	.word	0x40001000
 80025b4:	40023800 	.word	0x40023800

080025b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08a      	sub	sp, #40	; 0x28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	f107 0314 	add.w	r3, r7, #20
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a40      	ldr	r2, [pc, #256]	; (80026d8 <HAL_UART_MspInit+0x120>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d17a      	bne.n	80026d0 <HAL_UART_MspInit+0x118>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	4b3f      	ldr	r3, [pc, #252]	; (80026dc <HAL_UART_MspInit+0x124>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	4a3e      	ldr	r2, [pc, #248]	; (80026dc <HAL_UART_MspInit+0x124>)
 80025e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025e8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ea:	4b3c      	ldr	r3, [pc, #240]	; (80026dc <HAL_UART_MspInit+0x124>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	4b38      	ldr	r3, [pc, #224]	; (80026dc <HAL_UART_MspInit+0x124>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	4a37      	ldr	r2, [pc, #220]	; (80026dc <HAL_UART_MspInit+0x124>)
 8002600:	f043 0302 	orr.w	r3, r3, #2
 8002604:	6313      	str	r3, [r2, #48]	; 0x30
 8002606:	4b35      	ldr	r3, [pc, #212]	; (80026dc <HAL_UART_MspInit+0x124>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	4b31      	ldr	r3, [pc, #196]	; (80026dc <HAL_UART_MspInit+0x124>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	4a30      	ldr	r2, [pc, #192]	; (80026dc <HAL_UART_MspInit+0x124>)
 800261c:	f043 0308 	orr.w	r3, r3, #8
 8002620:	6313      	str	r3, [r2, #48]	; 0x30
 8002622:	4b2e      	ldr	r3, [pc, #184]	; (80026dc <HAL_UART_MspInit+0x124>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800262e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002634:	2302      	movs	r3, #2
 8002636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263c:	2303      	movs	r3, #3
 800263e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002640:	2307      	movs	r3, #7
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002644:	f107 0314 	add.w	r3, r7, #20
 8002648:	4619      	mov	r1, r3
 800264a:	4825      	ldr	r0, [pc, #148]	; (80026e0 <HAL_UART_MspInit+0x128>)
 800264c:	f000 fe22 	bl	8003294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002650:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002656:	2302      	movs	r3, #2
 8002658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265e:	2303      	movs	r3, #3
 8002660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002662:	2307      	movs	r3, #7
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002666:	f107 0314 	add.w	r3, r7, #20
 800266a:	4619      	mov	r1, r3
 800266c:	481d      	ldr	r0, [pc, #116]	; (80026e4 <HAL_UART_MspInit+0x12c>)
 800266e:	f000 fe11 	bl	8003294 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002672:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <HAL_UART_MspInit+0x130>)
 8002674:	4a1d      	ldr	r2, [pc, #116]	; (80026ec <HAL_UART_MspInit+0x134>)
 8002676:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002678:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <HAL_UART_MspInit+0x130>)
 800267a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800267e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002680:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <HAL_UART_MspInit+0x130>)
 8002682:	2200      	movs	r2, #0
 8002684:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002686:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <HAL_UART_MspInit+0x130>)
 8002688:	2200      	movs	r2, #0
 800268a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800268c:	4b16      	ldr	r3, [pc, #88]	; (80026e8 <HAL_UART_MspInit+0x130>)
 800268e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002692:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002694:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <HAL_UART_MspInit+0x130>)
 8002696:	2200      	movs	r2, #0
 8002698:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800269a:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <HAL_UART_MspInit+0x130>)
 800269c:	2200      	movs	r2, #0
 800269e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80026a0:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <HAL_UART_MspInit+0x130>)
 80026a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026a6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026a8:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <HAL_UART_MspInit+0x130>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <HAL_UART_MspInit+0x130>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80026b4:	480c      	ldr	r0, [pc, #48]	; (80026e8 <HAL_UART_MspInit+0x130>)
 80026b6:	f000 fb03 	bl	8002cc0 <HAL_DMA_Init>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80026c0:	f7ff f93a 	bl	8001938 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a08      	ldr	r2, [pc, #32]	; (80026e8 <HAL_UART_MspInit+0x130>)
 80026c8:	639a      	str	r2, [r3, #56]	; 0x38
 80026ca:	4a07      	ldr	r2, [pc, #28]	; (80026e8 <HAL_UART_MspInit+0x130>)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80026d0:	bf00      	nop
 80026d2:	3728      	adds	r7, #40	; 0x28
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40004800 	.word	0x40004800
 80026dc:	40023800 	.word	0x40023800
 80026e0:	40020400 	.word	0x40020400
 80026e4:	40020c00 	.word	0x40020c00
 80026e8:	200005d0 	.word	0x200005d0
 80026ec:	40026028 	.word	0x40026028

080026f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026f4:	e7fe      	b.n	80026f4 <NMI_Handler+0x4>

080026f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026f6:	b480      	push	{r7}
 80026f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026fa:	e7fe      	b.n	80026fa <HardFault_Handler+0x4>

080026fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002700:	e7fe      	b.n	8002700 <MemManage_Handler+0x4>

08002702 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002702:	b480      	push	{r7}
 8002704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002706:	e7fe      	b.n	8002706 <BusFault_Handler+0x4>

08002708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800270c:	e7fe      	b.n	800270c <UsageFault_Handler+0x4>

0800270e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800272a:	b480      	push	{r7}
 800272c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800273c:	f000 f96a 	bl	8002a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}

08002744 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002748:	4802      	ldr	r0, [pc, #8]	; (8002754 <DMA1_Stream1_IRQHandler+0x10>)
 800274a:	f000 fb67 	bl	8002e1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	200005d0 	.word	0x200005d0

08002758 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800275c:	4802      	ldr	r0, [pc, #8]	; (8002768 <OTG_FS_IRQHandler+0x10>)
 800275e:	f001 f9b9 	bl	8003ad4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20000acc 	.word	0x20000acc

0800276c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
	return 1;
 8002770:	2301      	movs	r3, #1
}
 8002772:	4618      	mov	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <_kill>:

int _kill(int pid, int sig)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002786:	f006 ffff 	bl	8009788 <__errno>
 800278a:	4603      	mov	r3, r0
 800278c:	2216      	movs	r2, #22
 800278e:	601a      	str	r2, [r3, #0]
	return -1;
 8002790:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002794:	4618      	mov	r0, r3
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <_exit>:

void _exit (int status)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027a4:	f04f 31ff 	mov.w	r1, #4294967295
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff ffe7 	bl	800277c <_kill>
	while (1) {}		/* Make sure we hang here */
 80027ae:	e7fe      	b.n	80027ae <_exit+0x12>

080027b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	e00a      	b.n	80027d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027c2:	f3af 8000 	nop.w
 80027c6:	4601      	mov	r1, r0
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	60ba      	str	r2, [r7, #8]
 80027ce:	b2ca      	uxtb	r2, r1
 80027d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	3301      	adds	r3, #1
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	429a      	cmp	r2, r3
 80027de:	dbf0      	blt.n	80027c2 <_read+0x12>
	}

return len;
 80027e0:	687b      	ldr	r3, [r7, #4]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b086      	sub	sp, #24
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	60f8      	str	r0, [r7, #12]
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
 80027fa:	e009      	b.n	8002810 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	60ba      	str	r2, [r7, #8]
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	3301      	adds	r3, #1
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	429a      	cmp	r2, r3
 8002816:	dbf1      	blt.n	80027fc <_write+0x12>
	}
	return len;
 8002818:	687b      	ldr	r3, [r7, #4]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <_close>:

int _close(int file)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
	return -1;
 800282a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800282e:	4618      	mov	r0, r3
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800284a:	605a      	str	r2, [r3, #4]
	return 0;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <_isatty>:

int _isatty(int file)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
	return 1;
 8002862:	2301      	movs	r3, #1
}
 8002864:	4618      	mov	r0, r3
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
	return 0;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
	...

0800288c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002894:	4a14      	ldr	r2, [pc, #80]	; (80028e8 <_sbrk+0x5c>)
 8002896:	4b15      	ldr	r3, [pc, #84]	; (80028ec <_sbrk+0x60>)
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028a0:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <_sbrk+0x64>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d102      	bne.n	80028ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028a8:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <_sbrk+0x64>)
 80028aa:	4a12      	ldr	r2, [pc, #72]	; (80028f4 <_sbrk+0x68>)
 80028ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ae:	4b10      	ldr	r3, [pc, #64]	; (80028f0 <_sbrk+0x64>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4413      	add	r3, r2
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d207      	bcs.n	80028cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028bc:	f006 ff64 	bl	8009788 <__errno>
 80028c0:	4603      	mov	r3, r0
 80028c2:	220c      	movs	r2, #12
 80028c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028c6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ca:	e009      	b.n	80028e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028cc:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <_sbrk+0x64>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028d2:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <_sbrk+0x64>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4413      	add	r3, r2
 80028da:	4a05      	ldr	r2, [pc, #20]	; (80028f0 <_sbrk+0x64>)
 80028dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028de:	68fb      	ldr	r3, [r7, #12]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20020000 	.word	0x20020000
 80028ec:	00000400 	.word	0x00000400
 80028f0:	200005c0 	.word	0x200005c0
 80028f4:	20000de0 	.word	0x20000de0

080028f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <SystemInit+0x20>)
 80028fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002902:	4a05      	ldr	r2, [pc, #20]	; (8002918 <SystemInit+0x20>)
 8002904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800291c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002954 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002920:	480d      	ldr	r0, [pc, #52]	; (8002958 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002922:	490e      	ldr	r1, [pc, #56]	; (800295c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002924:	4a0e      	ldr	r2, [pc, #56]	; (8002960 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002928:	e002      	b.n	8002930 <LoopCopyDataInit>

0800292a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800292a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800292c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800292e:	3304      	adds	r3, #4

08002930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002934:	d3f9      	bcc.n	800292a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002936:	4a0b      	ldr	r2, [pc, #44]	; (8002964 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002938:	4c0b      	ldr	r4, [pc, #44]	; (8002968 <LoopFillZerobss+0x26>)
  movs r3, #0
 800293a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800293c:	e001      	b.n	8002942 <LoopFillZerobss>

0800293e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800293e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002940:	3204      	adds	r2, #4

08002942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002944:	d3fb      	bcc.n	800293e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002946:	f7ff ffd7 	bl	80028f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800294a:	f006 ff23 	bl	8009794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800294e:	f7fe fd53 	bl	80013f8 <main>
  bx  lr    
 8002952:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002954:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800295c:	200005a4 	.word	0x200005a4
  ldr r2, =_sidata
 8002960:	0800f500 	.word	0x0800f500
  ldr r2, =_sbss
 8002964:	200005a4 	.word	0x200005a4
  ldr r4, =_ebss
 8002968:	20000de0 	.word	0x20000de0

0800296c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800296c:	e7fe      	b.n	800296c <ADC_IRQHandler>
	...

08002970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002974:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <HAL_Init+0x40>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a0d      	ldr	r2, [pc, #52]	; (80029b0 <HAL_Init+0x40>)
 800297a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800297e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_Init+0x40>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <HAL_Init+0x40>)
 8002986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800298a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800298c:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <HAL_Init+0x40>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a07      	ldr	r2, [pc, #28]	; (80029b0 <HAL_Init+0x40>)
 8002992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002998:	2003      	movs	r0, #3
 800299a:	f000 f94f 	bl	8002c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800299e:	2000      	movs	r0, #0
 80029a0:	f000 f808 	bl	80029b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029a4:	f7ff fdbe 	bl	8002524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40023c00 	.word	0x40023c00

080029b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029bc:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <HAL_InitTick+0x54>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <HAL_InitTick+0x58>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	4619      	mov	r1, r3
 80029c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 f967 	bl	8002ca6 <HAL_SYSTICK_Config>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e00e      	b.n	8002a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b0f      	cmp	r3, #15
 80029e6:	d80a      	bhi.n	80029fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029e8:	2200      	movs	r2, #0
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	f04f 30ff 	mov.w	r0, #4294967295
 80029f0:	f000 f92f 	bl	8002c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029f4:	4a06      	ldr	r2, [pc, #24]	; (8002a10 <HAL_InitTick+0x5c>)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	e000      	b.n	8002a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	200003a0 	.word	0x200003a0
 8002a0c:	200003a8 	.word	0x200003a8
 8002a10:	200003a4 	.word	0x200003a4

08002a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HAL_IncTick+0x20>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <HAL_IncTick+0x24>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4413      	add	r3, r2
 8002a24:	4a04      	ldr	r2, [pc, #16]	; (8002a38 <HAL_IncTick+0x24>)
 8002a26:	6013      	str	r3, [r2, #0]
}
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	200003a8 	.word	0x200003a8
 8002a38:	200006f0 	.word	0x200006f0

08002a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a40:	4b03      	ldr	r3, [pc, #12]	; (8002a50 <HAL_GetTick+0x14>)
 8002a42:	681b      	ldr	r3, [r3, #0]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	200006f0 	.word	0x200006f0

08002a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a5c:	f7ff ffee 	bl	8002a3c <HAL_GetTick>
 8002a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6c:	d005      	beq.n	8002a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a6e:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <HAL_Delay+0x44>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	461a      	mov	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4413      	add	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a7a:	bf00      	nop
 8002a7c:	f7ff ffde 	bl	8002a3c <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d8f7      	bhi.n	8002a7c <HAL_Delay+0x28>
  {
  }
}
 8002a8c:	bf00      	nop
 8002a8e:	bf00      	nop
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	200003a8 	.word	0x200003a8

08002a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aac:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ab8:	4013      	ands	r3, r2
 8002aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ace:	4a04      	ldr	r2, [pc, #16]	; (8002ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	60d3      	str	r3, [r2, #12]
}
 8002ad4:	bf00      	nop
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	e000ed00 	.word	0xe000ed00

08002ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ae8:	4b04      	ldr	r3, [pc, #16]	; (8002afc <__NVIC_GetPriorityGrouping+0x18>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	0a1b      	lsrs	r3, r3, #8
 8002aee:	f003 0307 	and.w	r3, r3, #7
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	db0b      	blt.n	8002b2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	f003 021f 	and.w	r2, r3, #31
 8002b18:	4907      	ldr	r1, [pc, #28]	; (8002b38 <__NVIC_EnableIRQ+0x38>)
 8002b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1e:	095b      	lsrs	r3, r3, #5
 8002b20:	2001      	movs	r0, #1
 8002b22:	fa00 f202 	lsl.w	r2, r0, r2
 8002b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	e000e100 	.word	0xe000e100

08002b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	6039      	str	r1, [r7, #0]
 8002b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	db0a      	blt.n	8002b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	490c      	ldr	r1, [pc, #48]	; (8002b88 <__NVIC_SetPriority+0x4c>)
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	0112      	lsls	r2, r2, #4
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	440b      	add	r3, r1
 8002b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b64:	e00a      	b.n	8002b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	4908      	ldr	r1, [pc, #32]	; (8002b8c <__NVIC_SetPriority+0x50>)
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	3b04      	subs	r3, #4
 8002b74:	0112      	lsls	r2, r2, #4
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	440b      	add	r3, r1
 8002b7a:	761a      	strb	r2, [r3, #24]
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	e000e100 	.word	0xe000e100
 8002b8c:	e000ed00 	.word	0xe000ed00

08002b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b089      	sub	sp, #36	; 0x24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f1c3 0307 	rsb	r3, r3, #7
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	bf28      	it	cs
 8002bae:	2304      	movcs	r3, #4
 8002bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	2b06      	cmp	r3, #6
 8002bb8:	d902      	bls.n	8002bc0 <NVIC_EncodePriority+0x30>
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	3b03      	subs	r3, #3
 8002bbe:	e000      	b.n	8002bc2 <NVIC_EncodePriority+0x32>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43da      	mvns	r2, r3
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	401a      	ands	r2, r3
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	fa01 f303 	lsl.w	r3, r1, r3
 8002be2:	43d9      	mvns	r1, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be8:	4313      	orrs	r3, r2
         );
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3724      	adds	r7, #36	; 0x24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
	...

08002bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c08:	d301      	bcc.n	8002c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e00f      	b.n	8002c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c0e:	4a0a      	ldr	r2, [pc, #40]	; (8002c38 <SysTick_Config+0x40>)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c16:	210f      	movs	r1, #15
 8002c18:	f04f 30ff 	mov.w	r0, #4294967295
 8002c1c:	f7ff ff8e 	bl	8002b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <SysTick_Config+0x40>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c26:	4b04      	ldr	r3, [pc, #16]	; (8002c38 <SysTick_Config+0x40>)
 8002c28:	2207      	movs	r2, #7
 8002c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	e000e010 	.word	0xe000e010

08002c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff ff29 	bl	8002a9c <__NVIC_SetPriorityGrouping>
}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b086      	sub	sp, #24
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	4603      	mov	r3, r0
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
 8002c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c64:	f7ff ff3e 	bl	8002ae4 <__NVIC_GetPriorityGrouping>
 8002c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	68b9      	ldr	r1, [r7, #8]
 8002c6e:	6978      	ldr	r0, [r7, #20]
 8002c70:	f7ff ff8e 	bl	8002b90 <NVIC_EncodePriority>
 8002c74:	4602      	mov	r2, r0
 8002c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff ff5d 	bl	8002b3c <__NVIC_SetPriority>
}
 8002c82:	bf00      	nop
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	4603      	mov	r3, r0
 8002c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff ff31 	bl	8002b00 <__NVIC_EnableIRQ>
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff ffa2 	bl	8002bf8 <SysTick_Config>
 8002cb4:	4603      	mov	r3, r0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ccc:	f7ff feb6 	bl	8002a3c <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e099      	b.n	8002e10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 0201 	bic.w	r2, r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cfc:	e00f      	b.n	8002d1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cfe:	f7ff fe9d 	bl	8002a3c <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b05      	cmp	r3, #5
 8002d0a:	d908      	bls.n	8002d1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2203      	movs	r2, #3
 8002d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e078      	b.n	8002e10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1e8      	bne.n	8002cfe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	4b38      	ldr	r3, [pc, #224]	; (8002e18 <HAL_DMA_Init+0x158>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d107      	bne.n	8002d88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d80:	4313      	orrs	r3, r2
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f023 0307 	bic.w	r3, r3, #7
 8002d9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d117      	bne.n	8002de2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00e      	beq.n	8002de2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f9e9 	bl	800319c <DMA_CheckFifoParam>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2240      	movs	r2, #64	; 0x40
 8002dd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002dde:	2301      	movs	r3, #1
 8002de0:	e016      	b.n	8002e10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f9a0 	bl	8003130 <DMA_CalcBaseAndBitshift>
 8002df0:	4603      	mov	r3, r0
 8002df2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df8:	223f      	movs	r2, #63	; 0x3f
 8002dfa:	409a      	lsls	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	f010803f 	.word	0xf010803f

08002e1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e28:	4b92      	ldr	r3, [pc, #584]	; (8003074 <HAL_DMA_IRQHandler+0x258>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a92      	ldr	r2, [pc, #584]	; (8003078 <HAL_DMA_IRQHandler+0x25c>)
 8002e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e32:	0a9b      	lsrs	r3, r3, #10
 8002e34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e46:	2208      	movs	r2, #8
 8002e48:	409a      	lsls	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d01a      	beq.n	8002e88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d013      	beq.n	8002e88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0204 	bic.w	r2, r2, #4
 8002e6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e74:	2208      	movs	r2, #8
 8002e76:	409a      	lsls	r2, r3
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e80:	f043 0201 	orr.w	r2, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	409a      	lsls	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4013      	ands	r3, r2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d012      	beq.n	8002ebe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00b      	beq.n	8002ebe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eaa:	2201      	movs	r2, #1
 8002eac:	409a      	lsls	r2, r3
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb6:	f043 0202 	orr.w	r2, r3, #2
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	409a      	lsls	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d012      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00b      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee0:	2204      	movs	r2, #4
 8002ee2:	409a      	lsls	r2, r3
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eec:	f043 0204 	orr.w	r2, r3, #4
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef8:	2210      	movs	r2, #16
 8002efa:	409a      	lsls	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d043      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d03c      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f16:	2210      	movs	r2, #16
 8002f18:	409a      	lsls	r2, r3
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d018      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d108      	bne.n	8002f4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d024      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	4798      	blx	r3
 8002f4a:	e01f      	b.n	8002f8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d01b      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	4798      	blx	r3
 8002f5c:	e016      	b.n	8002f8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d107      	bne.n	8002f7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0208 	bic.w	r2, r2, #8
 8002f7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f90:	2220      	movs	r2, #32
 8002f92:	409a      	lsls	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4013      	ands	r3, r2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 808e 	beq.w	80030ba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0310 	and.w	r3, r3, #16
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 8086 	beq.w	80030ba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b05      	cmp	r3, #5
 8002fc4:	d136      	bne.n	8003034 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0216 	bic.w	r2, r2, #22
 8002fd4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695a      	ldr	r2, [r3, #20]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fe4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d103      	bne.n	8002ff6 <HAL_DMA_IRQHandler+0x1da>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d007      	beq.n	8003006 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0208 	bic.w	r2, r2, #8
 8003004:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300a:	223f      	movs	r2, #63	; 0x3f
 800300c:	409a      	lsls	r2, r3
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003026:	2b00      	cmp	r3, #0
 8003028:	d07d      	beq.n	8003126 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	4798      	blx	r3
        }
        return;
 8003032:	e078      	b.n	8003126 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d01c      	beq.n	800307c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d108      	bne.n	8003062 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003054:	2b00      	cmp	r3, #0
 8003056:	d030      	beq.n	80030ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	4798      	blx	r3
 8003060:	e02b      	b.n	80030ba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003066:	2b00      	cmp	r3, #0
 8003068:	d027      	beq.n	80030ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	4798      	blx	r3
 8003072:	e022      	b.n	80030ba <HAL_DMA_IRQHandler+0x29e>
 8003074:	200003a0 	.word	0x200003a0
 8003078:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10f      	bne.n	80030aa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0210 	bic.w	r2, r2, #16
 8003098:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d032      	beq.n	8003128 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d022      	beq.n	8003114 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2205      	movs	r2, #5
 80030d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0201 	bic.w	r2, r2, #1
 80030e4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	3301      	adds	r3, #1
 80030ea:	60bb      	str	r3, [r7, #8]
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d307      	bcc.n	8003102 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1f2      	bne.n	80030e6 <HAL_DMA_IRQHandler+0x2ca>
 8003100:	e000      	b.n	8003104 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003102:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	4798      	blx	r3
 8003124:	e000      	b.n	8003128 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003126:	bf00      	nop
    }
  }
}
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop

08003130 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	3b10      	subs	r3, #16
 8003140:	4a14      	ldr	r2, [pc, #80]	; (8003194 <DMA_CalcBaseAndBitshift+0x64>)
 8003142:	fba2 2303 	umull	r2, r3, r2, r3
 8003146:	091b      	lsrs	r3, r3, #4
 8003148:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800314a:	4a13      	ldr	r2, [pc, #76]	; (8003198 <DMA_CalcBaseAndBitshift+0x68>)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4413      	add	r3, r2
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b03      	cmp	r3, #3
 800315c:	d909      	bls.n	8003172 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003166:	f023 0303 	bic.w	r3, r3, #3
 800316a:	1d1a      	adds	r2, r3, #4
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	659a      	str	r2, [r3, #88]	; 0x58
 8003170:	e007      	b.n	8003182 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800317a:	f023 0303 	bic.w	r3, r3, #3
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003186:	4618      	mov	r0, r3
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	aaaaaaab 	.word	0xaaaaaaab
 8003198:	0800edf4 	.word	0x0800edf4

0800319c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d11f      	bne.n	80031f6 <DMA_CheckFifoParam+0x5a>
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d856      	bhi.n	800326a <DMA_CheckFifoParam+0xce>
 80031bc:	a201      	add	r2, pc, #4	; (adr r2, 80031c4 <DMA_CheckFifoParam+0x28>)
 80031be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c2:	bf00      	nop
 80031c4:	080031d5 	.word	0x080031d5
 80031c8:	080031e7 	.word	0x080031e7
 80031cc:	080031d5 	.word	0x080031d5
 80031d0:	0800326b 	.word	0x0800326b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d046      	beq.n	800326e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031e4:	e043      	b.n	800326e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031ee:	d140      	bne.n	8003272 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031f4:	e03d      	b.n	8003272 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031fe:	d121      	bne.n	8003244 <DMA_CheckFifoParam+0xa8>
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2b03      	cmp	r3, #3
 8003204:	d837      	bhi.n	8003276 <DMA_CheckFifoParam+0xda>
 8003206:	a201      	add	r2, pc, #4	; (adr r2, 800320c <DMA_CheckFifoParam+0x70>)
 8003208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320c:	0800321d 	.word	0x0800321d
 8003210:	08003223 	.word	0x08003223
 8003214:	0800321d 	.word	0x0800321d
 8003218:	08003235 	.word	0x08003235
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	73fb      	strb	r3, [r7, #15]
      break;
 8003220:	e030      	b.n	8003284 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003226:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d025      	beq.n	800327a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003232:	e022      	b.n	800327a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003238:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800323c:	d11f      	bne.n	800327e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003242:	e01c      	b.n	800327e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d903      	bls.n	8003252 <DMA_CheckFifoParam+0xb6>
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2b03      	cmp	r3, #3
 800324e:	d003      	beq.n	8003258 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003250:	e018      	b.n	8003284 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	73fb      	strb	r3, [r7, #15]
      break;
 8003256:	e015      	b.n	8003284 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00e      	beq.n	8003282 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	73fb      	strb	r3, [r7, #15]
      break;
 8003268:	e00b      	b.n	8003282 <DMA_CheckFifoParam+0xe6>
      break;
 800326a:	bf00      	nop
 800326c:	e00a      	b.n	8003284 <DMA_CheckFifoParam+0xe8>
      break;
 800326e:	bf00      	nop
 8003270:	e008      	b.n	8003284 <DMA_CheckFifoParam+0xe8>
      break;
 8003272:	bf00      	nop
 8003274:	e006      	b.n	8003284 <DMA_CheckFifoParam+0xe8>
      break;
 8003276:	bf00      	nop
 8003278:	e004      	b.n	8003284 <DMA_CheckFifoParam+0xe8>
      break;
 800327a:	bf00      	nop
 800327c:	e002      	b.n	8003284 <DMA_CheckFifoParam+0xe8>
      break;   
 800327e:	bf00      	nop
 8003280:	e000      	b.n	8003284 <DMA_CheckFifoParam+0xe8>
      break;
 8003282:	bf00      	nop
    }
  } 
  
  return status; 
 8003284:	7bfb      	ldrb	r3, [r7, #15]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop

08003294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003294:	b480      	push	{r7}
 8003296:	b089      	sub	sp, #36	; 0x24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032aa:	2300      	movs	r3, #0
 80032ac:	61fb      	str	r3, [r7, #28]
 80032ae:	e16b      	b.n	8003588 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032b0:	2201      	movs	r2, #1
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4013      	ands	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	f040 815a 	bne.w	8003582 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d005      	beq.n	80032e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d130      	bne.n	8003348 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	2203      	movs	r2, #3
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43db      	mvns	r3, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4013      	ands	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4313      	orrs	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800331c:	2201      	movs	r2, #1
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	091b      	lsrs	r3, r3, #4
 8003332:	f003 0201 	and.w	r2, r3, #1
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4313      	orrs	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	2b03      	cmp	r3, #3
 8003352:	d017      	beq.n	8003384 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	2203      	movs	r2, #3
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	43db      	mvns	r3, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4013      	ands	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 0303 	and.w	r3, r3, #3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d123      	bne.n	80033d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	08da      	lsrs	r2, r3, #3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3208      	adds	r2, #8
 8003398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800339c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	220f      	movs	r2, #15
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	43db      	mvns	r3, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4013      	ands	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	08da      	lsrs	r2, r3, #3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3208      	adds	r2, #8
 80033d2:	69b9      	ldr	r1, [r7, #24]
 80033d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	2203      	movs	r2, #3
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	43db      	mvns	r3, r3
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4013      	ands	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f003 0203 	and.w	r2, r3, #3
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4313      	orrs	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 80b4 	beq.w	8003582 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800341a:	2300      	movs	r3, #0
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	4b60      	ldr	r3, [pc, #384]	; (80035a0 <HAL_GPIO_Init+0x30c>)
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	4a5f      	ldr	r2, [pc, #380]	; (80035a0 <HAL_GPIO_Init+0x30c>)
 8003424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003428:	6453      	str	r3, [r2, #68]	; 0x44
 800342a:	4b5d      	ldr	r3, [pc, #372]	; (80035a0 <HAL_GPIO_Init+0x30c>)
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003436:	4a5b      	ldr	r2, [pc, #364]	; (80035a4 <HAL_GPIO_Init+0x310>)
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	089b      	lsrs	r3, r3, #2
 800343c:	3302      	adds	r3, #2
 800343e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003442:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	220f      	movs	r2, #15
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43db      	mvns	r3, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4013      	ands	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a52      	ldr	r2, [pc, #328]	; (80035a8 <HAL_GPIO_Init+0x314>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d02b      	beq.n	80034ba <HAL_GPIO_Init+0x226>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a51      	ldr	r2, [pc, #324]	; (80035ac <HAL_GPIO_Init+0x318>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d025      	beq.n	80034b6 <HAL_GPIO_Init+0x222>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a50      	ldr	r2, [pc, #320]	; (80035b0 <HAL_GPIO_Init+0x31c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d01f      	beq.n	80034b2 <HAL_GPIO_Init+0x21e>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a4f      	ldr	r2, [pc, #316]	; (80035b4 <HAL_GPIO_Init+0x320>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d019      	beq.n	80034ae <HAL_GPIO_Init+0x21a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a4e      	ldr	r2, [pc, #312]	; (80035b8 <HAL_GPIO_Init+0x324>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d013      	beq.n	80034aa <HAL_GPIO_Init+0x216>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a4d      	ldr	r2, [pc, #308]	; (80035bc <HAL_GPIO_Init+0x328>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d00d      	beq.n	80034a6 <HAL_GPIO_Init+0x212>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a4c      	ldr	r2, [pc, #304]	; (80035c0 <HAL_GPIO_Init+0x32c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d007      	beq.n	80034a2 <HAL_GPIO_Init+0x20e>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a4b      	ldr	r2, [pc, #300]	; (80035c4 <HAL_GPIO_Init+0x330>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d101      	bne.n	800349e <HAL_GPIO_Init+0x20a>
 800349a:	2307      	movs	r3, #7
 800349c:	e00e      	b.n	80034bc <HAL_GPIO_Init+0x228>
 800349e:	2308      	movs	r3, #8
 80034a0:	e00c      	b.n	80034bc <HAL_GPIO_Init+0x228>
 80034a2:	2306      	movs	r3, #6
 80034a4:	e00a      	b.n	80034bc <HAL_GPIO_Init+0x228>
 80034a6:	2305      	movs	r3, #5
 80034a8:	e008      	b.n	80034bc <HAL_GPIO_Init+0x228>
 80034aa:	2304      	movs	r3, #4
 80034ac:	e006      	b.n	80034bc <HAL_GPIO_Init+0x228>
 80034ae:	2303      	movs	r3, #3
 80034b0:	e004      	b.n	80034bc <HAL_GPIO_Init+0x228>
 80034b2:	2302      	movs	r3, #2
 80034b4:	e002      	b.n	80034bc <HAL_GPIO_Init+0x228>
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <HAL_GPIO_Init+0x228>
 80034ba:	2300      	movs	r3, #0
 80034bc:	69fa      	ldr	r2, [r7, #28]
 80034be:	f002 0203 	and.w	r2, r2, #3
 80034c2:	0092      	lsls	r2, r2, #2
 80034c4:	4093      	lsls	r3, r2
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034cc:	4935      	ldr	r1, [pc, #212]	; (80035a4 <HAL_GPIO_Init+0x310>)
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	089b      	lsrs	r3, r3, #2
 80034d2:	3302      	adds	r3, #2
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034da:	4b3b      	ldr	r3, [pc, #236]	; (80035c8 <HAL_GPIO_Init+0x334>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	43db      	mvns	r3, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4013      	ands	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034fe:	4a32      	ldr	r2, [pc, #200]	; (80035c8 <HAL_GPIO_Init+0x334>)
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003504:	4b30      	ldr	r3, [pc, #192]	; (80035c8 <HAL_GPIO_Init+0x334>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	43db      	mvns	r3, r3
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4013      	ands	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003528:	4a27      	ldr	r2, [pc, #156]	; (80035c8 <HAL_GPIO_Init+0x334>)
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800352e:	4b26      	ldr	r3, [pc, #152]	; (80035c8 <HAL_GPIO_Init+0x334>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	43db      	mvns	r3, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4013      	ands	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	4313      	orrs	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003552:	4a1d      	ldr	r2, [pc, #116]	; (80035c8 <HAL_GPIO_Init+0x334>)
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003558:	4b1b      	ldr	r3, [pc, #108]	; (80035c8 <HAL_GPIO_Init+0x334>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	43db      	mvns	r3, r3
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4013      	ands	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800357c:	4a12      	ldr	r2, [pc, #72]	; (80035c8 <HAL_GPIO_Init+0x334>)
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	3301      	adds	r3, #1
 8003586:	61fb      	str	r3, [r7, #28]
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	2b0f      	cmp	r3, #15
 800358c:	f67f ae90 	bls.w	80032b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003590:	bf00      	nop
 8003592:	bf00      	nop
 8003594:	3724      	adds	r7, #36	; 0x24
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	40023800 	.word	0x40023800
 80035a4:	40013800 	.word	0x40013800
 80035a8:	40020000 	.word	0x40020000
 80035ac:	40020400 	.word	0x40020400
 80035b0:	40020800 	.word	0x40020800
 80035b4:	40020c00 	.word	0x40020c00
 80035b8:	40021000 	.word	0x40021000
 80035bc:	40021400 	.word	0x40021400
 80035c0:	40021800 	.word	0x40021800
 80035c4:	40021c00 	.word	0x40021c00
 80035c8:	40013c00 	.word	0x40013c00

080035cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	807b      	strh	r3, [r7, #2]
 80035d8:	4613      	mov	r3, r2
 80035da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035dc:	787b      	ldrb	r3, [r7, #1]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035e2:	887a      	ldrh	r2, [r7, #2]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035e8:	e003      	b.n	80035f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035ea:	887b      	ldrh	r3, [r7, #2]
 80035ec:	041a      	lsls	r2, r3, #16
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	619a      	str	r2, [r3, #24]
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80035fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003600:	b08f      	sub	sp, #60	; 0x3c
 8003602:	af0a      	add	r7, sp, #40	; 0x28
 8003604:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e054      	b.n	80036ba <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d106      	bne.n	8003630 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f005 fdfa 	bl	8009224 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2203      	movs	r2, #3
 8003634:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003640:	2b00      	cmp	r3, #0
 8003642:	d102      	bne.n	800364a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f002 ff50 	bl	80064f4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	603b      	str	r3, [r7, #0]
 800365a:	687e      	ldr	r6, [r7, #4]
 800365c:	466d      	mov	r5, sp
 800365e:	f106 0410 	add.w	r4, r6, #16
 8003662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003664:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003666:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003668:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800366a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800366e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003672:	1d33      	adds	r3, r6, #4
 8003674:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003676:	6838      	ldr	r0, [r7, #0]
 8003678:	f002 feca 	bl	8006410 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2101      	movs	r1, #1
 8003682:	4618      	mov	r0, r3
 8003684:	f002 ff47 	bl	8006516 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	603b      	str	r3, [r7, #0]
 800368e:	687e      	ldr	r6, [r7, #4]
 8003690:	466d      	mov	r5, sp
 8003692:	f106 0410 	add.w	r4, r6, #16
 8003696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800369a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800369c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800369e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80036a6:	1d33      	adds	r3, r6, #4
 80036a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036aa:	6838      	ldr	r0, [r7, #0]
 80036ac:	f003 f8ae 	bl	800680c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036c2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80036c2:	b590      	push	{r4, r7, lr}
 80036c4:	b089      	sub	sp, #36	; 0x24
 80036c6:	af04      	add	r7, sp, #16
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	4608      	mov	r0, r1
 80036cc:	4611      	mov	r1, r2
 80036ce:	461a      	mov	r2, r3
 80036d0:	4603      	mov	r3, r0
 80036d2:	70fb      	strb	r3, [r7, #3]
 80036d4:	460b      	mov	r3, r1
 80036d6:	70bb      	strb	r3, [r7, #2]
 80036d8:	4613      	mov	r3, r2
 80036da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <HAL_HCD_HC_Init+0x28>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e076      	b.n	80037d8 <HAL_HCD_HC_Init+0x116>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80036f2:	78fb      	ldrb	r3, [r7, #3]
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	212c      	movs	r1, #44	; 0x2c
 80036f8:	fb01 f303 	mul.w	r3, r1, r3
 80036fc:	4413      	add	r3, r2
 80036fe:	333d      	adds	r3, #61	; 0x3d
 8003700:	2200      	movs	r2, #0
 8003702:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003704:	78fb      	ldrb	r3, [r7, #3]
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	212c      	movs	r1, #44	; 0x2c
 800370a:	fb01 f303 	mul.w	r3, r1, r3
 800370e:	4413      	add	r3, r2
 8003710:	3338      	adds	r3, #56	; 0x38
 8003712:	787a      	ldrb	r2, [r7, #1]
 8003714:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003716:	78fb      	ldrb	r3, [r7, #3]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	212c      	movs	r1, #44	; 0x2c
 800371c:	fb01 f303 	mul.w	r3, r1, r3
 8003720:	4413      	add	r3, r2
 8003722:	3340      	adds	r3, #64	; 0x40
 8003724:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003726:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	212c      	movs	r1, #44	; 0x2c
 800372e:	fb01 f303 	mul.w	r3, r1, r3
 8003732:	4413      	add	r3, r2
 8003734:	3339      	adds	r3, #57	; 0x39
 8003736:	78fa      	ldrb	r2, [r7, #3]
 8003738:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800373a:	78fb      	ldrb	r3, [r7, #3]
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	212c      	movs	r1, #44	; 0x2c
 8003740:	fb01 f303 	mul.w	r3, r1, r3
 8003744:	4413      	add	r3, r2
 8003746:	333f      	adds	r3, #63	; 0x3f
 8003748:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800374c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800374e:	78fb      	ldrb	r3, [r7, #3]
 8003750:	78ba      	ldrb	r2, [r7, #2]
 8003752:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003756:	b2d0      	uxtb	r0, r2
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	212c      	movs	r1, #44	; 0x2c
 800375c:	fb01 f303 	mul.w	r3, r1, r3
 8003760:	4413      	add	r3, r2
 8003762:	333a      	adds	r3, #58	; 0x3a
 8003764:	4602      	mov	r2, r0
 8003766:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003768:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800376c:	2b00      	cmp	r3, #0
 800376e:	da09      	bge.n	8003784 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003770:	78fb      	ldrb	r3, [r7, #3]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	212c      	movs	r1, #44	; 0x2c
 8003776:	fb01 f303 	mul.w	r3, r1, r3
 800377a:	4413      	add	r3, r2
 800377c:	333b      	adds	r3, #59	; 0x3b
 800377e:	2201      	movs	r2, #1
 8003780:	701a      	strb	r2, [r3, #0]
 8003782:	e008      	b.n	8003796 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003784:	78fb      	ldrb	r3, [r7, #3]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	212c      	movs	r1, #44	; 0x2c
 800378a:	fb01 f303 	mul.w	r3, r1, r3
 800378e:	4413      	add	r3, r2
 8003790:	333b      	adds	r3, #59	; 0x3b
 8003792:	2200      	movs	r2, #0
 8003794:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003796:	78fb      	ldrb	r3, [r7, #3]
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	212c      	movs	r1, #44	; 0x2c
 800379c:	fb01 f303 	mul.w	r3, r1, r3
 80037a0:	4413      	add	r3, r2
 80037a2:	333c      	adds	r3, #60	; 0x3c
 80037a4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80037a8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6818      	ldr	r0, [r3, #0]
 80037ae:	787c      	ldrb	r4, [r7, #1]
 80037b0:	78ba      	ldrb	r2, [r7, #2]
 80037b2:	78f9      	ldrb	r1, [r7, #3]
 80037b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80037b6:	9302      	str	r3, [sp, #8]
 80037b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80037bc:	9301      	str	r3, [sp, #4]
 80037be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	4623      	mov	r3, r4
 80037c6:	f003 f99b 	bl	8006b00 <USB_HC_Init>
 80037ca:	4603      	mov	r3, r0
 80037cc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd90      	pop	{r4, r7, pc}

080037e0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80037ec:	2300      	movs	r3, #0
 80037ee:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <HAL_HCD_HC_Halt+0x1e>
 80037fa:	2302      	movs	r3, #2
 80037fc:	e00f      	b.n	800381e <HAL_HCD_HC_Halt+0x3e>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	78fa      	ldrb	r2, [r7, #3]
 800380c:	4611      	mov	r1, r2
 800380e:	4618      	mov	r0, r3
 8003810:	f003 fbd7 	bl	8006fc2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800381c:	7bfb      	ldrb	r3, [r7, #15]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
	...

08003828 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	4608      	mov	r0, r1
 8003832:	4611      	mov	r1, r2
 8003834:	461a      	mov	r2, r3
 8003836:	4603      	mov	r3, r0
 8003838:	70fb      	strb	r3, [r7, #3]
 800383a:	460b      	mov	r3, r1
 800383c:	70bb      	strb	r3, [r7, #2]
 800383e:	4613      	mov	r3, r2
 8003840:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003842:	78fb      	ldrb	r3, [r7, #3]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	212c      	movs	r1, #44	; 0x2c
 8003848:	fb01 f303 	mul.w	r3, r1, r3
 800384c:	4413      	add	r3, r2
 800384e:	333b      	adds	r3, #59	; 0x3b
 8003850:	78ba      	ldrb	r2, [r7, #2]
 8003852:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003854:	78fb      	ldrb	r3, [r7, #3]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	212c      	movs	r1, #44	; 0x2c
 800385a:	fb01 f303 	mul.w	r3, r1, r3
 800385e:	4413      	add	r3, r2
 8003860:	333f      	adds	r3, #63	; 0x3f
 8003862:	787a      	ldrb	r2, [r7, #1]
 8003864:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003866:	7c3b      	ldrb	r3, [r7, #16]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d112      	bne.n	8003892 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800386c:	78fb      	ldrb	r3, [r7, #3]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	212c      	movs	r1, #44	; 0x2c
 8003872:	fb01 f303 	mul.w	r3, r1, r3
 8003876:	4413      	add	r3, r2
 8003878:	3342      	adds	r3, #66	; 0x42
 800387a:	2203      	movs	r2, #3
 800387c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800387e:	78fb      	ldrb	r3, [r7, #3]
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	212c      	movs	r1, #44	; 0x2c
 8003884:	fb01 f303 	mul.w	r3, r1, r3
 8003888:	4413      	add	r3, r2
 800388a:	333d      	adds	r3, #61	; 0x3d
 800388c:	7f3a      	ldrb	r2, [r7, #28]
 800388e:	701a      	strb	r2, [r3, #0]
 8003890:	e008      	b.n	80038a4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003892:	78fb      	ldrb	r3, [r7, #3]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	212c      	movs	r1, #44	; 0x2c
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	4413      	add	r3, r2
 800389e:	3342      	adds	r3, #66	; 0x42
 80038a0:	2202      	movs	r2, #2
 80038a2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80038a4:	787b      	ldrb	r3, [r7, #1]
 80038a6:	2b03      	cmp	r3, #3
 80038a8:	f200 80c6 	bhi.w	8003a38 <HAL_HCD_HC_SubmitRequest+0x210>
 80038ac:	a201      	add	r2, pc, #4	; (adr r2, 80038b4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80038ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b2:	bf00      	nop
 80038b4:	080038c5 	.word	0x080038c5
 80038b8:	08003a25 	.word	0x08003a25
 80038bc:	08003929 	.word	0x08003929
 80038c0:	080039a7 	.word	0x080039a7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80038c4:	7c3b      	ldrb	r3, [r7, #16]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	f040 80b8 	bne.w	8003a3c <HAL_HCD_HC_SubmitRequest+0x214>
 80038cc:	78bb      	ldrb	r3, [r7, #2]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f040 80b4 	bne.w	8003a3c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80038d4:	8b3b      	ldrh	r3, [r7, #24]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d108      	bne.n	80038ec <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80038da:	78fb      	ldrb	r3, [r7, #3]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	212c      	movs	r1, #44	; 0x2c
 80038e0:	fb01 f303 	mul.w	r3, r1, r3
 80038e4:	4413      	add	r3, r2
 80038e6:	3355      	adds	r3, #85	; 0x55
 80038e8:	2201      	movs	r2, #1
 80038ea:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80038ec:	78fb      	ldrb	r3, [r7, #3]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	212c      	movs	r1, #44	; 0x2c
 80038f2:	fb01 f303 	mul.w	r3, r1, r3
 80038f6:	4413      	add	r3, r2
 80038f8:	3355      	adds	r3, #85	; 0x55
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d109      	bne.n	8003914 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	212c      	movs	r1, #44	; 0x2c
 8003906:	fb01 f303 	mul.w	r3, r1, r3
 800390a:	4413      	add	r3, r2
 800390c:	3342      	adds	r3, #66	; 0x42
 800390e:	2200      	movs	r2, #0
 8003910:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003912:	e093      	b.n	8003a3c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003914:	78fb      	ldrb	r3, [r7, #3]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	212c      	movs	r1, #44	; 0x2c
 800391a:	fb01 f303 	mul.w	r3, r1, r3
 800391e:	4413      	add	r3, r2
 8003920:	3342      	adds	r3, #66	; 0x42
 8003922:	2202      	movs	r2, #2
 8003924:	701a      	strb	r2, [r3, #0]
      break;
 8003926:	e089      	b.n	8003a3c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003928:	78bb      	ldrb	r3, [r7, #2]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d11d      	bne.n	800396a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800392e:	78fb      	ldrb	r3, [r7, #3]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	212c      	movs	r1, #44	; 0x2c
 8003934:	fb01 f303 	mul.w	r3, r1, r3
 8003938:	4413      	add	r3, r2
 800393a:	3355      	adds	r3, #85	; 0x55
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d109      	bne.n	8003956 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003942:	78fb      	ldrb	r3, [r7, #3]
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	212c      	movs	r1, #44	; 0x2c
 8003948:	fb01 f303 	mul.w	r3, r1, r3
 800394c:	4413      	add	r3, r2
 800394e:	3342      	adds	r3, #66	; 0x42
 8003950:	2200      	movs	r2, #0
 8003952:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003954:	e073      	b.n	8003a3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003956:	78fb      	ldrb	r3, [r7, #3]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	212c      	movs	r1, #44	; 0x2c
 800395c:	fb01 f303 	mul.w	r3, r1, r3
 8003960:	4413      	add	r3, r2
 8003962:	3342      	adds	r3, #66	; 0x42
 8003964:	2202      	movs	r2, #2
 8003966:	701a      	strb	r2, [r3, #0]
      break;
 8003968:	e069      	b.n	8003a3e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800396a:	78fb      	ldrb	r3, [r7, #3]
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	212c      	movs	r1, #44	; 0x2c
 8003970:	fb01 f303 	mul.w	r3, r1, r3
 8003974:	4413      	add	r3, r2
 8003976:	3354      	adds	r3, #84	; 0x54
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d109      	bne.n	8003992 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800397e:	78fb      	ldrb	r3, [r7, #3]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	212c      	movs	r1, #44	; 0x2c
 8003984:	fb01 f303 	mul.w	r3, r1, r3
 8003988:	4413      	add	r3, r2
 800398a:	3342      	adds	r3, #66	; 0x42
 800398c:	2200      	movs	r2, #0
 800398e:	701a      	strb	r2, [r3, #0]
      break;
 8003990:	e055      	b.n	8003a3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003992:	78fb      	ldrb	r3, [r7, #3]
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	212c      	movs	r1, #44	; 0x2c
 8003998:	fb01 f303 	mul.w	r3, r1, r3
 800399c:	4413      	add	r3, r2
 800399e:	3342      	adds	r3, #66	; 0x42
 80039a0:	2202      	movs	r2, #2
 80039a2:	701a      	strb	r2, [r3, #0]
      break;
 80039a4:	e04b      	b.n	8003a3e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80039a6:	78bb      	ldrb	r3, [r7, #2]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d11d      	bne.n	80039e8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80039ac:	78fb      	ldrb	r3, [r7, #3]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	212c      	movs	r1, #44	; 0x2c
 80039b2:	fb01 f303 	mul.w	r3, r1, r3
 80039b6:	4413      	add	r3, r2
 80039b8:	3355      	adds	r3, #85	; 0x55
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d109      	bne.n	80039d4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039c0:	78fb      	ldrb	r3, [r7, #3]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	212c      	movs	r1, #44	; 0x2c
 80039c6:	fb01 f303 	mul.w	r3, r1, r3
 80039ca:	4413      	add	r3, r2
 80039cc:	3342      	adds	r3, #66	; 0x42
 80039ce:	2200      	movs	r2, #0
 80039d0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80039d2:	e034      	b.n	8003a3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039d4:	78fb      	ldrb	r3, [r7, #3]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	212c      	movs	r1, #44	; 0x2c
 80039da:	fb01 f303 	mul.w	r3, r1, r3
 80039de:	4413      	add	r3, r2
 80039e0:	3342      	adds	r3, #66	; 0x42
 80039e2:	2202      	movs	r2, #2
 80039e4:	701a      	strb	r2, [r3, #0]
      break;
 80039e6:	e02a      	b.n	8003a3e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80039e8:	78fb      	ldrb	r3, [r7, #3]
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	212c      	movs	r1, #44	; 0x2c
 80039ee:	fb01 f303 	mul.w	r3, r1, r3
 80039f2:	4413      	add	r3, r2
 80039f4:	3354      	adds	r3, #84	; 0x54
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d109      	bne.n	8003a10 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039fc:	78fb      	ldrb	r3, [r7, #3]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	212c      	movs	r1, #44	; 0x2c
 8003a02:	fb01 f303 	mul.w	r3, r1, r3
 8003a06:	4413      	add	r3, r2
 8003a08:	3342      	adds	r3, #66	; 0x42
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	701a      	strb	r2, [r3, #0]
      break;
 8003a0e:	e016      	b.n	8003a3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a10:	78fb      	ldrb	r3, [r7, #3]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	212c      	movs	r1, #44	; 0x2c
 8003a16:	fb01 f303 	mul.w	r3, r1, r3
 8003a1a:	4413      	add	r3, r2
 8003a1c:	3342      	adds	r3, #66	; 0x42
 8003a1e:	2202      	movs	r2, #2
 8003a20:	701a      	strb	r2, [r3, #0]
      break;
 8003a22:	e00c      	b.n	8003a3e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	212c      	movs	r1, #44	; 0x2c
 8003a2a:	fb01 f303 	mul.w	r3, r1, r3
 8003a2e:	4413      	add	r3, r2
 8003a30:	3342      	adds	r3, #66	; 0x42
 8003a32:	2200      	movs	r2, #0
 8003a34:	701a      	strb	r2, [r3, #0]
      break;
 8003a36:	e002      	b.n	8003a3e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003a38:	bf00      	nop
 8003a3a:	e000      	b.n	8003a3e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003a3c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003a3e:	78fb      	ldrb	r3, [r7, #3]
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	212c      	movs	r1, #44	; 0x2c
 8003a44:	fb01 f303 	mul.w	r3, r1, r3
 8003a48:	4413      	add	r3, r2
 8003a4a:	3344      	adds	r3, #68	; 0x44
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003a50:	78fb      	ldrb	r3, [r7, #3]
 8003a52:	8b3a      	ldrh	r2, [r7, #24]
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	202c      	movs	r0, #44	; 0x2c
 8003a58:	fb00 f303 	mul.w	r3, r0, r3
 8003a5c:	440b      	add	r3, r1
 8003a5e:	334c      	adds	r3, #76	; 0x4c
 8003a60:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003a62:	78fb      	ldrb	r3, [r7, #3]
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	212c      	movs	r1, #44	; 0x2c
 8003a68:	fb01 f303 	mul.w	r3, r1, r3
 8003a6c:	4413      	add	r3, r2
 8003a6e:	3360      	adds	r3, #96	; 0x60
 8003a70:	2200      	movs	r2, #0
 8003a72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	212c      	movs	r1, #44	; 0x2c
 8003a7a:	fb01 f303 	mul.w	r3, r1, r3
 8003a7e:	4413      	add	r3, r2
 8003a80:	3350      	adds	r3, #80	; 0x50
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003a86:	78fb      	ldrb	r3, [r7, #3]
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	212c      	movs	r1, #44	; 0x2c
 8003a8c:	fb01 f303 	mul.w	r3, r1, r3
 8003a90:	4413      	add	r3, r2
 8003a92:	3339      	adds	r3, #57	; 0x39
 8003a94:	78fa      	ldrb	r2, [r7, #3]
 8003a96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	212c      	movs	r1, #44	; 0x2c
 8003a9e:	fb01 f303 	mul.w	r3, r1, r3
 8003aa2:	4413      	add	r3, r2
 8003aa4:	3361      	adds	r3, #97	; 0x61
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	78fb      	ldrb	r3, [r7, #3]
 8003ab0:	222c      	movs	r2, #44	; 0x2c
 8003ab2:	fb02 f303 	mul.w	r3, r2, r3
 8003ab6:	3338      	adds	r3, #56	; 0x38
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	18d1      	adds	r1, r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	f003 f92a 	bl	8006d1c <USB_HC_StartXfer>
 8003ac8:	4603      	mov	r3, r0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop

08003ad4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f002 fe4d 	bl	800678a <USB_GetMode>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	f040 80f6 	bne.w	8003ce4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f002 fe31 	bl	8006764 <USB_ReadInterrupts>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 80ec 	beq.w	8003ce2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f002 fe28 	bl	8006764 <USB_ReadInterrupts>
 8003b14:	4603      	mov	r3, r0
 8003b16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b1e:	d104      	bne.n	8003b2a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003b28:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f002 fe18 	bl	8006764 <USB_ReadInterrupts>
 8003b34:	4603      	mov	r3, r0
 8003b36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b3e:	d104      	bne.n	8003b4a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003b48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f002 fe08 	bl	8006764 <USB_ReadInterrupts>
 8003b54:	4603      	mov	r3, r0
 8003b56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b5e:	d104      	bne.n	8003b6a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003b68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f002 fdf8 	bl	8006764 <USB_ReadInterrupts>
 8003b74:	4603      	mov	r3, r0
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d103      	bne.n	8003b86 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2202      	movs	r2, #2
 8003b84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f002 fdea 	bl	8006764 <USB_ReadInterrupts>
 8003b90:	4603      	mov	r3, r0
 8003b92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b9a:	d11c      	bne.n	8003bd6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003ba4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10f      	bne.n	8003bd6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003bb6:	2110      	movs	r1, #16
 8003bb8:	6938      	ldr	r0, [r7, #16]
 8003bba:	f002 fcf9 	bl	80065b0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003bbe:	6938      	ldr	r0, [r7, #16]
 8003bc0:	f002 fd1a 	bl	80065f8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2101      	movs	r1, #1
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f002 fed2 	bl	8006974 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f005 fba5 	bl	8009320 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f002 fdc2 	bl	8006764 <USB_ReadInterrupts>
 8003be0:	4603      	mov	r3, r0
 8003be2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003be6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bea:	d102      	bne.n	8003bf2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f001 fa03 	bl	8004ff8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f002 fdb4 	bl	8006764 <USB_ReadInterrupts>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d106      	bne.n	8003c14 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f005 fb6e 	bl	80092e8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2208      	movs	r2, #8
 8003c12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f002 fda3 	bl	8006764 <USB_ReadInterrupts>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	f003 0310 	and.w	r3, r3, #16
 8003c24:	2b10      	cmp	r3, #16
 8003c26:	d101      	bne.n	8003c2c <HAL_HCD_IRQHandler+0x158>
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <HAL_HCD_IRQHandler+0x15a>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d012      	beq.n	8003c58 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	699a      	ldr	r2, [r3, #24]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0210 	bic.w	r2, r2, #16
 8003c40:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f001 f906 	bl	8004e54 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	699a      	ldr	r2, [r3, #24]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0210 	orr.w	r2, r2, #16
 8003c56:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f002 fd81 	bl	8006764 <USB_ReadInterrupts>
 8003c62:	4603      	mov	r3, r0
 8003c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c6c:	d13a      	bne.n	8003ce4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f003 f994 	bl	8006fa0 <USB_HC_ReadInterrupt>
 8003c78:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]
 8003c7e:	e025      	b.n	8003ccc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	fa22 f303 	lsr.w	r3, r2, r3
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d018      	beq.n	8003cc6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003caa:	d106      	bne.n	8003cba <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f8ab 	bl	8003e0e <HCD_HC_IN_IRQHandler>
 8003cb8:	e005      	b.n	8003cc6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 fcc6 	bl	8004652 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d3d4      	bcc.n	8003c80 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cde:	615a      	str	r2, [r3, #20]
 8003ce0:	e000      	b.n	8003ce4 <HAL_HCD_IRQHandler+0x210>
      return;
 8003ce2:	bf00      	nop
    }
  }
}
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_HCD_Start+0x16>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e013      	b.n	8003d28 <HAL_HCD_Start+0x3e>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f002 fe94 	bl	8006a3c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f002 fbda 	bl	80064d2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d101      	bne.n	8003d46 <HAL_HCD_Stop+0x16>
 8003d42:	2302      	movs	r3, #2
 8003d44:	e00d      	b.n	8003d62 <HAL_HCD_Stop+0x32>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f003 fa8e 	bl	8007274 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f002 fe36 	bl	80069e8 <USB_ResetPort>
 8003d7c:	4603      	mov	r3, r0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	460b      	mov	r3, r1
 8003d90:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003d92:	78fb      	ldrb	r3, [r7, #3]
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	212c      	movs	r1, #44	; 0x2c
 8003d98:	fb01 f303 	mul.w	r3, r1, r3
 8003d9c:	4413      	add	r3, r2
 8003d9e:	3360      	adds	r3, #96	; 0x60
 8003da0:	781b      	ldrb	r3, [r3, #0]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	460b      	mov	r3, r1
 8003db8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003dba:	78fb      	ldrb	r3, [r7, #3]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	212c      	movs	r1, #44	; 0x2c
 8003dc0:	fb01 f303 	mul.w	r3, r1, r3
 8003dc4:	4413      	add	r3, r2
 8003dc6:	3350      	adds	r3, #80	; 0x50
 8003dc8:	681b      	ldr	r3, [r3, #0]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b082      	sub	sp, #8
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f002 fe7a 	bl	8006adc <USB_GetCurrentFrame>
 8003de8:	4603      	mov	r3, r0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b082      	sub	sp, #8
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f002 fe55 	bl	8006aae <USB_GetHostSpeed>
 8003e04:	4603      	mov	r3, r0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b086      	sub	sp, #24
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
 8003e16:	460b      	mov	r3, r1
 8003e18:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003e24:	78fb      	ldrb	r3, [r7, #3]
 8003e26:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d119      	bne.n	8003e72 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	015a      	lsls	r2, r3, #5
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	2304      	movs	r3, #4
 8003e4e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	0151      	lsls	r1, r2, #5
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	440a      	add	r2, r1
 8003e66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e6a:	f043 0302 	orr.w	r3, r3, #2
 8003e6e:	60d3      	str	r3, [r2, #12]
 8003e70:	e101      	b.n	8004076 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	015a      	lsls	r2, r3, #5
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e88:	d12b      	bne.n	8003ee2 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e96:	461a      	mov	r2, r3
 8003e98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	212c      	movs	r1, #44	; 0x2c
 8003ea4:	fb01 f303 	mul.w	r3, r1, r3
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3361      	adds	r3, #97	; 0x61
 8003eac:	2207      	movs	r2, #7
 8003eae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	0151      	lsls	r1, r2, #5
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	440a      	add	r2, r1
 8003ec6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003eca:	f043 0302 	orr.w	r3, r3, #2
 8003ece:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	4611      	mov	r1, r2
 8003eda:	4618      	mov	r0, r3
 8003edc:	f003 f871 	bl	8006fc2 <USB_HC_Halt>
 8003ee0:	e0c9      	b.n	8004076 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 0320 	and.w	r3, r3, #32
 8003ef4:	2b20      	cmp	r3, #32
 8003ef6:	d109      	bne.n	8003f0c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f04:	461a      	mov	r2, r3
 8003f06:	2320      	movs	r3, #32
 8003f08:	6093      	str	r3, [r2, #8]
 8003f0a:	e0b4      	b.n	8004076 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d133      	bne.n	8003f8a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	015a      	lsls	r2, r3, #5
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	0151      	lsls	r1, r2, #5
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	440a      	add	r2, r1
 8003f38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f3c:	f043 0302 	orr.w	r3, r3, #2
 8003f40:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	212c      	movs	r1, #44	; 0x2c
 8003f48:	fb01 f303 	mul.w	r3, r1, r3
 8003f4c:	4413      	add	r3, r2
 8003f4e:	3361      	adds	r3, #97	; 0x61
 8003f50:	2205      	movs	r2, #5
 8003f52:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f60:	461a      	mov	r2, r3
 8003f62:	2310      	movs	r3, #16
 8003f64:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	015a      	lsls	r2, r3, #5
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f72:	461a      	mov	r2, r3
 8003f74:	2308      	movs	r3, #8
 8003f76:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	4611      	mov	r1, r2
 8003f82:	4618      	mov	r0, r3
 8003f84:	f003 f81d 	bl	8006fc2 <USB_HC_Halt>
 8003f88:	e075      	b.n	8004076 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	015a      	lsls	r2, r3, #5
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa0:	d134      	bne.n	800400c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	015a      	lsls	r2, r3, #5
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	4413      	add	r3, r2
 8003faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	0151      	lsls	r1, r2, #5
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	440a      	add	r2, r1
 8003fb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fbc:	f043 0302 	orr.w	r3, r3, #2
 8003fc0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	212c      	movs	r1, #44	; 0x2c
 8003fc8:	fb01 f303 	mul.w	r3, r1, r3
 8003fcc:	4413      	add	r3, r2
 8003fce:	3361      	adds	r3, #97	; 0x61
 8003fd0:	2208      	movs	r2, #8
 8003fd2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	2310      	movs	r3, #16
 8003fe4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	015a      	lsls	r2, r3, #5
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	4413      	add	r3, r2
 8003fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ff8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	b2d2      	uxtb	r2, r2
 8004002:	4611      	mov	r1, r2
 8004004:	4618      	mov	r0, r3
 8004006:	f002 ffdc 	bl	8006fc2 <USB_HC_Halt>
 800400a:	e034      	b.n	8004076 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	4413      	add	r3, r2
 8004014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401e:	2b80      	cmp	r3, #128	; 0x80
 8004020:	d129      	bne.n	8004076 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	4413      	add	r3, r2
 800402a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	0151      	lsls	r1, r2, #5
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	440a      	add	r2, r1
 8004038:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800403c:	f043 0302 	orr.w	r3, r3, #2
 8004040:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	212c      	movs	r1, #44	; 0x2c
 8004048:	fb01 f303 	mul.w	r3, r1, r3
 800404c:	4413      	add	r3, r2
 800404e:	3361      	adds	r3, #97	; 0x61
 8004050:	2206      	movs	r2, #6
 8004052:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	b2d2      	uxtb	r2, r2
 800405c:	4611      	mov	r1, r2
 800405e:	4618      	mov	r0, r3
 8004060:	f002 ffaf 	bl	8006fc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	4413      	add	r3, r2
 800406c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004070:	461a      	mov	r2, r3
 8004072:	2380      	movs	r3, #128	; 0x80
 8004074:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	015a      	lsls	r2, r3, #5
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	4413      	add	r3, r2
 800407e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800408c:	d122      	bne.n	80040d4 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	4413      	add	r3, r2
 8004096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	0151      	lsls	r1, r2, #5
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	440a      	add	r2, r1
 80040a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040a8:	f043 0302 	orr.w	r3, r3, #2
 80040ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	b2d2      	uxtb	r2, r2
 80040b6:	4611      	mov	r1, r2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f002 ff82 	bl	8006fc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ca:	461a      	mov	r2, r3
 80040cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040d0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80040d2:	e2ba      	b.n	800464a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	f040 811b 	bne.w	8004322 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d019      	beq.n	8004128 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	212c      	movs	r1, #44	; 0x2c
 80040fa:	fb01 f303 	mul.w	r3, r1, r3
 80040fe:	4413      	add	r3, r2
 8004100:	3348      	adds	r3, #72	; 0x48
 8004102:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	0159      	lsls	r1, r3, #5
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	440b      	add	r3, r1
 800410c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004116:	1ad2      	subs	r2, r2, r3
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	202c      	movs	r0, #44	; 0x2c
 800411e:	fb00 f303 	mul.w	r3, r0, r3
 8004122:	440b      	add	r3, r1
 8004124:	3350      	adds	r3, #80	; 0x50
 8004126:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	212c      	movs	r1, #44	; 0x2c
 800412e:	fb01 f303 	mul.w	r3, r1, r3
 8004132:	4413      	add	r3, r2
 8004134:	3361      	adds	r3, #97	; 0x61
 8004136:	2201      	movs	r2, #1
 8004138:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	212c      	movs	r1, #44	; 0x2c
 8004140:	fb01 f303 	mul.w	r3, r1, r3
 8004144:	4413      	add	r3, r2
 8004146:	335c      	adds	r3, #92	; 0x5c
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	4413      	add	r3, r2
 8004154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004158:	461a      	mov	r2, r3
 800415a:	2301      	movs	r3, #1
 800415c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	212c      	movs	r1, #44	; 0x2c
 8004164:	fb01 f303 	mul.w	r3, r1, r3
 8004168:	4413      	add	r3, r2
 800416a:	333f      	adds	r3, #63	; 0x3f
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d009      	beq.n	8004186 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	212c      	movs	r1, #44	; 0x2c
 8004178:	fb01 f303 	mul.w	r3, r1, r3
 800417c:	4413      	add	r3, r2
 800417e:	333f      	adds	r3, #63	; 0x3f
 8004180:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004182:	2b02      	cmp	r3, #2
 8004184:	d121      	bne.n	80041ca <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	4413      	add	r3, r2
 800418e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	0151      	lsls	r1, r2, #5
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	440a      	add	r2, r1
 800419c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041a0:	f043 0302 	orr.w	r3, r3, #2
 80041a4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	b2d2      	uxtb	r2, r2
 80041ae:	4611      	mov	r1, r2
 80041b0:	4618      	mov	r0, r3
 80041b2:	f002 ff06 	bl	8006fc2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c2:	461a      	mov	r2, r3
 80041c4:	2310      	movs	r3, #16
 80041c6:	6093      	str	r3, [r2, #8]
 80041c8:	e066      	b.n	8004298 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	212c      	movs	r1, #44	; 0x2c
 80041d0:	fb01 f303 	mul.w	r3, r1, r3
 80041d4:	4413      	add	r3, r2
 80041d6:	333f      	adds	r3, #63	; 0x3f
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d127      	bne.n	800422e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	0151      	lsls	r1, r2, #5
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	440a      	add	r2, r1
 80041f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041fc:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	212c      	movs	r1, #44	; 0x2c
 8004204:	fb01 f303 	mul.w	r3, r1, r3
 8004208:	4413      	add	r3, r2
 800420a:	3360      	adds	r3, #96	; 0x60
 800420c:	2201      	movs	r2, #1
 800420e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	b2d9      	uxtb	r1, r3
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	202c      	movs	r0, #44	; 0x2c
 800421a:	fb00 f303 	mul.w	r3, r0, r3
 800421e:	4413      	add	r3, r2
 8004220:	3360      	adds	r3, #96	; 0x60
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f005 f888 	bl	800933c <HAL_HCD_HC_NotifyURBChange_Callback>
 800422c:	e034      	b.n	8004298 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	212c      	movs	r1, #44	; 0x2c
 8004234:	fb01 f303 	mul.w	r3, r1, r3
 8004238:	4413      	add	r3, r2
 800423a:	333f      	adds	r3, #63	; 0x3f
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d12a      	bne.n	8004298 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	212c      	movs	r1, #44	; 0x2c
 8004248:	fb01 f303 	mul.w	r3, r1, r3
 800424c:	4413      	add	r3, r2
 800424e:	3360      	adds	r3, #96	; 0x60
 8004250:	2201      	movs	r2, #1
 8004252:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	212c      	movs	r1, #44	; 0x2c
 800425a:	fb01 f303 	mul.w	r3, r1, r3
 800425e:	4413      	add	r3, r2
 8004260:	3354      	adds	r3, #84	; 0x54
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	f083 0301 	eor.w	r3, r3, #1
 8004268:	b2d8      	uxtb	r0, r3
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	212c      	movs	r1, #44	; 0x2c
 8004270:	fb01 f303 	mul.w	r3, r1, r3
 8004274:	4413      	add	r3, r2
 8004276:	3354      	adds	r3, #84	; 0x54
 8004278:	4602      	mov	r2, r0
 800427a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	b2d9      	uxtb	r1, r3
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	202c      	movs	r0, #44	; 0x2c
 8004286:	fb00 f303 	mul.w	r3, r0, r3
 800428a:	4413      	add	r3, r2
 800428c:	3360      	adds	r3, #96	; 0x60
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	461a      	mov	r2, r3
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f005 f852 	bl	800933c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d12b      	bne.n	80042f8 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	212c      	movs	r1, #44	; 0x2c
 80042a6:	fb01 f303 	mul.w	r3, r1, r3
 80042aa:	4413      	add	r3, r2
 80042ac:	3348      	adds	r3, #72	; 0x48
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	202c      	movs	r0, #44	; 0x2c
 80042b6:	fb00 f202 	mul.w	r2, r0, r2
 80042ba:	440a      	add	r2, r1
 80042bc:	3240      	adds	r2, #64	; 0x40
 80042be:	8812      	ldrh	r2, [r2, #0]
 80042c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 81be 	beq.w	800464a <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	212c      	movs	r1, #44	; 0x2c
 80042d4:	fb01 f303 	mul.w	r3, r1, r3
 80042d8:	4413      	add	r3, r2
 80042da:	3354      	adds	r3, #84	; 0x54
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	f083 0301 	eor.w	r3, r3, #1
 80042e2:	b2d8      	uxtb	r0, r3
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	212c      	movs	r1, #44	; 0x2c
 80042ea:	fb01 f303 	mul.w	r3, r1, r3
 80042ee:	4413      	add	r3, r2
 80042f0:	3354      	adds	r3, #84	; 0x54
 80042f2:	4602      	mov	r2, r0
 80042f4:	701a      	strb	r2, [r3, #0]
}
 80042f6:	e1a8      	b.n	800464a <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	212c      	movs	r1, #44	; 0x2c
 80042fe:	fb01 f303 	mul.w	r3, r1, r3
 8004302:	4413      	add	r3, r2
 8004304:	3354      	adds	r3, #84	; 0x54
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	f083 0301 	eor.w	r3, r3, #1
 800430c:	b2d8      	uxtb	r0, r3
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	212c      	movs	r1, #44	; 0x2c
 8004314:	fb01 f303 	mul.w	r3, r1, r3
 8004318:	4413      	add	r3, r2
 800431a:	3354      	adds	r3, #84	; 0x54
 800431c:	4602      	mov	r2, r0
 800431e:	701a      	strb	r2, [r3, #0]
}
 8004320:	e193      	b.n	800464a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	4413      	add	r3, r2
 800432a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b02      	cmp	r3, #2
 8004336:	f040 8106 	bne.w	8004546 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	4413      	add	r3, r2
 8004342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	0151      	lsls	r1, r2, #5
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	440a      	add	r2, r1
 8004350:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004354:	f023 0302 	bic.w	r3, r3, #2
 8004358:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	212c      	movs	r1, #44	; 0x2c
 8004360:	fb01 f303 	mul.w	r3, r1, r3
 8004364:	4413      	add	r3, r2
 8004366:	3361      	adds	r3, #97	; 0x61
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d109      	bne.n	8004382 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	212c      	movs	r1, #44	; 0x2c
 8004374:	fb01 f303 	mul.w	r3, r1, r3
 8004378:	4413      	add	r3, r2
 800437a:	3360      	adds	r3, #96	; 0x60
 800437c:	2201      	movs	r2, #1
 800437e:	701a      	strb	r2, [r3, #0]
 8004380:	e0c9      	b.n	8004516 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	212c      	movs	r1, #44	; 0x2c
 8004388:	fb01 f303 	mul.w	r3, r1, r3
 800438c:	4413      	add	r3, r2
 800438e:	3361      	adds	r3, #97	; 0x61
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b05      	cmp	r3, #5
 8004394:	d109      	bne.n	80043aa <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	212c      	movs	r1, #44	; 0x2c
 800439c:	fb01 f303 	mul.w	r3, r1, r3
 80043a0:	4413      	add	r3, r2
 80043a2:	3360      	adds	r3, #96	; 0x60
 80043a4:	2205      	movs	r2, #5
 80043a6:	701a      	strb	r2, [r3, #0]
 80043a8:	e0b5      	b.n	8004516 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	212c      	movs	r1, #44	; 0x2c
 80043b0:	fb01 f303 	mul.w	r3, r1, r3
 80043b4:	4413      	add	r3, r2
 80043b6:	3361      	adds	r3, #97	; 0x61
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	2b06      	cmp	r3, #6
 80043bc:	d009      	beq.n	80043d2 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	212c      	movs	r1, #44	; 0x2c
 80043c4:	fb01 f303 	mul.w	r3, r1, r3
 80043c8:	4413      	add	r3, r2
 80043ca:	3361      	adds	r3, #97	; 0x61
 80043cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d150      	bne.n	8004474 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	212c      	movs	r1, #44	; 0x2c
 80043d8:	fb01 f303 	mul.w	r3, r1, r3
 80043dc:	4413      	add	r3, r2
 80043de:	335c      	adds	r3, #92	; 0x5c
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	1c5a      	adds	r2, r3, #1
 80043e4:	6879      	ldr	r1, [r7, #4]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	202c      	movs	r0, #44	; 0x2c
 80043ea:	fb00 f303 	mul.w	r3, r0, r3
 80043ee:	440b      	add	r3, r1
 80043f0:	335c      	adds	r3, #92	; 0x5c
 80043f2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	212c      	movs	r1, #44	; 0x2c
 80043fa:	fb01 f303 	mul.w	r3, r1, r3
 80043fe:	4413      	add	r3, r2
 8004400:	335c      	adds	r3, #92	; 0x5c
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b02      	cmp	r3, #2
 8004406:	d912      	bls.n	800442e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	212c      	movs	r1, #44	; 0x2c
 800440e:	fb01 f303 	mul.w	r3, r1, r3
 8004412:	4413      	add	r3, r2
 8004414:	335c      	adds	r3, #92	; 0x5c
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	212c      	movs	r1, #44	; 0x2c
 8004420:	fb01 f303 	mul.w	r3, r1, r3
 8004424:	4413      	add	r3, r2
 8004426:	3360      	adds	r3, #96	; 0x60
 8004428:	2204      	movs	r2, #4
 800442a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800442c:	e073      	b.n	8004516 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	212c      	movs	r1, #44	; 0x2c
 8004434:	fb01 f303 	mul.w	r3, r1, r3
 8004438:	4413      	add	r3, r2
 800443a:	3360      	adds	r3, #96	; 0x60
 800443c:	2202      	movs	r2, #2
 800443e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	4413      	add	r3, r2
 8004448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004456:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800445e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	4413      	add	r3, r2
 8004468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800446c:	461a      	mov	r2, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004472:	e050      	b.n	8004516 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	212c      	movs	r1, #44	; 0x2c
 800447a:	fb01 f303 	mul.w	r3, r1, r3
 800447e:	4413      	add	r3, r2
 8004480:	3361      	adds	r3, #97	; 0x61
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2b03      	cmp	r3, #3
 8004486:	d122      	bne.n	80044ce <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	212c      	movs	r1, #44	; 0x2c
 800448e:	fb01 f303 	mul.w	r3, r1, r3
 8004492:	4413      	add	r3, r2
 8004494:	3360      	adds	r3, #96	; 0x60
 8004496:	2202      	movs	r2, #2
 8004498:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80044b0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044b8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c6:	461a      	mov	r2, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	6013      	str	r3, [r2, #0]
 80044cc:	e023      	b.n	8004516 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	212c      	movs	r1, #44	; 0x2c
 80044d4:	fb01 f303 	mul.w	r3, r1, r3
 80044d8:	4413      	add	r3, r2
 80044da:	3361      	adds	r3, #97	; 0x61
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	2b07      	cmp	r3, #7
 80044e0:	d119      	bne.n	8004516 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	212c      	movs	r1, #44	; 0x2c
 80044e8:	fb01 f303 	mul.w	r3, r1, r3
 80044ec:	4413      	add	r3, r2
 80044ee:	335c      	adds	r3, #92	; 0x5c
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	1c5a      	adds	r2, r3, #1
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	202c      	movs	r0, #44	; 0x2c
 80044fa:	fb00 f303 	mul.w	r3, r0, r3
 80044fe:	440b      	add	r3, r1
 8004500:	335c      	adds	r3, #92	; 0x5c
 8004502:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	212c      	movs	r1, #44	; 0x2c
 800450a:	fb01 f303 	mul.w	r3, r1, r3
 800450e:	4413      	add	r3, r2
 8004510:	3360      	adds	r3, #96	; 0x60
 8004512:	2204      	movs	r2, #4
 8004514:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	4413      	add	r3, r2
 800451e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004522:	461a      	mov	r2, r3
 8004524:	2302      	movs	r3, #2
 8004526:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	b2d9      	uxtb	r1, r3
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	202c      	movs	r0, #44	; 0x2c
 8004532:	fb00 f303 	mul.w	r3, r0, r3
 8004536:	4413      	add	r3, r2
 8004538:	3360      	adds	r3, #96	; 0x60
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	461a      	mov	r2, r3
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f004 fefc 	bl	800933c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004544:	e081      	b.n	800464a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	4413      	add	r3, r2
 800454e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b10      	cmp	r3, #16
 800455a:	d176      	bne.n	800464a <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	212c      	movs	r1, #44	; 0x2c
 8004562:	fb01 f303 	mul.w	r3, r1, r3
 8004566:	4413      	add	r3, r2
 8004568:	333f      	adds	r3, #63	; 0x3f
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	2b03      	cmp	r3, #3
 800456e:	d121      	bne.n	80045b4 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	212c      	movs	r1, #44	; 0x2c
 8004576:	fb01 f303 	mul.w	r3, r1, r3
 800457a:	4413      	add	r3, r2
 800457c:	335c      	adds	r3, #92	; 0x5c
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	4413      	add	r3, r2
 800458a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	0151      	lsls	r1, r2, #5
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	440a      	add	r2, r1
 8004598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800459c:	f043 0302 	orr.w	r3, r3, #2
 80045a0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	b2d2      	uxtb	r2, r2
 80045aa:	4611      	mov	r1, r2
 80045ac:	4618      	mov	r0, r3
 80045ae:	f002 fd08 	bl	8006fc2 <USB_HC_Halt>
 80045b2:	e041      	b.n	8004638 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	212c      	movs	r1, #44	; 0x2c
 80045ba:	fb01 f303 	mul.w	r3, r1, r3
 80045be:	4413      	add	r3, r2
 80045c0:	333f      	adds	r3, #63	; 0x3f
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d009      	beq.n	80045dc <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	212c      	movs	r1, #44	; 0x2c
 80045ce:	fb01 f303 	mul.w	r3, r1, r3
 80045d2:	4413      	add	r3, r2
 80045d4:	333f      	adds	r3, #63	; 0x3f
 80045d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d12d      	bne.n	8004638 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	212c      	movs	r1, #44	; 0x2c
 80045e2:	fb01 f303 	mul.w	r3, r1, r3
 80045e6:	4413      	add	r3, r2
 80045e8:	335c      	adds	r3, #92	; 0x5c
 80045ea:	2200      	movs	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d120      	bne.n	8004638 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	212c      	movs	r1, #44	; 0x2c
 80045fc:	fb01 f303 	mul.w	r3, r1, r3
 8004600:	4413      	add	r3, r2
 8004602:	3361      	adds	r3, #97	; 0x61
 8004604:	2203      	movs	r2, #3
 8004606:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	4413      	add	r3, r2
 8004610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	0151      	lsls	r1, r2, #5
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	440a      	add	r2, r1
 800461e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004622:	f043 0302 	orr.w	r3, r3, #2
 8004626:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	4611      	mov	r1, r2
 8004632:	4618      	mov	r0, r3
 8004634:	f002 fcc5 	bl	8006fc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	4413      	add	r3, r2
 8004640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004644:	461a      	mov	r2, r3
 8004646:	2310      	movs	r3, #16
 8004648:	6093      	str	r3, [r2, #8]
}
 800464a:	bf00      	nop
 800464c:	3718      	adds	r7, #24
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b088      	sub	sp, #32
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
 800465a:	460b      	mov	r3, r1
 800465c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004668:	78fb      	ldrb	r3, [r7, #3]
 800466a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	4413      	add	r3, r2
 8004674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 0304 	and.w	r3, r3, #4
 800467e:	2b04      	cmp	r3, #4
 8004680:	d119      	bne.n	80046b6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	015a      	lsls	r2, r3, #5
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	4413      	add	r3, r2
 800468a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800468e:	461a      	mov	r2, r3
 8004690:	2304      	movs	r3, #4
 8004692:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	4413      	add	r3, r2
 800469c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	0151      	lsls	r1, r2, #5
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	440a      	add	r2, r1
 80046aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046ae:	f043 0302 	orr.w	r3, r3, #2
 80046b2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80046b4:	e3ca      	b.n	8004e4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 0320 	and.w	r3, r3, #32
 80046c8:	2b20      	cmp	r3, #32
 80046ca:	d13e      	bne.n	800474a <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d8:	461a      	mov	r2, r3
 80046da:	2320      	movs	r3, #32
 80046dc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	212c      	movs	r1, #44	; 0x2c
 80046e4:	fb01 f303 	mul.w	r3, r1, r3
 80046e8:	4413      	add	r3, r2
 80046ea:	333d      	adds	r3, #61	; 0x3d
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	f040 83ac 	bne.w	8004e4c <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	212c      	movs	r1, #44	; 0x2c
 80046fa:	fb01 f303 	mul.w	r3, r1, r3
 80046fe:	4413      	add	r3, r2
 8004700:	333d      	adds	r3, #61	; 0x3d
 8004702:	2200      	movs	r2, #0
 8004704:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	212c      	movs	r1, #44	; 0x2c
 800470c:	fb01 f303 	mul.w	r3, r1, r3
 8004710:	4413      	add	r3, r2
 8004712:	3360      	adds	r3, #96	; 0x60
 8004714:	2202      	movs	r2, #2
 8004716:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	4413      	add	r3, r2
 8004720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	0151      	lsls	r1, r2, #5
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	440a      	add	r2, r1
 800472e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004732:	f043 0302 	orr.w	r3, r3, #2
 8004736:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	4611      	mov	r1, r2
 8004742:	4618      	mov	r0, r3
 8004744:	f002 fc3d 	bl	8006fc2 <USB_HC_Halt>
}
 8004748:	e380      	b.n	8004e4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	4413      	add	r3, r2
 8004752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800475c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004760:	d122      	bne.n	80047a8 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	4413      	add	r3, r2
 800476a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	0151      	lsls	r1, r2, #5
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	440a      	add	r2, r1
 8004778:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800477c:	f043 0302 	orr.w	r3, r3, #2
 8004780:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	b2d2      	uxtb	r2, r2
 800478a:	4611      	mov	r1, r2
 800478c:	4618      	mov	r0, r3
 800478e:	f002 fc18 	bl	8006fc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	4413      	add	r3, r2
 800479a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800479e:	461a      	mov	r2, r3
 80047a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047a4:	6093      	str	r3, [r2, #8]
}
 80047a6:	e351      	b.n	8004e4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	015a      	lsls	r2, r3, #5
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	4413      	add	r3, r2
 80047b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d150      	bne.n	8004860 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	212c      	movs	r1, #44	; 0x2c
 80047c4:	fb01 f303 	mul.w	r3, r1, r3
 80047c8:	4413      	add	r3, r2
 80047ca:	335c      	adds	r3, #92	; 0x5c
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e2:	2b40      	cmp	r3, #64	; 0x40
 80047e4:	d111      	bne.n	800480a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	212c      	movs	r1, #44	; 0x2c
 80047ec:	fb01 f303 	mul.w	r3, r1, r3
 80047f0:	4413      	add	r3, r2
 80047f2:	333d      	adds	r3, #61	; 0x3d
 80047f4:	2201      	movs	r2, #1
 80047f6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004804:	461a      	mov	r2, r3
 8004806:	2340      	movs	r3, #64	; 0x40
 8004808:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	4413      	add	r3, r2
 8004812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	0151      	lsls	r1, r2, #5
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	440a      	add	r2, r1
 8004820:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004824:	f043 0302 	orr.w	r3, r3, #2
 8004828:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	b2d2      	uxtb	r2, r2
 8004832:	4611      	mov	r1, r2
 8004834:	4618      	mov	r0, r3
 8004836:	f002 fbc4 	bl	8006fc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	4413      	add	r3, r2
 8004842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004846:	461a      	mov	r2, r3
 8004848:	2301      	movs	r3, #1
 800484a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	212c      	movs	r1, #44	; 0x2c
 8004852:	fb01 f303 	mul.w	r3, r1, r3
 8004856:	4413      	add	r3, r2
 8004858:	3361      	adds	r3, #97	; 0x61
 800485a:	2201      	movs	r2, #1
 800485c:	701a      	strb	r2, [r3, #0]
}
 800485e:	e2f5      	b.n	8004e4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	4413      	add	r3, r2
 8004868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004872:	2b40      	cmp	r3, #64	; 0x40
 8004874:	d13c      	bne.n	80048f0 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	212c      	movs	r1, #44	; 0x2c
 800487c:	fb01 f303 	mul.w	r3, r1, r3
 8004880:	4413      	add	r3, r2
 8004882:	3361      	adds	r3, #97	; 0x61
 8004884:	2204      	movs	r2, #4
 8004886:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	212c      	movs	r1, #44	; 0x2c
 800488e:	fb01 f303 	mul.w	r3, r1, r3
 8004892:	4413      	add	r3, r2
 8004894:	333d      	adds	r3, #61	; 0x3d
 8004896:	2201      	movs	r2, #1
 8004898:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	212c      	movs	r1, #44	; 0x2c
 80048a0:	fb01 f303 	mul.w	r3, r1, r3
 80048a4:	4413      	add	r3, r2
 80048a6:	335c      	adds	r3, #92	; 0x5c
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	0151      	lsls	r1, r2, #5
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	440a      	add	r2, r1
 80048c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048c6:	f043 0302 	orr.w	r3, r3, #2
 80048ca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	4611      	mov	r1, r2
 80048d6:	4618      	mov	r0, r3
 80048d8:	f002 fb73 	bl	8006fc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e8:	461a      	mov	r2, r3
 80048ea:	2340      	movs	r3, #64	; 0x40
 80048ec:	6093      	str	r3, [r2, #8]
}
 80048ee:	e2ad      	b.n	8004e4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b08      	cmp	r3, #8
 8004904:	d12a      	bne.n	800495c <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	4413      	add	r3, r2
 800490e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004912:	461a      	mov	r2, r3
 8004914:	2308      	movs	r3, #8
 8004916:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	4413      	add	r3, r2
 8004920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	0151      	lsls	r1, r2, #5
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	440a      	add	r2, r1
 800492e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004932:	f043 0302 	orr.w	r3, r3, #2
 8004936:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	4611      	mov	r1, r2
 8004942:	4618      	mov	r0, r3
 8004944:	f002 fb3d 	bl	8006fc2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	212c      	movs	r1, #44	; 0x2c
 800494e:	fb01 f303 	mul.w	r3, r1, r3
 8004952:	4413      	add	r3, r2
 8004954:	3361      	adds	r3, #97	; 0x61
 8004956:	2205      	movs	r2, #5
 8004958:	701a      	strb	r2, [r3, #0]
}
 800495a:	e277      	b.n	8004e4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	4413      	add	r3, r2
 8004964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 0310 	and.w	r3, r3, #16
 800496e:	2b10      	cmp	r3, #16
 8004970:	d150      	bne.n	8004a14 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	212c      	movs	r1, #44	; 0x2c
 8004978:	fb01 f303 	mul.w	r3, r1, r3
 800497c:	4413      	add	r3, r2
 800497e:	335c      	adds	r3, #92	; 0x5c
 8004980:	2200      	movs	r2, #0
 8004982:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	212c      	movs	r1, #44	; 0x2c
 800498a:	fb01 f303 	mul.w	r3, r1, r3
 800498e:	4413      	add	r3, r2
 8004990:	3361      	adds	r3, #97	; 0x61
 8004992:	2203      	movs	r2, #3
 8004994:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	212c      	movs	r1, #44	; 0x2c
 800499c:	fb01 f303 	mul.w	r3, r1, r3
 80049a0:	4413      	add	r3, r2
 80049a2:	333d      	adds	r3, #61	; 0x3d
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d112      	bne.n	80049d0 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	212c      	movs	r1, #44	; 0x2c
 80049b0:	fb01 f303 	mul.w	r3, r1, r3
 80049b4:	4413      	add	r3, r2
 80049b6:	333c      	adds	r3, #60	; 0x3c
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d108      	bne.n	80049d0 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	212c      	movs	r1, #44	; 0x2c
 80049c4:	fb01 f303 	mul.w	r3, r1, r3
 80049c8:	4413      	add	r3, r2
 80049ca:	333d      	adds	r3, #61	; 0x3d
 80049cc:	2201      	movs	r2, #1
 80049ce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	0151      	lsls	r1, r2, #5
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	440a      	add	r2, r1
 80049e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049ea:	f043 0302 	orr.w	r3, r3, #2
 80049ee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	4611      	mov	r1, r2
 80049fa:	4618      	mov	r0, r3
 80049fc:	f002 fae1 	bl	8006fc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	2310      	movs	r3, #16
 8004a10:	6093      	str	r3, [r2, #8]
}
 8004a12:	e21b      	b.n	8004e4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a26:	2b80      	cmp	r3, #128	; 0x80
 8004a28:	d174      	bne.n	8004b14 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d121      	bne.n	8004a76 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	212c      	movs	r1, #44	; 0x2c
 8004a38:	fb01 f303 	mul.w	r3, r1, r3
 8004a3c:	4413      	add	r3, r2
 8004a3e:	3361      	adds	r3, #97	; 0x61
 8004a40:	2206      	movs	r2, #6
 8004a42:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	0151      	lsls	r1, r2, #5
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	440a      	add	r2, r1
 8004a5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a5e:	f043 0302 	orr.w	r3, r3, #2
 8004a62:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	b2d2      	uxtb	r2, r2
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f002 faa7 	bl	8006fc2 <USB_HC_Halt>
 8004a74:	e044      	b.n	8004b00 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	212c      	movs	r1, #44	; 0x2c
 8004a7c:	fb01 f303 	mul.w	r3, r1, r3
 8004a80:	4413      	add	r3, r2
 8004a82:	335c      	adds	r3, #92	; 0x5c
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	6879      	ldr	r1, [r7, #4]
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	202c      	movs	r0, #44	; 0x2c
 8004a8e:	fb00 f303 	mul.w	r3, r0, r3
 8004a92:	440b      	add	r3, r1
 8004a94:	335c      	adds	r3, #92	; 0x5c
 8004a96:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	212c      	movs	r1, #44	; 0x2c
 8004a9e:	fb01 f303 	mul.w	r3, r1, r3
 8004aa2:	4413      	add	r3, r2
 8004aa4:	335c      	adds	r3, #92	; 0x5c
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d920      	bls.n	8004aee <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	212c      	movs	r1, #44	; 0x2c
 8004ab2:	fb01 f303 	mul.w	r3, r1, r3
 8004ab6:	4413      	add	r3, r2
 8004ab8:	335c      	adds	r3, #92	; 0x5c
 8004aba:	2200      	movs	r2, #0
 8004abc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	212c      	movs	r1, #44	; 0x2c
 8004ac4:	fb01 f303 	mul.w	r3, r1, r3
 8004ac8:	4413      	add	r3, r2
 8004aca:	3360      	adds	r3, #96	; 0x60
 8004acc:	2204      	movs	r2, #4
 8004ace:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	b2d9      	uxtb	r1, r3
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	202c      	movs	r0, #44	; 0x2c
 8004ada:	fb00 f303 	mul.w	r3, r0, r3
 8004ade:	4413      	add	r3, r2
 8004ae0:	3360      	adds	r3, #96	; 0x60
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f004 fc28 	bl	800933c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004aec:	e008      	b.n	8004b00 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	212c      	movs	r1, #44	; 0x2c
 8004af4:	fb01 f303 	mul.w	r3, r1, r3
 8004af8:	4413      	add	r3, r2
 8004afa:	3360      	adds	r3, #96	; 0x60
 8004afc:	2202      	movs	r2, #2
 8004afe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	2380      	movs	r3, #128	; 0x80
 8004b10:	6093      	str	r3, [r2, #8]
}
 8004b12:	e19b      	b.n	8004e4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b2a:	d134      	bne.n	8004b96 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	0151      	lsls	r1, r2, #5
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	440a      	add	r2, r1
 8004b42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b46:	f043 0302 	orr.w	r3, r3, #2
 8004b4a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	4611      	mov	r1, r2
 8004b56:	4618      	mov	r0, r3
 8004b58:	f002 fa33 	bl	8006fc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b68:	461a      	mov	r2, r3
 8004b6a:	2310      	movs	r3, #16
 8004b6c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b80:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	212c      	movs	r1, #44	; 0x2c
 8004b88:	fb01 f303 	mul.w	r3, r1, r3
 8004b8c:	4413      	add	r3, r2
 8004b8e:	3361      	adds	r3, #97	; 0x61
 8004b90:	2208      	movs	r2, #8
 8004b92:	701a      	strb	r2, [r3, #0]
}
 8004b94:	e15a      	b.n	8004e4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	f040 814f 	bne.w	8004e4c <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	015a      	lsls	r2, r3, #5
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	0151      	lsls	r1, r2, #5
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	440a      	add	r2, r1
 8004bc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bc8:	f023 0302 	bic.w	r3, r3, #2
 8004bcc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	212c      	movs	r1, #44	; 0x2c
 8004bd4:	fb01 f303 	mul.w	r3, r1, r3
 8004bd8:	4413      	add	r3, r2
 8004bda:	3361      	adds	r3, #97	; 0x61
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d17d      	bne.n	8004cde <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	212c      	movs	r1, #44	; 0x2c
 8004be8:	fb01 f303 	mul.w	r3, r1, r3
 8004bec:	4413      	add	r3, r2
 8004bee:	3360      	adds	r3, #96	; 0x60
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	212c      	movs	r1, #44	; 0x2c
 8004bfa:	fb01 f303 	mul.w	r3, r1, r3
 8004bfe:	4413      	add	r3, r2
 8004c00:	333f      	adds	r3, #63	; 0x3f
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d00a      	beq.n	8004c1e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	212c      	movs	r1, #44	; 0x2c
 8004c0e:	fb01 f303 	mul.w	r3, r1, r3
 8004c12:	4413      	add	r3, r2
 8004c14:	333f      	adds	r3, #63	; 0x3f
 8004c16:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004c18:	2b03      	cmp	r3, #3
 8004c1a:	f040 8100 	bne.w	8004e1e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d113      	bne.n	8004c4e <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	212c      	movs	r1, #44	; 0x2c
 8004c2c:	fb01 f303 	mul.w	r3, r1, r3
 8004c30:	4413      	add	r3, r2
 8004c32:	3355      	adds	r3, #85	; 0x55
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	f083 0301 	eor.w	r3, r3, #1
 8004c3a:	b2d8      	uxtb	r0, r3
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	212c      	movs	r1, #44	; 0x2c
 8004c42:	fb01 f303 	mul.w	r3, r1, r3
 8004c46:	4413      	add	r3, r2
 8004c48:	3355      	adds	r3, #85	; 0x55
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	f040 80e3 	bne.w	8004e1e <HCD_HC_OUT_IRQHandler+0x7cc>
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	212c      	movs	r1, #44	; 0x2c
 8004c5e:	fb01 f303 	mul.w	r3, r1, r3
 8004c62:	4413      	add	r3, r2
 8004c64:	334c      	adds	r3, #76	; 0x4c
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 80d8 	beq.w	8004e1e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	212c      	movs	r1, #44	; 0x2c
 8004c74:	fb01 f303 	mul.w	r3, r1, r3
 8004c78:	4413      	add	r3, r2
 8004c7a:	334c      	adds	r3, #76	; 0x4c
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6879      	ldr	r1, [r7, #4]
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	202c      	movs	r0, #44	; 0x2c
 8004c84:	fb00 f202 	mul.w	r2, r0, r2
 8004c88:	440a      	add	r2, r1
 8004c8a:	3240      	adds	r2, #64	; 0x40
 8004c8c:	8812      	ldrh	r2, [r2, #0]
 8004c8e:	4413      	add	r3, r2
 8004c90:	3b01      	subs	r3, #1
 8004c92:	6879      	ldr	r1, [r7, #4]
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	202c      	movs	r0, #44	; 0x2c
 8004c98:	fb00 f202 	mul.w	r2, r0, r2
 8004c9c:	440a      	add	r2, r1
 8004c9e:	3240      	adds	r2, #64	; 0x40
 8004ca0:	8812      	ldrh	r2, [r2, #0]
 8004ca2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f000 80b5 	beq.w	8004e1e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	212c      	movs	r1, #44	; 0x2c
 8004cba:	fb01 f303 	mul.w	r3, r1, r3
 8004cbe:	4413      	add	r3, r2
 8004cc0:	3355      	adds	r3, #85	; 0x55
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	f083 0301 	eor.w	r3, r3, #1
 8004cc8:	b2d8      	uxtb	r0, r3
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	212c      	movs	r1, #44	; 0x2c
 8004cd0:	fb01 f303 	mul.w	r3, r1, r3
 8004cd4:	4413      	add	r3, r2
 8004cd6:	3355      	adds	r3, #85	; 0x55
 8004cd8:	4602      	mov	r2, r0
 8004cda:	701a      	strb	r2, [r3, #0]
 8004cdc:	e09f      	b.n	8004e1e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	212c      	movs	r1, #44	; 0x2c
 8004ce4:	fb01 f303 	mul.w	r3, r1, r3
 8004ce8:	4413      	add	r3, r2
 8004cea:	3361      	adds	r3, #97	; 0x61
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b03      	cmp	r3, #3
 8004cf0:	d109      	bne.n	8004d06 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	212c      	movs	r1, #44	; 0x2c
 8004cf8:	fb01 f303 	mul.w	r3, r1, r3
 8004cfc:	4413      	add	r3, r2
 8004cfe:	3360      	adds	r3, #96	; 0x60
 8004d00:	2202      	movs	r2, #2
 8004d02:	701a      	strb	r2, [r3, #0]
 8004d04:	e08b      	b.n	8004e1e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	212c      	movs	r1, #44	; 0x2c
 8004d0c:	fb01 f303 	mul.w	r3, r1, r3
 8004d10:	4413      	add	r3, r2
 8004d12:	3361      	adds	r3, #97	; 0x61
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d109      	bne.n	8004d2e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	212c      	movs	r1, #44	; 0x2c
 8004d20:	fb01 f303 	mul.w	r3, r1, r3
 8004d24:	4413      	add	r3, r2
 8004d26:	3360      	adds	r3, #96	; 0x60
 8004d28:	2202      	movs	r2, #2
 8004d2a:	701a      	strb	r2, [r3, #0]
 8004d2c:	e077      	b.n	8004e1e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	212c      	movs	r1, #44	; 0x2c
 8004d34:	fb01 f303 	mul.w	r3, r1, r3
 8004d38:	4413      	add	r3, r2
 8004d3a:	3361      	adds	r3, #97	; 0x61
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	2b05      	cmp	r3, #5
 8004d40:	d109      	bne.n	8004d56 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	212c      	movs	r1, #44	; 0x2c
 8004d48:	fb01 f303 	mul.w	r3, r1, r3
 8004d4c:	4413      	add	r3, r2
 8004d4e:	3360      	adds	r3, #96	; 0x60
 8004d50:	2205      	movs	r2, #5
 8004d52:	701a      	strb	r2, [r3, #0]
 8004d54:	e063      	b.n	8004e1e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	212c      	movs	r1, #44	; 0x2c
 8004d5c:	fb01 f303 	mul.w	r3, r1, r3
 8004d60:	4413      	add	r3, r2
 8004d62:	3361      	adds	r3, #97	; 0x61
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	2b06      	cmp	r3, #6
 8004d68:	d009      	beq.n	8004d7e <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	212c      	movs	r1, #44	; 0x2c
 8004d70:	fb01 f303 	mul.w	r3, r1, r3
 8004d74:	4413      	add	r3, r2
 8004d76:	3361      	adds	r3, #97	; 0x61
 8004d78:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d14f      	bne.n	8004e1e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	212c      	movs	r1, #44	; 0x2c
 8004d84:	fb01 f303 	mul.w	r3, r1, r3
 8004d88:	4413      	add	r3, r2
 8004d8a:	335c      	adds	r3, #92	; 0x5c
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	1c5a      	adds	r2, r3, #1
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	202c      	movs	r0, #44	; 0x2c
 8004d96:	fb00 f303 	mul.w	r3, r0, r3
 8004d9a:	440b      	add	r3, r1
 8004d9c:	335c      	adds	r3, #92	; 0x5c
 8004d9e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	212c      	movs	r1, #44	; 0x2c
 8004da6:	fb01 f303 	mul.w	r3, r1, r3
 8004daa:	4413      	add	r3, r2
 8004dac:	335c      	adds	r3, #92	; 0x5c
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d912      	bls.n	8004dda <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	212c      	movs	r1, #44	; 0x2c
 8004dba:	fb01 f303 	mul.w	r3, r1, r3
 8004dbe:	4413      	add	r3, r2
 8004dc0:	335c      	adds	r3, #92	; 0x5c
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	212c      	movs	r1, #44	; 0x2c
 8004dcc:	fb01 f303 	mul.w	r3, r1, r3
 8004dd0:	4413      	add	r3, r2
 8004dd2:	3360      	adds	r3, #96	; 0x60
 8004dd4:	2204      	movs	r2, #4
 8004dd6:	701a      	strb	r2, [r3, #0]
 8004dd8:	e021      	b.n	8004e1e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	212c      	movs	r1, #44	; 0x2c
 8004de0:	fb01 f303 	mul.w	r3, r1, r3
 8004de4:	4413      	add	r3, r2
 8004de6:	3360      	adds	r3, #96	; 0x60
 8004de8:	2202      	movs	r2, #2
 8004dea:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	015a      	lsls	r2, r3, #5
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e02:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e0a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e18:	461a      	mov	r2, r3
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	b2d9      	uxtb	r1, r3
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	202c      	movs	r0, #44	; 0x2c
 8004e3a:	fb00 f303 	mul.w	r3, r0, r3
 8004e3e:	4413      	add	r3, r2
 8004e40:	3360      	adds	r3, #96	; 0x60
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	461a      	mov	r2, r3
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f004 fa78 	bl	800933c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004e4c:	bf00      	nop
 8004e4e:	3720      	adds	r7, #32
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b08a      	sub	sp, #40	; 0x28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	f003 030f 	and.w	r3, r3, #15
 8004e74:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	0c5b      	lsrs	r3, r3, #17
 8004e7a:	f003 030f 	and.w	r3, r3, #15
 8004e7e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	091b      	lsrs	r3, r3, #4
 8004e84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e88:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d004      	beq.n	8004e9a <HCD_RXQLVL_IRQHandler+0x46>
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	2b05      	cmp	r3, #5
 8004e94:	f000 80a9 	beq.w	8004fea <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004e98:	e0aa      	b.n	8004ff0 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 80a6 	beq.w	8004fee <HCD_RXQLVL_IRQHandler+0x19a>
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	212c      	movs	r1, #44	; 0x2c
 8004ea8:	fb01 f303 	mul.w	r3, r1, r3
 8004eac:	4413      	add	r3, r2
 8004eae:	3344      	adds	r3, #68	; 0x44
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 809b 	beq.w	8004fee <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	212c      	movs	r1, #44	; 0x2c
 8004ebe:	fb01 f303 	mul.w	r3, r1, r3
 8004ec2:	4413      	add	r3, r2
 8004ec4:	3350      	adds	r3, #80	; 0x50
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	441a      	add	r2, r3
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	202c      	movs	r0, #44	; 0x2c
 8004ed2:	fb00 f303 	mul.w	r3, r0, r3
 8004ed6:	440b      	add	r3, r1
 8004ed8:	334c      	adds	r3, #76	; 0x4c
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d87a      	bhi.n	8004fd6 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6818      	ldr	r0, [r3, #0]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	212c      	movs	r1, #44	; 0x2c
 8004eea:	fb01 f303 	mul.w	r3, r1, r3
 8004eee:	4413      	add	r3, r2
 8004ef0:	3344      	adds	r3, #68	; 0x44
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	b292      	uxth	r2, r2
 8004ef8:	4619      	mov	r1, r3
 8004efa:	f001 fbdb 	bl	80066b4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	212c      	movs	r1, #44	; 0x2c
 8004f04:	fb01 f303 	mul.w	r3, r1, r3
 8004f08:	4413      	add	r3, r2
 8004f0a:	3344      	adds	r3, #68	; 0x44
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	441a      	add	r2, r3
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	202c      	movs	r0, #44	; 0x2c
 8004f18:	fb00 f303 	mul.w	r3, r0, r3
 8004f1c:	440b      	add	r3, r1
 8004f1e:	3344      	adds	r3, #68	; 0x44
 8004f20:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	212c      	movs	r1, #44	; 0x2c
 8004f28:	fb01 f303 	mul.w	r3, r1, r3
 8004f2c:	4413      	add	r3, r2
 8004f2e:	3350      	adds	r3, #80	; 0x50
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	441a      	add	r2, r3
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	202c      	movs	r0, #44	; 0x2c
 8004f3c:	fb00 f303 	mul.w	r3, r0, r3
 8004f40:	440b      	add	r3, r1
 8004f42:	3350      	adds	r3, #80	; 0x50
 8004f44:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	0cdb      	lsrs	r3, r3, #19
 8004f56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f5a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	212c      	movs	r1, #44	; 0x2c
 8004f62:	fb01 f303 	mul.w	r3, r1, r3
 8004f66:	4413      	add	r3, r2
 8004f68:	3340      	adds	r3, #64	; 0x40
 8004f6a:	881b      	ldrh	r3, [r3, #0]
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d13c      	bne.n	8004fee <HCD_RXQLVL_IRQHandler+0x19a>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d039      	beq.n	8004fee <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	015a      	lsls	r2, r3, #5
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
 8004f80:	4413      	add	r3, r2
 8004f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f90:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f98:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	212c      	movs	r1, #44	; 0x2c
 8004fb2:	fb01 f303 	mul.w	r3, r1, r3
 8004fb6:	4413      	add	r3, r2
 8004fb8:	3354      	adds	r3, #84	; 0x54
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	f083 0301 	eor.w	r3, r3, #1
 8004fc0:	b2d8      	uxtb	r0, r3
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	212c      	movs	r1, #44	; 0x2c
 8004fc8:	fb01 f303 	mul.w	r3, r1, r3
 8004fcc:	4413      	add	r3, r2
 8004fce:	3354      	adds	r3, #84	; 0x54
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	701a      	strb	r2, [r3, #0]
      break;
 8004fd4:	e00b      	b.n	8004fee <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	212c      	movs	r1, #44	; 0x2c
 8004fdc:	fb01 f303 	mul.w	r3, r1, r3
 8004fe0:	4413      	add	r3, r2
 8004fe2:	3360      	adds	r3, #96	; 0x60
 8004fe4:	2204      	movs	r2, #4
 8004fe6:	701a      	strb	r2, [r3, #0]
      break;
 8004fe8:	e001      	b.n	8004fee <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004fea:	bf00      	nop
 8004fec:	e000      	b.n	8004ff0 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004fee:	bf00      	nop
  }
}
 8004ff0:	bf00      	nop
 8004ff2:	3728      	adds	r7, #40	; 0x28
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005024:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b02      	cmp	r3, #2
 800502e:	d10b      	bne.n	8005048 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b01      	cmp	r3, #1
 8005038:	d102      	bne.n	8005040 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f004 f962 	bl	8009304 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	f043 0302 	orr.w	r3, r3, #2
 8005046:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f003 0308 	and.w	r3, r3, #8
 800504e:	2b08      	cmp	r3, #8
 8005050:	d132      	bne.n	80050b8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	f043 0308 	orr.w	r3, r3, #8
 8005058:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b04      	cmp	r3, #4
 8005062:	d126      	bne.n	80050b2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	2b02      	cmp	r3, #2
 800506a:	d113      	bne.n	8005094 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005072:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005076:	d106      	bne.n	8005086 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2102      	movs	r1, #2
 800507e:	4618      	mov	r0, r3
 8005080:	f001 fc78 	bl	8006974 <USB_InitFSLSPClkSel>
 8005084:	e011      	b.n	80050aa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2101      	movs	r1, #1
 800508c:	4618      	mov	r0, r3
 800508e:	f001 fc71 	bl	8006974 <USB_InitFSLSPClkSel>
 8005092:	e00a      	b.n	80050aa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d106      	bne.n	80050aa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050a2:	461a      	mov	r2, r3
 80050a4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80050a8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f004 f954 	bl	8009358 <HAL_HCD_PortEnabled_Callback>
 80050b0:	e002      	b.n	80050b8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f004 f95e 	bl	8009374 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f003 0320 	and.w	r3, r3, #32
 80050be:	2b20      	cmp	r3, #32
 80050c0:	d103      	bne.n	80050ca <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	f043 0320 	orr.w	r3, r3, #32
 80050c8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050d0:	461a      	mov	r2, r3
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	6013      	str	r3, [r2, #0]
}
 80050d6:	bf00      	nop
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
	...

080050e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e264      	b.n	80055bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d075      	beq.n	80051ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050fe:	4ba3      	ldr	r3, [pc, #652]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 030c 	and.w	r3, r3, #12
 8005106:	2b04      	cmp	r3, #4
 8005108:	d00c      	beq.n	8005124 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800510a:	4ba0      	ldr	r3, [pc, #640]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005112:	2b08      	cmp	r3, #8
 8005114:	d112      	bne.n	800513c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005116:	4b9d      	ldr	r3, [pc, #628]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800511e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005122:	d10b      	bne.n	800513c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005124:	4b99      	ldr	r3, [pc, #612]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d05b      	beq.n	80051e8 <HAL_RCC_OscConfig+0x108>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d157      	bne.n	80051e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e23f      	b.n	80055bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005144:	d106      	bne.n	8005154 <HAL_RCC_OscConfig+0x74>
 8005146:	4b91      	ldr	r3, [pc, #580]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a90      	ldr	r2, [pc, #576]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 800514c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005150:	6013      	str	r3, [r2, #0]
 8005152:	e01d      	b.n	8005190 <HAL_RCC_OscConfig+0xb0>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800515c:	d10c      	bne.n	8005178 <HAL_RCC_OscConfig+0x98>
 800515e:	4b8b      	ldr	r3, [pc, #556]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a8a      	ldr	r2, [pc, #552]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 8005164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	4b88      	ldr	r3, [pc, #544]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a87      	ldr	r2, [pc, #540]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 8005170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005174:	6013      	str	r3, [r2, #0]
 8005176:	e00b      	b.n	8005190 <HAL_RCC_OscConfig+0xb0>
 8005178:	4b84      	ldr	r3, [pc, #528]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a83      	ldr	r2, [pc, #524]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 800517e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005182:	6013      	str	r3, [r2, #0]
 8005184:	4b81      	ldr	r3, [pc, #516]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a80      	ldr	r2, [pc, #512]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 800518a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800518e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d013      	beq.n	80051c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005198:	f7fd fc50 	bl	8002a3c <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051a0:	f7fd fc4c 	bl	8002a3c <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b64      	cmp	r3, #100	; 0x64
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e204      	b.n	80055bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051b2:	4b76      	ldr	r3, [pc, #472]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0f0      	beq.n	80051a0 <HAL_RCC_OscConfig+0xc0>
 80051be:	e014      	b.n	80051ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c0:	f7fd fc3c 	bl	8002a3c <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051c8:	f7fd fc38 	bl	8002a3c <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b64      	cmp	r3, #100	; 0x64
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e1f0      	b.n	80055bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051da:	4b6c      	ldr	r3, [pc, #432]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1f0      	bne.n	80051c8 <HAL_RCC_OscConfig+0xe8>
 80051e6:	e000      	b.n	80051ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d063      	beq.n	80052be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051f6:	4b65      	ldr	r3, [pc, #404]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 030c 	and.w	r3, r3, #12
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00b      	beq.n	800521a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005202:	4b62      	ldr	r3, [pc, #392]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800520a:	2b08      	cmp	r3, #8
 800520c:	d11c      	bne.n	8005248 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800520e:	4b5f      	ldr	r3, [pc, #380]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d116      	bne.n	8005248 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800521a:	4b5c      	ldr	r3, [pc, #368]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b00      	cmp	r3, #0
 8005224:	d005      	beq.n	8005232 <HAL_RCC_OscConfig+0x152>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d001      	beq.n	8005232 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e1c4      	b.n	80055bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005232:	4b56      	ldr	r3, [pc, #344]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	4952      	ldr	r1, [pc, #328]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 8005242:	4313      	orrs	r3, r2
 8005244:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005246:	e03a      	b.n	80052be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d020      	beq.n	8005292 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005250:	4b4f      	ldr	r3, [pc, #316]	; (8005390 <HAL_RCC_OscConfig+0x2b0>)
 8005252:	2201      	movs	r2, #1
 8005254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005256:	f7fd fbf1 	bl	8002a3c <HAL_GetTick>
 800525a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800525c:	e008      	b.n	8005270 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800525e:	f7fd fbed 	bl	8002a3c <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d901      	bls.n	8005270 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e1a5      	b.n	80055bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005270:	4b46      	ldr	r3, [pc, #280]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d0f0      	beq.n	800525e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800527c:	4b43      	ldr	r3, [pc, #268]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	00db      	lsls	r3, r3, #3
 800528a:	4940      	ldr	r1, [pc, #256]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 800528c:	4313      	orrs	r3, r2
 800528e:	600b      	str	r3, [r1, #0]
 8005290:	e015      	b.n	80052be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005292:	4b3f      	ldr	r3, [pc, #252]	; (8005390 <HAL_RCC_OscConfig+0x2b0>)
 8005294:	2200      	movs	r2, #0
 8005296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005298:	f7fd fbd0 	bl	8002a3c <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800529e:	e008      	b.n	80052b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052a0:	f7fd fbcc 	bl	8002a3c <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e184      	b.n	80055bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052b2:	4b36      	ldr	r3, [pc, #216]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1f0      	bne.n	80052a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0308 	and.w	r3, r3, #8
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d030      	beq.n	800532c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d016      	beq.n	8005300 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052d2:	4b30      	ldr	r3, [pc, #192]	; (8005394 <HAL_RCC_OscConfig+0x2b4>)
 80052d4:	2201      	movs	r2, #1
 80052d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d8:	f7fd fbb0 	bl	8002a3c <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052e0:	f7fd fbac 	bl	8002a3c <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e164      	b.n	80055bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052f2:	4b26      	ldr	r3, [pc, #152]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 80052f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d0f0      	beq.n	80052e0 <HAL_RCC_OscConfig+0x200>
 80052fe:	e015      	b.n	800532c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005300:	4b24      	ldr	r3, [pc, #144]	; (8005394 <HAL_RCC_OscConfig+0x2b4>)
 8005302:	2200      	movs	r2, #0
 8005304:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005306:	f7fd fb99 	bl	8002a3c <HAL_GetTick>
 800530a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800530c:	e008      	b.n	8005320 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800530e:	f7fd fb95 	bl	8002a3c <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b02      	cmp	r3, #2
 800531a:	d901      	bls.n	8005320 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e14d      	b.n	80055bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005320:	4b1a      	ldr	r3, [pc, #104]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 8005322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1f0      	bne.n	800530e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0304 	and.w	r3, r3, #4
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 80a0 	beq.w	800547a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800533a:	2300      	movs	r3, #0
 800533c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800533e:	4b13      	ldr	r3, [pc, #76]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10f      	bne.n	800536a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800534a:	2300      	movs	r3, #0
 800534c:	60bb      	str	r3, [r7, #8]
 800534e:	4b0f      	ldr	r3, [pc, #60]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	4a0e      	ldr	r2, [pc, #56]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 8005354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005358:	6413      	str	r3, [r2, #64]	; 0x40
 800535a:	4b0c      	ldr	r3, [pc, #48]	; (800538c <HAL_RCC_OscConfig+0x2ac>)
 800535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005362:	60bb      	str	r3, [r7, #8]
 8005364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005366:	2301      	movs	r3, #1
 8005368:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800536a:	4b0b      	ldr	r3, [pc, #44]	; (8005398 <HAL_RCC_OscConfig+0x2b8>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005372:	2b00      	cmp	r3, #0
 8005374:	d121      	bne.n	80053ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005376:	4b08      	ldr	r3, [pc, #32]	; (8005398 <HAL_RCC_OscConfig+0x2b8>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a07      	ldr	r2, [pc, #28]	; (8005398 <HAL_RCC_OscConfig+0x2b8>)
 800537c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005382:	f7fd fb5b 	bl	8002a3c <HAL_GetTick>
 8005386:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005388:	e011      	b.n	80053ae <HAL_RCC_OscConfig+0x2ce>
 800538a:	bf00      	nop
 800538c:	40023800 	.word	0x40023800
 8005390:	42470000 	.word	0x42470000
 8005394:	42470e80 	.word	0x42470e80
 8005398:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800539c:	f7fd fb4e 	bl	8002a3c <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e106      	b.n	80055bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053ae:	4b85      	ldr	r3, [pc, #532]	; (80055c4 <HAL_RCC_OscConfig+0x4e4>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d0f0      	beq.n	800539c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d106      	bne.n	80053d0 <HAL_RCC_OscConfig+0x2f0>
 80053c2:	4b81      	ldr	r3, [pc, #516]	; (80055c8 <HAL_RCC_OscConfig+0x4e8>)
 80053c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c6:	4a80      	ldr	r2, [pc, #512]	; (80055c8 <HAL_RCC_OscConfig+0x4e8>)
 80053c8:	f043 0301 	orr.w	r3, r3, #1
 80053cc:	6713      	str	r3, [r2, #112]	; 0x70
 80053ce:	e01c      	b.n	800540a <HAL_RCC_OscConfig+0x32a>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	2b05      	cmp	r3, #5
 80053d6:	d10c      	bne.n	80053f2 <HAL_RCC_OscConfig+0x312>
 80053d8:	4b7b      	ldr	r3, [pc, #492]	; (80055c8 <HAL_RCC_OscConfig+0x4e8>)
 80053da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053dc:	4a7a      	ldr	r2, [pc, #488]	; (80055c8 <HAL_RCC_OscConfig+0x4e8>)
 80053de:	f043 0304 	orr.w	r3, r3, #4
 80053e2:	6713      	str	r3, [r2, #112]	; 0x70
 80053e4:	4b78      	ldr	r3, [pc, #480]	; (80055c8 <HAL_RCC_OscConfig+0x4e8>)
 80053e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e8:	4a77      	ldr	r2, [pc, #476]	; (80055c8 <HAL_RCC_OscConfig+0x4e8>)
 80053ea:	f043 0301 	orr.w	r3, r3, #1
 80053ee:	6713      	str	r3, [r2, #112]	; 0x70
 80053f0:	e00b      	b.n	800540a <HAL_RCC_OscConfig+0x32a>
 80053f2:	4b75      	ldr	r3, [pc, #468]	; (80055c8 <HAL_RCC_OscConfig+0x4e8>)
 80053f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f6:	4a74      	ldr	r2, [pc, #464]	; (80055c8 <HAL_RCC_OscConfig+0x4e8>)
 80053f8:	f023 0301 	bic.w	r3, r3, #1
 80053fc:	6713      	str	r3, [r2, #112]	; 0x70
 80053fe:	4b72      	ldr	r3, [pc, #456]	; (80055c8 <HAL_RCC_OscConfig+0x4e8>)
 8005400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005402:	4a71      	ldr	r2, [pc, #452]	; (80055c8 <HAL_RCC_OscConfig+0x4e8>)
 8005404:	f023 0304 	bic.w	r3, r3, #4
 8005408:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d015      	beq.n	800543e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005412:	f7fd fb13 	bl	8002a3c <HAL_GetTick>
 8005416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005418:	e00a      	b.n	8005430 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800541a:	f7fd fb0f 	bl	8002a3c <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	f241 3288 	movw	r2, #5000	; 0x1388
 8005428:	4293      	cmp	r3, r2
 800542a:	d901      	bls.n	8005430 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e0c5      	b.n	80055bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005430:	4b65      	ldr	r3, [pc, #404]	; (80055c8 <HAL_RCC_OscConfig+0x4e8>)
 8005432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d0ee      	beq.n	800541a <HAL_RCC_OscConfig+0x33a>
 800543c:	e014      	b.n	8005468 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800543e:	f7fd fafd 	bl	8002a3c <HAL_GetTick>
 8005442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005444:	e00a      	b.n	800545c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005446:	f7fd faf9 	bl	8002a3c <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	f241 3288 	movw	r2, #5000	; 0x1388
 8005454:	4293      	cmp	r3, r2
 8005456:	d901      	bls.n	800545c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e0af      	b.n	80055bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800545c:	4b5a      	ldr	r3, [pc, #360]	; (80055c8 <HAL_RCC_OscConfig+0x4e8>)
 800545e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1ee      	bne.n	8005446 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005468:	7dfb      	ldrb	r3, [r7, #23]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d105      	bne.n	800547a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800546e:	4b56      	ldr	r3, [pc, #344]	; (80055c8 <HAL_RCC_OscConfig+0x4e8>)
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	4a55      	ldr	r2, [pc, #340]	; (80055c8 <HAL_RCC_OscConfig+0x4e8>)
 8005474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005478:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 809b 	beq.w	80055ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005484:	4b50      	ldr	r3, [pc, #320]	; (80055c8 <HAL_RCC_OscConfig+0x4e8>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f003 030c 	and.w	r3, r3, #12
 800548c:	2b08      	cmp	r3, #8
 800548e:	d05c      	beq.n	800554a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	2b02      	cmp	r3, #2
 8005496:	d141      	bne.n	800551c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005498:	4b4c      	ldr	r3, [pc, #304]	; (80055cc <HAL_RCC_OscConfig+0x4ec>)
 800549a:	2200      	movs	r2, #0
 800549c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800549e:	f7fd facd 	bl	8002a3c <HAL_GetTick>
 80054a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054a4:	e008      	b.n	80054b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054a6:	f7fd fac9 	bl	8002a3c <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e081      	b.n	80055bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054b8:	4b43      	ldr	r3, [pc, #268]	; (80055c8 <HAL_RCC_OscConfig+0x4e8>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1f0      	bne.n	80054a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	69da      	ldr	r2, [r3, #28]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	431a      	orrs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	019b      	lsls	r3, r3, #6
 80054d4:	431a      	orrs	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054da:	085b      	lsrs	r3, r3, #1
 80054dc:	3b01      	subs	r3, #1
 80054de:	041b      	lsls	r3, r3, #16
 80054e0:	431a      	orrs	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e6:	061b      	lsls	r3, r3, #24
 80054e8:	4937      	ldr	r1, [pc, #220]	; (80055c8 <HAL_RCC_OscConfig+0x4e8>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054ee:	4b37      	ldr	r3, [pc, #220]	; (80055cc <HAL_RCC_OscConfig+0x4ec>)
 80054f0:	2201      	movs	r2, #1
 80054f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f4:	f7fd faa2 	bl	8002a3c <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054fa:	e008      	b.n	800550e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054fc:	f7fd fa9e 	bl	8002a3c <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b02      	cmp	r3, #2
 8005508:	d901      	bls.n	800550e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e056      	b.n	80055bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800550e:	4b2e      	ldr	r3, [pc, #184]	; (80055c8 <HAL_RCC_OscConfig+0x4e8>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d0f0      	beq.n	80054fc <HAL_RCC_OscConfig+0x41c>
 800551a:	e04e      	b.n	80055ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800551c:	4b2b      	ldr	r3, [pc, #172]	; (80055cc <HAL_RCC_OscConfig+0x4ec>)
 800551e:	2200      	movs	r2, #0
 8005520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005522:	f7fd fa8b 	bl	8002a3c <HAL_GetTick>
 8005526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005528:	e008      	b.n	800553c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800552a:	f7fd fa87 	bl	8002a3c <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d901      	bls.n	800553c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e03f      	b.n	80055bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800553c:	4b22      	ldr	r3, [pc, #136]	; (80055c8 <HAL_RCC_OscConfig+0x4e8>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1f0      	bne.n	800552a <HAL_RCC_OscConfig+0x44a>
 8005548:	e037      	b.n	80055ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d101      	bne.n	8005556 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e032      	b.n	80055bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005556:	4b1c      	ldr	r3, [pc, #112]	; (80055c8 <HAL_RCC_OscConfig+0x4e8>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d028      	beq.n	80055b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800556e:	429a      	cmp	r2, r3
 8005570:	d121      	bne.n	80055b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800557c:	429a      	cmp	r2, r3
 800557e:	d11a      	bne.n	80055b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005586:	4013      	ands	r3, r2
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800558c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800558e:	4293      	cmp	r3, r2
 8005590:	d111      	bne.n	80055b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559c:	085b      	lsrs	r3, r3, #1
 800559e:	3b01      	subs	r3, #1
 80055a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d107      	bne.n	80055b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d001      	beq.n	80055ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e000      	b.n	80055bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	40007000 	.word	0x40007000
 80055c8:	40023800 	.word	0x40023800
 80055cc:	42470060 	.word	0x42470060

080055d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e0cc      	b.n	800577e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055e4:	4b68      	ldr	r3, [pc, #416]	; (8005788 <HAL_RCC_ClockConfig+0x1b8>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d90c      	bls.n	800560c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055f2:	4b65      	ldr	r3, [pc, #404]	; (8005788 <HAL_RCC_ClockConfig+0x1b8>)
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055fa:	4b63      	ldr	r3, [pc, #396]	; (8005788 <HAL_RCC_ClockConfig+0x1b8>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0307 	and.w	r3, r3, #7
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	429a      	cmp	r2, r3
 8005606:	d001      	beq.n	800560c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e0b8      	b.n	800577e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d020      	beq.n	800565a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b00      	cmp	r3, #0
 8005622:	d005      	beq.n	8005630 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005624:	4b59      	ldr	r3, [pc, #356]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	4a58      	ldr	r2, [pc, #352]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 800562a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800562e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0308 	and.w	r3, r3, #8
 8005638:	2b00      	cmp	r3, #0
 800563a:	d005      	beq.n	8005648 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800563c:	4b53      	ldr	r3, [pc, #332]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	4a52      	ldr	r2, [pc, #328]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005642:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005646:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005648:	4b50      	ldr	r3, [pc, #320]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	494d      	ldr	r1, [pc, #308]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005656:	4313      	orrs	r3, r2
 8005658:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b00      	cmp	r3, #0
 8005664:	d044      	beq.n	80056f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d107      	bne.n	800567e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800566e:	4b47      	ldr	r3, [pc, #284]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d119      	bne.n	80056ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e07f      	b.n	800577e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2b02      	cmp	r3, #2
 8005684:	d003      	beq.n	800568e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800568a:	2b03      	cmp	r3, #3
 800568c:	d107      	bne.n	800569e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800568e:	4b3f      	ldr	r3, [pc, #252]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d109      	bne.n	80056ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e06f      	b.n	800577e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800569e:	4b3b      	ldr	r3, [pc, #236]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e067      	b.n	800577e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056ae:	4b37      	ldr	r3, [pc, #220]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f023 0203 	bic.w	r2, r3, #3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	4934      	ldr	r1, [pc, #208]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056c0:	f7fd f9bc 	bl	8002a3c <HAL_GetTick>
 80056c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056c6:	e00a      	b.n	80056de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056c8:	f7fd f9b8 	bl	8002a3c <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e04f      	b.n	800577e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056de:	4b2b      	ldr	r3, [pc, #172]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 020c 	and.w	r2, r3, #12
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d1eb      	bne.n	80056c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056f0:	4b25      	ldr	r3, [pc, #148]	; (8005788 <HAL_RCC_ClockConfig+0x1b8>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d20c      	bcs.n	8005718 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056fe:	4b22      	ldr	r3, [pc, #136]	; (8005788 <HAL_RCC_ClockConfig+0x1b8>)
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005706:	4b20      	ldr	r3, [pc, #128]	; (8005788 <HAL_RCC_ClockConfig+0x1b8>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0307 	and.w	r3, r3, #7
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	429a      	cmp	r2, r3
 8005712:	d001      	beq.n	8005718 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e032      	b.n	800577e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0304 	and.w	r3, r3, #4
 8005720:	2b00      	cmp	r3, #0
 8005722:	d008      	beq.n	8005736 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005724:	4b19      	ldr	r3, [pc, #100]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	4916      	ldr	r1, [pc, #88]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005732:	4313      	orrs	r3, r2
 8005734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0308 	and.w	r3, r3, #8
 800573e:	2b00      	cmp	r3, #0
 8005740:	d009      	beq.n	8005756 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005742:	4b12      	ldr	r3, [pc, #72]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	490e      	ldr	r1, [pc, #56]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005752:	4313      	orrs	r3, r2
 8005754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005756:	f000 f821 	bl	800579c <HAL_RCC_GetSysClockFreq>
 800575a:	4602      	mov	r2, r0
 800575c:	4b0b      	ldr	r3, [pc, #44]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	091b      	lsrs	r3, r3, #4
 8005762:	f003 030f 	and.w	r3, r3, #15
 8005766:	490a      	ldr	r1, [pc, #40]	; (8005790 <HAL_RCC_ClockConfig+0x1c0>)
 8005768:	5ccb      	ldrb	r3, [r1, r3]
 800576a:	fa22 f303 	lsr.w	r3, r2, r3
 800576e:	4a09      	ldr	r2, [pc, #36]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 8005770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005772:	4b09      	ldr	r3, [pc, #36]	; (8005798 <HAL_RCC_ClockConfig+0x1c8>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4618      	mov	r0, r3
 8005778:	f7fd f91c 	bl	80029b4 <HAL_InitTick>

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	40023c00 	.word	0x40023c00
 800578c:	40023800 	.word	0x40023800
 8005790:	0800eddc 	.word	0x0800eddc
 8005794:	200003a0 	.word	0x200003a0
 8005798:	200003a4 	.word	0x200003a4

0800579c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800579c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80057a0:	b084      	sub	sp, #16
 80057a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	607b      	str	r3, [r7, #4]
 80057a8:	2300      	movs	r3, #0
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	2300      	movs	r3, #0
 80057ae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80057b0:	2300      	movs	r3, #0
 80057b2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057b4:	4b67      	ldr	r3, [pc, #412]	; (8005954 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f003 030c 	and.w	r3, r3, #12
 80057bc:	2b08      	cmp	r3, #8
 80057be:	d00d      	beq.n	80057dc <HAL_RCC_GetSysClockFreq+0x40>
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	f200 80bd 	bhi.w	8005940 <HAL_RCC_GetSysClockFreq+0x1a4>
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d002      	beq.n	80057d0 <HAL_RCC_GetSysClockFreq+0x34>
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d003      	beq.n	80057d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80057ce:	e0b7      	b.n	8005940 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057d0:	4b61      	ldr	r3, [pc, #388]	; (8005958 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80057d2:	60bb      	str	r3, [r7, #8]
       break;
 80057d4:	e0b7      	b.n	8005946 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057d6:	4b61      	ldr	r3, [pc, #388]	; (800595c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80057d8:	60bb      	str	r3, [r7, #8]
      break;
 80057da:	e0b4      	b.n	8005946 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057dc:	4b5d      	ldr	r3, [pc, #372]	; (8005954 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057e6:	4b5b      	ldr	r3, [pc, #364]	; (8005954 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d04d      	beq.n	800588e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057f2:	4b58      	ldr	r3, [pc, #352]	; (8005954 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	099b      	lsrs	r3, r3, #6
 80057f8:	461a      	mov	r2, r3
 80057fa:	f04f 0300 	mov.w	r3, #0
 80057fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005802:	f04f 0100 	mov.w	r1, #0
 8005806:	ea02 0800 	and.w	r8, r2, r0
 800580a:	ea03 0901 	and.w	r9, r3, r1
 800580e:	4640      	mov	r0, r8
 8005810:	4649      	mov	r1, r9
 8005812:	f04f 0200 	mov.w	r2, #0
 8005816:	f04f 0300 	mov.w	r3, #0
 800581a:	014b      	lsls	r3, r1, #5
 800581c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005820:	0142      	lsls	r2, r0, #5
 8005822:	4610      	mov	r0, r2
 8005824:	4619      	mov	r1, r3
 8005826:	ebb0 0008 	subs.w	r0, r0, r8
 800582a:	eb61 0109 	sbc.w	r1, r1, r9
 800582e:	f04f 0200 	mov.w	r2, #0
 8005832:	f04f 0300 	mov.w	r3, #0
 8005836:	018b      	lsls	r3, r1, #6
 8005838:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800583c:	0182      	lsls	r2, r0, #6
 800583e:	1a12      	subs	r2, r2, r0
 8005840:	eb63 0301 	sbc.w	r3, r3, r1
 8005844:	f04f 0000 	mov.w	r0, #0
 8005848:	f04f 0100 	mov.w	r1, #0
 800584c:	00d9      	lsls	r1, r3, #3
 800584e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005852:	00d0      	lsls	r0, r2, #3
 8005854:	4602      	mov	r2, r0
 8005856:	460b      	mov	r3, r1
 8005858:	eb12 0208 	adds.w	r2, r2, r8
 800585c:	eb43 0309 	adc.w	r3, r3, r9
 8005860:	f04f 0000 	mov.w	r0, #0
 8005864:	f04f 0100 	mov.w	r1, #0
 8005868:	0259      	lsls	r1, r3, #9
 800586a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800586e:	0250      	lsls	r0, r2, #9
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	4610      	mov	r0, r2
 8005876:	4619      	mov	r1, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	461a      	mov	r2, r3
 800587c:	f04f 0300 	mov.w	r3, #0
 8005880:	f7fb fa02 	bl	8000c88 <__aeabi_uldivmod>
 8005884:	4602      	mov	r2, r0
 8005886:	460b      	mov	r3, r1
 8005888:	4613      	mov	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	e04a      	b.n	8005924 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800588e:	4b31      	ldr	r3, [pc, #196]	; (8005954 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	099b      	lsrs	r3, r3, #6
 8005894:	461a      	mov	r2, r3
 8005896:	f04f 0300 	mov.w	r3, #0
 800589a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800589e:	f04f 0100 	mov.w	r1, #0
 80058a2:	ea02 0400 	and.w	r4, r2, r0
 80058a6:	ea03 0501 	and.w	r5, r3, r1
 80058aa:	4620      	mov	r0, r4
 80058ac:	4629      	mov	r1, r5
 80058ae:	f04f 0200 	mov.w	r2, #0
 80058b2:	f04f 0300 	mov.w	r3, #0
 80058b6:	014b      	lsls	r3, r1, #5
 80058b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80058bc:	0142      	lsls	r2, r0, #5
 80058be:	4610      	mov	r0, r2
 80058c0:	4619      	mov	r1, r3
 80058c2:	1b00      	subs	r0, r0, r4
 80058c4:	eb61 0105 	sbc.w	r1, r1, r5
 80058c8:	f04f 0200 	mov.w	r2, #0
 80058cc:	f04f 0300 	mov.w	r3, #0
 80058d0:	018b      	lsls	r3, r1, #6
 80058d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80058d6:	0182      	lsls	r2, r0, #6
 80058d8:	1a12      	subs	r2, r2, r0
 80058da:	eb63 0301 	sbc.w	r3, r3, r1
 80058de:	f04f 0000 	mov.w	r0, #0
 80058e2:	f04f 0100 	mov.w	r1, #0
 80058e6:	00d9      	lsls	r1, r3, #3
 80058e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058ec:	00d0      	lsls	r0, r2, #3
 80058ee:	4602      	mov	r2, r0
 80058f0:	460b      	mov	r3, r1
 80058f2:	1912      	adds	r2, r2, r4
 80058f4:	eb45 0303 	adc.w	r3, r5, r3
 80058f8:	f04f 0000 	mov.w	r0, #0
 80058fc:	f04f 0100 	mov.w	r1, #0
 8005900:	0299      	lsls	r1, r3, #10
 8005902:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005906:	0290      	lsls	r0, r2, #10
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	4610      	mov	r0, r2
 800590e:	4619      	mov	r1, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	461a      	mov	r2, r3
 8005914:	f04f 0300 	mov.w	r3, #0
 8005918:	f7fb f9b6 	bl	8000c88 <__aeabi_uldivmod>
 800591c:	4602      	mov	r2, r0
 800591e:	460b      	mov	r3, r1
 8005920:	4613      	mov	r3, r2
 8005922:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005924:	4b0b      	ldr	r3, [pc, #44]	; (8005954 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	0c1b      	lsrs	r3, r3, #16
 800592a:	f003 0303 	and.w	r3, r3, #3
 800592e:	3301      	adds	r3, #1
 8005930:	005b      	lsls	r3, r3, #1
 8005932:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	fbb2 f3f3 	udiv	r3, r2, r3
 800593c:	60bb      	str	r3, [r7, #8]
      break;
 800593e:	e002      	b.n	8005946 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005940:	4b05      	ldr	r3, [pc, #20]	; (8005958 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005942:	60bb      	str	r3, [r7, #8]
      break;
 8005944:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005946:	68bb      	ldr	r3, [r7, #8]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005952:	bf00      	nop
 8005954:	40023800 	.word	0x40023800
 8005958:	00f42400 	.word	0x00f42400
 800595c:	007a1200 	.word	0x007a1200

08005960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005960:	b480      	push	{r7}
 8005962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005964:	4b03      	ldr	r3, [pc, #12]	; (8005974 <HAL_RCC_GetHCLKFreq+0x14>)
 8005966:	681b      	ldr	r3, [r3, #0]
}
 8005968:	4618      	mov	r0, r3
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	200003a0 	.word	0x200003a0

08005978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800597c:	f7ff fff0 	bl	8005960 <HAL_RCC_GetHCLKFreq>
 8005980:	4602      	mov	r2, r0
 8005982:	4b05      	ldr	r3, [pc, #20]	; (8005998 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	0a9b      	lsrs	r3, r3, #10
 8005988:	f003 0307 	and.w	r3, r3, #7
 800598c:	4903      	ldr	r1, [pc, #12]	; (800599c <HAL_RCC_GetPCLK1Freq+0x24>)
 800598e:	5ccb      	ldrb	r3, [r1, r3]
 8005990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005994:	4618      	mov	r0, r3
 8005996:	bd80      	pop	{r7, pc}
 8005998:	40023800 	.word	0x40023800
 800599c:	0800edec 	.word	0x0800edec

080059a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80059a4:	f7ff ffdc 	bl	8005960 <HAL_RCC_GetHCLKFreq>
 80059a8:	4602      	mov	r2, r0
 80059aa:	4b05      	ldr	r3, [pc, #20]	; (80059c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	0b5b      	lsrs	r3, r3, #13
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	4903      	ldr	r1, [pc, #12]	; (80059c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059b6:	5ccb      	ldrb	r3, [r1, r3]
 80059b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059bc:	4618      	mov	r0, r3
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	40023800 	.word	0x40023800
 80059c4:	0800edec 	.word	0x0800edec

080059c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e041      	b.n	8005a5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d106      	bne.n	80059f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7fc fdc0 	bl	8002574 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3304      	adds	r3, #4
 8005a04:	4619      	mov	r1, r3
 8005a06:	4610      	mov	r0, r2
 8005a08:	f000 f82e 	bl	8005a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
	...

08005a68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a40      	ldr	r2, [pc, #256]	; (8005b7c <TIM_Base_SetConfig+0x114>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d013      	beq.n	8005aa8 <TIM_Base_SetConfig+0x40>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a86:	d00f      	beq.n	8005aa8 <TIM_Base_SetConfig+0x40>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a3d      	ldr	r2, [pc, #244]	; (8005b80 <TIM_Base_SetConfig+0x118>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d00b      	beq.n	8005aa8 <TIM_Base_SetConfig+0x40>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a3c      	ldr	r2, [pc, #240]	; (8005b84 <TIM_Base_SetConfig+0x11c>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d007      	beq.n	8005aa8 <TIM_Base_SetConfig+0x40>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a3b      	ldr	r2, [pc, #236]	; (8005b88 <TIM_Base_SetConfig+0x120>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d003      	beq.n	8005aa8 <TIM_Base_SetConfig+0x40>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a3a      	ldr	r2, [pc, #232]	; (8005b8c <TIM_Base_SetConfig+0x124>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d108      	bne.n	8005aba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a2f      	ldr	r2, [pc, #188]	; (8005b7c <TIM_Base_SetConfig+0x114>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d02b      	beq.n	8005b1a <TIM_Base_SetConfig+0xb2>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac8:	d027      	beq.n	8005b1a <TIM_Base_SetConfig+0xb2>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a2c      	ldr	r2, [pc, #176]	; (8005b80 <TIM_Base_SetConfig+0x118>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d023      	beq.n	8005b1a <TIM_Base_SetConfig+0xb2>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a2b      	ldr	r2, [pc, #172]	; (8005b84 <TIM_Base_SetConfig+0x11c>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d01f      	beq.n	8005b1a <TIM_Base_SetConfig+0xb2>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a2a      	ldr	r2, [pc, #168]	; (8005b88 <TIM_Base_SetConfig+0x120>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d01b      	beq.n	8005b1a <TIM_Base_SetConfig+0xb2>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a29      	ldr	r2, [pc, #164]	; (8005b8c <TIM_Base_SetConfig+0x124>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d017      	beq.n	8005b1a <TIM_Base_SetConfig+0xb2>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a28      	ldr	r2, [pc, #160]	; (8005b90 <TIM_Base_SetConfig+0x128>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d013      	beq.n	8005b1a <TIM_Base_SetConfig+0xb2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a27      	ldr	r2, [pc, #156]	; (8005b94 <TIM_Base_SetConfig+0x12c>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d00f      	beq.n	8005b1a <TIM_Base_SetConfig+0xb2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a26      	ldr	r2, [pc, #152]	; (8005b98 <TIM_Base_SetConfig+0x130>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d00b      	beq.n	8005b1a <TIM_Base_SetConfig+0xb2>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a25      	ldr	r2, [pc, #148]	; (8005b9c <TIM_Base_SetConfig+0x134>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d007      	beq.n	8005b1a <TIM_Base_SetConfig+0xb2>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a24      	ldr	r2, [pc, #144]	; (8005ba0 <TIM_Base_SetConfig+0x138>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d003      	beq.n	8005b1a <TIM_Base_SetConfig+0xb2>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a23      	ldr	r2, [pc, #140]	; (8005ba4 <TIM_Base_SetConfig+0x13c>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d108      	bne.n	8005b2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a0a      	ldr	r2, [pc, #40]	; (8005b7c <TIM_Base_SetConfig+0x114>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d003      	beq.n	8005b60 <TIM_Base_SetConfig+0xf8>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a0c      	ldr	r2, [pc, #48]	; (8005b8c <TIM_Base_SetConfig+0x124>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d103      	bne.n	8005b68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	691a      	ldr	r2, [r3, #16]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	615a      	str	r2, [r3, #20]
}
 8005b6e:	bf00      	nop
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	40010000 	.word	0x40010000
 8005b80:	40000400 	.word	0x40000400
 8005b84:	40000800 	.word	0x40000800
 8005b88:	40000c00 	.word	0x40000c00
 8005b8c:	40010400 	.word	0x40010400
 8005b90:	40014000 	.word	0x40014000
 8005b94:	40014400 	.word	0x40014400
 8005b98:	40014800 	.word	0x40014800
 8005b9c:	40001800 	.word	0x40001800
 8005ba0:	40001c00 	.word	0x40001c00
 8005ba4:	40002000 	.word	0x40002000

08005ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d101      	bne.n	8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	e05a      	b.n	8005c76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a21      	ldr	r2, [pc, #132]	; (8005c84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d022      	beq.n	8005c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c0c:	d01d      	beq.n	8005c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a1d      	ldr	r2, [pc, #116]	; (8005c88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d018      	beq.n	8005c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a1b      	ldr	r2, [pc, #108]	; (8005c8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d013      	beq.n	8005c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a1a      	ldr	r2, [pc, #104]	; (8005c90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d00e      	beq.n	8005c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a18      	ldr	r2, [pc, #96]	; (8005c94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d009      	beq.n	8005c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a17      	ldr	r2, [pc, #92]	; (8005c98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d004      	beq.n	8005c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a15      	ldr	r2, [pc, #84]	; (8005c9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d10c      	bne.n	8005c64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	40010000 	.word	0x40010000
 8005c88:	40000400 	.word	0x40000400
 8005c8c:	40000800 	.word	0x40000800
 8005c90:	40000c00 	.word	0x40000c00
 8005c94:	40010400 	.word	0x40010400
 8005c98:	40014000 	.word	0x40014000
 8005c9c:	40001800 	.word	0x40001800

08005ca0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e03f      	b.n	8005d32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d106      	bne.n	8005ccc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f7fc fc76 	bl	80025b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2224      	movs	r2, #36	; 0x24
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68da      	ldr	r2, [r3, #12]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ce2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f9cb 	bl	8006080 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	691a      	ldr	r2, [r3, #16]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	695a      	ldr	r2, [r3, #20]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68da      	ldr	r2, [r3, #12]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b08a      	sub	sp, #40	; 0x28
 8005d3e:	af02      	add	r7, sp, #8
 8005d40:	60f8      	str	r0, [r7, #12]
 8005d42:	60b9      	str	r1, [r7, #8]
 8005d44:	603b      	str	r3, [r7, #0]
 8005d46:	4613      	mov	r3, r2
 8005d48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b20      	cmp	r3, #32
 8005d58:	d17c      	bne.n	8005e54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <HAL_UART_Transmit+0x2c>
 8005d60:	88fb      	ldrh	r3, [r7, #6]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e075      	b.n	8005e56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d101      	bne.n	8005d78 <HAL_UART_Transmit+0x3e>
 8005d74:	2302      	movs	r3, #2
 8005d76:	e06e      	b.n	8005e56 <HAL_UART_Transmit+0x11c>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2221      	movs	r2, #33	; 0x21
 8005d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d8e:	f7fc fe55 	bl	8002a3c <HAL_GetTick>
 8005d92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	88fa      	ldrh	r2, [r7, #6]
 8005d98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	88fa      	ldrh	r2, [r7, #6]
 8005d9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005da8:	d108      	bne.n	8005dbc <HAL_UART_Transmit+0x82>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d104      	bne.n	8005dbc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005db2:	2300      	movs	r3, #0
 8005db4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	61bb      	str	r3, [r7, #24]
 8005dba:	e003      	b.n	8005dc4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005dcc:	e02a      	b.n	8005e24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	2180      	movs	r1, #128	; 0x80
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f000 f8e2 	bl	8005fa2 <UART_WaitOnFlagUntilTimeout>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e036      	b.n	8005e56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10b      	bne.n	8005e06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	461a      	mov	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dfc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	3302      	adds	r3, #2
 8005e02:	61bb      	str	r3, [r7, #24]
 8005e04:	e007      	b.n	8005e16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	781a      	ldrb	r2, [r3, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	3301      	adds	r3, #1
 8005e14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1cf      	bne.n	8005dce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2200      	movs	r2, #0
 8005e36:	2140      	movs	r1, #64	; 0x40
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 f8b2 	bl	8005fa2 <UART_WaitOnFlagUntilTimeout>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e006      	b.n	8005e56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e50:	2300      	movs	r3, #0
 8005e52:	e000      	b.n	8005e56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005e54:	2302      	movs	r3, #2
  }
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3720      	adds	r7, #32
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b08a      	sub	sp, #40	; 0x28
 8005e62:	af02      	add	r7, sp, #8
 8005e64:	60f8      	str	r0, [r7, #12]
 8005e66:	60b9      	str	r1, [r7, #8]
 8005e68:	603b      	str	r3, [r7, #0]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b20      	cmp	r3, #32
 8005e7c:	f040 808c 	bne.w	8005f98 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d002      	beq.n	8005e8c <HAL_UART_Receive+0x2e>
 8005e86:	88fb      	ldrh	r3, [r7, #6]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e084      	b.n	8005f9a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d101      	bne.n	8005e9e <HAL_UART_Receive+0x40>
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	e07d      	b.n	8005f9a <HAL_UART_Receive+0x13c>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2222      	movs	r2, #34	; 0x22
 8005eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005eba:	f7fc fdbf 	bl	8002a3c <HAL_GetTick>
 8005ebe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	88fa      	ldrh	r2, [r7, #6]
 8005ec4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	88fa      	ldrh	r2, [r7, #6]
 8005eca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed4:	d108      	bne.n	8005ee8 <HAL_UART_Receive+0x8a>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d104      	bne.n	8005ee8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	61bb      	str	r3, [r7, #24]
 8005ee6:	e003      	b.n	8005ef0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005eec:	2300      	movs	r3, #0
 8005eee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005ef8:	e043      	b.n	8005f82 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	9300      	str	r3, [sp, #0]
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	2200      	movs	r2, #0
 8005f02:	2120      	movs	r1, #32
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 f84c 	bl	8005fa2 <UART_WaitOnFlagUntilTimeout>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e042      	b.n	8005f9a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10c      	bne.n	8005f34 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	3302      	adds	r3, #2
 8005f30:	61bb      	str	r3, [r7, #24]
 8005f32:	e01f      	b.n	8005f74 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f3c:	d007      	beq.n	8005f4e <HAL_UART_Receive+0xf0>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10a      	bne.n	8005f5c <HAL_UART_Receive+0xfe>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d106      	bne.n	8005f5c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	701a      	strb	r2, [r3, #0]
 8005f5a:	e008      	b.n	8005f6e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	3301      	adds	r3, #1
 8005f72:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1b6      	bne.n	8005efa <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005f94:	2300      	movs	r3, #0
 8005f96:	e000      	b.n	8005f9a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005f98:	2302      	movs	r3, #2
  }
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3720      	adds	r7, #32
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b090      	sub	sp, #64	; 0x40
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	60f8      	str	r0, [r7, #12]
 8005faa:	60b9      	str	r1, [r7, #8]
 8005fac:	603b      	str	r3, [r7, #0]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fb2:	e050      	b.n	8006056 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fba:	d04c      	beq.n	8006056 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d007      	beq.n	8005fd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fc2:	f7fc fd3b 	bl	8002a3c <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d241      	bcs.n	8006056 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	330c      	adds	r3, #12
 8005fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fdc:	e853 3f00 	ldrex	r3, [r3]
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	330c      	adds	r3, #12
 8005ff0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ff2:	637a      	str	r2, [r7, #52]	; 0x34
 8005ff4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ff8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ffa:	e841 2300 	strex	r3, r2, [r1]
 8005ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1e5      	bne.n	8005fd2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3314      	adds	r3, #20
 800600c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	e853 3f00 	ldrex	r3, [r3]
 8006014:	613b      	str	r3, [r7, #16]
   return(result);
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	f023 0301 	bic.w	r3, r3, #1
 800601c:	63bb      	str	r3, [r7, #56]	; 0x38
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	3314      	adds	r3, #20
 8006024:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006026:	623a      	str	r2, [r7, #32]
 8006028:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602a:	69f9      	ldr	r1, [r7, #28]
 800602c:	6a3a      	ldr	r2, [r7, #32]
 800602e:	e841 2300 	strex	r3, r2, [r1]
 8006032:	61bb      	str	r3, [r7, #24]
   return(result);
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1e5      	bne.n	8006006 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2220      	movs	r2, #32
 800603e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2220      	movs	r2, #32
 8006046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e00f      	b.n	8006076 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	4013      	ands	r3, r2
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	429a      	cmp	r2, r3
 8006064:	bf0c      	ite	eq
 8006066:	2301      	moveq	r3, #1
 8006068:	2300      	movne	r3, #0
 800606a:	b2db      	uxtb	r3, r3
 800606c:	461a      	mov	r2, r3
 800606e:	79fb      	ldrb	r3, [r7, #7]
 8006070:	429a      	cmp	r2, r3
 8006072:	d09f      	beq.n	8005fb4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3740      	adds	r7, #64	; 0x40
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
	...

08006080 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006084:	b09f      	sub	sp, #124	; 0x7c
 8006086:	af00      	add	r7, sp, #0
 8006088:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800608a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006096:	68d9      	ldr	r1, [r3, #12]
 8006098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	ea40 0301 	orr.w	r3, r0, r1
 80060a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a4:	689a      	ldr	r2, [r3, #8]
 80060a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	431a      	orrs	r2, r3
 80060ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	431a      	orrs	r2, r3
 80060b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80060ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80060c4:	f021 010c 	bic.w	r1, r1, #12
 80060c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060ce:	430b      	orrs	r3, r1
 80060d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80060dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060de:	6999      	ldr	r1, [r3, #24]
 80060e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	ea40 0301 	orr.w	r3, r0, r1
 80060e8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	4bc5      	ldr	r3, [pc, #788]	; (8006404 <UART_SetConfig+0x384>)
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d004      	beq.n	80060fe <UART_SetConfig+0x7e>
 80060f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	4bc3      	ldr	r3, [pc, #780]	; (8006408 <UART_SetConfig+0x388>)
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d103      	bne.n	8006106 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060fe:	f7ff fc4f 	bl	80059a0 <HAL_RCC_GetPCLK2Freq>
 8006102:	6778      	str	r0, [r7, #116]	; 0x74
 8006104:	e002      	b.n	800610c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006106:	f7ff fc37 	bl	8005978 <HAL_RCC_GetPCLK1Freq>
 800610a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800610c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800610e:	69db      	ldr	r3, [r3, #28]
 8006110:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006114:	f040 80b6 	bne.w	8006284 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006118:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800611a:	461c      	mov	r4, r3
 800611c:	f04f 0500 	mov.w	r5, #0
 8006120:	4622      	mov	r2, r4
 8006122:	462b      	mov	r3, r5
 8006124:	1891      	adds	r1, r2, r2
 8006126:	6439      	str	r1, [r7, #64]	; 0x40
 8006128:	415b      	adcs	r3, r3
 800612a:	647b      	str	r3, [r7, #68]	; 0x44
 800612c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006130:	1912      	adds	r2, r2, r4
 8006132:	eb45 0303 	adc.w	r3, r5, r3
 8006136:	f04f 0000 	mov.w	r0, #0
 800613a:	f04f 0100 	mov.w	r1, #0
 800613e:	00d9      	lsls	r1, r3, #3
 8006140:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006144:	00d0      	lsls	r0, r2, #3
 8006146:	4602      	mov	r2, r0
 8006148:	460b      	mov	r3, r1
 800614a:	1911      	adds	r1, r2, r4
 800614c:	6639      	str	r1, [r7, #96]	; 0x60
 800614e:	416b      	adcs	r3, r5
 8006150:	667b      	str	r3, [r7, #100]	; 0x64
 8006152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	461a      	mov	r2, r3
 8006158:	f04f 0300 	mov.w	r3, #0
 800615c:	1891      	adds	r1, r2, r2
 800615e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006160:	415b      	adcs	r3, r3
 8006162:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006164:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006168:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800616c:	f7fa fd8c 	bl	8000c88 <__aeabi_uldivmod>
 8006170:	4602      	mov	r2, r0
 8006172:	460b      	mov	r3, r1
 8006174:	4ba5      	ldr	r3, [pc, #660]	; (800640c <UART_SetConfig+0x38c>)
 8006176:	fba3 2302 	umull	r2, r3, r3, r2
 800617a:	095b      	lsrs	r3, r3, #5
 800617c:	011e      	lsls	r6, r3, #4
 800617e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006180:	461c      	mov	r4, r3
 8006182:	f04f 0500 	mov.w	r5, #0
 8006186:	4622      	mov	r2, r4
 8006188:	462b      	mov	r3, r5
 800618a:	1891      	adds	r1, r2, r2
 800618c:	6339      	str	r1, [r7, #48]	; 0x30
 800618e:	415b      	adcs	r3, r3
 8006190:	637b      	str	r3, [r7, #52]	; 0x34
 8006192:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006196:	1912      	adds	r2, r2, r4
 8006198:	eb45 0303 	adc.w	r3, r5, r3
 800619c:	f04f 0000 	mov.w	r0, #0
 80061a0:	f04f 0100 	mov.w	r1, #0
 80061a4:	00d9      	lsls	r1, r3, #3
 80061a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061aa:	00d0      	lsls	r0, r2, #3
 80061ac:	4602      	mov	r2, r0
 80061ae:	460b      	mov	r3, r1
 80061b0:	1911      	adds	r1, r2, r4
 80061b2:	65b9      	str	r1, [r7, #88]	; 0x58
 80061b4:	416b      	adcs	r3, r5
 80061b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	461a      	mov	r2, r3
 80061be:	f04f 0300 	mov.w	r3, #0
 80061c2:	1891      	adds	r1, r2, r2
 80061c4:	62b9      	str	r1, [r7, #40]	; 0x28
 80061c6:	415b      	adcs	r3, r3
 80061c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061ce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80061d2:	f7fa fd59 	bl	8000c88 <__aeabi_uldivmod>
 80061d6:	4602      	mov	r2, r0
 80061d8:	460b      	mov	r3, r1
 80061da:	4b8c      	ldr	r3, [pc, #560]	; (800640c <UART_SetConfig+0x38c>)
 80061dc:	fba3 1302 	umull	r1, r3, r3, r2
 80061e0:	095b      	lsrs	r3, r3, #5
 80061e2:	2164      	movs	r1, #100	; 0x64
 80061e4:	fb01 f303 	mul.w	r3, r1, r3
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	00db      	lsls	r3, r3, #3
 80061ec:	3332      	adds	r3, #50	; 0x32
 80061ee:	4a87      	ldr	r2, [pc, #540]	; (800640c <UART_SetConfig+0x38c>)
 80061f0:	fba2 2303 	umull	r2, r3, r2, r3
 80061f4:	095b      	lsrs	r3, r3, #5
 80061f6:	005b      	lsls	r3, r3, #1
 80061f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061fc:	441e      	add	r6, r3
 80061fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006200:	4618      	mov	r0, r3
 8006202:	f04f 0100 	mov.w	r1, #0
 8006206:	4602      	mov	r2, r0
 8006208:	460b      	mov	r3, r1
 800620a:	1894      	adds	r4, r2, r2
 800620c:	623c      	str	r4, [r7, #32]
 800620e:	415b      	adcs	r3, r3
 8006210:	627b      	str	r3, [r7, #36]	; 0x24
 8006212:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006216:	1812      	adds	r2, r2, r0
 8006218:	eb41 0303 	adc.w	r3, r1, r3
 800621c:	f04f 0400 	mov.w	r4, #0
 8006220:	f04f 0500 	mov.w	r5, #0
 8006224:	00dd      	lsls	r5, r3, #3
 8006226:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800622a:	00d4      	lsls	r4, r2, #3
 800622c:	4622      	mov	r2, r4
 800622e:	462b      	mov	r3, r5
 8006230:	1814      	adds	r4, r2, r0
 8006232:	653c      	str	r4, [r7, #80]	; 0x50
 8006234:	414b      	adcs	r3, r1
 8006236:	657b      	str	r3, [r7, #84]	; 0x54
 8006238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	461a      	mov	r2, r3
 800623e:	f04f 0300 	mov.w	r3, #0
 8006242:	1891      	adds	r1, r2, r2
 8006244:	61b9      	str	r1, [r7, #24]
 8006246:	415b      	adcs	r3, r3
 8006248:	61fb      	str	r3, [r7, #28]
 800624a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800624e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006252:	f7fa fd19 	bl	8000c88 <__aeabi_uldivmod>
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	4b6c      	ldr	r3, [pc, #432]	; (800640c <UART_SetConfig+0x38c>)
 800625c:	fba3 1302 	umull	r1, r3, r3, r2
 8006260:	095b      	lsrs	r3, r3, #5
 8006262:	2164      	movs	r1, #100	; 0x64
 8006264:	fb01 f303 	mul.w	r3, r1, r3
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	00db      	lsls	r3, r3, #3
 800626c:	3332      	adds	r3, #50	; 0x32
 800626e:	4a67      	ldr	r2, [pc, #412]	; (800640c <UART_SetConfig+0x38c>)
 8006270:	fba2 2303 	umull	r2, r3, r2, r3
 8006274:	095b      	lsrs	r3, r3, #5
 8006276:	f003 0207 	and.w	r2, r3, #7
 800627a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4432      	add	r2, r6
 8006280:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006282:	e0b9      	b.n	80063f8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006284:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006286:	461c      	mov	r4, r3
 8006288:	f04f 0500 	mov.w	r5, #0
 800628c:	4622      	mov	r2, r4
 800628e:	462b      	mov	r3, r5
 8006290:	1891      	adds	r1, r2, r2
 8006292:	6139      	str	r1, [r7, #16]
 8006294:	415b      	adcs	r3, r3
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800629c:	1912      	adds	r2, r2, r4
 800629e:	eb45 0303 	adc.w	r3, r5, r3
 80062a2:	f04f 0000 	mov.w	r0, #0
 80062a6:	f04f 0100 	mov.w	r1, #0
 80062aa:	00d9      	lsls	r1, r3, #3
 80062ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062b0:	00d0      	lsls	r0, r2, #3
 80062b2:	4602      	mov	r2, r0
 80062b4:	460b      	mov	r3, r1
 80062b6:	eb12 0804 	adds.w	r8, r2, r4
 80062ba:	eb43 0905 	adc.w	r9, r3, r5
 80062be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	4618      	mov	r0, r3
 80062c4:	f04f 0100 	mov.w	r1, #0
 80062c8:	f04f 0200 	mov.w	r2, #0
 80062cc:	f04f 0300 	mov.w	r3, #0
 80062d0:	008b      	lsls	r3, r1, #2
 80062d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80062d6:	0082      	lsls	r2, r0, #2
 80062d8:	4640      	mov	r0, r8
 80062da:	4649      	mov	r1, r9
 80062dc:	f7fa fcd4 	bl	8000c88 <__aeabi_uldivmod>
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	4b49      	ldr	r3, [pc, #292]	; (800640c <UART_SetConfig+0x38c>)
 80062e6:	fba3 2302 	umull	r2, r3, r3, r2
 80062ea:	095b      	lsrs	r3, r3, #5
 80062ec:	011e      	lsls	r6, r3, #4
 80062ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062f0:	4618      	mov	r0, r3
 80062f2:	f04f 0100 	mov.w	r1, #0
 80062f6:	4602      	mov	r2, r0
 80062f8:	460b      	mov	r3, r1
 80062fa:	1894      	adds	r4, r2, r2
 80062fc:	60bc      	str	r4, [r7, #8]
 80062fe:	415b      	adcs	r3, r3
 8006300:	60fb      	str	r3, [r7, #12]
 8006302:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006306:	1812      	adds	r2, r2, r0
 8006308:	eb41 0303 	adc.w	r3, r1, r3
 800630c:	f04f 0400 	mov.w	r4, #0
 8006310:	f04f 0500 	mov.w	r5, #0
 8006314:	00dd      	lsls	r5, r3, #3
 8006316:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800631a:	00d4      	lsls	r4, r2, #3
 800631c:	4622      	mov	r2, r4
 800631e:	462b      	mov	r3, r5
 8006320:	1814      	adds	r4, r2, r0
 8006322:	64bc      	str	r4, [r7, #72]	; 0x48
 8006324:	414b      	adcs	r3, r1
 8006326:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	4618      	mov	r0, r3
 800632e:	f04f 0100 	mov.w	r1, #0
 8006332:	f04f 0200 	mov.w	r2, #0
 8006336:	f04f 0300 	mov.w	r3, #0
 800633a:	008b      	lsls	r3, r1, #2
 800633c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006340:	0082      	lsls	r2, r0, #2
 8006342:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006346:	f7fa fc9f 	bl	8000c88 <__aeabi_uldivmod>
 800634a:	4602      	mov	r2, r0
 800634c:	460b      	mov	r3, r1
 800634e:	4b2f      	ldr	r3, [pc, #188]	; (800640c <UART_SetConfig+0x38c>)
 8006350:	fba3 1302 	umull	r1, r3, r3, r2
 8006354:	095b      	lsrs	r3, r3, #5
 8006356:	2164      	movs	r1, #100	; 0x64
 8006358:	fb01 f303 	mul.w	r3, r1, r3
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	011b      	lsls	r3, r3, #4
 8006360:	3332      	adds	r3, #50	; 0x32
 8006362:	4a2a      	ldr	r2, [pc, #168]	; (800640c <UART_SetConfig+0x38c>)
 8006364:	fba2 2303 	umull	r2, r3, r2, r3
 8006368:	095b      	lsrs	r3, r3, #5
 800636a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800636e:	441e      	add	r6, r3
 8006370:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006372:	4618      	mov	r0, r3
 8006374:	f04f 0100 	mov.w	r1, #0
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	1894      	adds	r4, r2, r2
 800637e:	603c      	str	r4, [r7, #0]
 8006380:	415b      	adcs	r3, r3
 8006382:	607b      	str	r3, [r7, #4]
 8006384:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006388:	1812      	adds	r2, r2, r0
 800638a:	eb41 0303 	adc.w	r3, r1, r3
 800638e:	f04f 0400 	mov.w	r4, #0
 8006392:	f04f 0500 	mov.w	r5, #0
 8006396:	00dd      	lsls	r5, r3, #3
 8006398:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800639c:	00d4      	lsls	r4, r2, #3
 800639e:	4622      	mov	r2, r4
 80063a0:	462b      	mov	r3, r5
 80063a2:	eb12 0a00 	adds.w	sl, r2, r0
 80063a6:	eb43 0b01 	adc.w	fp, r3, r1
 80063aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f04f 0100 	mov.w	r1, #0
 80063b4:	f04f 0200 	mov.w	r2, #0
 80063b8:	f04f 0300 	mov.w	r3, #0
 80063bc:	008b      	lsls	r3, r1, #2
 80063be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80063c2:	0082      	lsls	r2, r0, #2
 80063c4:	4650      	mov	r0, sl
 80063c6:	4659      	mov	r1, fp
 80063c8:	f7fa fc5e 	bl	8000c88 <__aeabi_uldivmod>
 80063cc:	4602      	mov	r2, r0
 80063ce:	460b      	mov	r3, r1
 80063d0:	4b0e      	ldr	r3, [pc, #56]	; (800640c <UART_SetConfig+0x38c>)
 80063d2:	fba3 1302 	umull	r1, r3, r3, r2
 80063d6:	095b      	lsrs	r3, r3, #5
 80063d8:	2164      	movs	r1, #100	; 0x64
 80063da:	fb01 f303 	mul.w	r3, r1, r3
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	011b      	lsls	r3, r3, #4
 80063e2:	3332      	adds	r3, #50	; 0x32
 80063e4:	4a09      	ldr	r2, [pc, #36]	; (800640c <UART_SetConfig+0x38c>)
 80063e6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ea:	095b      	lsrs	r3, r3, #5
 80063ec:	f003 020f 	and.w	r2, r3, #15
 80063f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4432      	add	r2, r6
 80063f6:	609a      	str	r2, [r3, #8]
}
 80063f8:	bf00      	nop
 80063fa:	377c      	adds	r7, #124	; 0x7c
 80063fc:	46bd      	mov	sp, r7
 80063fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006402:	bf00      	nop
 8006404:	40011000 	.word	0x40011000
 8006408:	40011400 	.word	0x40011400
 800640c:	51eb851f 	.word	0x51eb851f

08006410 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006410:	b084      	sub	sp, #16
 8006412:	b580      	push	{r7, lr}
 8006414:	b084      	sub	sp, #16
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	f107 001c 	add.w	r0, r7, #28
 800641e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	2b01      	cmp	r3, #1
 8006426:	d122      	bne.n	800646e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800643c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006452:	2b01      	cmp	r3, #1
 8006454:	d105      	bne.n	8006462 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f9a0 	bl	80067a8 <USB_CoreReset>
 8006468:	4603      	mov	r3, r0
 800646a:	73fb      	strb	r3, [r7, #15]
 800646c:	e01a      	b.n	80064a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f994 	bl	80067a8 <USB_CoreReset>
 8006480:	4603      	mov	r3, r0
 8006482:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006486:	2b00      	cmp	r3, #0
 8006488:	d106      	bne.n	8006498 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	639a      	str	r2, [r3, #56]	; 0x38
 8006496:	e005      	b.n	80064a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80064a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d10b      	bne.n	80064c2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f043 0206 	orr.w	r2, r3, #6
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f043 0220 	orr.w	r2, r3, #32
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064ce:	b004      	add	sp, #16
 80064d0:	4770      	bx	lr

080064d2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064d2:	b480      	push	{r7}
 80064d4:	b083      	sub	sp, #12
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f043 0201 	orr.w	r2, r3, #1
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f023 0201 	bic.w	r2, r3, #1
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b084      	sub	sp, #16
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
 800651e:	460b      	mov	r3, r1
 8006520:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006522:	2300      	movs	r3, #0
 8006524:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006532:	78fb      	ldrb	r3, [r7, #3]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d115      	bne.n	8006564 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006544:	2001      	movs	r0, #1
 8006546:	f7fc fa85 	bl	8002a54 <HAL_Delay>
      ms++;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	3301      	adds	r3, #1
 800654e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f91a 	bl	800678a <USB_GetMode>
 8006556:	4603      	mov	r3, r0
 8006558:	2b01      	cmp	r3, #1
 800655a:	d01e      	beq.n	800659a <USB_SetCurrentMode+0x84>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2b31      	cmp	r3, #49	; 0x31
 8006560:	d9f0      	bls.n	8006544 <USB_SetCurrentMode+0x2e>
 8006562:	e01a      	b.n	800659a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006564:	78fb      	ldrb	r3, [r7, #3]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d115      	bne.n	8006596 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006576:	2001      	movs	r0, #1
 8006578:	f7fc fa6c 	bl	8002a54 <HAL_Delay>
      ms++;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	3301      	adds	r3, #1
 8006580:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f901 	bl	800678a <USB_GetMode>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d005      	beq.n	800659a <USB_SetCurrentMode+0x84>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2b31      	cmp	r3, #49	; 0x31
 8006592:	d9f0      	bls.n	8006576 <USB_SetCurrentMode+0x60>
 8006594:	e001      	b.n	800659a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e005      	b.n	80065a6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2b32      	cmp	r3, #50	; 0x32
 800659e:	d101      	bne.n	80065a4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e000      	b.n	80065a6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
	...

080065b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	019b      	lsls	r3, r3, #6
 80065c2:	f043 0220 	orr.w	r2, r3, #32
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	3301      	adds	r3, #1
 80065ce:	60fb      	str	r3, [r7, #12]
 80065d0:	4a08      	ldr	r2, [pc, #32]	; (80065f4 <USB_FlushTxFifo+0x44>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d901      	bls.n	80065da <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e006      	b.n	80065e8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	f003 0320 	and.w	r3, r3, #32
 80065e2:	2b20      	cmp	r3, #32
 80065e4:	d0f1      	beq.n	80065ca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3714      	adds	r7, #20
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr
 80065f4:	00030d40 	.word	0x00030d40

080065f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006600:	2300      	movs	r3, #0
 8006602:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2210      	movs	r2, #16
 8006608:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	3301      	adds	r3, #1
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	4a08      	ldr	r2, [pc, #32]	; (8006634 <USB_FlushRxFifo+0x3c>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d901      	bls.n	800661a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e006      	b.n	8006628 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	f003 0310 	and.w	r3, r3, #16
 8006622:	2b10      	cmp	r3, #16
 8006624:	d0f1      	beq.n	800660a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	00030d40 	.word	0x00030d40

08006638 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006638:	b480      	push	{r7}
 800663a:	b089      	sub	sp, #36	; 0x24
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	4611      	mov	r1, r2
 8006644:	461a      	mov	r2, r3
 8006646:	460b      	mov	r3, r1
 8006648:	71fb      	strb	r3, [r7, #7]
 800664a:	4613      	mov	r3, r2
 800664c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006656:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800665a:	2b00      	cmp	r3, #0
 800665c:	d123      	bne.n	80066a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800665e:	88bb      	ldrh	r3, [r7, #4]
 8006660:	3303      	adds	r3, #3
 8006662:	089b      	lsrs	r3, r3, #2
 8006664:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006666:	2300      	movs	r3, #0
 8006668:	61bb      	str	r3, [r7, #24]
 800666a:	e018      	b.n	800669e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800666c:	79fb      	ldrb	r3, [r7, #7]
 800666e:	031a      	lsls	r2, r3, #12
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	4413      	add	r3, r2
 8006674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006678:	461a      	mov	r2, r3
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	3301      	adds	r3, #1
 8006684:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	3301      	adds	r3, #1
 800668a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	3301      	adds	r3, #1
 8006690:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	3301      	adds	r3, #1
 8006696:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	3301      	adds	r3, #1
 800669c:	61bb      	str	r3, [r7, #24]
 800669e:	69ba      	ldr	r2, [r7, #24]
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d3e2      	bcc.n	800666c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3724      	adds	r7, #36	; 0x24
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b08b      	sub	sp, #44	; 0x2c
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	4613      	mov	r3, r2
 80066c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80066ca:	88fb      	ldrh	r3, [r7, #6]
 80066cc:	089b      	lsrs	r3, r3, #2
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80066d2:	88fb      	ldrh	r3, [r7, #6]
 80066d4:	f003 0303 	and.w	r3, r3, #3
 80066d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80066da:	2300      	movs	r3, #0
 80066dc:	623b      	str	r3, [r7, #32]
 80066de:	e014      	b.n	800670a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80066ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ee:	3301      	adds	r3, #1
 80066f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	3301      	adds	r3, #1
 80066f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80066f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fa:	3301      	adds	r3, #1
 80066fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	3301      	adds	r3, #1
 8006702:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	3301      	adds	r3, #1
 8006708:	623b      	str	r3, [r7, #32]
 800670a:	6a3a      	ldr	r2, [r7, #32]
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	429a      	cmp	r2, r3
 8006710:	d3e6      	bcc.n	80066e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006712:	8bfb      	ldrh	r3, [r7, #30]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d01e      	beq.n	8006756 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006718:	2300      	movs	r3, #0
 800671a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006722:	461a      	mov	r2, r3
 8006724:	f107 0310 	add.w	r3, r7, #16
 8006728:	6812      	ldr	r2, [r2, #0]
 800672a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	6a3b      	ldr	r3, [r7, #32]
 8006730:	b2db      	uxtb	r3, r3
 8006732:	00db      	lsls	r3, r3, #3
 8006734:	fa22 f303 	lsr.w	r3, r2, r3
 8006738:	b2da      	uxtb	r2, r3
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	701a      	strb	r2, [r3, #0]
      i++;
 800673e:	6a3b      	ldr	r3, [r7, #32]
 8006740:	3301      	adds	r3, #1
 8006742:	623b      	str	r3, [r7, #32]
      pDest++;
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	3301      	adds	r3, #1
 8006748:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800674a:	8bfb      	ldrh	r3, [r7, #30]
 800674c:	3b01      	subs	r3, #1
 800674e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006750:	8bfb      	ldrh	r3, [r7, #30]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1ea      	bne.n	800672c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006758:	4618      	mov	r0, r3
 800675a:	372c      	adds	r7, #44	; 0x2c
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	695b      	ldr	r3, [r3, #20]
 8006770:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	4013      	ands	r3, r2
 800677a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800677c:	68fb      	ldr	r3, [r7, #12]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800678a:	b480      	push	{r7}
 800678c:	b083      	sub	sp, #12
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	f003 0301 	and.w	r3, r3, #1
}
 800679a:	4618      	mov	r0, r3
 800679c:	370c      	adds	r7, #12
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
	...

080067a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067b0:	2300      	movs	r3, #0
 80067b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	3301      	adds	r3, #1
 80067b8:	60fb      	str	r3, [r7, #12]
 80067ba:	4a13      	ldr	r2, [pc, #76]	; (8006808 <USB_CoreReset+0x60>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d901      	bls.n	80067c4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e01a      	b.n	80067fa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	daf3      	bge.n	80067b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067cc:	2300      	movs	r3, #0
 80067ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	f043 0201 	orr.w	r2, r3, #1
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	3301      	adds	r3, #1
 80067e0:	60fb      	str	r3, [r7, #12]
 80067e2:	4a09      	ldr	r2, [pc, #36]	; (8006808 <USB_CoreReset+0x60>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d901      	bls.n	80067ec <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e006      	b.n	80067fa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	f003 0301 	and.w	r3, r3, #1
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d0f1      	beq.n	80067dc <USB_CoreReset+0x34>

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	00030d40 	.word	0x00030d40

0800680c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800680c:	b084      	sub	sp, #16
 800680e:	b580      	push	{r7, lr}
 8006810:	b084      	sub	sp, #16
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	f107 001c 	add.w	r0, r7, #28
 800681a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006828:	461a      	mov	r2, r3
 800682a:	2300      	movs	r3, #0
 800682c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006832:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800685a:	2b00      	cmp	r3, #0
 800685c:	d018      	beq.n	8006890 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	2b01      	cmp	r3, #1
 8006862:	d10a      	bne.n	800687a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006872:	f043 0304 	orr.w	r3, r3, #4
 8006876:	6013      	str	r3, [r2, #0]
 8006878:	e014      	b.n	80068a4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006888:	f023 0304 	bic.w	r3, r3, #4
 800688c:	6013      	str	r3, [r2, #0]
 800688e:	e009      	b.n	80068a4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800689e:	f023 0304 	bic.w	r3, r3, #4
 80068a2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80068a4:	2110      	movs	r1, #16
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7ff fe82 	bl	80065b0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7ff fea3 	bl	80065f8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80068b2:	2300      	movs	r3, #0
 80068b4:	60fb      	str	r3, [r7, #12]
 80068b6:	e015      	b.n	80068e4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	015a      	lsls	r2, r3, #5
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	4413      	add	r3, r2
 80068c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068c4:	461a      	mov	r2, r3
 80068c6:	f04f 33ff 	mov.w	r3, #4294967295
 80068ca:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068d8:	461a      	mov	r2, r3
 80068da:	2300      	movs	r3, #0
 80068dc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	3301      	adds	r3, #1
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d3e5      	bcc.n	80068b8 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f04f 32ff 	mov.w	r2, #4294967295
 80068f8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00b      	beq.n	800691e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800690c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a13      	ldr	r2, [pc, #76]	; (8006960 <USB_HostInit+0x154>)
 8006912:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a13      	ldr	r2, [pc, #76]	; (8006964 <USB_HostInit+0x158>)
 8006918:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800691c:	e009      	b.n	8006932 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2280      	movs	r2, #128	; 0x80
 8006922:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a10      	ldr	r2, [pc, #64]	; (8006968 <USB_HostInit+0x15c>)
 8006928:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a0f      	ldr	r2, [pc, #60]	; (800696c <USB_HostInit+0x160>)
 800692e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006934:	2b00      	cmp	r3, #0
 8006936:	d105      	bne.n	8006944 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	f043 0210 	orr.w	r2, r3, #16
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	699a      	ldr	r2, [r3, #24]
 8006948:	4b09      	ldr	r3, [pc, #36]	; (8006970 <USB_HostInit+0x164>)
 800694a:	4313      	orrs	r3, r2
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800695c:	b004      	add	sp, #16
 800695e:	4770      	bx	lr
 8006960:	01000200 	.word	0x01000200
 8006964:	00e00300 	.word	0x00e00300
 8006968:	00600080 	.word	0x00600080
 800696c:	004000e0 	.word	0x004000e0
 8006970:	a3200008 	.word	0xa3200008

08006974 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	460b      	mov	r3, r1
 800697e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006992:	f023 0303 	bic.w	r3, r3, #3
 8006996:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	78fb      	ldrb	r3, [r7, #3]
 80069a2:	f003 0303 	and.w	r3, r3, #3
 80069a6:	68f9      	ldr	r1, [r7, #12]
 80069a8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80069ac:	4313      	orrs	r3, r2
 80069ae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80069b0:	78fb      	ldrb	r3, [r7, #3]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d107      	bne.n	80069c6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069bc:	461a      	mov	r2, r3
 80069be:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80069c2:	6053      	str	r3, [r2, #4]
 80069c4:	e009      	b.n	80069da <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80069c6:	78fb      	ldrb	r3, [r7, #3]
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d106      	bne.n	80069da <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069d2:	461a      	mov	r2, r3
 80069d4:	f241 7370 	movw	r3, #6000	; 0x1770
 80069d8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80069f4:	2300      	movs	r3, #0
 80069f6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006a08:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a16:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006a18:	2064      	movs	r0, #100	; 0x64
 8006a1a:	f7fc f81b 	bl	8002a54 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006a26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a2a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006a2c:	200a      	movs	r0, #10
 8006a2e:	f7fc f811 	bl	8002a54 <HAL_Delay>

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	460b      	mov	r3, r1
 8006a46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006a60:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d109      	bne.n	8006a80 <USB_DriveVbus+0x44>
 8006a6c:	78fb      	ldrb	r3, [r7, #3]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d106      	bne.n	8006a80 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006a7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a7e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a8a:	d109      	bne.n	8006aa0 <USB_DriveVbus+0x64>
 8006a8c:	78fb      	ldrb	r3, [r7, #3]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d106      	bne.n	8006aa0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006a9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a9e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b085      	sub	sp, #20
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006aba:	2300      	movs	r3, #0
 8006abc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	0c5b      	lsrs	r3, r3, #17
 8006acc:	f003 0303 	and.w	r3, r3, #3
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3714      	adds	r7, #20
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	b29b      	uxth	r3, r3
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3714      	adds	r7, #20
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
	...

08006b00 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b088      	sub	sp, #32
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	4608      	mov	r0, r1
 8006b0a:	4611      	mov	r1, r2
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	4603      	mov	r3, r0
 8006b10:	70fb      	strb	r3, [r7, #3]
 8006b12:	460b      	mov	r3, r1
 8006b14:	70bb      	strb	r3, [r7, #2]
 8006b16:	4613      	mov	r3, r2
 8006b18:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006b22:	78fb      	ldrb	r3, [r7, #3]
 8006b24:	015a      	lsls	r2, r3, #5
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	4413      	add	r3, r2
 8006b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b2e:	461a      	mov	r2, r3
 8006b30:	f04f 33ff 	mov.w	r3, #4294967295
 8006b34:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006b36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b3a:	2b03      	cmp	r3, #3
 8006b3c:	d87e      	bhi.n	8006c3c <USB_HC_Init+0x13c>
 8006b3e:	a201      	add	r2, pc, #4	; (adr r2, 8006b44 <USB_HC_Init+0x44>)
 8006b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b44:	08006b55 	.word	0x08006b55
 8006b48:	08006bff 	.word	0x08006bff
 8006b4c:	08006b55 	.word	0x08006b55
 8006b50:	08006bc1 	.word	0x08006bc1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006b54:	78fb      	ldrb	r3, [r7, #3]
 8006b56:	015a      	lsls	r2, r3, #5
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b60:	461a      	mov	r2, r3
 8006b62:	f240 439d 	movw	r3, #1181	; 0x49d
 8006b66:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006b68:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	da10      	bge.n	8006b92 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006b70:	78fb      	ldrb	r3, [r7, #3]
 8006b72:	015a      	lsls	r2, r3, #5
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	78fa      	ldrb	r2, [r7, #3]
 8006b80:	0151      	lsls	r1, r2, #5
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	440a      	add	r2, r1
 8006b86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b8e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006b90:	e057      	b.n	8006c42 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d051      	beq.n	8006c42 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006b9e:	78fb      	ldrb	r3, [r7, #3]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	78fa      	ldrb	r2, [r7, #3]
 8006bae:	0151      	lsls	r1, r2, #5
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	440a      	add	r2, r1
 8006bb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bb8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006bbc:	60d3      	str	r3, [r2, #12]
      break;
 8006bbe:	e040      	b.n	8006c42 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006bc0:	78fb      	ldrb	r3, [r7, #3]
 8006bc2:	015a      	lsls	r2, r3, #5
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bcc:	461a      	mov	r2, r3
 8006bce:	f240 639d 	movw	r3, #1693	; 0x69d
 8006bd2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006bd4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	da34      	bge.n	8006c46 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006bdc:	78fb      	ldrb	r3, [r7, #3]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	78fa      	ldrb	r2, [r7, #3]
 8006bec:	0151      	lsls	r1, r2, #5
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	440a      	add	r2, r1
 8006bf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bfa:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006bfc:	e023      	b.n	8006c46 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006bfe:	78fb      	ldrb	r3, [r7, #3]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	f240 2325 	movw	r3, #549	; 0x225
 8006c10:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006c12:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	da17      	bge.n	8006c4a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006c1a:	78fb      	ldrb	r3, [r7, #3]
 8006c1c:	015a      	lsls	r2, r3, #5
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	4413      	add	r3, r2
 8006c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	78fa      	ldrb	r2, [r7, #3]
 8006c2a:	0151      	lsls	r1, r2, #5
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	440a      	add	r2, r1
 8006c30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c34:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006c38:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006c3a:	e006      	b.n	8006c4a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	77fb      	strb	r3, [r7, #31]
      break;
 8006c40:	e004      	b.n	8006c4c <USB_HC_Init+0x14c>
      break;
 8006c42:	bf00      	nop
 8006c44:	e002      	b.n	8006c4c <USB_HC_Init+0x14c>
      break;
 8006c46:	bf00      	nop
 8006c48:	e000      	b.n	8006c4c <USB_HC_Init+0x14c>
      break;
 8006c4a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c52:	699a      	ldr	r2, [r3, #24]
 8006c54:	78fb      	ldrb	r3, [r7, #3]
 8006c56:	f003 030f 	and.w	r3, r3, #15
 8006c5a:	2101      	movs	r1, #1
 8006c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c60:	6939      	ldr	r1, [r7, #16]
 8006c62:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006c66:	4313      	orrs	r3, r2
 8006c68:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006c76:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	da03      	bge.n	8006c86 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c82:	61bb      	str	r3, [r7, #24]
 8006c84:	e001      	b.n	8006c8a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006c86:	2300      	movs	r3, #0
 8006c88:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7ff ff0f 	bl	8006aae <USB_GetHostSpeed>
 8006c90:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006c92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d106      	bne.n	8006ca8 <USB_HC_Init+0x1a8>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d003      	beq.n	8006ca8 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006ca0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ca4:	617b      	str	r3, [r7, #20]
 8006ca6:	e001      	b.n	8006cac <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006cac:	787b      	ldrb	r3, [r7, #1]
 8006cae:	059b      	lsls	r3, r3, #22
 8006cb0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006cb4:	78bb      	ldrb	r3, [r7, #2]
 8006cb6:	02db      	lsls	r3, r3, #11
 8006cb8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006cbc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006cbe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006cc2:	049b      	lsls	r3, r3, #18
 8006cc4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006cc8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006cca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006ccc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006cd0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006cd6:	78fb      	ldrb	r3, [r7, #3]
 8006cd8:	0159      	lsls	r1, r3, #5
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	440b      	add	r3, r1
 8006cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ce2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006ce8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006cea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006cee:	2b03      	cmp	r3, #3
 8006cf0:	d10f      	bne.n	8006d12 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006cf2:	78fb      	ldrb	r3, [r7, #3]
 8006cf4:	015a      	lsls	r2, r3, #5
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	78fa      	ldrb	r2, [r7, #3]
 8006d02:	0151      	lsls	r1, r2, #5
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	440a      	add	r2, r1
 8006d08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d10:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006d12:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3720      	adds	r7, #32
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08c      	sub	sp, #48	; 0x30
 8006d20:	af02      	add	r7, sp, #8
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	4613      	mov	r3, r2
 8006d28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	785b      	ldrb	r3, [r3, #1]
 8006d32:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006d34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d38:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d02d      	beq.n	8006da2 <USB_HC_StartXfer+0x86>
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	791b      	ldrb	r3, [r3, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d129      	bne.n	8006da2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006d4e:	79fb      	ldrb	r3, [r7, #7]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d117      	bne.n	8006d84 <USB_HC_StartXfer+0x68>
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	79db      	ldrb	r3, [r3, #7]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d003      	beq.n	8006d64 <USB_HC_StartXfer+0x48>
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	79db      	ldrb	r3, [r3, #7]
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d10f      	bne.n	8006d84 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	6a3b      	ldr	r3, [r7, #32]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	69fa      	ldr	r2, [r7, #28]
 8006d74:	0151      	lsls	r1, r2, #5
 8006d76:	6a3a      	ldr	r2, [r7, #32]
 8006d78:	440a      	add	r2, r1
 8006d7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d82:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006d84:	79fb      	ldrb	r3, [r7, #7]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10b      	bne.n	8006da2 <USB_HC_StartXfer+0x86>
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	795b      	ldrb	r3, [r3, #5]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d107      	bne.n	8006da2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	785b      	ldrb	r3, [r3, #1]
 8006d96:	4619      	mov	r1, r3
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f000 fa2f 	bl	80071fc <USB_DoPing>
      return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	e0f8      	b.n	8006f94 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d018      	beq.n	8006ddc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	8912      	ldrh	r2, [r2, #8]
 8006db2:	4413      	add	r3, r2
 8006db4:	3b01      	subs	r3, #1
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	8912      	ldrh	r2, [r2, #8]
 8006dba:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dbe:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006dc0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006dc2:	8b7b      	ldrh	r3, [r7, #26]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d90b      	bls.n	8006de0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006dc8:	8b7b      	ldrh	r3, [r7, #26]
 8006dca:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006dcc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	8912      	ldrh	r2, [r2, #8]
 8006dd2:	fb02 f203 	mul.w	r2, r2, r3
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	611a      	str	r2, [r3, #16]
 8006dda:	e001      	b.n	8006de0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	78db      	ldrb	r3, [r3, #3]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d007      	beq.n	8006df8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006de8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	8912      	ldrh	r2, [r2, #8]
 8006dee:	fb02 f203 	mul.w	r2, r2, r3
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	611a      	str	r2, [r3, #16]
 8006df6:	e003      	b.n	8006e00 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	695a      	ldr	r2, [r3, #20]
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e0a:	04d9      	lsls	r1, r3, #19
 8006e0c:	4b63      	ldr	r3, [pc, #396]	; (8006f9c <USB_HC_StartXfer+0x280>)
 8006e0e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e10:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	7a9b      	ldrb	r3, [r3, #10]
 8006e16:	075b      	lsls	r3, r3, #29
 8006e18:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e1c:	69f9      	ldr	r1, [r7, #28]
 8006e1e:	0148      	lsls	r0, r1, #5
 8006e20:	6a39      	ldr	r1, [r7, #32]
 8006e22:	4401      	add	r1, r0
 8006e24:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e28:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e2a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006e2c:	79fb      	ldrb	r3, [r7, #7]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d009      	beq.n	8006e46 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	68d9      	ldr	r1, [r3, #12]
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	015a      	lsls	r2, r3, #5
 8006e3a:	6a3b      	ldr	r3, [r7, #32]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e42:	460a      	mov	r2, r1
 8006e44:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006e46:	6a3b      	ldr	r3, [r7, #32]
 8006e48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f003 0301 	and.w	r3, r3, #1
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	bf0c      	ite	eq
 8006e56:	2301      	moveq	r3, #1
 8006e58:	2300      	movne	r3, #0
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	015a      	lsls	r2, r3, #5
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	4413      	add	r3, r2
 8006e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	69fa      	ldr	r2, [r7, #28]
 8006e6e:	0151      	lsls	r1, r2, #5
 8006e70:	6a3a      	ldr	r2, [r7, #32]
 8006e72:	440a      	add	r2, r1
 8006e74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e78:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006e7c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	015a      	lsls	r2, r3, #5
 8006e82:	6a3b      	ldr	r3, [r7, #32]
 8006e84:	4413      	add	r3, r2
 8006e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	7e7b      	ldrb	r3, [r7, #25]
 8006e8e:	075b      	lsls	r3, r3, #29
 8006e90:	69f9      	ldr	r1, [r7, #28]
 8006e92:	0148      	lsls	r0, r1, #5
 8006e94:	6a39      	ldr	r1, [r7, #32]
 8006e96:	4401      	add	r1, r0
 8006e98:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	6a3b      	ldr	r3, [r7, #32]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006eb6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	78db      	ldrb	r3, [r3, #3]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d004      	beq.n	8006eca <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ec6:	613b      	str	r3, [r7, #16]
 8006ec8:	e003      	b.n	8006ed2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ed0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ed8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	015a      	lsls	r2, r3, #5
 8006ede:	6a3b      	ldr	r3, [r7, #32]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006eec:	79fb      	ldrb	r3, [r7, #7]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	e04e      	b.n	8006f94 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	78db      	ldrb	r3, [r3, #3]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d149      	bne.n	8006f92 <USB_HC_StartXfer+0x276>
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d045      	beq.n	8006f92 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	79db      	ldrb	r3, [r3, #7]
 8006f0a:	2b03      	cmp	r3, #3
 8006f0c:	d830      	bhi.n	8006f70 <USB_HC_StartXfer+0x254>
 8006f0e:	a201      	add	r2, pc, #4	; (adr r2, 8006f14 <USB_HC_StartXfer+0x1f8>)
 8006f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f14:	08006f25 	.word	0x08006f25
 8006f18:	08006f49 	.word	0x08006f49
 8006f1c:	08006f25 	.word	0x08006f25
 8006f20:	08006f49 	.word	0x08006f49
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	695b      	ldr	r3, [r3, #20]
 8006f28:	3303      	adds	r3, #3
 8006f2a:	089b      	lsrs	r3, r3, #2
 8006f2c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006f2e:	8afa      	ldrh	r2, [r7, #22]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d91c      	bls.n	8006f74 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	f043 0220 	orr.w	r2, r3, #32
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	619a      	str	r2, [r3, #24]
        }
        break;
 8006f46:	e015      	b.n	8006f74 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	3303      	adds	r3, #3
 8006f4e:	089b      	lsrs	r3, r3, #2
 8006f50:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006f52:	8afa      	ldrh	r2, [r7, #22]
 8006f54:	6a3b      	ldr	r3, [r7, #32]
 8006f56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d90a      	bls.n	8006f78 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	699b      	ldr	r3, [r3, #24]
 8006f66:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	619a      	str	r2, [r3, #24]
        }
        break;
 8006f6e:	e003      	b.n	8006f78 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006f70:	bf00      	nop
 8006f72:	e002      	b.n	8006f7a <USB_HC_StartXfer+0x25e>
        break;
 8006f74:	bf00      	nop
 8006f76:	e000      	b.n	8006f7a <USB_HC_StartXfer+0x25e>
        break;
 8006f78:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	68d9      	ldr	r1, [r3, #12]
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	785a      	ldrb	r2, [r3, #1]
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	2000      	movs	r0, #0
 8006f8a:	9000      	str	r0, [sp, #0]
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f7ff fb53 	bl	8006638 <USB_WritePacket>
  }

  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3728      	adds	r7, #40	; 0x28
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	1ff80000 	.word	0x1ff80000

08006fa0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	b29b      	uxth	r3, r3
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3714      	adds	r7, #20
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr

08006fc2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006fc2:	b480      	push	{r7}
 8006fc4:	b089      	sub	sp, #36	; 0x24
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
 8006fca:	460b      	mov	r3, r1
 8006fcc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8006fd2:	78fb      	ldrb	r3, [r7, #3]
 8006fd4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	015a      	lsls	r2, r3, #5
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	0c9b      	lsrs	r3, r3, #18
 8006fea:	f003 0303 	and.w	r3, r3, #3
 8006fee:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	0fdb      	lsrs	r3, r3, #31
 8007000:	f003 0301 	and.w	r3, r3, #1
 8007004:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f003 0320 	and.w	r3, r3, #32
 800700e:	2b20      	cmp	r3, #32
 8007010:	d104      	bne.n	800701c <USB_HC_Halt+0x5a>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d101      	bne.n	800701c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007018:	2300      	movs	r3, #0
 800701a:	e0e8      	b.n	80071ee <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d002      	beq.n	8007028 <USB_HC_Halt+0x66>
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	2b02      	cmp	r3, #2
 8007026:	d173      	bne.n	8007110 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	015a      	lsls	r2, r3, #5
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	4413      	add	r3, r2
 8007030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	0151      	lsls	r1, r2, #5
 800703a:	69ba      	ldr	r2, [r7, #24]
 800703c:	440a      	add	r2, r1
 800703e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007042:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007046:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f003 0320 	and.w	r3, r3, #32
 8007050:	2b00      	cmp	r3, #0
 8007052:	f040 80cb 	bne.w	80071ec <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d143      	bne.n	80070ea <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	015a      	lsls	r2, r3, #5
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	4413      	add	r3, r2
 800706a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	0151      	lsls	r1, r2, #5
 8007074:	69ba      	ldr	r2, [r7, #24]
 8007076:	440a      	add	r2, r1
 8007078:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800707c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007080:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	4413      	add	r3, r2
 800708a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	697a      	ldr	r2, [r7, #20]
 8007092:	0151      	lsls	r1, r2, #5
 8007094:	69ba      	ldr	r2, [r7, #24]
 8007096:	440a      	add	r2, r1
 8007098:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800709c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070a0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	015a      	lsls	r2, r3, #5
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	4413      	add	r3, r2
 80070aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	0151      	lsls	r1, r2, #5
 80070b4:	69ba      	ldr	r2, [r7, #24]
 80070b6:	440a      	add	r2, r1
 80070b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070c0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	3301      	adds	r3, #1
 80070c6:	61fb      	str	r3, [r7, #28]
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070ce:	d81d      	bhi.n	800710c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	015a      	lsls	r2, r3, #5
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070e6:	d0ec      	beq.n	80070c2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80070e8:	e080      	b.n	80071ec <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	015a      	lsls	r2, r3, #5
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	4413      	add	r3, r2
 80070f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	697a      	ldr	r2, [r7, #20]
 80070fa:	0151      	lsls	r1, r2, #5
 80070fc:	69ba      	ldr	r2, [r7, #24]
 80070fe:	440a      	add	r2, r1
 8007100:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007104:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007108:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800710a:	e06f      	b.n	80071ec <USB_HC_Halt+0x22a>
            break;
 800710c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800710e:	e06d      	b.n	80071ec <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	4413      	add	r3, r2
 8007118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	0151      	lsls	r1, r2, #5
 8007122:	69ba      	ldr	r2, [r7, #24]
 8007124:	440a      	add	r2, r1
 8007126:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800712a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800712e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d143      	bne.n	80071c8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	015a      	lsls	r2, r3, #5
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	4413      	add	r3, r2
 8007148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	0151      	lsls	r1, r2, #5
 8007152:	69ba      	ldr	r2, [r7, #24]
 8007154:	440a      	add	r2, r1
 8007156:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800715a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800715e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	015a      	lsls	r2, r3, #5
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	4413      	add	r3, r2
 8007168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	0151      	lsls	r1, r2, #5
 8007172:	69ba      	ldr	r2, [r7, #24]
 8007174:	440a      	add	r2, r1
 8007176:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800717a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800717e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	015a      	lsls	r2, r3, #5
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	4413      	add	r3, r2
 8007188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	0151      	lsls	r1, r2, #5
 8007192:	69ba      	ldr	r2, [r7, #24]
 8007194:	440a      	add	r2, r1
 8007196:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800719a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800719e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	3301      	adds	r3, #1
 80071a4:	61fb      	str	r3, [r7, #28]
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071ac:	d81d      	bhi.n	80071ea <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	015a      	lsls	r2, r3, #5
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	4413      	add	r3, r2
 80071b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071c4:	d0ec      	beq.n	80071a0 <USB_HC_Halt+0x1de>
 80071c6:	e011      	b.n	80071ec <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	015a      	lsls	r2, r3, #5
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	4413      	add	r3, r2
 80071d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	0151      	lsls	r1, r2, #5
 80071da:	69ba      	ldr	r2, [r7, #24]
 80071dc:	440a      	add	r2, r1
 80071de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071e6:	6013      	str	r3, [r2, #0]
 80071e8:	e000      	b.n	80071ec <USB_HC_Halt+0x22a>
          break;
 80071ea:	bf00      	nop
    }
  }

  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3724      	adds	r7, #36	; 0x24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
	...

080071fc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b087      	sub	sp, #28
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	460b      	mov	r3, r1
 8007206:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800720c:	78fb      	ldrb	r3, [r7, #3]
 800720e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007210:	2301      	movs	r3, #1
 8007212:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	04da      	lsls	r2, r3, #19
 8007218:	4b15      	ldr	r3, [pc, #84]	; (8007270 <USB_DoPing+0x74>)
 800721a:	4013      	ands	r3, r2
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	0151      	lsls	r1, r2, #5
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	440a      	add	r2, r1
 8007224:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007228:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800722c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	015a      	lsls	r2, r3, #5
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	4413      	add	r3, r2
 8007236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007244:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800724c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	015a      	lsls	r2, r3, #5
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	4413      	add	r3, r2
 8007256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800725a:	461a      	mov	r2, r3
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	371c      	adds	r7, #28
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	1ff80000 	.word	0x1ff80000

08007274 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007280:	2300      	movs	r3, #0
 8007282:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f7ff f935 	bl	80064f4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800728a:	2110      	movs	r1, #16
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f7ff f98f 	bl	80065b0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7ff f9b0 	bl	80065f8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007298:	2300      	movs	r3, #0
 800729a:	613b      	str	r3, [r7, #16]
 800729c:	e01f      	b.n	80072de <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072b4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072bc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072c4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	015a      	lsls	r2, r3, #5
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	4413      	add	r3, r2
 80072ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072d2:	461a      	mov	r2, r3
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	3301      	adds	r3, #1
 80072dc:	613b      	str	r3, [r7, #16]
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	2b0f      	cmp	r3, #15
 80072e2:	d9dc      	bls.n	800729e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80072e4:	2300      	movs	r3, #0
 80072e6:	613b      	str	r3, [r7, #16]
 80072e8:	e034      	b.n	8007354 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	015a      	lsls	r2, r3, #5
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	4413      	add	r3, r2
 80072f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007300:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007308:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007310:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	015a      	lsls	r2, r3, #5
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	4413      	add	r3, r2
 800731a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800731e:	461a      	mov	r2, r3
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	3301      	adds	r3, #1
 8007328:	617b      	str	r3, [r7, #20]
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007330:	d80c      	bhi.n	800734c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	015a      	lsls	r2, r3, #5
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	4413      	add	r3, r2
 800733a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007344:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007348:	d0ec      	beq.n	8007324 <USB_StopHost+0xb0>
 800734a:	e000      	b.n	800734e <USB_StopHost+0xda>
        break;
 800734c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	3301      	adds	r3, #1
 8007352:	613b      	str	r3, [r7, #16]
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	2b0f      	cmp	r3, #15
 8007358:	d9c7      	bls.n	80072ea <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007360:	461a      	mov	r2, r3
 8007362:	f04f 33ff 	mov.w	r3, #4294967295
 8007366:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f04f 32ff 	mov.w	r2, #4294967295
 800736e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f7ff f8ae 	bl	80064d2 <USB_EnableGlobalInt>

  return HAL_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3718      	adds	r7, #24
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007380:	b590      	push	{r4, r7, lr}
 8007382:	b089      	sub	sp, #36	; 0x24
 8007384:	af04      	add	r7, sp, #16
 8007386:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007388:	2301      	movs	r3, #1
 800738a:	2202      	movs	r2, #2
 800738c:	2102      	movs	r1, #2
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fc66 	bl	8007c60 <USBH_FindInterface>
 8007394:	4603      	mov	r3, r0
 8007396:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007398:	7bfb      	ldrb	r3, [r7, #15]
 800739a:	2bff      	cmp	r3, #255	; 0xff
 800739c:	d002      	beq.n	80073a4 <USBH_CDC_InterfaceInit+0x24>
 800739e:	7bfb      	ldrb	r3, [r7, #15]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d901      	bls.n	80073a8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80073a4:	2302      	movs	r3, #2
 80073a6:	e13d      	b.n	8007624 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
 80073aa:	4619      	mov	r1, r3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fc3b 	bl	8007c28 <USBH_SelectInterface>
 80073b2:	4603      	mov	r3, r0
 80073b4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80073b6:	7bbb      	ldrb	r3, [r7, #14]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80073bc:	2302      	movs	r3, #2
 80073be:	e131      	b.n	8007624 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80073c6:	2050      	movs	r0, #80	; 0x50
 80073c8:	f002 fa08 	bl	80097dc <malloc>
 80073cc:	4603      	mov	r3, r0
 80073ce:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073d6:	69db      	ldr	r3, [r3, #28]
 80073d8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d101      	bne.n	80073e4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80073e0:	2302      	movs	r3, #2
 80073e2:	e11f      	b.n	8007624 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80073e4:	2250      	movs	r2, #80	; 0x50
 80073e6:	2100      	movs	r1, #0
 80073e8:	68b8      	ldr	r0, [r7, #8]
 80073ea:	f002 fa07 	bl	80097fc <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80073ee:	7bfb      	ldrb	r3, [r7, #15]
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	211a      	movs	r1, #26
 80073f4:	fb01 f303 	mul.w	r3, r1, r3
 80073f8:	4413      	add	r3, r2
 80073fa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	b25b      	sxtb	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	da15      	bge.n	8007432 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007406:	7bfb      	ldrb	r3, [r7, #15]
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	211a      	movs	r1, #26
 800740c:	fb01 f303 	mul.w	r3, r1, r3
 8007410:	4413      	add	r3, r2
 8007412:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007416:	781a      	ldrb	r2, [r3, #0]
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800741c:	7bfb      	ldrb	r3, [r7, #15]
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	211a      	movs	r1, #26
 8007422:	fb01 f303 	mul.w	r3, r1, r3
 8007426:	4413      	add	r3, r2
 8007428:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800742c:	881a      	ldrh	r2, [r3, #0]
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	785b      	ldrb	r3, [r3, #1]
 8007436:	4619      	mov	r1, r3
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f001 fe32 	bl	80090a2 <USBH_AllocPipe>
 800743e:	4603      	mov	r3, r0
 8007440:	461a      	mov	r2, r3
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	7819      	ldrb	r1, [r3, #0]
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	7858      	ldrb	r0, [r3, #1]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	8952      	ldrh	r2, [r2, #10]
 800745e:	9202      	str	r2, [sp, #8]
 8007460:	2203      	movs	r2, #3
 8007462:	9201      	str	r2, [sp, #4]
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	4623      	mov	r3, r4
 8007468:	4602      	mov	r2, r0
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f001 fdea 	bl	8009044 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	2200      	movs	r2, #0
 8007476:	4619      	mov	r1, r3
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f002 f8f9 	bl	8009670 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800747e:	2300      	movs	r3, #0
 8007480:	2200      	movs	r2, #0
 8007482:	210a      	movs	r1, #10
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fbeb 	bl	8007c60 <USBH_FindInterface>
 800748a:	4603      	mov	r3, r0
 800748c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800748e:	7bfb      	ldrb	r3, [r7, #15]
 8007490:	2bff      	cmp	r3, #255	; 0xff
 8007492:	d002      	beq.n	800749a <USBH_CDC_InterfaceInit+0x11a>
 8007494:	7bfb      	ldrb	r3, [r7, #15]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d901      	bls.n	800749e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800749a:	2302      	movs	r3, #2
 800749c:	e0c2      	b.n	8007624 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800749e:	7bfb      	ldrb	r3, [r7, #15]
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	211a      	movs	r1, #26
 80074a4:	fb01 f303 	mul.w	r3, r1, r3
 80074a8:	4413      	add	r3, r2
 80074aa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	b25b      	sxtb	r3, r3
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	da16      	bge.n	80074e4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80074b6:	7bfb      	ldrb	r3, [r7, #15]
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	211a      	movs	r1, #26
 80074bc:	fb01 f303 	mul.w	r3, r1, r3
 80074c0:	4413      	add	r3, r2
 80074c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80074c6:	781a      	ldrb	r2, [r3, #0]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	211a      	movs	r1, #26
 80074d2:	fb01 f303 	mul.w	r3, r1, r3
 80074d6:	4413      	add	r3, r2
 80074d8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80074dc:	881a      	ldrh	r2, [r3, #0]
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	835a      	strh	r2, [r3, #26]
 80074e2:	e015      	b.n	8007510 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	211a      	movs	r1, #26
 80074ea:	fb01 f303 	mul.w	r3, r1, r3
 80074ee:	4413      	add	r3, r2
 80074f0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80074f4:	781a      	ldrb	r2, [r3, #0]
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80074fa:	7bfb      	ldrb	r3, [r7, #15]
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	211a      	movs	r1, #26
 8007500:	fb01 f303 	mul.w	r3, r1, r3
 8007504:	4413      	add	r3, r2
 8007506:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800750a:	881a      	ldrh	r2, [r3, #0]
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007510:	7bfb      	ldrb	r3, [r7, #15]
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	211a      	movs	r1, #26
 8007516:	fb01 f303 	mul.w	r3, r1, r3
 800751a:	4413      	add	r3, r2
 800751c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	b25b      	sxtb	r3, r3
 8007524:	2b00      	cmp	r3, #0
 8007526:	da16      	bge.n	8007556 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007528:	7bfb      	ldrb	r3, [r7, #15]
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	211a      	movs	r1, #26
 800752e:	fb01 f303 	mul.w	r3, r1, r3
 8007532:	4413      	add	r3, r2
 8007534:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007538:	781a      	ldrb	r2, [r3, #0]
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800753e:	7bfb      	ldrb	r3, [r7, #15]
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	211a      	movs	r1, #26
 8007544:	fb01 f303 	mul.w	r3, r1, r3
 8007548:	4413      	add	r3, r2
 800754a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800754e:	881a      	ldrh	r2, [r3, #0]
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	835a      	strh	r2, [r3, #26]
 8007554:	e015      	b.n	8007582 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007556:	7bfb      	ldrb	r3, [r7, #15]
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	211a      	movs	r1, #26
 800755c:	fb01 f303 	mul.w	r3, r1, r3
 8007560:	4413      	add	r3, r2
 8007562:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007566:	781a      	ldrb	r2, [r3, #0]
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800756c:	7bfb      	ldrb	r3, [r7, #15]
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	211a      	movs	r1, #26
 8007572:	fb01 f303 	mul.w	r3, r1, r3
 8007576:	4413      	add	r3, r2
 8007578:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800757c:	881a      	ldrh	r2, [r3, #0]
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	7b9b      	ldrb	r3, [r3, #14]
 8007586:	4619      	mov	r1, r3
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f001 fd8a 	bl	80090a2 <USBH_AllocPipe>
 800758e:	4603      	mov	r3, r0
 8007590:	461a      	mov	r2, r3
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	7bdb      	ldrb	r3, [r3, #15]
 800759a:	4619      	mov	r1, r3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f001 fd80 	bl	80090a2 <USBH_AllocPipe>
 80075a2:	4603      	mov	r3, r0
 80075a4:	461a      	mov	r2, r3
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	7b59      	ldrb	r1, [r3, #13]
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	7b98      	ldrb	r0, [r3, #14]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80075be:	68ba      	ldr	r2, [r7, #8]
 80075c0:	8b12      	ldrh	r2, [r2, #24]
 80075c2:	9202      	str	r2, [sp, #8]
 80075c4:	2202      	movs	r2, #2
 80075c6:	9201      	str	r2, [sp, #4]
 80075c8:	9300      	str	r3, [sp, #0]
 80075ca:	4623      	mov	r3, r4
 80075cc:	4602      	mov	r2, r0
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f001 fd38 	bl	8009044 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	7b19      	ldrb	r1, [r3, #12]
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	7bd8      	ldrb	r0, [r3, #15]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	8b52      	ldrh	r2, [r2, #26]
 80075ec:	9202      	str	r2, [sp, #8]
 80075ee:	2202      	movs	r2, #2
 80075f0:	9201      	str	r2, [sp, #4]
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	4623      	mov	r3, r4
 80075f6:	4602      	mov	r2, r0
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f001 fd23 	bl	8009044 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	7b5b      	ldrb	r3, [r3, #13]
 800760a:	2200      	movs	r2, #0
 800760c:	4619      	mov	r1, r3
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f002 f82e 	bl	8009670 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	7b1b      	ldrb	r3, [r3, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f002 f827 	bl	8009670 <USBH_LL_SetToggle>

  return USBH_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3714      	adds	r7, #20
 8007628:	46bd      	mov	sp, r7
 800762a:	bd90      	pop	{r4, r7, pc}

0800762c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800763a:	69db      	ldr	r3, [r3, #28]
 800763c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00e      	beq.n	8007664 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	4619      	mov	r1, r3
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f001 fd18 	bl	8009082 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	4619      	mov	r1, r3
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f001 fd43 	bl	80090e4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	7b1b      	ldrb	r3, [r3, #12]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00e      	beq.n	800768a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	7b1b      	ldrb	r3, [r3, #12]
 8007670:	4619      	mov	r1, r3
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f001 fd05 	bl	8009082 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	7b1b      	ldrb	r3, [r3, #12]
 800767c:	4619      	mov	r1, r3
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f001 fd30 	bl	80090e4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2200      	movs	r2, #0
 8007688:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	7b5b      	ldrb	r3, [r3, #13]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00e      	beq.n	80076b0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	7b5b      	ldrb	r3, [r3, #13]
 8007696:	4619      	mov	r1, r3
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f001 fcf2 	bl	8009082 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	7b5b      	ldrb	r3, [r3, #13]
 80076a2:	4619      	mov	r1, r3
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f001 fd1d 	bl	80090e4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076b6:	69db      	ldr	r3, [r3, #28]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00b      	beq.n	80076d4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076c2:	69db      	ldr	r3, [r3, #28]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f002 f891 	bl	80097ec <free>
    phost->pActiveClass->pData = 0U;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076d0:	2200      	movs	r2, #0
 80076d2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b084      	sub	sp, #16
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076ec:	69db      	ldr	r3, [r3, #28]
 80076ee:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	3340      	adds	r3, #64	; 0x40
 80076f4:	4619      	mov	r1, r3
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f8b1 	bl	800785e <GetLineCoding>
 80076fc:	4603      	mov	r3, r0
 80076fe:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007700:	7afb      	ldrb	r3, [r7, #11]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d105      	bne.n	8007712 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800770c:	2102      	movs	r1, #2
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007712:	7afb      	ldrb	r3, [r7, #11]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007724:	2301      	movs	r3, #1
 8007726:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007728:	2300      	movs	r3, #0
 800772a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007732:	69db      	ldr	r3, [r3, #28]
 8007734:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800773c:	2b04      	cmp	r3, #4
 800773e:	d877      	bhi.n	8007830 <USBH_CDC_Process+0x114>
 8007740:	a201      	add	r2, pc, #4	; (adr r2, 8007748 <USBH_CDC_Process+0x2c>)
 8007742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007746:	bf00      	nop
 8007748:	0800775d 	.word	0x0800775d
 800774c:	08007763 	.word	0x08007763
 8007750:	08007793 	.word	0x08007793
 8007754:	08007807 	.word	0x08007807
 8007758:	08007815 	.word	0x08007815
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800775c:	2300      	movs	r3, #0
 800775e:	73fb      	strb	r3, [r7, #15]
      break;
 8007760:	e06d      	b.n	800783e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007766:	4619      	mov	r1, r3
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 f897 	bl	800789c <SetLineCoding>
 800776e:	4603      	mov	r3, r0
 8007770:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007772:	7bbb      	ldrb	r3, [r7, #14]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d104      	bne.n	8007782 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	2202      	movs	r2, #2
 800777c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007780:	e058      	b.n	8007834 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007782:	7bbb      	ldrb	r3, [r7, #14]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d055      	beq.n	8007834 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	2204      	movs	r2, #4
 800778c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007790:	e050      	b.n	8007834 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	3340      	adds	r3, #64	; 0x40
 8007796:	4619      	mov	r1, r3
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f860 	bl	800785e <GetLineCoding>
 800779e:	4603      	mov	r3, r0
 80077a0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80077a2:	7bbb      	ldrb	r3, [r7, #14]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d126      	bne.n	80077f6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ba:	791b      	ldrb	r3, [r3, #4]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d13b      	bne.n	8007838 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ca:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d133      	bne.n	8007838 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077da:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80077dc:	429a      	cmp	r2, r3
 80077de:	d12b      	bne.n	8007838 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077e8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d124      	bne.n	8007838 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f958 	bl	8007aa4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80077f4:	e020      	b.n	8007838 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80077f6:	7bbb      	ldrb	r3, [r7, #14]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d01d      	beq.n	8007838 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	2204      	movs	r2, #4
 8007800:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007804:	e018      	b.n	8007838 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 f867 	bl	80078da <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f8da 	bl	80079c6 <CDC_ProcessReception>
      break;
 8007812:	e014      	b.n	800783e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007814:	2100      	movs	r1, #0
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 ffe3 	bl	80087e2 <USBH_ClrFeature>
 800781c:	4603      	mov	r3, r0
 800781e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007820:	7bbb      	ldrb	r3, [r7, #14]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d10a      	bne.n	800783c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800782e:	e005      	b.n	800783c <USBH_CDC_Process+0x120>

    default:
      break;
 8007830:	bf00      	nop
 8007832:	e004      	b.n	800783e <USBH_CDC_Process+0x122>
      break;
 8007834:	bf00      	nop
 8007836:	e002      	b.n	800783e <USBH_CDC_Process+0x122>
      break;
 8007838:	bf00      	nop
 800783a:	e000      	b.n	800783e <USBH_CDC_Process+0x122>
      break;
 800783c:	bf00      	nop

  }

  return status;
 800783e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007840:	4618      	mov	r0, r3
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b082      	sub	sp, #8
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	22a1      	movs	r2, #161	; 0xa1
 800786c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2221      	movs	r2, #33	; 0x21
 8007872:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2207      	movs	r2, #7
 8007884:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	2207      	movs	r2, #7
 800788a:	4619      	mov	r1, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f001 f988 	bl	8008ba2 <USBH_CtlReq>
 8007892:	4603      	mov	r3, r0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2221      	movs	r2, #33	; 0x21
 80078aa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2220      	movs	r2, #32
 80078b0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2207      	movs	r2, #7
 80078c2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	2207      	movs	r2, #7
 80078c8:	4619      	mov	r1, r3
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f001 f969 	bl	8008ba2 <USBH_CtlReq>
 80078d0:	4603      	mov	r3, r0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b086      	sub	sp, #24
 80078de:	af02      	add	r7, sp, #8
 80078e0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078e8:	69db      	ldr	r3, [r3, #28]
 80078ea:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80078ec:	2300      	movs	r3, #0
 80078ee:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d002      	beq.n	8007900 <CDC_ProcessTransmission+0x26>
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d023      	beq.n	8007946 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80078fe:	e05e      	b.n	80079be <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	8b12      	ldrh	r2, [r2, #24]
 8007908:	4293      	cmp	r3, r2
 800790a:	d90b      	bls.n	8007924 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	69d9      	ldr	r1, [r3, #28]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	8b1a      	ldrh	r2, [r3, #24]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	7b5b      	ldrb	r3, [r3, #13]
 8007918:	2001      	movs	r0, #1
 800791a:	9000      	str	r0, [sp, #0]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f001 fb4e 	bl	8008fbe <USBH_BulkSendData>
 8007922:	e00b      	b.n	800793c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800792c:	b29a      	uxth	r2, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	7b5b      	ldrb	r3, [r3, #13]
 8007932:	2001      	movs	r0, #1
 8007934:	9000      	str	r0, [sp, #0]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f001 fb41 	bl	8008fbe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2202      	movs	r2, #2
 8007940:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007944:	e03b      	b.n	80079be <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	7b5b      	ldrb	r3, [r3, #13]
 800794a:	4619      	mov	r1, r3
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f001 fe65 	bl	800961c <USBH_LL_GetURBState>
 8007952:	4603      	mov	r3, r0
 8007954:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007956:	7afb      	ldrb	r3, [r7, #11]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d128      	bne.n	80079ae <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	8b12      	ldrh	r2, [r2, #24]
 8007964:	4293      	cmp	r3, r2
 8007966:	d90e      	bls.n	8007986 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	8b12      	ldrh	r2, [r2, #24]
 8007970:	1a9a      	subs	r2, r3, r2
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	69db      	ldr	r3, [r3, #28]
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	8b12      	ldrh	r2, [r2, #24]
 800797e:	441a      	add	r2, r3
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	61da      	str	r2, [r3, #28]
 8007984:	e002      	b.n	800798c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007990:	2b00      	cmp	r3, #0
 8007992:	d004      	beq.n	800799e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800799c:	e00e      	b.n	80079bc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f868 	bl	8007a7c <USBH_CDC_TransmitCallback>
      break;
 80079ac:	e006      	b.n	80079bc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80079ae:	7afb      	ldrb	r3, [r7, #11]
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d103      	bne.n	80079bc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80079bc:	bf00      	nop
  }
}
 80079be:	bf00      	nop
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b086      	sub	sp, #24
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079d4:	69db      	ldr	r3, [r3, #28]
 80079d6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80079d8:	2300      	movs	r3, #0
 80079da:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	d002      	beq.n	80079ec <CDC_ProcessReception+0x26>
 80079e6:	2b04      	cmp	r3, #4
 80079e8:	d00e      	beq.n	8007a08 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80079ea:	e043      	b.n	8007a74 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	6a19      	ldr	r1, [r3, #32]
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	8b5a      	ldrh	r2, [r3, #26]
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	7b1b      	ldrb	r3, [r3, #12]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f001 fb05 	bl	8009008 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	2204      	movs	r2, #4
 8007a02:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007a06:	e035      	b.n	8007a74 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	7b1b      	ldrb	r3, [r3, #12]
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f001 fe04 	bl	800961c <USBH_LL_GetURBState>
 8007a14:	4603      	mov	r3, r0
 8007a16:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007a18:	7cfb      	ldrb	r3, [r7, #19]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d129      	bne.n	8007a72 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	7b1b      	ldrb	r3, [r3, #12]
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f001 fd67 	bl	80094f8 <USBH_LL_GetLastXferSize>
 8007a2a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d016      	beq.n	8007a64 <CDC_ProcessReception+0x9e>
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	8b5b      	ldrh	r3, [r3, #26]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d910      	bls.n	8007a64 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	1ad2      	subs	r2, r2, r3
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	6a1a      	ldr	r2, [r3, #32]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	441a      	add	r2, r3
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	2203      	movs	r2, #3
 8007a5e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007a62:	e006      	b.n	8007a72 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f80f 	bl	8007a90 <USBH_CDC_ReceiveCallback>
      break;
 8007a72:	bf00      	nop
  }
}
 8007a74:	bf00      	nop
 8007a76:	3718      	adds	r7, #24
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007aac:	bf00      	nop
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d101      	bne.n	8007ad0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007acc:	2302      	movs	r3, #2
 8007ace:	e029      	b.n	8007b24 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	79fa      	ldrb	r2, [r7, #7]
 8007ad4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f000 f81f 	bl	8007b2c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d003      	beq.n	8007b1c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	68ba      	ldr	r2, [r7, #8]
 8007b18:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f001 fc37 	bl	8009390 <USBH_LL_Init>

  return USBH_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3710      	adds	r7, #16
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007b34:	2300      	movs	r3, #0
 8007b36:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007b38:	2300      	movs	r3, #0
 8007b3a:	60fb      	str	r3, [r7, #12]
 8007b3c:	e009      	b.n	8007b52 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	33e0      	adds	r3, #224	; 0xe0
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4413      	add	r3, r2
 8007b48:	2200      	movs	r2, #0
 8007b4a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	60fb      	str	r3, [r7, #12]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2b0e      	cmp	r3, #14
 8007b56:	d9f2      	bls.n	8007b3e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007b58:	2300      	movs	r3, #0
 8007b5a:	60fb      	str	r3, [r7, #12]
 8007b5c:	e009      	b.n	8007b72 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	4413      	add	r3, r2
 8007b64:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007b68:	2200      	movs	r2, #0
 8007b6a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	60fb      	str	r3, [r7, #12]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b78:	d3f1      	bcc.n	8007b5e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2240      	movs	r2, #64	; 0x40
 8007b9e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3714      	adds	r7, #20
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007bde:	2300      	movs	r3, #0
 8007be0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d016      	beq.n	8007c16 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10e      	bne.n	8007c10 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007bf8:	1c59      	adds	r1, r3, #1
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	33de      	adds	r3, #222	; 0xde
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	73fb      	strb	r3, [r7, #15]
 8007c0e:	e004      	b.n	8007c1a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007c10:	2302      	movs	r3, #2
 8007c12:	73fb      	strb	r3, [r7, #15]
 8007c14:	e001      	b.n	8007c1a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007c16:	2302      	movs	r3, #2
 8007c18:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	460b      	mov	r3, r1
 8007c32:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007c34:	2300      	movs	r3, #0
 8007c36:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007c3e:	78fa      	ldrb	r2, [r7, #3]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d204      	bcs.n	8007c4e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	78fa      	ldrb	r2, [r7, #3]
 8007c48:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007c4c:	e001      	b.n	8007c52 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007c4e:	2302      	movs	r3, #2
 8007c50:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b087      	sub	sp, #28
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	4608      	mov	r0, r1
 8007c6a:	4611      	mov	r1, r2
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	4603      	mov	r3, r0
 8007c70:	70fb      	strb	r3, [r7, #3]
 8007c72:	460b      	mov	r3, r1
 8007c74:	70bb      	strb	r3, [r7, #2]
 8007c76:	4613      	mov	r3, r2
 8007c78:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007c88:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007c8a:	e025      	b.n	8007cd8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007c8c:	7dfb      	ldrb	r3, [r7, #23]
 8007c8e:	221a      	movs	r2, #26
 8007c90:	fb02 f303 	mul.w	r3, r2, r3
 8007c94:	3308      	adds	r3, #8
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	4413      	add	r3, r2
 8007c9a:	3302      	adds	r3, #2
 8007c9c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	795b      	ldrb	r3, [r3, #5]
 8007ca2:	78fa      	ldrb	r2, [r7, #3]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d002      	beq.n	8007cae <USBH_FindInterface+0x4e>
 8007ca8:	78fb      	ldrb	r3, [r7, #3]
 8007caa:	2bff      	cmp	r3, #255	; 0xff
 8007cac:	d111      	bne.n	8007cd2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007cb2:	78ba      	ldrb	r2, [r7, #2]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d002      	beq.n	8007cbe <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007cb8:	78bb      	ldrb	r3, [r7, #2]
 8007cba:	2bff      	cmp	r3, #255	; 0xff
 8007cbc:	d109      	bne.n	8007cd2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007cc2:	787a      	ldrb	r2, [r7, #1]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d002      	beq.n	8007cce <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007cc8:	787b      	ldrb	r3, [r7, #1]
 8007cca:	2bff      	cmp	r3, #255	; 0xff
 8007ccc:	d101      	bne.n	8007cd2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007cce:	7dfb      	ldrb	r3, [r7, #23]
 8007cd0:	e006      	b.n	8007ce0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007cd2:	7dfb      	ldrb	r3, [r7, #23]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007cd8:	7dfb      	ldrb	r3, [r7, #23]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d9d6      	bls.n	8007c8c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007cde:	23ff      	movs	r3, #255	; 0xff
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	371c      	adds	r7, #28
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f001 fb87 	bl	8009408 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007cfa:	2101      	movs	r1, #1
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f001 fca0 	bl	8009642 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3708      	adds	r7, #8
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b088      	sub	sp, #32
 8007d10:	af04      	add	r7, sp, #16
 8007d12:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007d14:	2302      	movs	r3, #2
 8007d16:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d102      	bne.n	8007d2e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2203      	movs	r2, #3
 8007d2c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	2b0b      	cmp	r3, #11
 8007d36:	f200 81b3 	bhi.w	80080a0 <USBH_Process+0x394>
 8007d3a:	a201      	add	r2, pc, #4	; (adr r2, 8007d40 <USBH_Process+0x34>)
 8007d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d40:	08007d71 	.word	0x08007d71
 8007d44:	08007da3 	.word	0x08007da3
 8007d48:	08007e0b 	.word	0x08007e0b
 8007d4c:	0800803b 	.word	0x0800803b
 8007d50:	080080a1 	.word	0x080080a1
 8007d54:	08007eaf 	.word	0x08007eaf
 8007d58:	08007fe1 	.word	0x08007fe1
 8007d5c:	08007ee5 	.word	0x08007ee5
 8007d60:	08007f05 	.word	0x08007f05
 8007d64:	08007f25 	.word	0x08007f25
 8007d68:	08007f53 	.word	0x08007f53
 8007d6c:	08008023 	.word	0x08008023
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f000 8193 	beq.w	80080a4 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2201      	movs	r2, #1
 8007d82:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007d84:	20c8      	movs	r0, #200	; 0xc8
 8007d86:	f001 fca3 	bl	80096d0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f001 fb99 	bl	80094c2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007da0:	e180      	b.n	80080a4 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d107      	bne.n	8007dbc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2202      	movs	r2, #2
 8007db8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007dba:	e182      	b.n	80080c2 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007dc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dc6:	d914      	bls.n	8007df2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007dce:	3301      	adds	r3, #1
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007dde:	2b03      	cmp	r3, #3
 8007de0:	d903      	bls.n	8007dea <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	220d      	movs	r2, #13
 8007de6:	701a      	strb	r2, [r3, #0]
      break;
 8007de8:	e16b      	b.n	80080c2 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	701a      	strb	r2, [r3, #0]
      break;
 8007df0:	e167      	b.n	80080c2 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007df8:	f103 020a 	add.w	r2, r3, #10
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007e02:	200a      	movs	r0, #10
 8007e04:	f001 fc64 	bl	80096d0 <USBH_Delay>
      break;
 8007e08:	e15b      	b.n	80080c2 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d005      	beq.n	8007e20 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e1a:	2104      	movs	r1, #4
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007e20:	2064      	movs	r0, #100	; 0x64
 8007e22:	f001 fc55 	bl	80096d0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f001 fb24 	bl	8009474 <USBH_LL_GetSpeed>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	461a      	mov	r2, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2205      	movs	r2, #5
 8007e3a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f001 f92f 	bl	80090a2 <USBH_AllocPipe>
 8007e44:	4603      	mov	r3, r0
 8007e46:	461a      	mov	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007e4c:	2180      	movs	r1, #128	; 0x80
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f001 f927 	bl	80090a2 <USBH_AllocPipe>
 8007e54:	4603      	mov	r3, r0
 8007e56:	461a      	mov	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	7919      	ldrb	r1, [r3, #4]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007e70:	b292      	uxth	r2, r2
 8007e72:	9202      	str	r2, [sp, #8]
 8007e74:	2200      	movs	r2, #0
 8007e76:	9201      	str	r2, [sp, #4]
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2280      	movs	r2, #128	; 0x80
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f001 f8e0 	bl	8009044 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	7959      	ldrb	r1, [r3, #5]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007e98:	b292      	uxth	r2, r2
 8007e9a:	9202      	str	r2, [sp, #8]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	9201      	str	r2, [sp, #4]
 8007ea0:	9300      	str	r3, [sp, #0]
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f001 f8cc 	bl	8009044 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007eac:	e109      	b.n	80080c2 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f90c 	bl	80080cc <USBH_HandleEnum>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007eb8:	7bbb      	ldrb	r3, [r7, #14]
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f040 80f3 	bne.w	80080a8 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d103      	bne.n	8007edc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2208      	movs	r2, #8
 8007ed8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007eda:	e0e5      	b.n	80080a8 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2207      	movs	r2, #7
 8007ee0:	701a      	strb	r2, [r3, #0]
      break;
 8007ee2:	e0e1      	b.n	80080a8 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 80de 	beq.w	80080ac <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ef6:	2101      	movs	r1, #1
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2208      	movs	r2, #8
 8007f00:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007f02:	e0d3      	b.n	80080ac <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fc20 	bl	8008754 <USBH_SetCfg>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	f040 80ca 	bne.w	80080b0 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2209      	movs	r2, #9
 8007f20:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007f22:	e0c5      	b.n	80080b0 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007f2a:	f003 0320 	and.w	r3, r3, #32
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00b      	beq.n	8007f4a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007f32:	2101      	movs	r1, #1
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fc30 	bl	800879a <USBH_SetFeature>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f040 80b9 	bne.w	80080b4 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	220a      	movs	r2, #10
 8007f46:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007f48:	e0b4      	b.n	80080b4 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	220a      	movs	r2, #10
 8007f4e:	701a      	strb	r2, [r3, #0]
      break;
 8007f50:	e0b0      	b.n	80080b4 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f000 80ad 	beq.w	80080b8 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007f66:	2300      	movs	r3, #0
 8007f68:	73fb      	strb	r3, [r7, #15]
 8007f6a:	e016      	b.n	8007f9a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007f6c:	7bfa      	ldrb	r2, [r7, #15]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	32de      	adds	r2, #222	; 0xde
 8007f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f76:	791a      	ldrb	r2, [r3, #4]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d108      	bne.n	8007f94 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007f82:	7bfa      	ldrb	r2, [r7, #15]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	32de      	adds	r2, #222	; 0xde
 8007f88:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007f92:	e005      	b.n	8007fa0 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007f94:	7bfb      	ldrb	r3, [r7, #15]
 8007f96:	3301      	adds	r3, #1
 8007f98:	73fb      	strb	r3, [r7, #15]
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d0e5      	beq.n	8007f6c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d016      	beq.n	8007fd8 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	4798      	blx	r3
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d109      	bne.n	8007fd0 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2206      	movs	r2, #6
 8007fc0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007fc8:	2103      	movs	r1, #3
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007fce:	e073      	b.n	80080b8 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	220d      	movs	r2, #13
 8007fd4:	701a      	strb	r2, [r3, #0]
      break;
 8007fd6:	e06f      	b.n	80080b8 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	220d      	movs	r2, #13
 8007fdc:	701a      	strb	r2, [r3, #0]
      break;
 8007fde:	e06b      	b.n	80080b8 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d017      	beq.n	800801a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	4798      	blx	r3
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007ffa:	7bbb      	ldrb	r3, [r7, #14]
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d103      	bne.n	800800a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	220b      	movs	r2, #11
 8008006:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008008:	e058      	b.n	80080bc <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800800a:	7bbb      	ldrb	r3, [r7, #14]
 800800c:	b2db      	uxtb	r3, r3
 800800e:	2b02      	cmp	r3, #2
 8008010:	d154      	bne.n	80080bc <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	220d      	movs	r2, #13
 8008016:	701a      	strb	r2, [r3, #0]
      break;
 8008018:	e050      	b.n	80080bc <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	220d      	movs	r2, #13
 800801e:	701a      	strb	r2, [r3, #0]
      break;
 8008020:	e04c      	b.n	80080bc <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008028:	2b00      	cmp	r3, #0
 800802a:	d049      	beq.n	80080c0 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008032:	695b      	ldr	r3, [r3, #20]
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	4798      	blx	r3
      }
      break;
 8008038:	e042      	b.n	80080c0 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f7ff fd72 	bl	8007b2c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800804e:	2b00      	cmp	r3, #0
 8008050:	d009      	beq.n	8008066 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800806c:	2b00      	cmp	r3, #0
 800806e:	d005      	beq.n	800807c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008076:	2105      	movs	r1, #5
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008082:	b2db      	uxtb	r3, r3
 8008084:	2b01      	cmp	r3, #1
 8008086:	d107      	bne.n	8008098 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f7ff fe2b 	bl	8007cec <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008096:	e014      	b.n	80080c2 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f001 f9b5 	bl	8009408 <USBH_LL_Start>
      break;
 800809e:	e010      	b.n	80080c2 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80080a0:	bf00      	nop
 80080a2:	e00e      	b.n	80080c2 <USBH_Process+0x3b6>
      break;
 80080a4:	bf00      	nop
 80080a6:	e00c      	b.n	80080c2 <USBH_Process+0x3b6>
      break;
 80080a8:	bf00      	nop
 80080aa:	e00a      	b.n	80080c2 <USBH_Process+0x3b6>
    break;
 80080ac:	bf00      	nop
 80080ae:	e008      	b.n	80080c2 <USBH_Process+0x3b6>
      break;
 80080b0:	bf00      	nop
 80080b2:	e006      	b.n	80080c2 <USBH_Process+0x3b6>
      break;
 80080b4:	bf00      	nop
 80080b6:	e004      	b.n	80080c2 <USBH_Process+0x3b6>
      break;
 80080b8:	bf00      	nop
 80080ba:	e002      	b.n	80080c2 <USBH_Process+0x3b6>
      break;
 80080bc:	bf00      	nop
 80080be:	e000      	b.n	80080c2 <USBH_Process+0x3b6>
      break;
 80080c0:	bf00      	nop
  }
  return USBH_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b088      	sub	sp, #32
 80080d0:	af04      	add	r7, sp, #16
 80080d2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80080d4:	2301      	movs	r3, #1
 80080d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80080d8:	2301      	movs	r3, #1
 80080da:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	785b      	ldrb	r3, [r3, #1]
 80080e0:	2b07      	cmp	r3, #7
 80080e2:	f200 81c1 	bhi.w	8008468 <USBH_HandleEnum+0x39c>
 80080e6:	a201      	add	r2, pc, #4	; (adr r2, 80080ec <USBH_HandleEnum+0x20>)
 80080e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ec:	0800810d 	.word	0x0800810d
 80080f0:	080081cb 	.word	0x080081cb
 80080f4:	08008235 	.word	0x08008235
 80080f8:	080082c3 	.word	0x080082c3
 80080fc:	0800832d 	.word	0x0800832d
 8008100:	0800839d 	.word	0x0800839d
 8008104:	080083e3 	.word	0x080083e3
 8008108:	08008429 	.word	0x08008429
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800810c:	2108      	movs	r1, #8
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fa50 	bl	80085b4 <USBH_Get_DevDesc>
 8008114:	4603      	mov	r3, r0
 8008116:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008118:	7bbb      	ldrb	r3, [r7, #14]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d130      	bne.n	8008180 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	7919      	ldrb	r1, [r3, #4]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008142:	b292      	uxth	r2, r2
 8008144:	9202      	str	r2, [sp, #8]
 8008146:	2200      	movs	r2, #0
 8008148:	9201      	str	r2, [sp, #4]
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	4603      	mov	r3, r0
 800814e:	2280      	movs	r2, #128	; 0x80
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 ff77 	bl	8009044 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	7959      	ldrb	r1, [r3, #5]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800816a:	b292      	uxth	r2, r2
 800816c:	9202      	str	r2, [sp, #8]
 800816e:	2200      	movs	r2, #0
 8008170:	9201      	str	r2, [sp, #4]
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	4603      	mov	r3, r0
 8008176:	2200      	movs	r2, #0
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 ff63 	bl	8009044 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800817e:	e175      	b.n	800846c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008180:	7bbb      	ldrb	r3, [r7, #14]
 8008182:	2b03      	cmp	r3, #3
 8008184:	f040 8172 	bne.w	800846c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800818e:	3301      	adds	r3, #1
 8008190:	b2da      	uxtb	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800819e:	2b03      	cmp	r3, #3
 80081a0:	d903      	bls.n	80081aa <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	220d      	movs	r2, #13
 80081a6:	701a      	strb	r2, [r3, #0]
      break;
 80081a8:	e160      	b.n	800846c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	795b      	ldrb	r3, [r3, #5]
 80081ae:	4619      	mov	r1, r3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 ff97 	bl	80090e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	791b      	ldrb	r3, [r3, #4]
 80081ba:	4619      	mov	r1, r3
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 ff91 	bl	80090e4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	701a      	strb	r2, [r3, #0]
      break;
 80081c8:	e150      	b.n	800846c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80081ca:	2112      	movs	r1, #18
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 f9f1 	bl	80085b4 <USBH_Get_DevDesc>
 80081d2:	4603      	mov	r3, r0
 80081d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80081d6:	7bbb      	ldrb	r3, [r7, #14]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d103      	bne.n	80081e4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2202      	movs	r2, #2
 80081e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80081e2:	e145      	b.n	8008470 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081e4:	7bbb      	ldrb	r3, [r7, #14]
 80081e6:	2b03      	cmp	r3, #3
 80081e8:	f040 8142 	bne.w	8008470 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081f2:	3301      	adds	r3, #1
 80081f4:	b2da      	uxtb	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008202:	2b03      	cmp	r3, #3
 8008204:	d903      	bls.n	800820e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	220d      	movs	r2, #13
 800820a:	701a      	strb	r2, [r3, #0]
      break;
 800820c:	e130      	b.n	8008470 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	795b      	ldrb	r3, [r3, #5]
 8008212:	4619      	mov	r1, r3
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 ff65 	bl	80090e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	791b      	ldrb	r3, [r3, #4]
 800821e:	4619      	mov	r1, r3
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 ff5f 	bl	80090e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	701a      	strb	r2, [r3, #0]
      break;
 8008232:	e11d      	b.n	8008470 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008234:	2101      	movs	r1, #1
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fa68 	bl	800870c <USBH_SetAddress>
 800823c:	4603      	mov	r3, r0
 800823e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008240:	7bbb      	ldrb	r3, [r7, #14]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d132      	bne.n	80082ac <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008246:	2002      	movs	r0, #2
 8008248:	f001 fa42 	bl	80096d0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2203      	movs	r2, #3
 8008258:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	7919      	ldrb	r1, [r3, #4]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800826e:	b292      	uxth	r2, r2
 8008270:	9202      	str	r2, [sp, #8]
 8008272:	2200      	movs	r2, #0
 8008274:	9201      	str	r2, [sp, #4]
 8008276:	9300      	str	r3, [sp, #0]
 8008278:	4603      	mov	r3, r0
 800827a:	2280      	movs	r2, #128	; 0x80
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 fee1 	bl	8009044 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	7959      	ldrb	r1, [r3, #5]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008296:	b292      	uxth	r2, r2
 8008298:	9202      	str	r2, [sp, #8]
 800829a:	2200      	movs	r2, #0
 800829c:	9201      	str	r2, [sp, #4]
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	4603      	mov	r3, r0
 80082a2:	2200      	movs	r2, #0
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fecd 	bl	8009044 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80082aa:	e0e3      	b.n	8008474 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082ac:	7bbb      	ldrb	r3, [r7, #14]
 80082ae:	2b03      	cmp	r3, #3
 80082b0:	f040 80e0 	bne.w	8008474 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	220d      	movs	r2, #13
 80082b8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	705a      	strb	r2, [r3, #1]
      break;
 80082c0:	e0d8      	b.n	8008474 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80082c2:	2109      	movs	r1, #9
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 f99d 	bl	8008604 <USBH_Get_CfgDesc>
 80082ca:	4603      	mov	r3, r0
 80082cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082ce:	7bbb      	ldrb	r3, [r7, #14]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d103      	bne.n	80082dc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2204      	movs	r2, #4
 80082d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80082da:	e0cd      	b.n	8008478 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082dc:	7bbb      	ldrb	r3, [r7, #14]
 80082de:	2b03      	cmp	r3, #3
 80082e0:	f040 80ca 	bne.w	8008478 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80082ea:	3301      	adds	r3, #1
 80082ec:	b2da      	uxtb	r2, r3
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80082fa:	2b03      	cmp	r3, #3
 80082fc:	d903      	bls.n	8008306 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	220d      	movs	r2, #13
 8008302:	701a      	strb	r2, [r3, #0]
      break;
 8008304:	e0b8      	b.n	8008478 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	795b      	ldrb	r3, [r3, #5]
 800830a:	4619      	mov	r1, r3
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 fee9 	bl	80090e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	791b      	ldrb	r3, [r3, #4]
 8008316:	4619      	mov	r1, r3
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 fee3 	bl	80090e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	701a      	strb	r2, [r3, #0]
      break;
 800832a:	e0a5      	b.n	8008478 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008332:	4619      	mov	r1, r3
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 f965 	bl	8008604 <USBH_Get_CfgDesc>
 800833a:	4603      	mov	r3, r0
 800833c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800833e:	7bbb      	ldrb	r3, [r7, #14]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d103      	bne.n	800834c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2205      	movs	r2, #5
 8008348:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800834a:	e097      	b.n	800847c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800834c:	7bbb      	ldrb	r3, [r7, #14]
 800834e:	2b03      	cmp	r3, #3
 8008350:	f040 8094 	bne.w	800847c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800835a:	3301      	adds	r3, #1
 800835c:	b2da      	uxtb	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800836a:	2b03      	cmp	r3, #3
 800836c:	d903      	bls.n	8008376 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	220d      	movs	r2, #13
 8008372:	701a      	strb	r2, [r3, #0]
      break;
 8008374:	e082      	b.n	800847c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	795b      	ldrb	r3, [r3, #5]
 800837a:	4619      	mov	r1, r3
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 feb1 	bl	80090e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	791b      	ldrb	r3, [r3, #4]
 8008386:	4619      	mov	r1, r3
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 feab 	bl	80090e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	701a      	strb	r2, [r3, #0]
      break;
 800839a:	e06f      	b.n	800847c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d019      	beq.n	80083da <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80083b2:	23ff      	movs	r3, #255	; 0xff
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 f949 	bl	800864c <USBH_Get_StringDesc>
 80083ba:	4603      	mov	r3, r0
 80083bc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80083be:	7bbb      	ldrb	r3, [r7, #14]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d103      	bne.n	80083cc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2206      	movs	r2, #6
 80083c8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80083ca:	e059      	b.n	8008480 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083cc:	7bbb      	ldrb	r3, [r7, #14]
 80083ce:	2b03      	cmp	r3, #3
 80083d0:	d156      	bne.n	8008480 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2206      	movs	r2, #6
 80083d6:	705a      	strb	r2, [r3, #1]
      break;
 80083d8:	e052      	b.n	8008480 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2206      	movs	r2, #6
 80083de:	705a      	strb	r2, [r3, #1]
      break;
 80083e0:	e04e      	b.n	8008480 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d019      	beq.n	8008420 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80083f8:	23ff      	movs	r3, #255	; 0xff
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f926 	bl	800864c <USBH_Get_StringDesc>
 8008400:	4603      	mov	r3, r0
 8008402:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008404:	7bbb      	ldrb	r3, [r7, #14]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d103      	bne.n	8008412 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2207      	movs	r2, #7
 800840e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008410:	e038      	b.n	8008484 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008412:	7bbb      	ldrb	r3, [r7, #14]
 8008414:	2b03      	cmp	r3, #3
 8008416:	d135      	bne.n	8008484 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2207      	movs	r2, #7
 800841c:	705a      	strb	r2, [r3, #1]
      break;
 800841e:	e031      	b.n	8008484 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2207      	movs	r2, #7
 8008424:	705a      	strb	r2, [r3, #1]
      break;
 8008426:	e02d      	b.n	8008484 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800842e:	2b00      	cmp	r3, #0
 8008430:	d017      	beq.n	8008462 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800843e:	23ff      	movs	r3, #255	; 0xff
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 f903 	bl	800864c <USBH_Get_StringDesc>
 8008446:	4603      	mov	r3, r0
 8008448:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800844a:	7bbb      	ldrb	r3, [r7, #14]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d102      	bne.n	8008456 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008450:	2300      	movs	r3, #0
 8008452:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008454:	e018      	b.n	8008488 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008456:	7bbb      	ldrb	r3, [r7, #14]
 8008458:	2b03      	cmp	r3, #3
 800845a:	d115      	bne.n	8008488 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800845c:	2300      	movs	r3, #0
 800845e:	73fb      	strb	r3, [r7, #15]
      break;
 8008460:	e012      	b.n	8008488 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008462:	2300      	movs	r3, #0
 8008464:	73fb      	strb	r3, [r7, #15]
      break;
 8008466:	e00f      	b.n	8008488 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008468:	bf00      	nop
 800846a:	e00e      	b.n	800848a <USBH_HandleEnum+0x3be>
      break;
 800846c:	bf00      	nop
 800846e:	e00c      	b.n	800848a <USBH_HandleEnum+0x3be>
      break;
 8008470:	bf00      	nop
 8008472:	e00a      	b.n	800848a <USBH_HandleEnum+0x3be>
      break;
 8008474:	bf00      	nop
 8008476:	e008      	b.n	800848a <USBH_HandleEnum+0x3be>
      break;
 8008478:	bf00      	nop
 800847a:	e006      	b.n	800848a <USBH_HandleEnum+0x3be>
      break;
 800847c:	bf00      	nop
 800847e:	e004      	b.n	800848a <USBH_HandleEnum+0x3be>
      break;
 8008480:	bf00      	nop
 8008482:	e002      	b.n	800848a <USBH_HandleEnum+0x3be>
      break;
 8008484:	bf00      	nop
 8008486:	e000      	b.n	800848a <USBH_HandleEnum+0x3be>
      break;
 8008488:	bf00      	nop
  }
  return Status;
 800848a:	7bfb      	ldrb	r3, [r7, #15]
}
 800848c:	4618      	mov	r0, r3
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	683a      	ldr	r2, [r7, #0]
 80084a2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80084a6:	bf00      	nop
 80084a8:	370c      	adds	r7, #12
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b082      	sub	sp, #8
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084c0:	1c5a      	adds	r2, r3, #1
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f804 	bl	80084d6 <USBH_HandleSof>
}
 80084ce:	bf00      	nop
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b082      	sub	sp, #8
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	2b0b      	cmp	r3, #11
 80084e6:	d10a      	bne.n	80084fe <USBH_HandleSof+0x28>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d005      	beq.n	80084fe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	4798      	blx	r3
  }
}
 80084fe:	bf00      	nop
 8008500:	3708      	adds	r7, #8
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008506:	b480      	push	{r7}
 8008508:	b083      	sub	sp, #12
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2201      	movs	r2, #1
 8008512:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008516:	bf00      	nop
}
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008522:	b480      	push	{r7}
 8008524:	b083      	sub	sp, #12
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008532:	bf00      	nop
}
 8008534:	370c      	adds	r7, #12
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800853e:	b480      	push	{r7}
 8008540:	b083      	sub	sp, #12
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2201      	movs	r2, #1
 800854a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 ff56 	bl	800943e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	791b      	ldrb	r3, [r3, #4]
 8008596:	4619      	mov	r1, r3
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fda3 	bl	80090e4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	795b      	ldrb	r3, [r3, #5]
 80085a2:	4619      	mov	r1, r3
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 fd9d 	bl	80090e4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af02      	add	r7, sp, #8
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	460b      	mov	r3, r1
 80085be:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80085c6:	78fb      	ldrb	r3, [r7, #3]
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	4613      	mov	r3, r2
 80085ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80085d2:	2100      	movs	r1, #0
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 f864 	bl	80086a2 <USBH_GetDescriptor>
 80085da:	4603      	mov	r3, r0
 80085dc:	73fb      	strb	r3, [r7, #15]
 80085de:	7bfb      	ldrb	r3, [r7, #15]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d10a      	bne.n	80085fa <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80085f0:	78fa      	ldrb	r2, [r7, #3]
 80085f2:	b292      	uxth	r2, r2
 80085f4:	4619      	mov	r1, r3
 80085f6:	f000 f918 	bl	800882a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80085fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3710      	adds	r7, #16
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008604:	b580      	push	{r7, lr}
 8008606:	b086      	sub	sp, #24
 8008608:	af02      	add	r7, sp, #8
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	460b      	mov	r3, r1
 800860e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	331c      	adds	r3, #28
 8008614:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008616:	887b      	ldrh	r3, [r7, #2]
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008620:	2100      	movs	r1, #0
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f83d 	bl	80086a2 <USBH_GetDescriptor>
 8008628:	4603      	mov	r3, r0
 800862a:	72fb      	strb	r3, [r7, #11]
 800862c:	7afb      	ldrb	r3, [r7, #11]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d107      	bne.n	8008642 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008638:	887a      	ldrh	r2, [r7, #2]
 800863a:	68f9      	ldr	r1, [r7, #12]
 800863c:	4618      	mov	r0, r3
 800863e:	f000 f964 	bl	800890a <USBH_ParseCfgDesc>
  }

  return status;
 8008642:	7afb      	ldrb	r3, [r7, #11]
}
 8008644:	4618      	mov	r0, r3
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b088      	sub	sp, #32
 8008650:	af02      	add	r7, sp, #8
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	607a      	str	r2, [r7, #4]
 8008656:	461a      	mov	r2, r3
 8008658:	460b      	mov	r3, r1
 800865a:	72fb      	strb	r3, [r7, #11]
 800865c:	4613      	mov	r3, r2
 800865e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008660:	7afb      	ldrb	r3, [r7, #11]
 8008662:	b29b      	uxth	r3, r3
 8008664:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008668:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008670:	893b      	ldrh	r3, [r7, #8]
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	460b      	mov	r3, r1
 8008676:	2100      	movs	r1, #0
 8008678:	68f8      	ldr	r0, [r7, #12]
 800867a:	f000 f812 	bl	80086a2 <USBH_GetDescriptor>
 800867e:	4603      	mov	r3, r0
 8008680:	75fb      	strb	r3, [r7, #23]
 8008682:	7dfb      	ldrb	r3, [r7, #23]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d107      	bne.n	8008698 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800868e:	893a      	ldrh	r2, [r7, #8]
 8008690:	6879      	ldr	r1, [r7, #4]
 8008692:	4618      	mov	r0, r3
 8008694:	f000 fa37 	bl	8008b06 <USBH_ParseStringDesc>
  }

  return status;
 8008698:	7dfb      	ldrb	r3, [r7, #23]
}
 800869a:	4618      	mov	r0, r3
 800869c:	3718      	adds	r7, #24
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b084      	sub	sp, #16
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	60f8      	str	r0, [r7, #12]
 80086aa:	607b      	str	r3, [r7, #4]
 80086ac:	460b      	mov	r3, r1
 80086ae:	72fb      	strb	r3, [r7, #11]
 80086b0:	4613      	mov	r3, r2
 80086b2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	789b      	ldrb	r3, [r3, #2]
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d11c      	bne.n	80086f6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80086bc:	7afb      	ldrb	r3, [r7, #11]
 80086be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80086c2:	b2da      	uxtb	r2, r3
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2206      	movs	r2, #6
 80086cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	893a      	ldrh	r2, [r7, #8]
 80086d2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80086d4:	893b      	ldrh	r3, [r7, #8]
 80086d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80086da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086de:	d104      	bne.n	80086ea <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f240 4209 	movw	r2, #1033	; 0x409
 80086e6:	829a      	strh	r2, [r3, #20]
 80086e8:	e002      	b.n	80086f0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	8b3a      	ldrh	r2, [r7, #24]
 80086f4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80086f6:	8b3b      	ldrh	r3, [r7, #24]
 80086f8:	461a      	mov	r2, r3
 80086fa:	6879      	ldr	r1, [r7, #4]
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f000 fa50 	bl	8008ba2 <USBH_CtlReq>
 8008702:	4603      	mov	r3, r0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3710      	adds	r7, #16
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	460b      	mov	r3, r1
 8008716:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	789b      	ldrb	r3, [r3, #2]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d10f      	bne.n	8008740 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2205      	movs	r2, #5
 800872a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800872c:	78fb      	ldrb	r3, [r7, #3]
 800872e:	b29a      	uxth	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008740:	2200      	movs	r2, #0
 8008742:	2100      	movs	r1, #0
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 fa2c 	bl	8008ba2 <USBH_CtlReq>
 800874a:	4603      	mov	r3, r0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3708      	adds	r7, #8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	460b      	mov	r3, r1
 800875e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	789b      	ldrb	r3, [r3, #2]
 8008764:	2b01      	cmp	r3, #1
 8008766:	d10e      	bne.n	8008786 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2209      	movs	r2, #9
 8008772:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	887a      	ldrh	r2, [r7, #2]
 8008778:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008786:	2200      	movs	r2, #0
 8008788:	2100      	movs	r1, #0
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fa09 	bl	8008ba2 <USBH_CtlReq>
 8008790:	4603      	mov	r3, r0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3708      	adds	r7, #8
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b082      	sub	sp, #8
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
 80087a2:	460b      	mov	r3, r1
 80087a4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	789b      	ldrb	r3, [r3, #2]
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d10f      	bne.n	80087ce <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2203      	movs	r2, #3
 80087b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80087ba:	78fb      	ldrb	r3, [r7, #3]
 80087bc:	b29a      	uxth	r2, r3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80087ce:	2200      	movs	r2, #0
 80087d0:	2100      	movs	r1, #0
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 f9e5 	bl	8008ba2 <USBH_CtlReq>
 80087d8:	4603      	mov	r3, r0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3708      	adds	r7, #8
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b082      	sub	sp, #8
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	460b      	mov	r3, r1
 80087ec:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	789b      	ldrb	r3, [r3, #2]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d10f      	bne.n	8008816 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2202      	movs	r2, #2
 80087fa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008808:	78fb      	ldrb	r3, [r7, #3]
 800880a:	b29a      	uxth	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008816:	2200      	movs	r2, #0
 8008818:	2100      	movs	r1, #0
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f9c1 	bl	8008ba2 <USBH_CtlReq>
 8008820:	4603      	mov	r3, r0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3708      	adds	r7, #8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800882a:	b480      	push	{r7}
 800882c:	b085      	sub	sp, #20
 800882e:	af00      	add	r7, sp, #0
 8008830:	60f8      	str	r0, [r7, #12]
 8008832:	60b9      	str	r1, [r7, #8]
 8008834:	4613      	mov	r3, r2
 8008836:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	781a      	ldrb	r2, [r3, #0]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	785a      	ldrb	r2, [r3, #1]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	3302      	adds	r3, #2
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	b29a      	uxth	r2, r3
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	3303      	adds	r3, #3
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	b29b      	uxth	r3, r3
 8008858:	021b      	lsls	r3, r3, #8
 800885a:	b29b      	uxth	r3, r3
 800885c:	4313      	orrs	r3, r2
 800885e:	b29a      	uxth	r2, r3
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	791a      	ldrb	r2, [r3, #4]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	795a      	ldrb	r2, [r3, #5]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	799a      	ldrb	r2, [r3, #6]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	79da      	ldrb	r2, [r3, #7]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008884:	88fb      	ldrh	r3, [r7, #6]
 8008886:	2b08      	cmp	r3, #8
 8008888:	d939      	bls.n	80088fe <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	3308      	adds	r3, #8
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	b29a      	uxth	r2, r3
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	3309      	adds	r3, #9
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	b29b      	uxth	r3, r3
 800889a:	021b      	lsls	r3, r3, #8
 800889c:	b29b      	uxth	r3, r3
 800889e:	4313      	orrs	r3, r2
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	330a      	adds	r3, #10
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	330b      	adds	r3, #11
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	021b      	lsls	r3, r3, #8
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	4313      	orrs	r3, r2
 80088bc:	b29a      	uxth	r2, r3
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	330c      	adds	r3, #12
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	330d      	adds	r3, #13
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	021b      	lsls	r3, r3, #8
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	4313      	orrs	r3, r2
 80088d8:	b29a      	uxth	r2, r3
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	7b9a      	ldrb	r2, [r3, #14]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	7bda      	ldrb	r2, [r3, #15]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	7c1a      	ldrb	r2, [r3, #16]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	7c5a      	ldrb	r2, [r3, #17]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	745a      	strb	r2, [r3, #17]
  }
}
 80088fe:	bf00      	nop
 8008900:	3714      	adds	r7, #20
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr

0800890a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b08a      	sub	sp, #40	; 0x28
 800890e:	af00      	add	r7, sp, #0
 8008910:	60f8      	str	r0, [r7, #12]
 8008912:	60b9      	str	r1, [r7, #8]
 8008914:	4613      	mov	r3, r2
 8008916:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800891c:	2300      	movs	r3, #0
 800891e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008922:	2300      	movs	r3, #0
 8008924:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	781a      	ldrb	r2, [r3, #0]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	785a      	ldrb	r2, [r3, #1]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	3302      	adds	r3, #2
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	b29a      	uxth	r2, r3
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	3303      	adds	r3, #3
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	b29b      	uxth	r3, r3
 800894c:	021b      	lsls	r3, r3, #8
 800894e:	b29b      	uxth	r3, r3
 8008950:	4313      	orrs	r3, r2
 8008952:	b29a      	uxth	r2, r3
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	791a      	ldrb	r2, [r3, #4]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	795a      	ldrb	r2, [r3, #5]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	799a      	ldrb	r2, [r3, #6]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	79da      	ldrb	r2, [r3, #7]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	7a1a      	ldrb	r2, [r3, #8]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008980:	88fb      	ldrh	r3, [r7, #6]
 8008982:	2b09      	cmp	r3, #9
 8008984:	d95f      	bls.n	8008a46 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008986:	2309      	movs	r3, #9
 8008988:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800898a:	2300      	movs	r3, #0
 800898c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800898e:	e051      	b.n	8008a34 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008990:	f107 0316 	add.w	r3, r7, #22
 8008994:	4619      	mov	r1, r3
 8008996:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008998:	f000 f8e8 	bl	8008b6c <USBH_GetNextDesc>
 800899c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800899e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a0:	785b      	ldrb	r3, [r3, #1]
 80089a2:	2b04      	cmp	r3, #4
 80089a4:	d146      	bne.n	8008a34 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80089a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089aa:	221a      	movs	r2, #26
 80089ac:	fb02 f303 	mul.w	r3, r2, r3
 80089b0:	3308      	adds	r3, #8
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	4413      	add	r3, r2
 80089b6:	3302      	adds	r3, #2
 80089b8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80089ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089bc:	69f8      	ldr	r0, [r7, #28]
 80089be:	f000 f846 	bl	8008a4e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80089c2:	2300      	movs	r3, #0
 80089c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80089c8:	2300      	movs	r3, #0
 80089ca:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80089cc:	e022      	b.n	8008a14 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80089ce:	f107 0316 	add.w	r3, r7, #22
 80089d2:	4619      	mov	r1, r3
 80089d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089d6:	f000 f8c9 	bl	8008b6c <USBH_GetNextDesc>
 80089da:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80089dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089de:	785b      	ldrb	r3, [r3, #1]
 80089e0:	2b05      	cmp	r3, #5
 80089e2:	d117      	bne.n	8008a14 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80089e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089e8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80089ec:	3201      	adds	r2, #1
 80089ee:	00d2      	lsls	r2, r2, #3
 80089f0:	211a      	movs	r1, #26
 80089f2:	fb01 f303 	mul.w	r3, r1, r3
 80089f6:	4413      	add	r3, r2
 80089f8:	3308      	adds	r3, #8
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	4413      	add	r3, r2
 80089fe:	3304      	adds	r3, #4
 8008a00:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008a02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a04:	69b8      	ldr	r0, [r7, #24]
 8008a06:	f000 f851 	bl	8008aac <USBH_ParseEPDesc>
            ep_ix++;
 8008a0a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008a0e:	3301      	adds	r3, #1
 8008a10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	791b      	ldrb	r3, [r3, #4]
 8008a18:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d204      	bcs.n	8008a2a <USBH_ParseCfgDesc+0x120>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	885a      	ldrh	r2, [r3, #2]
 8008a24:	8afb      	ldrh	r3, [r7, #22]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d8d1      	bhi.n	80089ce <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008a2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a2e:	3301      	adds	r3, #1
 8008a30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008a34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d804      	bhi.n	8008a46 <USBH_ParseCfgDesc+0x13c>
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	885a      	ldrh	r2, [r3, #2]
 8008a40:	8afb      	ldrh	r3, [r7, #22]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d8a4      	bhi.n	8008990 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008a46:	bf00      	nop
 8008a48:	3728      	adds	r7, #40	; 0x28
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008a4e:	b480      	push	{r7}
 8008a50:	b083      	sub	sp, #12
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	781a      	ldrb	r2, [r3, #0]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	785a      	ldrb	r2, [r3, #1]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	789a      	ldrb	r2, [r3, #2]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	78da      	ldrb	r2, [r3, #3]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	791a      	ldrb	r2, [r3, #4]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	795a      	ldrb	r2, [r3, #5]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	799a      	ldrb	r2, [r3, #6]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	79da      	ldrb	r2, [r3, #7]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	7a1a      	ldrb	r2, [r3, #8]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	721a      	strb	r2, [r3, #8]
}
 8008aa0:	bf00      	nop
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	781a      	ldrb	r2, [r3, #0]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	785a      	ldrb	r2, [r3, #1]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	789a      	ldrb	r2, [r3, #2]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	78da      	ldrb	r2, [r3, #3]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	3304      	adds	r3, #4
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	3305      	adds	r3, #5
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	021b      	lsls	r3, r3, #8
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	4313      	orrs	r3, r2
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	799a      	ldrb	r2, [r3, #6]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	719a      	strb	r2, [r3, #6]
}
 8008afa:	bf00      	nop
 8008afc:	370c      	adds	r7, #12
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr

08008b06 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008b06:	b480      	push	{r7}
 8008b08:	b087      	sub	sp, #28
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	60f8      	str	r0, [r7, #12]
 8008b0e:	60b9      	str	r1, [r7, #8]
 8008b10:	4613      	mov	r3, r2
 8008b12:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	3301      	adds	r3, #1
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	2b03      	cmp	r3, #3
 8008b1c:	d120      	bne.n	8008b60 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	1e9a      	subs	r2, r3, #2
 8008b24:	88fb      	ldrh	r3, [r7, #6]
 8008b26:	4293      	cmp	r3, r2
 8008b28:	bf28      	it	cs
 8008b2a:	4613      	movcs	r3, r2
 8008b2c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	3302      	adds	r3, #2
 8008b32:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008b34:	2300      	movs	r3, #0
 8008b36:	82fb      	strh	r3, [r7, #22]
 8008b38:	e00b      	b.n	8008b52 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008b3a:	8afb      	ldrh	r3, [r7, #22]
 8008b3c:	68fa      	ldr	r2, [r7, #12]
 8008b3e:	4413      	add	r3, r2
 8008b40:	781a      	ldrb	r2, [r3, #0]
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008b4c:	8afb      	ldrh	r3, [r7, #22]
 8008b4e:	3302      	adds	r3, #2
 8008b50:	82fb      	strh	r3, [r7, #22]
 8008b52:	8afa      	ldrh	r2, [r7, #22]
 8008b54:	8abb      	ldrh	r3, [r7, #20]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d3ef      	bcc.n	8008b3a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	701a      	strb	r2, [r3, #0]
  }
}
 8008b60:	bf00      	nop
 8008b62:	371c      	adds	r7, #28
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	881a      	ldrh	r2, [r3, #0]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	4413      	add	r3, r2
 8008b82:	b29a      	uxth	r2, r3
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4413      	add	r3, r2
 8008b92:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008b94:	68fb      	ldr	r3, [r7, #12]
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3714      	adds	r7, #20
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr

08008ba2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b086      	sub	sp, #24
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	60f8      	str	r0, [r7, #12]
 8008baa:	60b9      	str	r1, [r7, #8]
 8008bac:	4613      	mov	r3, r2
 8008bae:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	789b      	ldrb	r3, [r3, #2]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d002      	beq.n	8008bc2 <USBH_CtlReq+0x20>
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	d00f      	beq.n	8008be0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008bc0:	e027      	b.n	8008c12 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	68ba      	ldr	r2, [r7, #8]
 8008bc6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	88fa      	ldrh	r2, [r7, #6]
 8008bcc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2202      	movs	r2, #2
 8008bd8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	75fb      	strb	r3, [r7, #23]
      break;
 8008bde:	e018      	b.n	8008c12 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f000 f81b 	bl	8008c1c <USBH_HandleControl>
 8008be6:	4603      	mov	r3, r0
 8008be8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008bea:	7dfb      	ldrb	r3, [r7, #23]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d002      	beq.n	8008bf6 <USBH_CtlReq+0x54>
 8008bf0:	7dfb      	ldrb	r3, [r7, #23]
 8008bf2:	2b03      	cmp	r3, #3
 8008bf4:	d106      	bne.n	8008c04 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	761a      	strb	r2, [r3, #24]
      break;
 8008c02:	e005      	b.n	8008c10 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008c04:	7dfb      	ldrb	r3, [r7, #23]
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d102      	bne.n	8008c10 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	709a      	strb	r2, [r3, #2]
      break;
 8008c10:	bf00      	nop
  }
  return status;
 8008c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3718      	adds	r7, #24
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b086      	sub	sp, #24
 8008c20:	af02      	add	r7, sp, #8
 8008c22:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008c24:	2301      	movs	r3, #1
 8008c26:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	7e1b      	ldrb	r3, [r3, #24]
 8008c30:	3b01      	subs	r3, #1
 8008c32:	2b0a      	cmp	r3, #10
 8008c34:	f200 8156 	bhi.w	8008ee4 <USBH_HandleControl+0x2c8>
 8008c38:	a201      	add	r2, pc, #4	; (adr r2, 8008c40 <USBH_HandleControl+0x24>)
 8008c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c3e:	bf00      	nop
 8008c40:	08008c6d 	.word	0x08008c6d
 8008c44:	08008c87 	.word	0x08008c87
 8008c48:	08008cf1 	.word	0x08008cf1
 8008c4c:	08008d17 	.word	0x08008d17
 8008c50:	08008d4f 	.word	0x08008d4f
 8008c54:	08008d79 	.word	0x08008d79
 8008c58:	08008dcb 	.word	0x08008dcb
 8008c5c:	08008ded 	.word	0x08008ded
 8008c60:	08008e29 	.word	0x08008e29
 8008c64:	08008e4f 	.word	0x08008e4f
 8008c68:	08008e8d 	.word	0x08008e8d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f103 0110 	add.w	r1, r3, #16
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	795b      	ldrb	r3, [r3, #5]
 8008c76:	461a      	mov	r2, r3
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 f943 	bl	8008f04 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2202      	movs	r2, #2
 8008c82:	761a      	strb	r2, [r3, #24]
      break;
 8008c84:	e139      	b.n	8008efa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	795b      	ldrb	r3, [r3, #5]
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 fcc5 	bl	800961c <USBH_LL_GetURBState>
 8008c92:	4603      	mov	r3, r0
 8008c94:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008c96:	7bbb      	ldrb	r3, [r7, #14]
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d11e      	bne.n	8008cda <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	7c1b      	ldrb	r3, [r3, #16]
 8008ca0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ca4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	8adb      	ldrh	r3, [r3, #22]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00a      	beq.n	8008cc4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008cae:	7b7b      	ldrb	r3, [r7, #13]
 8008cb0:	2b80      	cmp	r3, #128	; 0x80
 8008cb2:	d103      	bne.n	8008cbc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2203      	movs	r2, #3
 8008cb8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008cba:	e115      	b.n	8008ee8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2205      	movs	r2, #5
 8008cc0:	761a      	strb	r2, [r3, #24]
      break;
 8008cc2:	e111      	b.n	8008ee8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008cc4:	7b7b      	ldrb	r3, [r7, #13]
 8008cc6:	2b80      	cmp	r3, #128	; 0x80
 8008cc8:	d103      	bne.n	8008cd2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2209      	movs	r2, #9
 8008cce:	761a      	strb	r2, [r3, #24]
      break;
 8008cd0:	e10a      	b.n	8008ee8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2207      	movs	r2, #7
 8008cd6:	761a      	strb	r2, [r3, #24]
      break;
 8008cd8:	e106      	b.n	8008ee8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008cda:	7bbb      	ldrb	r3, [r7, #14]
 8008cdc:	2b04      	cmp	r3, #4
 8008cde:	d003      	beq.n	8008ce8 <USBH_HandleControl+0xcc>
 8008ce0:	7bbb      	ldrb	r3, [r7, #14]
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	f040 8100 	bne.w	8008ee8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	220b      	movs	r2, #11
 8008cec:	761a      	strb	r2, [r3, #24]
      break;
 8008cee:	e0fb      	b.n	8008ee8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008cf6:	b29a      	uxth	r2, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6899      	ldr	r1, [r3, #8]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	899a      	ldrh	r2, [r3, #12]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	791b      	ldrb	r3, [r3, #4]
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 f93a 	bl	8008f82 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2204      	movs	r2, #4
 8008d12:	761a      	strb	r2, [r3, #24]
      break;
 8008d14:	e0f1      	b.n	8008efa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	791b      	ldrb	r3, [r3, #4]
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 fc7d 	bl	800961c <USBH_LL_GetURBState>
 8008d22:	4603      	mov	r3, r0
 8008d24:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008d26:	7bbb      	ldrb	r3, [r7, #14]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d102      	bne.n	8008d32 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2209      	movs	r2, #9
 8008d30:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008d32:	7bbb      	ldrb	r3, [r7, #14]
 8008d34:	2b05      	cmp	r3, #5
 8008d36:	d102      	bne.n	8008d3e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008d38:	2303      	movs	r3, #3
 8008d3a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008d3c:	e0d6      	b.n	8008eec <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008d3e:	7bbb      	ldrb	r3, [r7, #14]
 8008d40:	2b04      	cmp	r3, #4
 8008d42:	f040 80d3 	bne.w	8008eec <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	220b      	movs	r2, #11
 8008d4a:	761a      	strb	r2, [r3, #24]
      break;
 8008d4c:	e0ce      	b.n	8008eec <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6899      	ldr	r1, [r3, #8]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	899a      	ldrh	r2, [r3, #12]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	795b      	ldrb	r3, [r3, #5]
 8008d5a:	2001      	movs	r0, #1
 8008d5c:	9000      	str	r0, [sp, #0]
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f8ea 	bl	8008f38 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2206      	movs	r2, #6
 8008d74:	761a      	strb	r2, [r3, #24]
      break;
 8008d76:	e0c0      	b.n	8008efa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	795b      	ldrb	r3, [r3, #5]
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 fc4c 	bl	800961c <USBH_LL_GetURBState>
 8008d84:	4603      	mov	r3, r0
 8008d86:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008d88:	7bbb      	ldrb	r3, [r7, #14]
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d103      	bne.n	8008d96 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2207      	movs	r2, #7
 8008d92:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008d94:	e0ac      	b.n	8008ef0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008d96:	7bbb      	ldrb	r3, [r7, #14]
 8008d98:	2b05      	cmp	r3, #5
 8008d9a:	d105      	bne.n	8008da8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	220c      	movs	r2, #12
 8008da0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008da2:	2303      	movs	r3, #3
 8008da4:	73fb      	strb	r3, [r7, #15]
      break;
 8008da6:	e0a3      	b.n	8008ef0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008da8:	7bbb      	ldrb	r3, [r7, #14]
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d103      	bne.n	8008db6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2205      	movs	r2, #5
 8008db2:	761a      	strb	r2, [r3, #24]
      break;
 8008db4:	e09c      	b.n	8008ef0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008db6:	7bbb      	ldrb	r3, [r7, #14]
 8008db8:	2b04      	cmp	r3, #4
 8008dba:	f040 8099 	bne.w	8008ef0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	220b      	movs	r2, #11
 8008dc2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8008dc8:	e092      	b.n	8008ef0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	791b      	ldrb	r3, [r3, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 f8d5 	bl	8008f82 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2208      	movs	r2, #8
 8008de8:	761a      	strb	r2, [r3, #24]

      break;
 8008dea:	e086      	b.n	8008efa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	791b      	ldrb	r3, [r3, #4]
 8008df0:	4619      	mov	r1, r3
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 fc12 	bl	800961c <USBH_LL_GetURBState>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008dfc:	7bbb      	ldrb	r3, [r7, #14]
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d105      	bne.n	8008e0e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	220d      	movs	r2, #13
 8008e06:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008e0c:	e072      	b.n	8008ef4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008e0e:	7bbb      	ldrb	r3, [r7, #14]
 8008e10:	2b04      	cmp	r3, #4
 8008e12:	d103      	bne.n	8008e1c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	220b      	movs	r2, #11
 8008e18:	761a      	strb	r2, [r3, #24]
      break;
 8008e1a:	e06b      	b.n	8008ef4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008e1c:	7bbb      	ldrb	r3, [r7, #14]
 8008e1e:	2b05      	cmp	r3, #5
 8008e20:	d168      	bne.n	8008ef4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008e22:	2303      	movs	r3, #3
 8008e24:	73fb      	strb	r3, [r7, #15]
      break;
 8008e26:	e065      	b.n	8008ef4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	795b      	ldrb	r3, [r3, #5]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	9200      	str	r2, [sp, #0]
 8008e30:	2200      	movs	r2, #0
 8008e32:	2100      	movs	r1, #0
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 f87f 	bl	8008f38 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e40:	b29a      	uxth	r2, r3
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	220a      	movs	r2, #10
 8008e4a:	761a      	strb	r2, [r3, #24]
      break;
 8008e4c:	e055      	b.n	8008efa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	795b      	ldrb	r3, [r3, #5]
 8008e52:	4619      	mov	r1, r3
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 fbe1 	bl	800961c <USBH_LL_GetURBState>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008e5e:	7bbb      	ldrb	r3, [r7, #14]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d105      	bne.n	8008e70 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008e64:	2300      	movs	r3, #0
 8008e66:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	220d      	movs	r2, #13
 8008e6c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008e6e:	e043      	b.n	8008ef8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008e70:	7bbb      	ldrb	r3, [r7, #14]
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d103      	bne.n	8008e7e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2209      	movs	r2, #9
 8008e7a:	761a      	strb	r2, [r3, #24]
      break;
 8008e7c:	e03c      	b.n	8008ef8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008e7e:	7bbb      	ldrb	r3, [r7, #14]
 8008e80:	2b04      	cmp	r3, #4
 8008e82:	d139      	bne.n	8008ef8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	220b      	movs	r2, #11
 8008e88:	761a      	strb	r2, [r3, #24]
      break;
 8008e8a:	e035      	b.n	8008ef8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	7e5b      	ldrb	r3, [r3, #25]
 8008e90:	3301      	adds	r3, #1
 8008e92:	b2da      	uxtb	r2, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	765a      	strb	r2, [r3, #25]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	7e5b      	ldrb	r3, [r3, #25]
 8008e9c:	2b02      	cmp	r3, #2
 8008e9e:	d806      	bhi.n	8008eae <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008eac:	e025      	b.n	8008efa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008eb4:	2106      	movs	r1, #6
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	795b      	ldrb	r3, [r3, #5]
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f90c 	bl	80090e4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	791b      	ldrb	r3, [r3, #4]
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 f906 	bl	80090e4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008ede:	2302      	movs	r3, #2
 8008ee0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ee2:	e00a      	b.n	8008efa <USBH_HandleControl+0x2de>

    default:
      break;
 8008ee4:	bf00      	nop
 8008ee6:	e008      	b.n	8008efa <USBH_HandleControl+0x2de>
      break;
 8008ee8:	bf00      	nop
 8008eea:	e006      	b.n	8008efa <USBH_HandleControl+0x2de>
      break;
 8008eec:	bf00      	nop
 8008eee:	e004      	b.n	8008efa <USBH_HandleControl+0x2de>
      break;
 8008ef0:	bf00      	nop
 8008ef2:	e002      	b.n	8008efa <USBH_HandleControl+0x2de>
      break;
 8008ef4:	bf00      	nop
 8008ef6:	e000      	b.n	8008efa <USBH_HandleControl+0x2de>
      break;
 8008ef8:	bf00      	nop
  }

  return status;
 8008efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b088      	sub	sp, #32
 8008f08:	af04      	add	r7, sp, #16
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008f12:	79f9      	ldrb	r1, [r7, #7]
 8008f14:	2300      	movs	r3, #0
 8008f16:	9303      	str	r3, [sp, #12]
 8008f18:	2308      	movs	r3, #8
 8008f1a:	9302      	str	r3, [sp, #8]
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	9301      	str	r3, [sp, #4]
 8008f20:	2300      	movs	r3, #0
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	2300      	movs	r3, #0
 8008f26:	2200      	movs	r2, #0
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	f000 fb46 	bl	80095ba <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3710      	adds	r7, #16
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b088      	sub	sp, #32
 8008f3c:	af04      	add	r7, sp, #16
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	4611      	mov	r1, r2
 8008f44:	461a      	mov	r2, r3
 8008f46:	460b      	mov	r3, r1
 8008f48:	80fb      	strh	r3, [r7, #6]
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d001      	beq.n	8008f5c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008f5c:	7979      	ldrb	r1, [r7, #5]
 8008f5e:	7e3b      	ldrb	r3, [r7, #24]
 8008f60:	9303      	str	r3, [sp, #12]
 8008f62:	88fb      	ldrh	r3, [r7, #6]
 8008f64:	9302      	str	r3, [sp, #8]
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	9301      	str	r3, [sp, #4]
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	9300      	str	r3, [sp, #0]
 8008f6e:	2300      	movs	r3, #0
 8008f70:	2200      	movs	r2, #0
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	f000 fb21 	bl	80095ba <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3710      	adds	r7, #16
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b088      	sub	sp, #32
 8008f86:	af04      	add	r7, sp, #16
 8008f88:	60f8      	str	r0, [r7, #12]
 8008f8a:	60b9      	str	r1, [r7, #8]
 8008f8c:	4611      	mov	r1, r2
 8008f8e:	461a      	mov	r2, r3
 8008f90:	460b      	mov	r3, r1
 8008f92:	80fb      	strh	r3, [r7, #6]
 8008f94:	4613      	mov	r3, r2
 8008f96:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008f98:	7979      	ldrb	r1, [r7, #5]
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	9303      	str	r3, [sp, #12]
 8008f9e:	88fb      	ldrh	r3, [r7, #6]
 8008fa0:	9302      	str	r3, [sp, #8]
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	9301      	str	r3, [sp, #4]
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	9300      	str	r3, [sp, #0]
 8008faa:	2300      	movs	r3, #0
 8008fac:	2201      	movs	r2, #1
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	f000 fb03 	bl	80095ba <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008fb4:	2300      	movs	r3, #0

}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b088      	sub	sp, #32
 8008fc2:	af04      	add	r7, sp, #16
 8008fc4:	60f8      	str	r0, [r7, #12]
 8008fc6:	60b9      	str	r1, [r7, #8]
 8008fc8:	4611      	mov	r1, r2
 8008fca:	461a      	mov	r2, r3
 8008fcc:	460b      	mov	r3, r1
 8008fce:	80fb      	strh	r3, [r7, #6]
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d001      	beq.n	8008fe2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008fe2:	7979      	ldrb	r1, [r7, #5]
 8008fe4:	7e3b      	ldrb	r3, [r7, #24]
 8008fe6:	9303      	str	r3, [sp, #12]
 8008fe8:	88fb      	ldrh	r3, [r7, #6]
 8008fea:	9302      	str	r3, [sp, #8]
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	9301      	str	r3, [sp, #4]
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	9300      	str	r3, [sp, #0]
 8008ff4:	2302      	movs	r3, #2
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	68f8      	ldr	r0, [r7, #12]
 8008ffa:	f000 fade 	bl	80095ba <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	4618      	mov	r0, r3
 8009002:	3710      	adds	r7, #16
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b088      	sub	sp, #32
 800900c:	af04      	add	r7, sp, #16
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	4611      	mov	r1, r2
 8009014:	461a      	mov	r2, r3
 8009016:	460b      	mov	r3, r1
 8009018:	80fb      	strh	r3, [r7, #6]
 800901a:	4613      	mov	r3, r2
 800901c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800901e:	7979      	ldrb	r1, [r7, #5]
 8009020:	2300      	movs	r3, #0
 8009022:	9303      	str	r3, [sp, #12]
 8009024:	88fb      	ldrh	r3, [r7, #6]
 8009026:	9302      	str	r3, [sp, #8]
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	9301      	str	r3, [sp, #4]
 800902c:	2301      	movs	r3, #1
 800902e:	9300      	str	r3, [sp, #0]
 8009030:	2302      	movs	r3, #2
 8009032:	2201      	movs	r2, #1
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	f000 fac0 	bl	80095ba <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3710      	adds	r7, #16
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b086      	sub	sp, #24
 8009048:	af04      	add	r7, sp, #16
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	4608      	mov	r0, r1
 800904e:	4611      	mov	r1, r2
 8009050:	461a      	mov	r2, r3
 8009052:	4603      	mov	r3, r0
 8009054:	70fb      	strb	r3, [r7, #3]
 8009056:	460b      	mov	r3, r1
 8009058:	70bb      	strb	r3, [r7, #2]
 800905a:	4613      	mov	r3, r2
 800905c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800905e:	7878      	ldrb	r0, [r7, #1]
 8009060:	78ba      	ldrb	r2, [r7, #2]
 8009062:	78f9      	ldrb	r1, [r7, #3]
 8009064:	8b3b      	ldrh	r3, [r7, #24]
 8009066:	9302      	str	r3, [sp, #8]
 8009068:	7d3b      	ldrb	r3, [r7, #20]
 800906a:	9301      	str	r3, [sp, #4]
 800906c:	7c3b      	ldrb	r3, [r7, #16]
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	4603      	mov	r3, r0
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 fa53 	bl	800951e <USBH_LL_OpenPipe>

  return USBH_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	3708      	adds	r7, #8
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b082      	sub	sp, #8
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
 800908a:	460b      	mov	r3, r1
 800908c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800908e:	78fb      	ldrb	r3, [r7, #3]
 8009090:	4619      	mov	r1, r3
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fa72 	bl	800957c <USBH_LL_ClosePipe>

  return USBH_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3708      	adds	r7, #8
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b084      	sub	sp, #16
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
 80090aa:	460b      	mov	r3, r1
 80090ac:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f836 	bl	8009120 <USBH_GetFreePipe>
 80090b4:	4603      	mov	r3, r0
 80090b6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80090b8:	89fb      	ldrh	r3, [r7, #14]
 80090ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80090be:	4293      	cmp	r3, r2
 80090c0:	d00a      	beq.n	80090d8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80090c2:	78fa      	ldrb	r2, [r7, #3]
 80090c4:	89fb      	ldrh	r3, [r7, #14]
 80090c6:	f003 030f 	and.w	r3, r3, #15
 80090ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090ce:	6879      	ldr	r1, [r7, #4]
 80090d0:	33e0      	adds	r3, #224	; 0xe0
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	440b      	add	r3, r1
 80090d6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80090d8:	89fb      	ldrh	r3, [r7, #14]
 80090da:	b2db      	uxtb	r3, r3
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3710      	adds	r7, #16
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	460b      	mov	r3, r1
 80090ee:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80090f0:	78fb      	ldrb	r3, [r7, #3]
 80090f2:	2b0a      	cmp	r3, #10
 80090f4:	d80d      	bhi.n	8009112 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80090f6:	78fb      	ldrb	r3, [r7, #3]
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	33e0      	adds	r3, #224	; 0xe0
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	4413      	add	r3, r2
 8009100:	685a      	ldr	r2, [r3, #4]
 8009102:	78fb      	ldrb	r3, [r7, #3]
 8009104:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009108:	6879      	ldr	r1, [r7, #4]
 800910a:	33e0      	adds	r3, #224	; 0xe0
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	440b      	add	r3, r1
 8009110:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009112:	2300      	movs	r3, #0
}
 8009114:	4618      	mov	r0, r3
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009128:	2300      	movs	r3, #0
 800912a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800912c:	2300      	movs	r3, #0
 800912e:	73fb      	strb	r3, [r7, #15]
 8009130:	e00f      	b.n	8009152 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009132:	7bfb      	ldrb	r3, [r7, #15]
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	33e0      	adds	r3, #224	; 0xe0
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	4413      	add	r3, r2
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009142:	2b00      	cmp	r3, #0
 8009144:	d102      	bne.n	800914c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009146:	7bfb      	ldrb	r3, [r7, #15]
 8009148:	b29b      	uxth	r3, r3
 800914a:	e007      	b.n	800915c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800914c:	7bfb      	ldrb	r3, [r7, #15]
 800914e:	3301      	adds	r3, #1
 8009150:	73fb      	strb	r3, [r7, #15]
 8009152:	7bfb      	ldrb	r3, [r7, #15]
 8009154:	2b0a      	cmp	r3, #10
 8009156:	d9ec      	bls.n	8009132 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009158:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800915c:	4618      	mov	r0, r3
 800915e:	3714      	adds	r7, #20
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800916c:	2201      	movs	r2, #1
 800916e:	490e      	ldr	r1, [pc, #56]	; (80091a8 <MX_USB_HOST_Init+0x40>)
 8009170:	480e      	ldr	r0, [pc, #56]	; (80091ac <MX_USB_HOST_Init+0x44>)
 8009172:	f7fe fca1 	bl	8007ab8 <USBH_Init>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d001      	beq.n	8009180 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800917c:	f7f8 fbdc 	bl	8001938 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009180:	490b      	ldr	r1, [pc, #44]	; (80091b0 <MX_USB_HOST_Init+0x48>)
 8009182:	480a      	ldr	r0, [pc, #40]	; (80091ac <MX_USB_HOST_Init+0x44>)
 8009184:	f7fe fd26 	bl	8007bd4 <USBH_RegisterClass>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d001      	beq.n	8009192 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800918e:	f7f8 fbd3 	bl	8001938 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009192:	4806      	ldr	r0, [pc, #24]	; (80091ac <MX_USB_HOST_Init+0x44>)
 8009194:	f7fe fdaa 	bl	8007cec <USBH_Start>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d001      	beq.n	80091a2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800919e:	f7f8 fbcb 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80091a2:	bf00      	nop
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	080091c9 	.word	0x080091c9
 80091ac:	200006f4 	.word	0x200006f4
 80091b0:	200003ac 	.word	0x200003ac

080091b4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80091b8:	4802      	ldr	r0, [pc, #8]	; (80091c4 <MX_USB_HOST_Process+0x10>)
 80091ba:	f7fe fda7 	bl	8007d0c <USBH_Process>
}
 80091be:	bf00      	nop
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	200006f4 	.word	0x200006f4

080091c8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	460b      	mov	r3, r1
 80091d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80091d4:	78fb      	ldrb	r3, [r7, #3]
 80091d6:	3b01      	subs	r3, #1
 80091d8:	2b04      	cmp	r3, #4
 80091da:	d819      	bhi.n	8009210 <USBH_UserProcess+0x48>
 80091dc:	a201      	add	r2, pc, #4	; (adr r2, 80091e4 <USBH_UserProcess+0x1c>)
 80091de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e2:	bf00      	nop
 80091e4:	08009211 	.word	0x08009211
 80091e8:	08009201 	.word	0x08009201
 80091ec:	08009211 	.word	0x08009211
 80091f0:	08009209 	.word	0x08009209
 80091f4:	080091f9 	.word	0x080091f9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80091f8:	4b09      	ldr	r3, [pc, #36]	; (8009220 <USBH_UserProcess+0x58>)
 80091fa:	2203      	movs	r2, #3
 80091fc:	701a      	strb	r2, [r3, #0]
  break;
 80091fe:	e008      	b.n	8009212 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009200:	4b07      	ldr	r3, [pc, #28]	; (8009220 <USBH_UserProcess+0x58>)
 8009202:	2202      	movs	r2, #2
 8009204:	701a      	strb	r2, [r3, #0]
  break;
 8009206:	e004      	b.n	8009212 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009208:	4b05      	ldr	r3, [pc, #20]	; (8009220 <USBH_UserProcess+0x58>)
 800920a:	2201      	movs	r2, #1
 800920c:	701a      	strb	r2, [r3, #0]
  break;
 800920e:	e000      	b.n	8009212 <USBH_UserProcess+0x4a>

  default:
  break;
 8009210:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009212:	bf00      	nop
 8009214:	370c      	adds	r7, #12
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	200005c4 	.word	0x200005c4

08009224 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b08a      	sub	sp, #40	; 0x28
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800922c:	f107 0314 	add.w	r3, r7, #20
 8009230:	2200      	movs	r2, #0
 8009232:	601a      	str	r2, [r3, #0]
 8009234:	605a      	str	r2, [r3, #4]
 8009236:	609a      	str	r2, [r3, #8]
 8009238:	60da      	str	r2, [r3, #12]
 800923a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009244:	d147      	bne.n	80092d6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009246:	2300      	movs	r3, #0
 8009248:	613b      	str	r3, [r7, #16]
 800924a:	4b25      	ldr	r3, [pc, #148]	; (80092e0 <HAL_HCD_MspInit+0xbc>)
 800924c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800924e:	4a24      	ldr	r2, [pc, #144]	; (80092e0 <HAL_HCD_MspInit+0xbc>)
 8009250:	f043 0301 	orr.w	r3, r3, #1
 8009254:	6313      	str	r3, [r2, #48]	; 0x30
 8009256:	4b22      	ldr	r3, [pc, #136]	; (80092e0 <HAL_HCD_MspInit+0xbc>)
 8009258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800925a:	f003 0301 	and.w	r3, r3, #1
 800925e:	613b      	str	r3, [r7, #16]
 8009260:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009262:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009268:	2300      	movs	r3, #0
 800926a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800926c:	2300      	movs	r3, #0
 800926e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009270:	f107 0314 	add.w	r3, r7, #20
 8009274:	4619      	mov	r1, r3
 8009276:	481b      	ldr	r0, [pc, #108]	; (80092e4 <HAL_HCD_MspInit+0xc0>)
 8009278:	f7fa f80c 	bl	8003294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800927c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009282:	2302      	movs	r3, #2
 8009284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009286:	2300      	movs	r3, #0
 8009288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800928a:	2300      	movs	r3, #0
 800928c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800928e:	230a      	movs	r3, #10
 8009290:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009292:	f107 0314 	add.w	r3, r7, #20
 8009296:	4619      	mov	r1, r3
 8009298:	4812      	ldr	r0, [pc, #72]	; (80092e4 <HAL_HCD_MspInit+0xc0>)
 800929a:	f7f9 fffb 	bl	8003294 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800929e:	4b10      	ldr	r3, [pc, #64]	; (80092e0 <HAL_HCD_MspInit+0xbc>)
 80092a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a2:	4a0f      	ldr	r2, [pc, #60]	; (80092e0 <HAL_HCD_MspInit+0xbc>)
 80092a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092a8:	6353      	str	r3, [r2, #52]	; 0x34
 80092aa:	2300      	movs	r3, #0
 80092ac:	60fb      	str	r3, [r7, #12]
 80092ae:	4b0c      	ldr	r3, [pc, #48]	; (80092e0 <HAL_HCD_MspInit+0xbc>)
 80092b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092b2:	4a0b      	ldr	r2, [pc, #44]	; (80092e0 <HAL_HCD_MspInit+0xbc>)
 80092b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80092b8:	6453      	str	r3, [r2, #68]	; 0x44
 80092ba:	4b09      	ldr	r3, [pc, #36]	; (80092e0 <HAL_HCD_MspInit+0xbc>)
 80092bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092c2:	60fb      	str	r3, [r7, #12]
 80092c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80092c6:	2200      	movs	r2, #0
 80092c8:	2100      	movs	r1, #0
 80092ca:	2043      	movs	r0, #67	; 0x43
 80092cc:	f7f9 fcc1 	bl	8002c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80092d0:	2043      	movs	r0, #67	; 0x43
 80092d2:	f7f9 fcda 	bl	8002c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80092d6:	bf00      	nop
 80092d8:	3728      	adds	r7, #40	; 0x28
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	40023800 	.word	0x40023800
 80092e4:	40020000 	.word	0x40020000

080092e8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7ff f8db 	bl	80084b2 <USBH_LL_IncTimer>
}
 80092fc:	bf00      	nop
 80092fe:	3708      	adds	r7, #8
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009312:	4618      	mov	r0, r3
 8009314:	f7ff f913 	bl	800853e <USBH_LL_Connect>
}
 8009318:	bf00      	nop
 800931a:	3708      	adds	r7, #8
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800932e:	4618      	mov	r0, r3
 8009330:	f7ff f91c 	bl	800856c <USBH_LL_Disconnect>
}
 8009334:	bf00      	nop
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	460b      	mov	r3, r1
 8009346:	70fb      	strb	r3, [r7, #3]
 8009348:	4613      	mov	r3, r2
 800934a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009366:	4618      	mov	r0, r3
 8009368:	f7ff f8cd 	bl	8008506 <USBH_LL_PortEnabled>
}
 800936c:	bf00      	nop
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009382:	4618      	mov	r0, r3
 8009384:	f7ff f8cd 	bl	8008522 <USBH_LL_PortDisabled>
}
 8009388:	bf00      	nop
 800938a:	3708      	adds	r7, #8
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d12a      	bne.n	80093f8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80093a2:	4a18      	ldr	r2, [pc, #96]	; (8009404 <USBH_LL_Init+0x74>)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a15      	ldr	r2, [pc, #84]	; (8009404 <USBH_LL_Init+0x74>)
 80093ae:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80093b2:	4b14      	ldr	r3, [pc, #80]	; (8009404 <USBH_LL_Init+0x74>)
 80093b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80093b8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80093ba:	4b12      	ldr	r3, [pc, #72]	; (8009404 <USBH_LL_Init+0x74>)
 80093bc:	2208      	movs	r2, #8
 80093be:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80093c0:	4b10      	ldr	r3, [pc, #64]	; (8009404 <USBH_LL_Init+0x74>)
 80093c2:	2201      	movs	r2, #1
 80093c4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80093c6:	4b0f      	ldr	r3, [pc, #60]	; (8009404 <USBH_LL_Init+0x74>)
 80093c8:	2200      	movs	r2, #0
 80093ca:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80093cc:	4b0d      	ldr	r3, [pc, #52]	; (8009404 <USBH_LL_Init+0x74>)
 80093ce:	2202      	movs	r2, #2
 80093d0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80093d2:	4b0c      	ldr	r3, [pc, #48]	; (8009404 <USBH_LL_Init+0x74>)
 80093d4:	2200      	movs	r2, #0
 80093d6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80093d8:	480a      	ldr	r0, [pc, #40]	; (8009404 <USBH_LL_Init+0x74>)
 80093da:	f7fa f910 	bl	80035fe <HAL_HCD_Init>
 80093de:	4603      	mov	r3, r0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d001      	beq.n	80093e8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80093e4:	f7f8 faa8 	bl	8001938 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80093e8:	4806      	ldr	r0, [pc, #24]	; (8009404 <USBH_LL_Init+0x74>)
 80093ea:	f7fa fcf4 	bl	8003dd6 <HAL_HCD_GetCurrentFrame>
 80093ee:	4603      	mov	r3, r0
 80093f0:	4619      	mov	r1, r3
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f7ff f84e 	bl	8008494 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80093f8:	2300      	movs	r3, #0
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3708      	adds	r7, #8
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	20000acc 	.word	0x20000acc

08009408 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009410:	2300      	movs	r3, #0
 8009412:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009414:	2300      	movs	r3, #0
 8009416:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800941e:	4618      	mov	r0, r3
 8009420:	f7fa fc63 	bl	8003cea <HAL_HCD_Start>
 8009424:	4603      	mov	r3, r0
 8009426:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009428:	7bfb      	ldrb	r3, [r7, #15]
 800942a:	4618      	mov	r0, r3
 800942c:	f000 f95c 	bl	80096e8 <USBH_Get_USB_Status>
 8009430:	4603      	mov	r3, r0
 8009432:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009434:	7bbb      	ldrb	r3, [r7, #14]
}
 8009436:	4618      	mov	r0, r3
 8009438:	3710      	adds	r7, #16
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800943e:	b580      	push	{r7, lr}
 8009440:	b084      	sub	sp, #16
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009446:	2300      	movs	r3, #0
 8009448:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800944a:	2300      	movs	r3, #0
 800944c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009454:	4618      	mov	r0, r3
 8009456:	f7fa fc6b 	bl	8003d30 <HAL_HCD_Stop>
 800945a:	4603      	mov	r3, r0
 800945c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800945e:	7bfb      	ldrb	r3, [r7, #15]
 8009460:	4618      	mov	r0, r3
 8009462:	f000 f941 	bl	80096e8 <USBH_Get_USB_Status>
 8009466:	4603      	mov	r3, r0
 8009468:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800946a:	7bbb      	ldrb	r3, [r7, #14]
}
 800946c:	4618      	mov	r0, r3
 800946e:	3710      	adds	r7, #16
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800947c:	2301      	movs	r3, #1
 800947e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009486:	4618      	mov	r0, r3
 8009488:	f7fa fcb3 	bl	8003df2 <HAL_HCD_GetCurrentSpeed>
 800948c:	4603      	mov	r3, r0
 800948e:	2b02      	cmp	r3, #2
 8009490:	d00c      	beq.n	80094ac <USBH_LL_GetSpeed+0x38>
 8009492:	2b02      	cmp	r3, #2
 8009494:	d80d      	bhi.n	80094b2 <USBH_LL_GetSpeed+0x3e>
 8009496:	2b00      	cmp	r3, #0
 8009498:	d002      	beq.n	80094a0 <USBH_LL_GetSpeed+0x2c>
 800949a:	2b01      	cmp	r3, #1
 800949c:	d003      	beq.n	80094a6 <USBH_LL_GetSpeed+0x32>
 800949e:	e008      	b.n	80094b2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80094a0:	2300      	movs	r3, #0
 80094a2:	73fb      	strb	r3, [r7, #15]
    break;
 80094a4:	e008      	b.n	80094b8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80094a6:	2301      	movs	r3, #1
 80094a8:	73fb      	strb	r3, [r7, #15]
    break;
 80094aa:	e005      	b.n	80094b8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80094ac:	2302      	movs	r3, #2
 80094ae:	73fb      	strb	r3, [r7, #15]
    break;
 80094b0:	e002      	b.n	80094b8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80094b2:	2301      	movs	r3, #1
 80094b4:	73fb      	strb	r3, [r7, #15]
    break;
 80094b6:	bf00      	nop
  }
  return  speed;
 80094b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3710      	adds	r7, #16
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b084      	sub	sp, #16
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ca:	2300      	movs	r3, #0
 80094cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80094ce:	2300      	movs	r3, #0
 80094d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80094d8:	4618      	mov	r0, r3
 80094da:	f7fa fc46 	bl	8003d6a <HAL_HCD_ResetPort>
 80094de:	4603      	mov	r3, r0
 80094e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
 80094e4:	4618      	mov	r0, r3
 80094e6:	f000 f8ff 	bl	80096e8 <USBH_Get_USB_Status>
 80094ea:	4603      	mov	r3, r0
 80094ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	460b      	mov	r3, r1
 8009502:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800950a:	78fa      	ldrb	r2, [r7, #3]
 800950c:	4611      	mov	r1, r2
 800950e:	4618      	mov	r0, r3
 8009510:	f7fa fc4d 	bl	8003dae <HAL_HCD_HC_GetXferCount>
 8009514:	4603      	mov	r3, r0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3708      	adds	r7, #8
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800951e:	b590      	push	{r4, r7, lr}
 8009520:	b089      	sub	sp, #36	; 0x24
 8009522:	af04      	add	r7, sp, #16
 8009524:	6078      	str	r0, [r7, #4]
 8009526:	4608      	mov	r0, r1
 8009528:	4611      	mov	r1, r2
 800952a:	461a      	mov	r2, r3
 800952c:	4603      	mov	r3, r0
 800952e:	70fb      	strb	r3, [r7, #3]
 8009530:	460b      	mov	r3, r1
 8009532:	70bb      	strb	r3, [r7, #2]
 8009534:	4613      	mov	r3, r2
 8009536:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009538:	2300      	movs	r3, #0
 800953a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800953c:	2300      	movs	r3, #0
 800953e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009546:	787c      	ldrb	r4, [r7, #1]
 8009548:	78ba      	ldrb	r2, [r7, #2]
 800954a:	78f9      	ldrb	r1, [r7, #3]
 800954c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800954e:	9302      	str	r3, [sp, #8]
 8009550:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009554:	9301      	str	r3, [sp, #4]
 8009556:	f897 3020 	ldrb.w	r3, [r7, #32]
 800955a:	9300      	str	r3, [sp, #0]
 800955c:	4623      	mov	r3, r4
 800955e:	f7fa f8b0 	bl	80036c2 <HAL_HCD_HC_Init>
 8009562:	4603      	mov	r3, r0
 8009564:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009566:	7bfb      	ldrb	r3, [r7, #15]
 8009568:	4618      	mov	r0, r3
 800956a:	f000 f8bd 	bl	80096e8 <USBH_Get_USB_Status>
 800956e:	4603      	mov	r3, r0
 8009570:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009572:	7bbb      	ldrb	r3, [r7, #14]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3714      	adds	r7, #20
 8009578:	46bd      	mov	sp, r7
 800957a:	bd90      	pop	{r4, r7, pc}

0800957c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	460b      	mov	r3, r1
 8009586:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009588:	2300      	movs	r3, #0
 800958a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800958c:	2300      	movs	r3, #0
 800958e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009596:	78fa      	ldrb	r2, [r7, #3]
 8009598:	4611      	mov	r1, r2
 800959a:	4618      	mov	r0, r3
 800959c:	f7fa f920 	bl	80037e0 <HAL_HCD_HC_Halt>
 80095a0:	4603      	mov	r3, r0
 80095a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80095a4:	7bfb      	ldrb	r3, [r7, #15]
 80095a6:	4618      	mov	r0, r3
 80095a8:	f000 f89e 	bl	80096e8 <USBH_Get_USB_Status>
 80095ac:	4603      	mov	r3, r0
 80095ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3710      	adds	r7, #16
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80095ba:	b590      	push	{r4, r7, lr}
 80095bc:	b089      	sub	sp, #36	; 0x24
 80095be:	af04      	add	r7, sp, #16
 80095c0:	6078      	str	r0, [r7, #4]
 80095c2:	4608      	mov	r0, r1
 80095c4:	4611      	mov	r1, r2
 80095c6:	461a      	mov	r2, r3
 80095c8:	4603      	mov	r3, r0
 80095ca:	70fb      	strb	r3, [r7, #3]
 80095cc:	460b      	mov	r3, r1
 80095ce:	70bb      	strb	r3, [r7, #2]
 80095d0:	4613      	mov	r3, r2
 80095d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095d4:	2300      	movs	r3, #0
 80095d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80095d8:	2300      	movs	r3, #0
 80095da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80095e2:	787c      	ldrb	r4, [r7, #1]
 80095e4:	78ba      	ldrb	r2, [r7, #2]
 80095e6:	78f9      	ldrb	r1, [r7, #3]
 80095e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80095ec:	9303      	str	r3, [sp, #12]
 80095ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80095f0:	9302      	str	r3, [sp, #8]
 80095f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f4:	9301      	str	r3, [sp, #4]
 80095f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80095fa:	9300      	str	r3, [sp, #0]
 80095fc:	4623      	mov	r3, r4
 80095fe:	f7fa f913 	bl	8003828 <HAL_HCD_HC_SubmitRequest>
 8009602:	4603      	mov	r3, r0
 8009604:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009606:	7bfb      	ldrb	r3, [r7, #15]
 8009608:	4618      	mov	r0, r3
 800960a:	f000 f86d 	bl	80096e8 <USBH_Get_USB_Status>
 800960e:	4603      	mov	r3, r0
 8009610:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009612:	7bbb      	ldrb	r3, [r7, #14]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3714      	adds	r7, #20
 8009618:	46bd      	mov	sp, r7
 800961a:	bd90      	pop	{r4, r7, pc}

0800961c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	460b      	mov	r3, r1
 8009626:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800962e:	78fa      	ldrb	r2, [r7, #3]
 8009630:	4611      	mov	r1, r2
 8009632:	4618      	mov	r0, r3
 8009634:	f7fa fba7 	bl	8003d86 <HAL_HCD_HC_GetURBState>
 8009638:	4603      	mov	r3, r0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3708      	adds	r7, #8
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b082      	sub	sp, #8
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
 800964a:	460b      	mov	r3, r1
 800964c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009654:	2b01      	cmp	r3, #1
 8009656:	d103      	bne.n	8009660 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009658:	78fb      	ldrb	r3, [r7, #3]
 800965a:	4618      	mov	r0, r3
 800965c:	f000 f870 	bl	8009740 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009660:	20c8      	movs	r0, #200	; 0xc8
 8009662:	f7f9 f9f7 	bl	8002a54 <HAL_Delay>
  return USBH_OK;
 8009666:	2300      	movs	r3, #0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3708      	adds	r7, #8
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009670:	b480      	push	{r7}
 8009672:	b085      	sub	sp, #20
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	460b      	mov	r3, r1
 800967a:	70fb      	strb	r3, [r7, #3]
 800967c:	4613      	mov	r3, r2
 800967e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009686:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009688:	78fb      	ldrb	r3, [r7, #3]
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	212c      	movs	r1, #44	; 0x2c
 800968e:	fb01 f303 	mul.w	r3, r1, r3
 8009692:	4413      	add	r3, r2
 8009694:	333b      	adds	r3, #59	; 0x3b
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d009      	beq.n	80096b0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800969c:	78fb      	ldrb	r3, [r7, #3]
 800969e:	68fa      	ldr	r2, [r7, #12]
 80096a0:	212c      	movs	r1, #44	; 0x2c
 80096a2:	fb01 f303 	mul.w	r3, r1, r3
 80096a6:	4413      	add	r3, r2
 80096a8:	3354      	adds	r3, #84	; 0x54
 80096aa:	78ba      	ldrb	r2, [r7, #2]
 80096ac:	701a      	strb	r2, [r3, #0]
 80096ae:	e008      	b.n	80096c2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80096b0:	78fb      	ldrb	r3, [r7, #3]
 80096b2:	68fa      	ldr	r2, [r7, #12]
 80096b4:	212c      	movs	r1, #44	; 0x2c
 80096b6:	fb01 f303 	mul.w	r3, r1, r3
 80096ba:	4413      	add	r3, r2
 80096bc:	3355      	adds	r3, #85	; 0x55
 80096be:	78ba      	ldrb	r2, [r7, #2]
 80096c0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3714      	adds	r7, #20
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f7f9 f9bb 	bl	8002a54 <HAL_Delay>
}
 80096de:	bf00      	nop
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
	...

080096e8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	4603      	mov	r3, r0
 80096f0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096f2:	2300      	movs	r3, #0
 80096f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80096f6:	79fb      	ldrb	r3, [r7, #7]
 80096f8:	2b03      	cmp	r3, #3
 80096fa:	d817      	bhi.n	800972c <USBH_Get_USB_Status+0x44>
 80096fc:	a201      	add	r2, pc, #4	; (adr r2, 8009704 <USBH_Get_USB_Status+0x1c>)
 80096fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009702:	bf00      	nop
 8009704:	08009715 	.word	0x08009715
 8009708:	0800971b 	.word	0x0800971b
 800970c:	08009721 	.word	0x08009721
 8009710:	08009727 	.word	0x08009727
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009714:	2300      	movs	r3, #0
 8009716:	73fb      	strb	r3, [r7, #15]
    break;
 8009718:	e00b      	b.n	8009732 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800971a:	2302      	movs	r3, #2
 800971c:	73fb      	strb	r3, [r7, #15]
    break;
 800971e:	e008      	b.n	8009732 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009720:	2301      	movs	r3, #1
 8009722:	73fb      	strb	r3, [r7, #15]
    break;
 8009724:	e005      	b.n	8009732 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009726:	2302      	movs	r3, #2
 8009728:	73fb      	strb	r3, [r7, #15]
    break;
 800972a:	e002      	b.n	8009732 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800972c:	2302      	movs	r3, #2
 800972e:	73fb      	strb	r3, [r7, #15]
    break;
 8009730:	bf00      	nop
  }
  return usb_status;
 8009732:	7bfb      	ldrb	r3, [r7, #15]
}
 8009734:	4618      	mov	r0, r3
 8009736:	3714      	adds	r7, #20
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	4603      	mov	r3, r0
 8009748:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800974a:	79fb      	ldrb	r3, [r7, #7]
 800974c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800974e:	79fb      	ldrb	r3, [r7, #7]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d102      	bne.n	800975a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009754:	2300      	movs	r3, #0
 8009756:	73fb      	strb	r3, [r7, #15]
 8009758:	e001      	b.n	800975e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800975a:	2301      	movs	r3, #1
 800975c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800975e:	7bfb      	ldrb	r3, [r7, #15]
 8009760:	461a      	mov	r2, r3
 8009762:	2101      	movs	r1, #1
 8009764:	4803      	ldr	r0, [pc, #12]	; (8009774 <MX_DriverVbusFS+0x34>)
 8009766:	f7f9 ff31 	bl	80035cc <HAL_GPIO_WritePin>
}
 800976a:	bf00      	nop
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	40020800 	.word	0x40020800

08009778 <atof>:
 8009778:	2100      	movs	r1, #0
 800977a:	f000 bf5b 	b.w	800a634 <strtod>

0800977e <atoi>:
 800977e:	220a      	movs	r2, #10
 8009780:	2100      	movs	r1, #0
 8009782:	f001 b843 	b.w	800a80c <strtol>
	...

08009788 <__errno>:
 8009788:	4b01      	ldr	r3, [pc, #4]	; (8009790 <__errno+0x8>)
 800978a:	6818      	ldr	r0, [r3, #0]
 800978c:	4770      	bx	lr
 800978e:	bf00      	nop
 8009790:	200003cc 	.word	0x200003cc

08009794 <__libc_init_array>:
 8009794:	b570      	push	{r4, r5, r6, lr}
 8009796:	4d0d      	ldr	r5, [pc, #52]	; (80097cc <__libc_init_array+0x38>)
 8009798:	4c0d      	ldr	r4, [pc, #52]	; (80097d0 <__libc_init_array+0x3c>)
 800979a:	1b64      	subs	r4, r4, r5
 800979c:	10a4      	asrs	r4, r4, #2
 800979e:	2600      	movs	r6, #0
 80097a0:	42a6      	cmp	r6, r4
 80097a2:	d109      	bne.n	80097b8 <__libc_init_array+0x24>
 80097a4:	4d0b      	ldr	r5, [pc, #44]	; (80097d4 <__libc_init_array+0x40>)
 80097a6:	4c0c      	ldr	r4, [pc, #48]	; (80097d8 <__libc_init_array+0x44>)
 80097a8:	f005 fae0 	bl	800ed6c <_init>
 80097ac:	1b64      	subs	r4, r4, r5
 80097ae:	10a4      	asrs	r4, r4, #2
 80097b0:	2600      	movs	r6, #0
 80097b2:	42a6      	cmp	r6, r4
 80097b4:	d105      	bne.n	80097c2 <__libc_init_array+0x2e>
 80097b6:	bd70      	pop	{r4, r5, r6, pc}
 80097b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80097bc:	4798      	blx	r3
 80097be:	3601      	adds	r6, #1
 80097c0:	e7ee      	b.n	80097a0 <__libc_init_array+0xc>
 80097c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80097c6:	4798      	blx	r3
 80097c8:	3601      	adds	r6, #1
 80097ca:	e7f2      	b.n	80097b2 <__libc_init_array+0x1e>
 80097cc:	0800f4f8 	.word	0x0800f4f8
 80097d0:	0800f4f8 	.word	0x0800f4f8
 80097d4:	0800f4f8 	.word	0x0800f4f8
 80097d8:	0800f4fc 	.word	0x0800f4fc

080097dc <malloc>:
 80097dc:	4b02      	ldr	r3, [pc, #8]	; (80097e8 <malloc+0xc>)
 80097de:	4601      	mov	r1, r0
 80097e0:	6818      	ldr	r0, [r3, #0]
 80097e2:	f000 b863 	b.w	80098ac <_malloc_r>
 80097e6:	bf00      	nop
 80097e8:	200003cc 	.word	0x200003cc

080097ec <free>:
 80097ec:	4b02      	ldr	r3, [pc, #8]	; (80097f8 <free+0xc>)
 80097ee:	4601      	mov	r1, r0
 80097f0:	6818      	ldr	r0, [r3, #0]
 80097f2:	f000 b80b 	b.w	800980c <_free_r>
 80097f6:	bf00      	nop
 80097f8:	200003cc 	.word	0x200003cc

080097fc <memset>:
 80097fc:	4402      	add	r2, r0
 80097fe:	4603      	mov	r3, r0
 8009800:	4293      	cmp	r3, r2
 8009802:	d100      	bne.n	8009806 <memset+0xa>
 8009804:	4770      	bx	lr
 8009806:	f803 1b01 	strb.w	r1, [r3], #1
 800980a:	e7f9      	b.n	8009800 <memset+0x4>

0800980c <_free_r>:
 800980c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800980e:	2900      	cmp	r1, #0
 8009810:	d048      	beq.n	80098a4 <_free_r+0x98>
 8009812:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009816:	9001      	str	r0, [sp, #4]
 8009818:	2b00      	cmp	r3, #0
 800981a:	f1a1 0404 	sub.w	r4, r1, #4
 800981e:	bfb8      	it	lt
 8009820:	18e4      	addlt	r4, r4, r3
 8009822:	f001 fbbd 	bl	800afa0 <__malloc_lock>
 8009826:	4a20      	ldr	r2, [pc, #128]	; (80098a8 <_free_r+0x9c>)
 8009828:	9801      	ldr	r0, [sp, #4]
 800982a:	6813      	ldr	r3, [r2, #0]
 800982c:	4615      	mov	r5, r2
 800982e:	b933      	cbnz	r3, 800983e <_free_r+0x32>
 8009830:	6063      	str	r3, [r4, #4]
 8009832:	6014      	str	r4, [r2, #0]
 8009834:	b003      	add	sp, #12
 8009836:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800983a:	f001 bbb7 	b.w	800afac <__malloc_unlock>
 800983e:	42a3      	cmp	r3, r4
 8009840:	d90b      	bls.n	800985a <_free_r+0x4e>
 8009842:	6821      	ldr	r1, [r4, #0]
 8009844:	1862      	adds	r2, r4, r1
 8009846:	4293      	cmp	r3, r2
 8009848:	bf04      	itt	eq
 800984a:	681a      	ldreq	r2, [r3, #0]
 800984c:	685b      	ldreq	r3, [r3, #4]
 800984e:	6063      	str	r3, [r4, #4]
 8009850:	bf04      	itt	eq
 8009852:	1852      	addeq	r2, r2, r1
 8009854:	6022      	streq	r2, [r4, #0]
 8009856:	602c      	str	r4, [r5, #0]
 8009858:	e7ec      	b.n	8009834 <_free_r+0x28>
 800985a:	461a      	mov	r2, r3
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	b10b      	cbz	r3, 8009864 <_free_r+0x58>
 8009860:	42a3      	cmp	r3, r4
 8009862:	d9fa      	bls.n	800985a <_free_r+0x4e>
 8009864:	6811      	ldr	r1, [r2, #0]
 8009866:	1855      	adds	r5, r2, r1
 8009868:	42a5      	cmp	r5, r4
 800986a:	d10b      	bne.n	8009884 <_free_r+0x78>
 800986c:	6824      	ldr	r4, [r4, #0]
 800986e:	4421      	add	r1, r4
 8009870:	1854      	adds	r4, r2, r1
 8009872:	42a3      	cmp	r3, r4
 8009874:	6011      	str	r1, [r2, #0]
 8009876:	d1dd      	bne.n	8009834 <_free_r+0x28>
 8009878:	681c      	ldr	r4, [r3, #0]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	6053      	str	r3, [r2, #4]
 800987e:	4421      	add	r1, r4
 8009880:	6011      	str	r1, [r2, #0]
 8009882:	e7d7      	b.n	8009834 <_free_r+0x28>
 8009884:	d902      	bls.n	800988c <_free_r+0x80>
 8009886:	230c      	movs	r3, #12
 8009888:	6003      	str	r3, [r0, #0]
 800988a:	e7d3      	b.n	8009834 <_free_r+0x28>
 800988c:	6825      	ldr	r5, [r4, #0]
 800988e:	1961      	adds	r1, r4, r5
 8009890:	428b      	cmp	r3, r1
 8009892:	bf04      	itt	eq
 8009894:	6819      	ldreq	r1, [r3, #0]
 8009896:	685b      	ldreq	r3, [r3, #4]
 8009898:	6063      	str	r3, [r4, #4]
 800989a:	bf04      	itt	eq
 800989c:	1949      	addeq	r1, r1, r5
 800989e:	6021      	streq	r1, [r4, #0]
 80098a0:	6054      	str	r4, [r2, #4]
 80098a2:	e7c7      	b.n	8009834 <_free_r+0x28>
 80098a4:	b003      	add	sp, #12
 80098a6:	bd30      	pop	{r4, r5, pc}
 80098a8:	200005c8 	.word	0x200005c8

080098ac <_malloc_r>:
 80098ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ae:	1ccd      	adds	r5, r1, #3
 80098b0:	f025 0503 	bic.w	r5, r5, #3
 80098b4:	3508      	adds	r5, #8
 80098b6:	2d0c      	cmp	r5, #12
 80098b8:	bf38      	it	cc
 80098ba:	250c      	movcc	r5, #12
 80098bc:	2d00      	cmp	r5, #0
 80098be:	4606      	mov	r6, r0
 80098c0:	db01      	blt.n	80098c6 <_malloc_r+0x1a>
 80098c2:	42a9      	cmp	r1, r5
 80098c4:	d903      	bls.n	80098ce <_malloc_r+0x22>
 80098c6:	230c      	movs	r3, #12
 80098c8:	6033      	str	r3, [r6, #0]
 80098ca:	2000      	movs	r0, #0
 80098cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098ce:	f001 fb67 	bl	800afa0 <__malloc_lock>
 80098d2:	4921      	ldr	r1, [pc, #132]	; (8009958 <_malloc_r+0xac>)
 80098d4:	680a      	ldr	r2, [r1, #0]
 80098d6:	4614      	mov	r4, r2
 80098d8:	b99c      	cbnz	r4, 8009902 <_malloc_r+0x56>
 80098da:	4f20      	ldr	r7, [pc, #128]	; (800995c <_malloc_r+0xb0>)
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	b923      	cbnz	r3, 80098ea <_malloc_r+0x3e>
 80098e0:	4621      	mov	r1, r4
 80098e2:	4630      	mov	r0, r6
 80098e4:	f000 f83c 	bl	8009960 <_sbrk_r>
 80098e8:	6038      	str	r0, [r7, #0]
 80098ea:	4629      	mov	r1, r5
 80098ec:	4630      	mov	r0, r6
 80098ee:	f000 f837 	bl	8009960 <_sbrk_r>
 80098f2:	1c43      	adds	r3, r0, #1
 80098f4:	d123      	bne.n	800993e <_malloc_r+0x92>
 80098f6:	230c      	movs	r3, #12
 80098f8:	6033      	str	r3, [r6, #0]
 80098fa:	4630      	mov	r0, r6
 80098fc:	f001 fb56 	bl	800afac <__malloc_unlock>
 8009900:	e7e3      	b.n	80098ca <_malloc_r+0x1e>
 8009902:	6823      	ldr	r3, [r4, #0]
 8009904:	1b5b      	subs	r3, r3, r5
 8009906:	d417      	bmi.n	8009938 <_malloc_r+0x8c>
 8009908:	2b0b      	cmp	r3, #11
 800990a:	d903      	bls.n	8009914 <_malloc_r+0x68>
 800990c:	6023      	str	r3, [r4, #0]
 800990e:	441c      	add	r4, r3
 8009910:	6025      	str	r5, [r4, #0]
 8009912:	e004      	b.n	800991e <_malloc_r+0x72>
 8009914:	6863      	ldr	r3, [r4, #4]
 8009916:	42a2      	cmp	r2, r4
 8009918:	bf0c      	ite	eq
 800991a:	600b      	streq	r3, [r1, #0]
 800991c:	6053      	strne	r3, [r2, #4]
 800991e:	4630      	mov	r0, r6
 8009920:	f001 fb44 	bl	800afac <__malloc_unlock>
 8009924:	f104 000b 	add.w	r0, r4, #11
 8009928:	1d23      	adds	r3, r4, #4
 800992a:	f020 0007 	bic.w	r0, r0, #7
 800992e:	1ac2      	subs	r2, r0, r3
 8009930:	d0cc      	beq.n	80098cc <_malloc_r+0x20>
 8009932:	1a1b      	subs	r3, r3, r0
 8009934:	50a3      	str	r3, [r4, r2]
 8009936:	e7c9      	b.n	80098cc <_malloc_r+0x20>
 8009938:	4622      	mov	r2, r4
 800993a:	6864      	ldr	r4, [r4, #4]
 800993c:	e7cc      	b.n	80098d8 <_malloc_r+0x2c>
 800993e:	1cc4      	adds	r4, r0, #3
 8009940:	f024 0403 	bic.w	r4, r4, #3
 8009944:	42a0      	cmp	r0, r4
 8009946:	d0e3      	beq.n	8009910 <_malloc_r+0x64>
 8009948:	1a21      	subs	r1, r4, r0
 800994a:	4630      	mov	r0, r6
 800994c:	f000 f808 	bl	8009960 <_sbrk_r>
 8009950:	3001      	adds	r0, #1
 8009952:	d1dd      	bne.n	8009910 <_malloc_r+0x64>
 8009954:	e7cf      	b.n	80098f6 <_malloc_r+0x4a>
 8009956:	bf00      	nop
 8009958:	200005c8 	.word	0x200005c8
 800995c:	200005cc 	.word	0x200005cc

08009960 <_sbrk_r>:
 8009960:	b538      	push	{r3, r4, r5, lr}
 8009962:	4d06      	ldr	r5, [pc, #24]	; (800997c <_sbrk_r+0x1c>)
 8009964:	2300      	movs	r3, #0
 8009966:	4604      	mov	r4, r0
 8009968:	4608      	mov	r0, r1
 800996a:	602b      	str	r3, [r5, #0]
 800996c:	f7f8 ff8e 	bl	800288c <_sbrk>
 8009970:	1c43      	adds	r3, r0, #1
 8009972:	d102      	bne.n	800997a <_sbrk_r+0x1a>
 8009974:	682b      	ldr	r3, [r5, #0]
 8009976:	b103      	cbz	r3, 800997a <_sbrk_r+0x1a>
 8009978:	6023      	str	r3, [r4, #0]
 800997a:	bd38      	pop	{r3, r4, r5, pc}
 800997c:	20000dd0 	.word	0x20000dd0

08009980 <siprintf>:
 8009980:	b40e      	push	{r1, r2, r3}
 8009982:	b500      	push	{lr}
 8009984:	b09c      	sub	sp, #112	; 0x70
 8009986:	ab1d      	add	r3, sp, #116	; 0x74
 8009988:	9002      	str	r0, [sp, #8]
 800998a:	9006      	str	r0, [sp, #24]
 800998c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009990:	4809      	ldr	r0, [pc, #36]	; (80099b8 <siprintf+0x38>)
 8009992:	9107      	str	r1, [sp, #28]
 8009994:	9104      	str	r1, [sp, #16]
 8009996:	4909      	ldr	r1, [pc, #36]	; (80099bc <siprintf+0x3c>)
 8009998:	f853 2b04 	ldr.w	r2, [r3], #4
 800999c:	9105      	str	r1, [sp, #20]
 800999e:	6800      	ldr	r0, [r0, #0]
 80099a0:	9301      	str	r3, [sp, #4]
 80099a2:	a902      	add	r1, sp, #8
 80099a4:	f002 f82e 	bl	800ba04 <_svfiprintf_r>
 80099a8:	9b02      	ldr	r3, [sp, #8]
 80099aa:	2200      	movs	r2, #0
 80099ac:	701a      	strb	r2, [r3, #0]
 80099ae:	b01c      	add	sp, #112	; 0x70
 80099b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80099b4:	b003      	add	sp, #12
 80099b6:	4770      	bx	lr
 80099b8:	200003cc 	.word	0x200003cc
 80099bc:	ffff0208 	.word	0xffff0208

080099c0 <strncat>:
 80099c0:	b530      	push	{r4, r5, lr}
 80099c2:	4604      	mov	r4, r0
 80099c4:	7825      	ldrb	r5, [r4, #0]
 80099c6:	4623      	mov	r3, r4
 80099c8:	3401      	adds	r4, #1
 80099ca:	2d00      	cmp	r5, #0
 80099cc:	d1fa      	bne.n	80099c4 <strncat+0x4>
 80099ce:	3a01      	subs	r2, #1
 80099d0:	d304      	bcc.n	80099dc <strncat+0x1c>
 80099d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099d6:	f803 4b01 	strb.w	r4, [r3], #1
 80099da:	b904      	cbnz	r4, 80099de <strncat+0x1e>
 80099dc:	bd30      	pop	{r4, r5, pc}
 80099de:	2a00      	cmp	r2, #0
 80099e0:	d1f5      	bne.n	80099ce <strncat+0xe>
 80099e2:	701a      	strb	r2, [r3, #0]
 80099e4:	e7f3      	b.n	80099ce <strncat+0xe>

080099e6 <sulp>:
 80099e6:	b570      	push	{r4, r5, r6, lr}
 80099e8:	4604      	mov	r4, r0
 80099ea:	460d      	mov	r5, r1
 80099ec:	ec45 4b10 	vmov	d0, r4, r5
 80099f0:	4616      	mov	r6, r2
 80099f2:	f001 fe4d 	bl	800b690 <__ulp>
 80099f6:	ec51 0b10 	vmov	r0, r1, d0
 80099fa:	b17e      	cbz	r6, 8009a1c <sulp+0x36>
 80099fc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009a00:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	dd09      	ble.n	8009a1c <sulp+0x36>
 8009a08:	051b      	lsls	r3, r3, #20
 8009a0a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009a0e:	2400      	movs	r4, #0
 8009a10:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009a14:	4622      	mov	r2, r4
 8009a16:	462b      	mov	r3, r5
 8009a18:	f7f6 fdee 	bl	80005f8 <__aeabi_dmul>
 8009a1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009a20 <_strtod_l>:
 8009a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a24:	b0a3      	sub	sp, #140	; 0x8c
 8009a26:	461f      	mov	r7, r3
 8009a28:	2300      	movs	r3, #0
 8009a2a:	931e      	str	r3, [sp, #120]	; 0x78
 8009a2c:	4ba4      	ldr	r3, [pc, #656]	; (8009cc0 <_strtod_l+0x2a0>)
 8009a2e:	9219      	str	r2, [sp, #100]	; 0x64
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	9307      	str	r3, [sp, #28]
 8009a34:	4604      	mov	r4, r0
 8009a36:	4618      	mov	r0, r3
 8009a38:	4688      	mov	r8, r1
 8009a3a:	f7f6 fbc9 	bl	80001d0 <strlen>
 8009a3e:	f04f 0a00 	mov.w	sl, #0
 8009a42:	4605      	mov	r5, r0
 8009a44:	f04f 0b00 	mov.w	fp, #0
 8009a48:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009a4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a4e:	781a      	ldrb	r2, [r3, #0]
 8009a50:	2a2b      	cmp	r2, #43	; 0x2b
 8009a52:	d04c      	beq.n	8009aee <_strtod_l+0xce>
 8009a54:	d839      	bhi.n	8009aca <_strtod_l+0xaa>
 8009a56:	2a0d      	cmp	r2, #13
 8009a58:	d832      	bhi.n	8009ac0 <_strtod_l+0xa0>
 8009a5a:	2a08      	cmp	r2, #8
 8009a5c:	d832      	bhi.n	8009ac4 <_strtod_l+0xa4>
 8009a5e:	2a00      	cmp	r2, #0
 8009a60:	d03c      	beq.n	8009adc <_strtod_l+0xbc>
 8009a62:	2300      	movs	r3, #0
 8009a64:	930e      	str	r3, [sp, #56]	; 0x38
 8009a66:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009a68:	7833      	ldrb	r3, [r6, #0]
 8009a6a:	2b30      	cmp	r3, #48	; 0x30
 8009a6c:	f040 80b4 	bne.w	8009bd8 <_strtod_l+0x1b8>
 8009a70:	7873      	ldrb	r3, [r6, #1]
 8009a72:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009a76:	2b58      	cmp	r3, #88	; 0x58
 8009a78:	d16c      	bne.n	8009b54 <_strtod_l+0x134>
 8009a7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a7c:	9301      	str	r3, [sp, #4]
 8009a7e:	ab1e      	add	r3, sp, #120	; 0x78
 8009a80:	9702      	str	r7, [sp, #8]
 8009a82:	9300      	str	r3, [sp, #0]
 8009a84:	4a8f      	ldr	r2, [pc, #572]	; (8009cc4 <_strtod_l+0x2a4>)
 8009a86:	ab1f      	add	r3, sp, #124	; 0x7c
 8009a88:	a91d      	add	r1, sp, #116	; 0x74
 8009a8a:	4620      	mov	r0, r4
 8009a8c:	f000 ff60 	bl	800a950 <__gethex>
 8009a90:	f010 0707 	ands.w	r7, r0, #7
 8009a94:	4605      	mov	r5, r0
 8009a96:	d005      	beq.n	8009aa4 <_strtod_l+0x84>
 8009a98:	2f06      	cmp	r7, #6
 8009a9a:	d12a      	bne.n	8009af2 <_strtod_l+0xd2>
 8009a9c:	3601      	adds	r6, #1
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	961d      	str	r6, [sp, #116]	; 0x74
 8009aa2:	930e      	str	r3, [sp, #56]	; 0x38
 8009aa4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	f040 8596 	bne.w	800a5d8 <_strtod_l+0xbb8>
 8009aac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009aae:	b1db      	cbz	r3, 8009ae8 <_strtod_l+0xc8>
 8009ab0:	4652      	mov	r2, sl
 8009ab2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009ab6:	ec43 2b10 	vmov	d0, r2, r3
 8009aba:	b023      	add	sp, #140	; 0x8c
 8009abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac0:	2a20      	cmp	r2, #32
 8009ac2:	d1ce      	bne.n	8009a62 <_strtod_l+0x42>
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	931d      	str	r3, [sp, #116]	; 0x74
 8009ac8:	e7c0      	b.n	8009a4c <_strtod_l+0x2c>
 8009aca:	2a2d      	cmp	r2, #45	; 0x2d
 8009acc:	d1c9      	bne.n	8009a62 <_strtod_l+0x42>
 8009ace:	2201      	movs	r2, #1
 8009ad0:	920e      	str	r2, [sp, #56]	; 0x38
 8009ad2:	1c5a      	adds	r2, r3, #1
 8009ad4:	921d      	str	r2, [sp, #116]	; 0x74
 8009ad6:	785b      	ldrb	r3, [r3, #1]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d1c4      	bne.n	8009a66 <_strtod_l+0x46>
 8009adc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ade:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f040 8576 	bne.w	800a5d4 <_strtod_l+0xbb4>
 8009ae8:	4652      	mov	r2, sl
 8009aea:	465b      	mov	r3, fp
 8009aec:	e7e3      	b.n	8009ab6 <_strtod_l+0x96>
 8009aee:	2200      	movs	r2, #0
 8009af0:	e7ee      	b.n	8009ad0 <_strtod_l+0xb0>
 8009af2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009af4:	b13a      	cbz	r2, 8009b06 <_strtod_l+0xe6>
 8009af6:	2135      	movs	r1, #53	; 0x35
 8009af8:	a820      	add	r0, sp, #128	; 0x80
 8009afa:	f001 fed4 	bl	800b8a6 <__copybits>
 8009afe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009b00:	4620      	mov	r0, r4
 8009b02:	f001 fa99 	bl	800b038 <_Bfree>
 8009b06:	3f01      	subs	r7, #1
 8009b08:	2f05      	cmp	r7, #5
 8009b0a:	d807      	bhi.n	8009b1c <_strtod_l+0xfc>
 8009b0c:	e8df f007 	tbb	[pc, r7]
 8009b10:	1d180b0e 	.word	0x1d180b0e
 8009b14:	030e      	.short	0x030e
 8009b16:	f04f 0b00 	mov.w	fp, #0
 8009b1a:	46da      	mov	sl, fp
 8009b1c:	0728      	lsls	r0, r5, #28
 8009b1e:	d5c1      	bpl.n	8009aa4 <_strtod_l+0x84>
 8009b20:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009b24:	e7be      	b.n	8009aa4 <_strtod_l+0x84>
 8009b26:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8009b2a:	e7f7      	b.n	8009b1c <_strtod_l+0xfc>
 8009b2c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8009b30:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009b32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009b36:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009b3a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009b3e:	e7ed      	b.n	8009b1c <_strtod_l+0xfc>
 8009b40:	f8df b184 	ldr.w	fp, [pc, #388]	; 8009cc8 <_strtod_l+0x2a8>
 8009b44:	f04f 0a00 	mov.w	sl, #0
 8009b48:	e7e8      	b.n	8009b1c <_strtod_l+0xfc>
 8009b4a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009b4e:	f04f 3aff 	mov.w	sl, #4294967295
 8009b52:	e7e3      	b.n	8009b1c <_strtod_l+0xfc>
 8009b54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b56:	1c5a      	adds	r2, r3, #1
 8009b58:	921d      	str	r2, [sp, #116]	; 0x74
 8009b5a:	785b      	ldrb	r3, [r3, #1]
 8009b5c:	2b30      	cmp	r3, #48	; 0x30
 8009b5e:	d0f9      	beq.n	8009b54 <_strtod_l+0x134>
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d09f      	beq.n	8009aa4 <_strtod_l+0x84>
 8009b64:	2301      	movs	r3, #1
 8009b66:	f04f 0900 	mov.w	r9, #0
 8009b6a:	9304      	str	r3, [sp, #16]
 8009b6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b6e:	930a      	str	r3, [sp, #40]	; 0x28
 8009b70:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009b74:	464f      	mov	r7, r9
 8009b76:	220a      	movs	r2, #10
 8009b78:	981d      	ldr	r0, [sp, #116]	; 0x74
 8009b7a:	7806      	ldrb	r6, [r0, #0]
 8009b7c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009b80:	b2d9      	uxtb	r1, r3
 8009b82:	2909      	cmp	r1, #9
 8009b84:	d92a      	bls.n	8009bdc <_strtod_l+0x1bc>
 8009b86:	9907      	ldr	r1, [sp, #28]
 8009b88:	462a      	mov	r2, r5
 8009b8a:	f002 fb31 	bl	800c1f0 <strncmp>
 8009b8e:	b398      	cbz	r0, 8009bf8 <_strtod_l+0x1d8>
 8009b90:	2000      	movs	r0, #0
 8009b92:	4633      	mov	r3, r6
 8009b94:	463d      	mov	r5, r7
 8009b96:	9007      	str	r0, [sp, #28]
 8009b98:	4602      	mov	r2, r0
 8009b9a:	2b65      	cmp	r3, #101	; 0x65
 8009b9c:	d001      	beq.n	8009ba2 <_strtod_l+0x182>
 8009b9e:	2b45      	cmp	r3, #69	; 0x45
 8009ba0:	d118      	bne.n	8009bd4 <_strtod_l+0x1b4>
 8009ba2:	b91d      	cbnz	r5, 8009bac <_strtod_l+0x18c>
 8009ba4:	9b04      	ldr	r3, [sp, #16]
 8009ba6:	4303      	orrs	r3, r0
 8009ba8:	d098      	beq.n	8009adc <_strtod_l+0xbc>
 8009baa:	2500      	movs	r5, #0
 8009bac:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8009bb0:	f108 0301 	add.w	r3, r8, #1
 8009bb4:	931d      	str	r3, [sp, #116]	; 0x74
 8009bb6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009bba:	2b2b      	cmp	r3, #43	; 0x2b
 8009bbc:	d075      	beq.n	8009caa <_strtod_l+0x28a>
 8009bbe:	2b2d      	cmp	r3, #45	; 0x2d
 8009bc0:	d07b      	beq.n	8009cba <_strtod_l+0x29a>
 8009bc2:	f04f 0c00 	mov.w	ip, #0
 8009bc6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009bca:	2909      	cmp	r1, #9
 8009bcc:	f240 8082 	bls.w	8009cd4 <_strtod_l+0x2b4>
 8009bd0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009bd4:	2600      	movs	r6, #0
 8009bd6:	e09d      	b.n	8009d14 <_strtod_l+0x2f4>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	e7c4      	b.n	8009b66 <_strtod_l+0x146>
 8009bdc:	2f08      	cmp	r7, #8
 8009bde:	bfd8      	it	le
 8009be0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009be2:	f100 0001 	add.w	r0, r0, #1
 8009be6:	bfda      	itte	le
 8009be8:	fb02 3301 	mlale	r3, r2, r1, r3
 8009bec:	9309      	strle	r3, [sp, #36]	; 0x24
 8009bee:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009bf2:	3701      	adds	r7, #1
 8009bf4:	901d      	str	r0, [sp, #116]	; 0x74
 8009bf6:	e7bf      	b.n	8009b78 <_strtod_l+0x158>
 8009bf8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009bfa:	195a      	adds	r2, r3, r5
 8009bfc:	921d      	str	r2, [sp, #116]	; 0x74
 8009bfe:	5d5b      	ldrb	r3, [r3, r5]
 8009c00:	2f00      	cmp	r7, #0
 8009c02:	d037      	beq.n	8009c74 <_strtod_l+0x254>
 8009c04:	9007      	str	r0, [sp, #28]
 8009c06:	463d      	mov	r5, r7
 8009c08:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009c0c:	2a09      	cmp	r2, #9
 8009c0e:	d912      	bls.n	8009c36 <_strtod_l+0x216>
 8009c10:	2201      	movs	r2, #1
 8009c12:	e7c2      	b.n	8009b9a <_strtod_l+0x17a>
 8009c14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c16:	1c5a      	adds	r2, r3, #1
 8009c18:	921d      	str	r2, [sp, #116]	; 0x74
 8009c1a:	785b      	ldrb	r3, [r3, #1]
 8009c1c:	3001      	adds	r0, #1
 8009c1e:	2b30      	cmp	r3, #48	; 0x30
 8009c20:	d0f8      	beq.n	8009c14 <_strtod_l+0x1f4>
 8009c22:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009c26:	2a08      	cmp	r2, #8
 8009c28:	f200 84db 	bhi.w	800a5e2 <_strtod_l+0xbc2>
 8009c2c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009c2e:	9007      	str	r0, [sp, #28]
 8009c30:	2000      	movs	r0, #0
 8009c32:	920a      	str	r2, [sp, #40]	; 0x28
 8009c34:	4605      	mov	r5, r0
 8009c36:	3b30      	subs	r3, #48	; 0x30
 8009c38:	f100 0201 	add.w	r2, r0, #1
 8009c3c:	d014      	beq.n	8009c68 <_strtod_l+0x248>
 8009c3e:	9907      	ldr	r1, [sp, #28]
 8009c40:	4411      	add	r1, r2
 8009c42:	9107      	str	r1, [sp, #28]
 8009c44:	462a      	mov	r2, r5
 8009c46:	eb00 0e05 	add.w	lr, r0, r5
 8009c4a:	210a      	movs	r1, #10
 8009c4c:	4572      	cmp	r2, lr
 8009c4e:	d113      	bne.n	8009c78 <_strtod_l+0x258>
 8009c50:	182a      	adds	r2, r5, r0
 8009c52:	2a08      	cmp	r2, #8
 8009c54:	f105 0501 	add.w	r5, r5, #1
 8009c58:	4405      	add	r5, r0
 8009c5a:	dc1c      	bgt.n	8009c96 <_strtod_l+0x276>
 8009c5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c5e:	220a      	movs	r2, #10
 8009c60:	fb02 3301 	mla	r3, r2, r1, r3
 8009c64:	9309      	str	r3, [sp, #36]	; 0x24
 8009c66:	2200      	movs	r2, #0
 8009c68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c6a:	1c59      	adds	r1, r3, #1
 8009c6c:	911d      	str	r1, [sp, #116]	; 0x74
 8009c6e:	785b      	ldrb	r3, [r3, #1]
 8009c70:	4610      	mov	r0, r2
 8009c72:	e7c9      	b.n	8009c08 <_strtod_l+0x1e8>
 8009c74:	4638      	mov	r0, r7
 8009c76:	e7d2      	b.n	8009c1e <_strtod_l+0x1fe>
 8009c78:	2a08      	cmp	r2, #8
 8009c7a:	dc04      	bgt.n	8009c86 <_strtod_l+0x266>
 8009c7c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009c7e:	434e      	muls	r6, r1
 8009c80:	9609      	str	r6, [sp, #36]	; 0x24
 8009c82:	3201      	adds	r2, #1
 8009c84:	e7e2      	b.n	8009c4c <_strtod_l+0x22c>
 8009c86:	f102 0c01 	add.w	ip, r2, #1
 8009c8a:	f1bc 0f10 	cmp.w	ip, #16
 8009c8e:	bfd8      	it	le
 8009c90:	fb01 f909 	mulle.w	r9, r1, r9
 8009c94:	e7f5      	b.n	8009c82 <_strtod_l+0x262>
 8009c96:	2d10      	cmp	r5, #16
 8009c98:	bfdc      	itt	le
 8009c9a:	220a      	movle	r2, #10
 8009c9c:	fb02 3909 	mlale	r9, r2, r9, r3
 8009ca0:	e7e1      	b.n	8009c66 <_strtod_l+0x246>
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	9307      	str	r3, [sp, #28]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	e77c      	b.n	8009ba4 <_strtod_l+0x184>
 8009caa:	f04f 0c00 	mov.w	ip, #0
 8009cae:	f108 0302 	add.w	r3, r8, #2
 8009cb2:	931d      	str	r3, [sp, #116]	; 0x74
 8009cb4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009cb8:	e785      	b.n	8009bc6 <_strtod_l+0x1a6>
 8009cba:	f04f 0c01 	mov.w	ip, #1
 8009cbe:	e7f6      	b.n	8009cae <_strtod_l+0x28e>
 8009cc0:	0800f090 	.word	0x0800f090
 8009cc4:	0800ee0c 	.word	0x0800ee0c
 8009cc8:	7ff00000 	.word	0x7ff00000
 8009ccc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009cce:	1c59      	adds	r1, r3, #1
 8009cd0:	911d      	str	r1, [sp, #116]	; 0x74
 8009cd2:	785b      	ldrb	r3, [r3, #1]
 8009cd4:	2b30      	cmp	r3, #48	; 0x30
 8009cd6:	d0f9      	beq.n	8009ccc <_strtod_l+0x2ac>
 8009cd8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009cdc:	2908      	cmp	r1, #8
 8009cde:	f63f af79 	bhi.w	8009bd4 <_strtod_l+0x1b4>
 8009ce2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009ce6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009ce8:	9308      	str	r3, [sp, #32]
 8009cea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009cec:	1c59      	adds	r1, r3, #1
 8009cee:	911d      	str	r1, [sp, #116]	; 0x74
 8009cf0:	785b      	ldrb	r3, [r3, #1]
 8009cf2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009cf6:	2e09      	cmp	r6, #9
 8009cf8:	d937      	bls.n	8009d6a <_strtod_l+0x34a>
 8009cfa:	9e08      	ldr	r6, [sp, #32]
 8009cfc:	1b89      	subs	r1, r1, r6
 8009cfe:	2908      	cmp	r1, #8
 8009d00:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009d04:	dc02      	bgt.n	8009d0c <_strtod_l+0x2ec>
 8009d06:	4576      	cmp	r6, lr
 8009d08:	bfa8      	it	ge
 8009d0a:	4676      	movge	r6, lr
 8009d0c:	f1bc 0f00 	cmp.w	ip, #0
 8009d10:	d000      	beq.n	8009d14 <_strtod_l+0x2f4>
 8009d12:	4276      	negs	r6, r6
 8009d14:	2d00      	cmp	r5, #0
 8009d16:	d14f      	bne.n	8009db8 <_strtod_l+0x398>
 8009d18:	9904      	ldr	r1, [sp, #16]
 8009d1a:	4301      	orrs	r1, r0
 8009d1c:	f47f aec2 	bne.w	8009aa4 <_strtod_l+0x84>
 8009d20:	2a00      	cmp	r2, #0
 8009d22:	f47f aedb 	bne.w	8009adc <_strtod_l+0xbc>
 8009d26:	2b69      	cmp	r3, #105	; 0x69
 8009d28:	d027      	beq.n	8009d7a <_strtod_l+0x35a>
 8009d2a:	dc24      	bgt.n	8009d76 <_strtod_l+0x356>
 8009d2c:	2b49      	cmp	r3, #73	; 0x49
 8009d2e:	d024      	beq.n	8009d7a <_strtod_l+0x35a>
 8009d30:	2b4e      	cmp	r3, #78	; 0x4e
 8009d32:	f47f aed3 	bne.w	8009adc <_strtod_l+0xbc>
 8009d36:	499e      	ldr	r1, [pc, #632]	; (8009fb0 <_strtod_l+0x590>)
 8009d38:	a81d      	add	r0, sp, #116	; 0x74
 8009d3a:	f001 f861 	bl	800ae00 <__match>
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	f43f aecc 	beq.w	8009adc <_strtod_l+0xbc>
 8009d44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	2b28      	cmp	r3, #40	; 0x28
 8009d4a:	d12d      	bne.n	8009da8 <_strtod_l+0x388>
 8009d4c:	4999      	ldr	r1, [pc, #612]	; (8009fb4 <_strtod_l+0x594>)
 8009d4e:	aa20      	add	r2, sp, #128	; 0x80
 8009d50:	a81d      	add	r0, sp, #116	; 0x74
 8009d52:	f001 f869 	bl	800ae28 <__hexnan>
 8009d56:	2805      	cmp	r0, #5
 8009d58:	d126      	bne.n	8009da8 <_strtod_l+0x388>
 8009d5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d5c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8009d60:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009d64:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009d68:	e69c      	b.n	8009aa4 <_strtod_l+0x84>
 8009d6a:	210a      	movs	r1, #10
 8009d6c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009d70:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009d74:	e7b9      	b.n	8009cea <_strtod_l+0x2ca>
 8009d76:	2b6e      	cmp	r3, #110	; 0x6e
 8009d78:	e7db      	b.n	8009d32 <_strtod_l+0x312>
 8009d7a:	498f      	ldr	r1, [pc, #572]	; (8009fb8 <_strtod_l+0x598>)
 8009d7c:	a81d      	add	r0, sp, #116	; 0x74
 8009d7e:	f001 f83f 	bl	800ae00 <__match>
 8009d82:	2800      	cmp	r0, #0
 8009d84:	f43f aeaa 	beq.w	8009adc <_strtod_l+0xbc>
 8009d88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009d8a:	498c      	ldr	r1, [pc, #560]	; (8009fbc <_strtod_l+0x59c>)
 8009d8c:	3b01      	subs	r3, #1
 8009d8e:	a81d      	add	r0, sp, #116	; 0x74
 8009d90:	931d      	str	r3, [sp, #116]	; 0x74
 8009d92:	f001 f835 	bl	800ae00 <__match>
 8009d96:	b910      	cbnz	r0, 8009d9e <_strtod_l+0x37e>
 8009d98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	931d      	str	r3, [sp, #116]	; 0x74
 8009d9e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8009fcc <_strtod_l+0x5ac>
 8009da2:	f04f 0a00 	mov.w	sl, #0
 8009da6:	e67d      	b.n	8009aa4 <_strtod_l+0x84>
 8009da8:	4885      	ldr	r0, [pc, #532]	; (8009fc0 <_strtod_l+0x5a0>)
 8009daa:	f002 fa19 	bl	800c1e0 <nan>
 8009dae:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009db2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009db6:	e675      	b.n	8009aa4 <_strtod_l+0x84>
 8009db8:	9b07      	ldr	r3, [sp, #28]
 8009dba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009dbc:	1af3      	subs	r3, r6, r3
 8009dbe:	2f00      	cmp	r7, #0
 8009dc0:	bf08      	it	eq
 8009dc2:	462f      	moveq	r7, r5
 8009dc4:	2d10      	cmp	r5, #16
 8009dc6:	9308      	str	r3, [sp, #32]
 8009dc8:	46a8      	mov	r8, r5
 8009dca:	bfa8      	it	ge
 8009dcc:	f04f 0810 	movge.w	r8, #16
 8009dd0:	f7f6 fb98 	bl	8000504 <__aeabi_ui2d>
 8009dd4:	2d09      	cmp	r5, #9
 8009dd6:	4682      	mov	sl, r0
 8009dd8:	468b      	mov	fp, r1
 8009dda:	dd13      	ble.n	8009e04 <_strtod_l+0x3e4>
 8009ddc:	4b79      	ldr	r3, [pc, #484]	; (8009fc4 <_strtod_l+0x5a4>)
 8009dde:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009de2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009de6:	f7f6 fc07 	bl	80005f8 <__aeabi_dmul>
 8009dea:	4682      	mov	sl, r0
 8009dec:	4648      	mov	r0, r9
 8009dee:	468b      	mov	fp, r1
 8009df0:	f7f6 fb88 	bl	8000504 <__aeabi_ui2d>
 8009df4:	4602      	mov	r2, r0
 8009df6:	460b      	mov	r3, r1
 8009df8:	4650      	mov	r0, sl
 8009dfa:	4659      	mov	r1, fp
 8009dfc:	f7f6 fa46 	bl	800028c <__adddf3>
 8009e00:	4682      	mov	sl, r0
 8009e02:	468b      	mov	fp, r1
 8009e04:	2d0f      	cmp	r5, #15
 8009e06:	dc38      	bgt.n	8009e7a <_strtod_l+0x45a>
 8009e08:	9b08      	ldr	r3, [sp, #32]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	f43f ae4a 	beq.w	8009aa4 <_strtod_l+0x84>
 8009e10:	dd24      	ble.n	8009e5c <_strtod_l+0x43c>
 8009e12:	2b16      	cmp	r3, #22
 8009e14:	dc0b      	bgt.n	8009e2e <_strtod_l+0x40e>
 8009e16:	4d6b      	ldr	r5, [pc, #428]	; (8009fc4 <_strtod_l+0x5a4>)
 8009e18:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8009e1c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009e20:	4652      	mov	r2, sl
 8009e22:	465b      	mov	r3, fp
 8009e24:	f7f6 fbe8 	bl	80005f8 <__aeabi_dmul>
 8009e28:	4682      	mov	sl, r0
 8009e2a:	468b      	mov	fp, r1
 8009e2c:	e63a      	b.n	8009aa4 <_strtod_l+0x84>
 8009e2e:	9a08      	ldr	r2, [sp, #32]
 8009e30:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009e34:	4293      	cmp	r3, r2
 8009e36:	db20      	blt.n	8009e7a <_strtod_l+0x45a>
 8009e38:	4c62      	ldr	r4, [pc, #392]	; (8009fc4 <_strtod_l+0x5a4>)
 8009e3a:	f1c5 050f 	rsb	r5, r5, #15
 8009e3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009e42:	4652      	mov	r2, sl
 8009e44:	465b      	mov	r3, fp
 8009e46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e4a:	f7f6 fbd5 	bl	80005f8 <__aeabi_dmul>
 8009e4e:	9b08      	ldr	r3, [sp, #32]
 8009e50:	1b5d      	subs	r5, r3, r5
 8009e52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009e56:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009e5a:	e7e3      	b.n	8009e24 <_strtod_l+0x404>
 8009e5c:	9b08      	ldr	r3, [sp, #32]
 8009e5e:	3316      	adds	r3, #22
 8009e60:	db0b      	blt.n	8009e7a <_strtod_l+0x45a>
 8009e62:	9b07      	ldr	r3, [sp, #28]
 8009e64:	4a57      	ldr	r2, [pc, #348]	; (8009fc4 <_strtod_l+0x5a4>)
 8009e66:	1b9e      	subs	r6, r3, r6
 8009e68:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009e6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009e70:	4650      	mov	r0, sl
 8009e72:	4659      	mov	r1, fp
 8009e74:	f7f6 fcea 	bl	800084c <__aeabi_ddiv>
 8009e78:	e7d6      	b.n	8009e28 <_strtod_l+0x408>
 8009e7a:	9b08      	ldr	r3, [sp, #32]
 8009e7c:	eba5 0808 	sub.w	r8, r5, r8
 8009e80:	4498      	add	r8, r3
 8009e82:	f1b8 0f00 	cmp.w	r8, #0
 8009e86:	dd71      	ble.n	8009f6c <_strtod_l+0x54c>
 8009e88:	f018 030f 	ands.w	r3, r8, #15
 8009e8c:	d00a      	beq.n	8009ea4 <_strtod_l+0x484>
 8009e8e:	494d      	ldr	r1, [pc, #308]	; (8009fc4 <_strtod_l+0x5a4>)
 8009e90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e94:	4652      	mov	r2, sl
 8009e96:	465b      	mov	r3, fp
 8009e98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e9c:	f7f6 fbac 	bl	80005f8 <__aeabi_dmul>
 8009ea0:	4682      	mov	sl, r0
 8009ea2:	468b      	mov	fp, r1
 8009ea4:	f038 080f 	bics.w	r8, r8, #15
 8009ea8:	d04d      	beq.n	8009f46 <_strtod_l+0x526>
 8009eaa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009eae:	dd22      	ble.n	8009ef6 <_strtod_l+0x4d6>
 8009eb0:	2500      	movs	r5, #0
 8009eb2:	462e      	mov	r6, r5
 8009eb4:	9509      	str	r5, [sp, #36]	; 0x24
 8009eb6:	9507      	str	r5, [sp, #28]
 8009eb8:	2322      	movs	r3, #34	; 0x22
 8009eba:	f8df b110 	ldr.w	fp, [pc, #272]	; 8009fcc <_strtod_l+0x5ac>
 8009ebe:	6023      	str	r3, [r4, #0]
 8009ec0:	f04f 0a00 	mov.w	sl, #0
 8009ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	f43f adec 	beq.w	8009aa4 <_strtod_l+0x84>
 8009ecc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009ece:	4620      	mov	r0, r4
 8009ed0:	f001 f8b2 	bl	800b038 <_Bfree>
 8009ed4:	9907      	ldr	r1, [sp, #28]
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	f001 f8ae 	bl	800b038 <_Bfree>
 8009edc:	4631      	mov	r1, r6
 8009ede:	4620      	mov	r0, r4
 8009ee0:	f001 f8aa 	bl	800b038 <_Bfree>
 8009ee4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	f001 f8a6 	bl	800b038 <_Bfree>
 8009eec:	4629      	mov	r1, r5
 8009eee:	4620      	mov	r0, r4
 8009ef0:	f001 f8a2 	bl	800b038 <_Bfree>
 8009ef4:	e5d6      	b.n	8009aa4 <_strtod_l+0x84>
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009efc:	4650      	mov	r0, sl
 8009efe:	4659      	mov	r1, fp
 8009f00:	4699      	mov	r9, r3
 8009f02:	f1b8 0f01 	cmp.w	r8, #1
 8009f06:	dc21      	bgt.n	8009f4c <_strtod_l+0x52c>
 8009f08:	b10b      	cbz	r3, 8009f0e <_strtod_l+0x4ee>
 8009f0a:	4682      	mov	sl, r0
 8009f0c:	468b      	mov	fp, r1
 8009f0e:	4b2e      	ldr	r3, [pc, #184]	; (8009fc8 <_strtod_l+0x5a8>)
 8009f10:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009f14:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009f18:	4652      	mov	r2, sl
 8009f1a:	465b      	mov	r3, fp
 8009f1c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009f20:	f7f6 fb6a 	bl	80005f8 <__aeabi_dmul>
 8009f24:	4b29      	ldr	r3, [pc, #164]	; (8009fcc <_strtod_l+0x5ac>)
 8009f26:	460a      	mov	r2, r1
 8009f28:	400b      	ands	r3, r1
 8009f2a:	4929      	ldr	r1, [pc, #164]	; (8009fd0 <_strtod_l+0x5b0>)
 8009f2c:	428b      	cmp	r3, r1
 8009f2e:	4682      	mov	sl, r0
 8009f30:	d8be      	bhi.n	8009eb0 <_strtod_l+0x490>
 8009f32:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009f36:	428b      	cmp	r3, r1
 8009f38:	bf86      	itte	hi
 8009f3a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009fd4 <_strtod_l+0x5b4>
 8009f3e:	f04f 3aff 	movhi.w	sl, #4294967295
 8009f42:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009f46:	2300      	movs	r3, #0
 8009f48:	9304      	str	r3, [sp, #16]
 8009f4a:	e081      	b.n	800a050 <_strtod_l+0x630>
 8009f4c:	f018 0f01 	tst.w	r8, #1
 8009f50:	d007      	beq.n	8009f62 <_strtod_l+0x542>
 8009f52:	4b1d      	ldr	r3, [pc, #116]	; (8009fc8 <_strtod_l+0x5a8>)
 8009f54:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5c:	f7f6 fb4c 	bl	80005f8 <__aeabi_dmul>
 8009f60:	2301      	movs	r3, #1
 8009f62:	f109 0901 	add.w	r9, r9, #1
 8009f66:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009f6a:	e7ca      	b.n	8009f02 <_strtod_l+0x4e2>
 8009f6c:	d0eb      	beq.n	8009f46 <_strtod_l+0x526>
 8009f6e:	f1c8 0800 	rsb	r8, r8, #0
 8009f72:	f018 020f 	ands.w	r2, r8, #15
 8009f76:	d00a      	beq.n	8009f8e <_strtod_l+0x56e>
 8009f78:	4b12      	ldr	r3, [pc, #72]	; (8009fc4 <_strtod_l+0x5a4>)
 8009f7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f7e:	4650      	mov	r0, sl
 8009f80:	4659      	mov	r1, fp
 8009f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f86:	f7f6 fc61 	bl	800084c <__aeabi_ddiv>
 8009f8a:	4682      	mov	sl, r0
 8009f8c:	468b      	mov	fp, r1
 8009f8e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009f92:	d0d8      	beq.n	8009f46 <_strtod_l+0x526>
 8009f94:	f1b8 0f1f 	cmp.w	r8, #31
 8009f98:	dd1e      	ble.n	8009fd8 <_strtod_l+0x5b8>
 8009f9a:	2500      	movs	r5, #0
 8009f9c:	462e      	mov	r6, r5
 8009f9e:	9509      	str	r5, [sp, #36]	; 0x24
 8009fa0:	9507      	str	r5, [sp, #28]
 8009fa2:	2322      	movs	r3, #34	; 0x22
 8009fa4:	f04f 0a00 	mov.w	sl, #0
 8009fa8:	f04f 0b00 	mov.w	fp, #0
 8009fac:	6023      	str	r3, [r4, #0]
 8009fae:	e789      	b.n	8009ec4 <_strtod_l+0x4a4>
 8009fb0:	0800ee09 	.word	0x0800ee09
 8009fb4:	0800ee20 	.word	0x0800ee20
 8009fb8:	0800ee00 	.word	0x0800ee00
 8009fbc:	0800ee03 	.word	0x0800ee03
 8009fc0:	0800ef13 	.word	0x0800ef13
 8009fc4:	0800f130 	.word	0x0800f130
 8009fc8:	0800f108 	.word	0x0800f108
 8009fcc:	7ff00000 	.word	0x7ff00000
 8009fd0:	7ca00000 	.word	0x7ca00000
 8009fd4:	7fefffff 	.word	0x7fefffff
 8009fd8:	f018 0310 	ands.w	r3, r8, #16
 8009fdc:	bf18      	it	ne
 8009fde:	236a      	movne	r3, #106	; 0x6a
 8009fe0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800a398 <_strtod_l+0x978>
 8009fe4:	9304      	str	r3, [sp, #16]
 8009fe6:	4650      	mov	r0, sl
 8009fe8:	4659      	mov	r1, fp
 8009fea:	2300      	movs	r3, #0
 8009fec:	f018 0f01 	tst.w	r8, #1
 8009ff0:	d004      	beq.n	8009ffc <_strtod_l+0x5dc>
 8009ff2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009ff6:	f7f6 faff 	bl	80005f8 <__aeabi_dmul>
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a000:	f109 0908 	add.w	r9, r9, #8
 800a004:	d1f2      	bne.n	8009fec <_strtod_l+0x5cc>
 800a006:	b10b      	cbz	r3, 800a00c <_strtod_l+0x5ec>
 800a008:	4682      	mov	sl, r0
 800a00a:	468b      	mov	fp, r1
 800a00c:	9b04      	ldr	r3, [sp, #16]
 800a00e:	b1bb      	cbz	r3, 800a040 <_strtod_l+0x620>
 800a010:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800a014:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a018:	2b00      	cmp	r3, #0
 800a01a:	4659      	mov	r1, fp
 800a01c:	dd10      	ble.n	800a040 <_strtod_l+0x620>
 800a01e:	2b1f      	cmp	r3, #31
 800a020:	f340 8128 	ble.w	800a274 <_strtod_l+0x854>
 800a024:	2b34      	cmp	r3, #52	; 0x34
 800a026:	bfde      	ittt	le
 800a028:	3b20      	suble	r3, #32
 800a02a:	f04f 32ff 	movle.w	r2, #4294967295
 800a02e:	fa02 f303 	lslle.w	r3, r2, r3
 800a032:	f04f 0a00 	mov.w	sl, #0
 800a036:	bfcc      	ite	gt
 800a038:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a03c:	ea03 0b01 	andle.w	fp, r3, r1
 800a040:	2200      	movs	r2, #0
 800a042:	2300      	movs	r3, #0
 800a044:	4650      	mov	r0, sl
 800a046:	4659      	mov	r1, fp
 800a048:	f7f6 fd3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a04c:	2800      	cmp	r0, #0
 800a04e:	d1a4      	bne.n	8009f9a <_strtod_l+0x57a>
 800a050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a052:	9300      	str	r3, [sp, #0]
 800a054:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a056:	462b      	mov	r3, r5
 800a058:	463a      	mov	r2, r7
 800a05a:	4620      	mov	r0, r4
 800a05c:	f001 f858 	bl	800b110 <__s2b>
 800a060:	9009      	str	r0, [sp, #36]	; 0x24
 800a062:	2800      	cmp	r0, #0
 800a064:	f43f af24 	beq.w	8009eb0 <_strtod_l+0x490>
 800a068:	9b07      	ldr	r3, [sp, #28]
 800a06a:	1b9e      	subs	r6, r3, r6
 800a06c:	9b08      	ldr	r3, [sp, #32]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	bfb4      	ite	lt
 800a072:	4633      	movlt	r3, r6
 800a074:	2300      	movge	r3, #0
 800a076:	9310      	str	r3, [sp, #64]	; 0x40
 800a078:	9b08      	ldr	r3, [sp, #32]
 800a07a:	2500      	movs	r5, #0
 800a07c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a080:	9318      	str	r3, [sp, #96]	; 0x60
 800a082:	462e      	mov	r6, r5
 800a084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a086:	4620      	mov	r0, r4
 800a088:	6859      	ldr	r1, [r3, #4]
 800a08a:	f000 ff95 	bl	800afb8 <_Balloc>
 800a08e:	9007      	str	r0, [sp, #28]
 800a090:	2800      	cmp	r0, #0
 800a092:	f43f af11 	beq.w	8009eb8 <_strtod_l+0x498>
 800a096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a098:	691a      	ldr	r2, [r3, #16]
 800a09a:	3202      	adds	r2, #2
 800a09c:	f103 010c 	add.w	r1, r3, #12
 800a0a0:	0092      	lsls	r2, r2, #2
 800a0a2:	300c      	adds	r0, #12
 800a0a4:	f000 ff6e 	bl	800af84 <memcpy>
 800a0a8:	ec4b ab10 	vmov	d0, sl, fp
 800a0ac:	aa20      	add	r2, sp, #128	; 0x80
 800a0ae:	a91f      	add	r1, sp, #124	; 0x7c
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800a0b6:	f001 fb67 	bl	800b788 <__d2b>
 800a0ba:	901e      	str	r0, [sp, #120]	; 0x78
 800a0bc:	2800      	cmp	r0, #0
 800a0be:	f43f aefb 	beq.w	8009eb8 <_strtod_l+0x498>
 800a0c2:	2101      	movs	r1, #1
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	f001 f8bd 	bl	800b244 <__i2b>
 800a0ca:	4606      	mov	r6, r0
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	f43f aef3 	beq.w	8009eb8 <_strtod_l+0x498>
 800a0d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a0d4:	9904      	ldr	r1, [sp, #16]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	bfab      	itete	ge
 800a0da:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800a0dc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800a0de:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800a0e0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800a0e4:	bfac      	ite	ge
 800a0e6:	eb03 0902 	addge.w	r9, r3, r2
 800a0ea:	1ad7      	sublt	r7, r2, r3
 800a0ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a0ee:	eba3 0801 	sub.w	r8, r3, r1
 800a0f2:	4490      	add	r8, r2
 800a0f4:	4ba3      	ldr	r3, [pc, #652]	; (800a384 <_strtod_l+0x964>)
 800a0f6:	f108 38ff 	add.w	r8, r8, #4294967295
 800a0fa:	4598      	cmp	r8, r3
 800a0fc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a100:	f280 80cc 	bge.w	800a29c <_strtod_l+0x87c>
 800a104:	eba3 0308 	sub.w	r3, r3, r8
 800a108:	2b1f      	cmp	r3, #31
 800a10a:	eba2 0203 	sub.w	r2, r2, r3
 800a10e:	f04f 0101 	mov.w	r1, #1
 800a112:	f300 80b6 	bgt.w	800a282 <_strtod_l+0x862>
 800a116:	fa01 f303 	lsl.w	r3, r1, r3
 800a11a:	9311      	str	r3, [sp, #68]	; 0x44
 800a11c:	2300      	movs	r3, #0
 800a11e:	930c      	str	r3, [sp, #48]	; 0x30
 800a120:	eb09 0802 	add.w	r8, r9, r2
 800a124:	9b04      	ldr	r3, [sp, #16]
 800a126:	45c1      	cmp	r9, r8
 800a128:	4417      	add	r7, r2
 800a12a:	441f      	add	r7, r3
 800a12c:	464b      	mov	r3, r9
 800a12e:	bfa8      	it	ge
 800a130:	4643      	movge	r3, r8
 800a132:	42bb      	cmp	r3, r7
 800a134:	bfa8      	it	ge
 800a136:	463b      	movge	r3, r7
 800a138:	2b00      	cmp	r3, #0
 800a13a:	bfc2      	ittt	gt
 800a13c:	eba8 0803 	subgt.w	r8, r8, r3
 800a140:	1aff      	subgt	r7, r7, r3
 800a142:	eba9 0903 	subgt.w	r9, r9, r3
 800a146:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a148:	2b00      	cmp	r3, #0
 800a14a:	dd17      	ble.n	800a17c <_strtod_l+0x75c>
 800a14c:	4631      	mov	r1, r6
 800a14e:	461a      	mov	r2, r3
 800a150:	4620      	mov	r0, r4
 800a152:	f001 f933 	bl	800b3bc <__pow5mult>
 800a156:	4606      	mov	r6, r0
 800a158:	2800      	cmp	r0, #0
 800a15a:	f43f aead 	beq.w	8009eb8 <_strtod_l+0x498>
 800a15e:	4601      	mov	r1, r0
 800a160:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a162:	4620      	mov	r0, r4
 800a164:	f001 f884 	bl	800b270 <__multiply>
 800a168:	900f      	str	r0, [sp, #60]	; 0x3c
 800a16a:	2800      	cmp	r0, #0
 800a16c:	f43f aea4 	beq.w	8009eb8 <_strtod_l+0x498>
 800a170:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a172:	4620      	mov	r0, r4
 800a174:	f000 ff60 	bl	800b038 <_Bfree>
 800a178:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a17a:	931e      	str	r3, [sp, #120]	; 0x78
 800a17c:	f1b8 0f00 	cmp.w	r8, #0
 800a180:	f300 8091 	bgt.w	800a2a6 <_strtod_l+0x886>
 800a184:	9b08      	ldr	r3, [sp, #32]
 800a186:	2b00      	cmp	r3, #0
 800a188:	dd08      	ble.n	800a19c <_strtod_l+0x77c>
 800a18a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a18c:	9907      	ldr	r1, [sp, #28]
 800a18e:	4620      	mov	r0, r4
 800a190:	f001 f914 	bl	800b3bc <__pow5mult>
 800a194:	9007      	str	r0, [sp, #28]
 800a196:	2800      	cmp	r0, #0
 800a198:	f43f ae8e 	beq.w	8009eb8 <_strtod_l+0x498>
 800a19c:	2f00      	cmp	r7, #0
 800a19e:	dd08      	ble.n	800a1b2 <_strtod_l+0x792>
 800a1a0:	9907      	ldr	r1, [sp, #28]
 800a1a2:	463a      	mov	r2, r7
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	f001 f963 	bl	800b470 <__lshift>
 800a1aa:	9007      	str	r0, [sp, #28]
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	f43f ae83 	beq.w	8009eb8 <_strtod_l+0x498>
 800a1b2:	f1b9 0f00 	cmp.w	r9, #0
 800a1b6:	dd08      	ble.n	800a1ca <_strtod_l+0x7aa>
 800a1b8:	4631      	mov	r1, r6
 800a1ba:	464a      	mov	r2, r9
 800a1bc:	4620      	mov	r0, r4
 800a1be:	f001 f957 	bl	800b470 <__lshift>
 800a1c2:	4606      	mov	r6, r0
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	f43f ae77 	beq.w	8009eb8 <_strtod_l+0x498>
 800a1ca:	9a07      	ldr	r2, [sp, #28]
 800a1cc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	f001 f9d6 	bl	800b580 <__mdiff>
 800a1d4:	4605      	mov	r5, r0
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	f43f ae6e 	beq.w	8009eb8 <_strtod_l+0x498>
 800a1dc:	68c3      	ldr	r3, [r0, #12]
 800a1de:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	60c3      	str	r3, [r0, #12]
 800a1e4:	4631      	mov	r1, r6
 800a1e6:	f001 f9af 	bl	800b548 <__mcmp>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	da65      	bge.n	800a2ba <_strtod_l+0x89a>
 800a1ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1f0:	ea53 030a 	orrs.w	r3, r3, sl
 800a1f4:	f040 8087 	bne.w	800a306 <_strtod_l+0x8e6>
 800a1f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	f040 8082 	bne.w	800a306 <_strtod_l+0x8e6>
 800a202:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a206:	0d1b      	lsrs	r3, r3, #20
 800a208:	051b      	lsls	r3, r3, #20
 800a20a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a20e:	d97a      	bls.n	800a306 <_strtod_l+0x8e6>
 800a210:	696b      	ldr	r3, [r5, #20]
 800a212:	b913      	cbnz	r3, 800a21a <_strtod_l+0x7fa>
 800a214:	692b      	ldr	r3, [r5, #16]
 800a216:	2b01      	cmp	r3, #1
 800a218:	dd75      	ble.n	800a306 <_strtod_l+0x8e6>
 800a21a:	4629      	mov	r1, r5
 800a21c:	2201      	movs	r2, #1
 800a21e:	4620      	mov	r0, r4
 800a220:	f001 f926 	bl	800b470 <__lshift>
 800a224:	4631      	mov	r1, r6
 800a226:	4605      	mov	r5, r0
 800a228:	f001 f98e 	bl	800b548 <__mcmp>
 800a22c:	2800      	cmp	r0, #0
 800a22e:	dd6a      	ble.n	800a306 <_strtod_l+0x8e6>
 800a230:	9904      	ldr	r1, [sp, #16]
 800a232:	4a55      	ldr	r2, [pc, #340]	; (800a388 <_strtod_l+0x968>)
 800a234:	465b      	mov	r3, fp
 800a236:	2900      	cmp	r1, #0
 800a238:	f000 8085 	beq.w	800a346 <_strtod_l+0x926>
 800a23c:	ea02 010b 	and.w	r1, r2, fp
 800a240:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a244:	dc7f      	bgt.n	800a346 <_strtod_l+0x926>
 800a246:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a24a:	f77f aeaa 	ble.w	8009fa2 <_strtod_l+0x582>
 800a24e:	4a4f      	ldr	r2, [pc, #316]	; (800a38c <_strtod_l+0x96c>)
 800a250:	2300      	movs	r3, #0
 800a252:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800a256:	4650      	mov	r0, sl
 800a258:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800a25c:	4659      	mov	r1, fp
 800a25e:	f7f6 f9cb 	bl	80005f8 <__aeabi_dmul>
 800a262:	460b      	mov	r3, r1
 800a264:	4303      	orrs	r3, r0
 800a266:	bf08      	it	eq
 800a268:	2322      	moveq	r3, #34	; 0x22
 800a26a:	4682      	mov	sl, r0
 800a26c:	468b      	mov	fp, r1
 800a26e:	bf08      	it	eq
 800a270:	6023      	streq	r3, [r4, #0]
 800a272:	e62b      	b.n	8009ecc <_strtod_l+0x4ac>
 800a274:	f04f 32ff 	mov.w	r2, #4294967295
 800a278:	fa02 f303 	lsl.w	r3, r2, r3
 800a27c:	ea03 0a0a 	and.w	sl, r3, sl
 800a280:	e6de      	b.n	800a040 <_strtod_l+0x620>
 800a282:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a286:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a28a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a28e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a292:	fa01 f308 	lsl.w	r3, r1, r8
 800a296:	930c      	str	r3, [sp, #48]	; 0x30
 800a298:	9111      	str	r1, [sp, #68]	; 0x44
 800a29a:	e741      	b.n	800a120 <_strtod_l+0x700>
 800a29c:	2300      	movs	r3, #0
 800a29e:	930c      	str	r3, [sp, #48]	; 0x30
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	9311      	str	r3, [sp, #68]	; 0x44
 800a2a4:	e73c      	b.n	800a120 <_strtod_l+0x700>
 800a2a6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a2a8:	4642      	mov	r2, r8
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	f001 f8e0 	bl	800b470 <__lshift>
 800a2b0:	901e      	str	r0, [sp, #120]	; 0x78
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	f47f af66 	bne.w	800a184 <_strtod_l+0x764>
 800a2b8:	e5fe      	b.n	8009eb8 <_strtod_l+0x498>
 800a2ba:	465f      	mov	r7, fp
 800a2bc:	d16e      	bne.n	800a39c <_strtod_l+0x97c>
 800a2be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a2c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2c4:	b342      	cbz	r2, 800a318 <_strtod_l+0x8f8>
 800a2c6:	4a32      	ldr	r2, [pc, #200]	; (800a390 <_strtod_l+0x970>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d128      	bne.n	800a31e <_strtod_l+0x8fe>
 800a2cc:	9b04      	ldr	r3, [sp, #16]
 800a2ce:	4650      	mov	r0, sl
 800a2d0:	b1eb      	cbz	r3, 800a30e <_strtod_l+0x8ee>
 800a2d2:	4a2d      	ldr	r2, [pc, #180]	; (800a388 <_strtod_l+0x968>)
 800a2d4:	403a      	ands	r2, r7
 800a2d6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a2da:	f04f 31ff 	mov.w	r1, #4294967295
 800a2de:	d819      	bhi.n	800a314 <_strtod_l+0x8f4>
 800a2e0:	0d12      	lsrs	r2, r2, #20
 800a2e2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a2e6:	fa01 f303 	lsl.w	r3, r1, r3
 800a2ea:	4298      	cmp	r0, r3
 800a2ec:	d117      	bne.n	800a31e <_strtod_l+0x8fe>
 800a2ee:	4b29      	ldr	r3, [pc, #164]	; (800a394 <_strtod_l+0x974>)
 800a2f0:	429f      	cmp	r7, r3
 800a2f2:	d102      	bne.n	800a2fa <_strtod_l+0x8da>
 800a2f4:	3001      	adds	r0, #1
 800a2f6:	f43f addf 	beq.w	8009eb8 <_strtod_l+0x498>
 800a2fa:	4b23      	ldr	r3, [pc, #140]	; (800a388 <_strtod_l+0x968>)
 800a2fc:	403b      	ands	r3, r7
 800a2fe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a302:	f04f 0a00 	mov.w	sl, #0
 800a306:	9b04      	ldr	r3, [sp, #16]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d1a0      	bne.n	800a24e <_strtod_l+0x82e>
 800a30c:	e5de      	b.n	8009ecc <_strtod_l+0x4ac>
 800a30e:	f04f 33ff 	mov.w	r3, #4294967295
 800a312:	e7ea      	b.n	800a2ea <_strtod_l+0x8ca>
 800a314:	460b      	mov	r3, r1
 800a316:	e7e8      	b.n	800a2ea <_strtod_l+0x8ca>
 800a318:	ea53 030a 	orrs.w	r3, r3, sl
 800a31c:	d088      	beq.n	800a230 <_strtod_l+0x810>
 800a31e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a320:	b1db      	cbz	r3, 800a35a <_strtod_l+0x93a>
 800a322:	423b      	tst	r3, r7
 800a324:	d0ef      	beq.n	800a306 <_strtod_l+0x8e6>
 800a326:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a328:	9a04      	ldr	r2, [sp, #16]
 800a32a:	4650      	mov	r0, sl
 800a32c:	4659      	mov	r1, fp
 800a32e:	b1c3      	cbz	r3, 800a362 <_strtod_l+0x942>
 800a330:	f7ff fb59 	bl	80099e6 <sulp>
 800a334:	4602      	mov	r2, r0
 800a336:	460b      	mov	r3, r1
 800a338:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a33c:	f7f5 ffa6 	bl	800028c <__adddf3>
 800a340:	4682      	mov	sl, r0
 800a342:	468b      	mov	fp, r1
 800a344:	e7df      	b.n	800a306 <_strtod_l+0x8e6>
 800a346:	4013      	ands	r3, r2
 800a348:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a34c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a350:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a354:	f04f 3aff 	mov.w	sl, #4294967295
 800a358:	e7d5      	b.n	800a306 <_strtod_l+0x8e6>
 800a35a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a35c:	ea13 0f0a 	tst.w	r3, sl
 800a360:	e7e0      	b.n	800a324 <_strtod_l+0x904>
 800a362:	f7ff fb40 	bl	80099e6 <sulp>
 800a366:	4602      	mov	r2, r0
 800a368:	460b      	mov	r3, r1
 800a36a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a36e:	f7f5 ff8b 	bl	8000288 <__aeabi_dsub>
 800a372:	2200      	movs	r2, #0
 800a374:	2300      	movs	r3, #0
 800a376:	4682      	mov	sl, r0
 800a378:	468b      	mov	fp, r1
 800a37a:	f7f6 fba5 	bl	8000ac8 <__aeabi_dcmpeq>
 800a37e:	2800      	cmp	r0, #0
 800a380:	d0c1      	beq.n	800a306 <_strtod_l+0x8e6>
 800a382:	e60e      	b.n	8009fa2 <_strtod_l+0x582>
 800a384:	fffffc02 	.word	0xfffffc02
 800a388:	7ff00000 	.word	0x7ff00000
 800a38c:	39500000 	.word	0x39500000
 800a390:	000fffff 	.word	0x000fffff
 800a394:	7fefffff 	.word	0x7fefffff
 800a398:	0800ee38 	.word	0x0800ee38
 800a39c:	4631      	mov	r1, r6
 800a39e:	4628      	mov	r0, r5
 800a3a0:	f001 fa4e 	bl	800b840 <__ratio>
 800a3a4:	ec59 8b10 	vmov	r8, r9, d0
 800a3a8:	ee10 0a10 	vmov	r0, s0
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a3b2:	4649      	mov	r1, r9
 800a3b4:	f7f6 fb9c 	bl	8000af0 <__aeabi_dcmple>
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	d07c      	beq.n	800a4b6 <_strtod_l+0xa96>
 800a3bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d04c      	beq.n	800a45c <_strtod_l+0xa3c>
 800a3c2:	4b95      	ldr	r3, [pc, #596]	; (800a618 <_strtod_l+0xbf8>)
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a3ca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a618 <_strtod_l+0xbf8>
 800a3ce:	f04f 0800 	mov.w	r8, #0
 800a3d2:	4b92      	ldr	r3, [pc, #584]	; (800a61c <_strtod_l+0xbfc>)
 800a3d4:	403b      	ands	r3, r7
 800a3d6:	9311      	str	r3, [sp, #68]	; 0x44
 800a3d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a3da:	4b91      	ldr	r3, [pc, #580]	; (800a620 <_strtod_l+0xc00>)
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	f040 80b2 	bne.w	800a546 <_strtod_l+0xb26>
 800a3e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a3e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a3ea:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a3ee:	ec4b ab10 	vmov	d0, sl, fp
 800a3f2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800a3f6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a3fa:	f001 f949 	bl	800b690 <__ulp>
 800a3fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a402:	ec53 2b10 	vmov	r2, r3, d0
 800a406:	f7f6 f8f7 	bl	80005f8 <__aeabi_dmul>
 800a40a:	4652      	mov	r2, sl
 800a40c:	465b      	mov	r3, fp
 800a40e:	f7f5 ff3d 	bl	800028c <__adddf3>
 800a412:	460b      	mov	r3, r1
 800a414:	4981      	ldr	r1, [pc, #516]	; (800a61c <_strtod_l+0xbfc>)
 800a416:	4a83      	ldr	r2, [pc, #524]	; (800a624 <_strtod_l+0xc04>)
 800a418:	4019      	ands	r1, r3
 800a41a:	4291      	cmp	r1, r2
 800a41c:	4682      	mov	sl, r0
 800a41e:	d95e      	bls.n	800a4de <_strtod_l+0xabe>
 800a420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a422:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a426:	4293      	cmp	r3, r2
 800a428:	d103      	bne.n	800a432 <_strtod_l+0xa12>
 800a42a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a42c:	3301      	adds	r3, #1
 800a42e:	f43f ad43 	beq.w	8009eb8 <_strtod_l+0x498>
 800a432:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800a630 <_strtod_l+0xc10>
 800a436:	f04f 3aff 	mov.w	sl, #4294967295
 800a43a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a43c:	4620      	mov	r0, r4
 800a43e:	f000 fdfb 	bl	800b038 <_Bfree>
 800a442:	9907      	ldr	r1, [sp, #28]
 800a444:	4620      	mov	r0, r4
 800a446:	f000 fdf7 	bl	800b038 <_Bfree>
 800a44a:	4631      	mov	r1, r6
 800a44c:	4620      	mov	r0, r4
 800a44e:	f000 fdf3 	bl	800b038 <_Bfree>
 800a452:	4629      	mov	r1, r5
 800a454:	4620      	mov	r0, r4
 800a456:	f000 fdef 	bl	800b038 <_Bfree>
 800a45a:	e613      	b.n	800a084 <_strtod_l+0x664>
 800a45c:	f1ba 0f00 	cmp.w	sl, #0
 800a460:	d11b      	bne.n	800a49a <_strtod_l+0xa7a>
 800a462:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a466:	b9f3      	cbnz	r3, 800a4a6 <_strtod_l+0xa86>
 800a468:	4b6b      	ldr	r3, [pc, #428]	; (800a618 <_strtod_l+0xbf8>)
 800a46a:	2200      	movs	r2, #0
 800a46c:	4640      	mov	r0, r8
 800a46e:	4649      	mov	r1, r9
 800a470:	f7f6 fb34 	bl	8000adc <__aeabi_dcmplt>
 800a474:	b9d0      	cbnz	r0, 800a4ac <_strtod_l+0xa8c>
 800a476:	4640      	mov	r0, r8
 800a478:	4649      	mov	r1, r9
 800a47a:	4b6b      	ldr	r3, [pc, #428]	; (800a628 <_strtod_l+0xc08>)
 800a47c:	2200      	movs	r2, #0
 800a47e:	f7f6 f8bb 	bl	80005f8 <__aeabi_dmul>
 800a482:	4680      	mov	r8, r0
 800a484:	4689      	mov	r9, r1
 800a486:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a48a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800a48e:	931b      	str	r3, [sp, #108]	; 0x6c
 800a490:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a494:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a498:	e79b      	b.n	800a3d2 <_strtod_l+0x9b2>
 800a49a:	f1ba 0f01 	cmp.w	sl, #1
 800a49e:	d102      	bne.n	800a4a6 <_strtod_l+0xa86>
 800a4a0:	2f00      	cmp	r7, #0
 800a4a2:	f43f ad7e 	beq.w	8009fa2 <_strtod_l+0x582>
 800a4a6:	4b61      	ldr	r3, [pc, #388]	; (800a62c <_strtod_l+0xc0c>)
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	e78c      	b.n	800a3c6 <_strtod_l+0x9a6>
 800a4ac:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a628 <_strtod_l+0xc08>
 800a4b0:	f04f 0800 	mov.w	r8, #0
 800a4b4:	e7e7      	b.n	800a486 <_strtod_l+0xa66>
 800a4b6:	4b5c      	ldr	r3, [pc, #368]	; (800a628 <_strtod_l+0xc08>)
 800a4b8:	4640      	mov	r0, r8
 800a4ba:	4649      	mov	r1, r9
 800a4bc:	2200      	movs	r2, #0
 800a4be:	f7f6 f89b 	bl	80005f8 <__aeabi_dmul>
 800a4c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4c4:	4680      	mov	r8, r0
 800a4c6:	4689      	mov	r9, r1
 800a4c8:	b933      	cbnz	r3, 800a4d8 <_strtod_l+0xab8>
 800a4ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a4ce:	9012      	str	r0, [sp, #72]	; 0x48
 800a4d0:	9313      	str	r3, [sp, #76]	; 0x4c
 800a4d2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a4d6:	e7dd      	b.n	800a494 <_strtod_l+0xa74>
 800a4d8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800a4dc:	e7f9      	b.n	800a4d2 <_strtod_l+0xab2>
 800a4de:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a4e2:	9b04      	ldr	r3, [sp, #16]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d1a8      	bne.n	800a43a <_strtod_l+0xa1a>
 800a4e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a4ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a4ee:	0d1b      	lsrs	r3, r3, #20
 800a4f0:	051b      	lsls	r3, r3, #20
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d1a1      	bne.n	800a43a <_strtod_l+0xa1a>
 800a4f6:	4640      	mov	r0, r8
 800a4f8:	4649      	mov	r1, r9
 800a4fa:	f7f6 fbdd 	bl	8000cb8 <__aeabi_d2lz>
 800a4fe:	f7f6 f84d 	bl	800059c <__aeabi_l2d>
 800a502:	4602      	mov	r2, r0
 800a504:	460b      	mov	r3, r1
 800a506:	4640      	mov	r0, r8
 800a508:	4649      	mov	r1, r9
 800a50a:	f7f5 febd 	bl	8000288 <__aeabi_dsub>
 800a50e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a510:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a514:	ea43 030a 	orr.w	r3, r3, sl
 800a518:	4313      	orrs	r3, r2
 800a51a:	4680      	mov	r8, r0
 800a51c:	4689      	mov	r9, r1
 800a51e:	d053      	beq.n	800a5c8 <_strtod_l+0xba8>
 800a520:	a335      	add	r3, pc, #212	; (adr r3, 800a5f8 <_strtod_l+0xbd8>)
 800a522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a526:	f7f6 fad9 	bl	8000adc <__aeabi_dcmplt>
 800a52a:	2800      	cmp	r0, #0
 800a52c:	f47f acce 	bne.w	8009ecc <_strtod_l+0x4ac>
 800a530:	a333      	add	r3, pc, #204	; (adr r3, 800a600 <_strtod_l+0xbe0>)
 800a532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a536:	4640      	mov	r0, r8
 800a538:	4649      	mov	r1, r9
 800a53a:	f7f6 faed 	bl	8000b18 <__aeabi_dcmpgt>
 800a53e:	2800      	cmp	r0, #0
 800a540:	f43f af7b 	beq.w	800a43a <_strtod_l+0xa1a>
 800a544:	e4c2      	b.n	8009ecc <_strtod_l+0x4ac>
 800a546:	9b04      	ldr	r3, [sp, #16]
 800a548:	b333      	cbz	r3, 800a598 <_strtod_l+0xb78>
 800a54a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a54c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a550:	d822      	bhi.n	800a598 <_strtod_l+0xb78>
 800a552:	a32d      	add	r3, pc, #180	; (adr r3, 800a608 <_strtod_l+0xbe8>)
 800a554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a558:	4640      	mov	r0, r8
 800a55a:	4649      	mov	r1, r9
 800a55c:	f7f6 fac8 	bl	8000af0 <__aeabi_dcmple>
 800a560:	b1a0      	cbz	r0, 800a58c <_strtod_l+0xb6c>
 800a562:	4649      	mov	r1, r9
 800a564:	4640      	mov	r0, r8
 800a566:	f7f6 fb1f 	bl	8000ba8 <__aeabi_d2uiz>
 800a56a:	2801      	cmp	r0, #1
 800a56c:	bf38      	it	cc
 800a56e:	2001      	movcc	r0, #1
 800a570:	f7f5 ffc8 	bl	8000504 <__aeabi_ui2d>
 800a574:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a576:	4680      	mov	r8, r0
 800a578:	4689      	mov	r9, r1
 800a57a:	bb13      	cbnz	r3, 800a5c2 <_strtod_l+0xba2>
 800a57c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a580:	9014      	str	r0, [sp, #80]	; 0x50
 800a582:	9315      	str	r3, [sp, #84]	; 0x54
 800a584:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a588:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a58c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a58e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a590:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a594:	1a9b      	subs	r3, r3, r2
 800a596:	930d      	str	r3, [sp, #52]	; 0x34
 800a598:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a59c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a5a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a5a4:	f001 f874 	bl	800b690 <__ulp>
 800a5a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a5ac:	ec53 2b10 	vmov	r2, r3, d0
 800a5b0:	f7f6 f822 	bl	80005f8 <__aeabi_dmul>
 800a5b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a5b8:	f7f5 fe68 	bl	800028c <__adddf3>
 800a5bc:	4682      	mov	sl, r0
 800a5be:	468b      	mov	fp, r1
 800a5c0:	e78f      	b.n	800a4e2 <_strtod_l+0xac2>
 800a5c2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800a5c6:	e7dd      	b.n	800a584 <_strtod_l+0xb64>
 800a5c8:	a311      	add	r3, pc, #68	; (adr r3, 800a610 <_strtod_l+0xbf0>)
 800a5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ce:	f7f6 fa85 	bl	8000adc <__aeabi_dcmplt>
 800a5d2:	e7b4      	b.n	800a53e <_strtod_l+0xb1e>
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	930e      	str	r3, [sp, #56]	; 0x38
 800a5d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a5da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a5dc:	6013      	str	r3, [r2, #0]
 800a5de:	f7ff ba65 	b.w	8009aac <_strtod_l+0x8c>
 800a5e2:	2b65      	cmp	r3, #101	; 0x65
 800a5e4:	f43f ab5d 	beq.w	8009ca2 <_strtod_l+0x282>
 800a5e8:	2b45      	cmp	r3, #69	; 0x45
 800a5ea:	f43f ab5a 	beq.w	8009ca2 <_strtod_l+0x282>
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f7ff bb92 	b.w	8009d18 <_strtod_l+0x2f8>
 800a5f4:	f3af 8000 	nop.w
 800a5f8:	94a03595 	.word	0x94a03595
 800a5fc:	3fdfffff 	.word	0x3fdfffff
 800a600:	35afe535 	.word	0x35afe535
 800a604:	3fe00000 	.word	0x3fe00000
 800a608:	ffc00000 	.word	0xffc00000
 800a60c:	41dfffff 	.word	0x41dfffff
 800a610:	94a03595 	.word	0x94a03595
 800a614:	3fcfffff 	.word	0x3fcfffff
 800a618:	3ff00000 	.word	0x3ff00000
 800a61c:	7ff00000 	.word	0x7ff00000
 800a620:	7fe00000 	.word	0x7fe00000
 800a624:	7c9fffff 	.word	0x7c9fffff
 800a628:	3fe00000 	.word	0x3fe00000
 800a62c:	bff00000 	.word	0xbff00000
 800a630:	7fefffff 	.word	0x7fefffff

0800a634 <strtod>:
 800a634:	460a      	mov	r2, r1
 800a636:	4601      	mov	r1, r0
 800a638:	4802      	ldr	r0, [pc, #8]	; (800a644 <strtod+0x10>)
 800a63a:	4b03      	ldr	r3, [pc, #12]	; (800a648 <strtod+0x14>)
 800a63c:	6800      	ldr	r0, [r0, #0]
 800a63e:	f7ff b9ef 	b.w	8009a20 <_strtod_l>
 800a642:	bf00      	nop
 800a644:	200003cc 	.word	0x200003cc
 800a648:	20000434 	.word	0x20000434

0800a64c <strtok>:
 800a64c:	4b16      	ldr	r3, [pc, #88]	; (800a6a8 <strtok+0x5c>)
 800a64e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a650:	681e      	ldr	r6, [r3, #0]
 800a652:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800a654:	4605      	mov	r5, r0
 800a656:	b9fc      	cbnz	r4, 800a698 <strtok+0x4c>
 800a658:	2050      	movs	r0, #80	; 0x50
 800a65a:	9101      	str	r1, [sp, #4]
 800a65c:	f7ff f8be 	bl	80097dc <malloc>
 800a660:	9901      	ldr	r1, [sp, #4]
 800a662:	65b0      	str	r0, [r6, #88]	; 0x58
 800a664:	4602      	mov	r2, r0
 800a666:	b920      	cbnz	r0, 800a672 <strtok+0x26>
 800a668:	4b10      	ldr	r3, [pc, #64]	; (800a6ac <strtok+0x60>)
 800a66a:	4811      	ldr	r0, [pc, #68]	; (800a6b0 <strtok+0x64>)
 800a66c:	2157      	movs	r1, #87	; 0x57
 800a66e:	f000 f8d7 	bl	800a820 <__assert_func>
 800a672:	e9c0 4400 	strd	r4, r4, [r0]
 800a676:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a67a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a67e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a682:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a686:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a68a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a68e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a692:	6184      	str	r4, [r0, #24]
 800a694:	7704      	strb	r4, [r0, #28]
 800a696:	6244      	str	r4, [r0, #36]	; 0x24
 800a698:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800a69a:	2301      	movs	r3, #1
 800a69c:	4628      	mov	r0, r5
 800a69e:	b002      	add	sp, #8
 800a6a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a6a4:	f000 b806 	b.w	800a6b4 <__strtok_r>
 800a6a8:	200003cc 	.word	0x200003cc
 800a6ac:	0800ee60 	.word	0x0800ee60
 800a6b0:	0800ee77 	.word	0x0800ee77

0800a6b4 <__strtok_r>:
 800a6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6b6:	b908      	cbnz	r0, 800a6bc <__strtok_r+0x8>
 800a6b8:	6810      	ldr	r0, [r2, #0]
 800a6ba:	b188      	cbz	r0, 800a6e0 <__strtok_r+0x2c>
 800a6bc:	4604      	mov	r4, r0
 800a6be:	4620      	mov	r0, r4
 800a6c0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a6c4:	460f      	mov	r7, r1
 800a6c6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a6ca:	b91e      	cbnz	r6, 800a6d4 <__strtok_r+0x20>
 800a6cc:	b965      	cbnz	r5, 800a6e8 <__strtok_r+0x34>
 800a6ce:	6015      	str	r5, [r2, #0]
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	e005      	b.n	800a6e0 <__strtok_r+0x2c>
 800a6d4:	42b5      	cmp	r5, r6
 800a6d6:	d1f6      	bne.n	800a6c6 <__strtok_r+0x12>
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d1f0      	bne.n	800a6be <__strtok_r+0xa>
 800a6dc:	6014      	str	r4, [r2, #0]
 800a6de:	7003      	strb	r3, [r0, #0]
 800a6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6e2:	461c      	mov	r4, r3
 800a6e4:	e00c      	b.n	800a700 <__strtok_r+0x4c>
 800a6e6:	b915      	cbnz	r5, 800a6ee <__strtok_r+0x3a>
 800a6e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a6ec:	460e      	mov	r6, r1
 800a6ee:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a6f2:	42ab      	cmp	r3, r5
 800a6f4:	d1f7      	bne.n	800a6e6 <__strtok_r+0x32>
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d0f3      	beq.n	800a6e2 <__strtok_r+0x2e>
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a700:	6014      	str	r4, [r2, #0]
 800a702:	e7ed      	b.n	800a6e0 <__strtok_r+0x2c>

0800a704 <_strtol_l.isra.0>:
 800a704:	2b01      	cmp	r3, #1
 800a706:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a70a:	d001      	beq.n	800a710 <_strtol_l.isra.0+0xc>
 800a70c:	2b24      	cmp	r3, #36	; 0x24
 800a70e:	d906      	bls.n	800a71e <_strtol_l.isra.0+0x1a>
 800a710:	f7ff f83a 	bl	8009788 <__errno>
 800a714:	2316      	movs	r3, #22
 800a716:	6003      	str	r3, [r0, #0]
 800a718:	2000      	movs	r0, #0
 800a71a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a71e:	4f3a      	ldr	r7, [pc, #232]	; (800a808 <_strtol_l.isra.0+0x104>)
 800a720:	468e      	mov	lr, r1
 800a722:	4676      	mov	r6, lr
 800a724:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a728:	5de5      	ldrb	r5, [r4, r7]
 800a72a:	f015 0508 	ands.w	r5, r5, #8
 800a72e:	d1f8      	bne.n	800a722 <_strtol_l.isra.0+0x1e>
 800a730:	2c2d      	cmp	r4, #45	; 0x2d
 800a732:	d134      	bne.n	800a79e <_strtol_l.isra.0+0x9a>
 800a734:	f89e 4000 	ldrb.w	r4, [lr]
 800a738:	f04f 0801 	mov.w	r8, #1
 800a73c:	f106 0e02 	add.w	lr, r6, #2
 800a740:	2b00      	cmp	r3, #0
 800a742:	d05c      	beq.n	800a7fe <_strtol_l.isra.0+0xfa>
 800a744:	2b10      	cmp	r3, #16
 800a746:	d10c      	bne.n	800a762 <_strtol_l.isra.0+0x5e>
 800a748:	2c30      	cmp	r4, #48	; 0x30
 800a74a:	d10a      	bne.n	800a762 <_strtol_l.isra.0+0x5e>
 800a74c:	f89e 4000 	ldrb.w	r4, [lr]
 800a750:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a754:	2c58      	cmp	r4, #88	; 0x58
 800a756:	d14d      	bne.n	800a7f4 <_strtol_l.isra.0+0xf0>
 800a758:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a75c:	2310      	movs	r3, #16
 800a75e:	f10e 0e02 	add.w	lr, lr, #2
 800a762:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a766:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a76a:	2600      	movs	r6, #0
 800a76c:	fbbc f9f3 	udiv	r9, ip, r3
 800a770:	4635      	mov	r5, r6
 800a772:	fb03 ca19 	mls	sl, r3, r9, ip
 800a776:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a77a:	2f09      	cmp	r7, #9
 800a77c:	d818      	bhi.n	800a7b0 <_strtol_l.isra.0+0xac>
 800a77e:	463c      	mov	r4, r7
 800a780:	42a3      	cmp	r3, r4
 800a782:	dd24      	ble.n	800a7ce <_strtol_l.isra.0+0xca>
 800a784:	2e00      	cmp	r6, #0
 800a786:	db1f      	blt.n	800a7c8 <_strtol_l.isra.0+0xc4>
 800a788:	45a9      	cmp	r9, r5
 800a78a:	d31d      	bcc.n	800a7c8 <_strtol_l.isra.0+0xc4>
 800a78c:	d101      	bne.n	800a792 <_strtol_l.isra.0+0x8e>
 800a78e:	45a2      	cmp	sl, r4
 800a790:	db1a      	blt.n	800a7c8 <_strtol_l.isra.0+0xc4>
 800a792:	fb05 4503 	mla	r5, r5, r3, r4
 800a796:	2601      	movs	r6, #1
 800a798:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a79c:	e7eb      	b.n	800a776 <_strtol_l.isra.0+0x72>
 800a79e:	2c2b      	cmp	r4, #43	; 0x2b
 800a7a0:	bf08      	it	eq
 800a7a2:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a7a6:	46a8      	mov	r8, r5
 800a7a8:	bf08      	it	eq
 800a7aa:	f106 0e02 	addeq.w	lr, r6, #2
 800a7ae:	e7c7      	b.n	800a740 <_strtol_l.isra.0+0x3c>
 800a7b0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a7b4:	2f19      	cmp	r7, #25
 800a7b6:	d801      	bhi.n	800a7bc <_strtol_l.isra.0+0xb8>
 800a7b8:	3c37      	subs	r4, #55	; 0x37
 800a7ba:	e7e1      	b.n	800a780 <_strtol_l.isra.0+0x7c>
 800a7bc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a7c0:	2f19      	cmp	r7, #25
 800a7c2:	d804      	bhi.n	800a7ce <_strtol_l.isra.0+0xca>
 800a7c4:	3c57      	subs	r4, #87	; 0x57
 800a7c6:	e7db      	b.n	800a780 <_strtol_l.isra.0+0x7c>
 800a7c8:	f04f 36ff 	mov.w	r6, #4294967295
 800a7cc:	e7e4      	b.n	800a798 <_strtol_l.isra.0+0x94>
 800a7ce:	2e00      	cmp	r6, #0
 800a7d0:	da05      	bge.n	800a7de <_strtol_l.isra.0+0xda>
 800a7d2:	2322      	movs	r3, #34	; 0x22
 800a7d4:	6003      	str	r3, [r0, #0]
 800a7d6:	4665      	mov	r5, ip
 800a7d8:	b942      	cbnz	r2, 800a7ec <_strtol_l.isra.0+0xe8>
 800a7da:	4628      	mov	r0, r5
 800a7dc:	e79d      	b.n	800a71a <_strtol_l.isra.0+0x16>
 800a7de:	f1b8 0f00 	cmp.w	r8, #0
 800a7e2:	d000      	beq.n	800a7e6 <_strtol_l.isra.0+0xe2>
 800a7e4:	426d      	negs	r5, r5
 800a7e6:	2a00      	cmp	r2, #0
 800a7e8:	d0f7      	beq.n	800a7da <_strtol_l.isra.0+0xd6>
 800a7ea:	b10e      	cbz	r6, 800a7f0 <_strtol_l.isra.0+0xec>
 800a7ec:	f10e 31ff 	add.w	r1, lr, #4294967295
 800a7f0:	6011      	str	r1, [r2, #0]
 800a7f2:	e7f2      	b.n	800a7da <_strtol_l.isra.0+0xd6>
 800a7f4:	2430      	movs	r4, #48	; 0x30
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d1b3      	bne.n	800a762 <_strtol_l.isra.0+0x5e>
 800a7fa:	2308      	movs	r3, #8
 800a7fc:	e7b1      	b.n	800a762 <_strtol_l.isra.0+0x5e>
 800a7fe:	2c30      	cmp	r4, #48	; 0x30
 800a800:	d0a4      	beq.n	800a74c <_strtol_l.isra.0+0x48>
 800a802:	230a      	movs	r3, #10
 800a804:	e7ad      	b.n	800a762 <_strtol_l.isra.0+0x5e>
 800a806:	bf00      	nop
 800a808:	0800ef15 	.word	0x0800ef15

0800a80c <strtol>:
 800a80c:	4613      	mov	r3, r2
 800a80e:	460a      	mov	r2, r1
 800a810:	4601      	mov	r1, r0
 800a812:	4802      	ldr	r0, [pc, #8]	; (800a81c <strtol+0x10>)
 800a814:	6800      	ldr	r0, [r0, #0]
 800a816:	f7ff bf75 	b.w	800a704 <_strtol_l.isra.0>
 800a81a:	bf00      	nop
 800a81c:	200003cc 	.word	0x200003cc

0800a820 <__assert_func>:
 800a820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a822:	4614      	mov	r4, r2
 800a824:	461a      	mov	r2, r3
 800a826:	4b09      	ldr	r3, [pc, #36]	; (800a84c <__assert_func+0x2c>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4605      	mov	r5, r0
 800a82c:	68d8      	ldr	r0, [r3, #12]
 800a82e:	b14c      	cbz	r4, 800a844 <__assert_func+0x24>
 800a830:	4b07      	ldr	r3, [pc, #28]	; (800a850 <__assert_func+0x30>)
 800a832:	9100      	str	r1, [sp, #0]
 800a834:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a838:	4906      	ldr	r1, [pc, #24]	; (800a854 <__assert_func+0x34>)
 800a83a:	462b      	mov	r3, r5
 800a83c:	f000 f80e 	bl	800a85c <fiprintf>
 800a840:	f001 fdb6 	bl	800c3b0 <abort>
 800a844:	4b04      	ldr	r3, [pc, #16]	; (800a858 <__assert_func+0x38>)
 800a846:	461c      	mov	r4, r3
 800a848:	e7f3      	b.n	800a832 <__assert_func+0x12>
 800a84a:	bf00      	nop
 800a84c:	200003cc 	.word	0x200003cc
 800a850:	0800eed8 	.word	0x0800eed8
 800a854:	0800eee5 	.word	0x0800eee5
 800a858:	0800ef13 	.word	0x0800ef13

0800a85c <fiprintf>:
 800a85c:	b40e      	push	{r1, r2, r3}
 800a85e:	b503      	push	{r0, r1, lr}
 800a860:	4601      	mov	r1, r0
 800a862:	ab03      	add	r3, sp, #12
 800a864:	4805      	ldr	r0, [pc, #20]	; (800a87c <fiprintf+0x20>)
 800a866:	f853 2b04 	ldr.w	r2, [r3], #4
 800a86a:	6800      	ldr	r0, [r0, #0]
 800a86c:	9301      	str	r3, [sp, #4]
 800a86e:	f001 f9f3 	bl	800bc58 <_vfiprintf_r>
 800a872:	b002      	add	sp, #8
 800a874:	f85d eb04 	ldr.w	lr, [sp], #4
 800a878:	b003      	add	sp, #12
 800a87a:	4770      	bx	lr
 800a87c:	200003cc 	.word	0x200003cc

0800a880 <rshift>:
 800a880:	6903      	ldr	r3, [r0, #16]
 800a882:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a886:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a88a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a88e:	f100 0414 	add.w	r4, r0, #20
 800a892:	dd45      	ble.n	800a920 <rshift+0xa0>
 800a894:	f011 011f 	ands.w	r1, r1, #31
 800a898:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a89c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a8a0:	d10c      	bne.n	800a8bc <rshift+0x3c>
 800a8a2:	f100 0710 	add.w	r7, r0, #16
 800a8a6:	4629      	mov	r1, r5
 800a8a8:	42b1      	cmp	r1, r6
 800a8aa:	d334      	bcc.n	800a916 <rshift+0x96>
 800a8ac:	1a9b      	subs	r3, r3, r2
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	1eea      	subs	r2, r5, #3
 800a8b2:	4296      	cmp	r6, r2
 800a8b4:	bf38      	it	cc
 800a8b6:	2300      	movcc	r3, #0
 800a8b8:	4423      	add	r3, r4
 800a8ba:	e015      	b.n	800a8e8 <rshift+0x68>
 800a8bc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a8c0:	f1c1 0820 	rsb	r8, r1, #32
 800a8c4:	40cf      	lsrs	r7, r1
 800a8c6:	f105 0e04 	add.w	lr, r5, #4
 800a8ca:	46a1      	mov	r9, r4
 800a8cc:	4576      	cmp	r6, lr
 800a8ce:	46f4      	mov	ip, lr
 800a8d0:	d815      	bhi.n	800a8fe <rshift+0x7e>
 800a8d2:	1a9b      	subs	r3, r3, r2
 800a8d4:	009a      	lsls	r2, r3, #2
 800a8d6:	3a04      	subs	r2, #4
 800a8d8:	3501      	adds	r5, #1
 800a8da:	42ae      	cmp	r6, r5
 800a8dc:	bf38      	it	cc
 800a8de:	2200      	movcc	r2, #0
 800a8e0:	18a3      	adds	r3, r4, r2
 800a8e2:	50a7      	str	r7, [r4, r2]
 800a8e4:	b107      	cbz	r7, 800a8e8 <rshift+0x68>
 800a8e6:	3304      	adds	r3, #4
 800a8e8:	1b1a      	subs	r2, r3, r4
 800a8ea:	42a3      	cmp	r3, r4
 800a8ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a8f0:	bf08      	it	eq
 800a8f2:	2300      	moveq	r3, #0
 800a8f4:	6102      	str	r2, [r0, #16]
 800a8f6:	bf08      	it	eq
 800a8f8:	6143      	streq	r3, [r0, #20]
 800a8fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8fe:	f8dc c000 	ldr.w	ip, [ip]
 800a902:	fa0c fc08 	lsl.w	ip, ip, r8
 800a906:	ea4c 0707 	orr.w	r7, ip, r7
 800a90a:	f849 7b04 	str.w	r7, [r9], #4
 800a90e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a912:	40cf      	lsrs	r7, r1
 800a914:	e7da      	b.n	800a8cc <rshift+0x4c>
 800a916:	f851 cb04 	ldr.w	ip, [r1], #4
 800a91a:	f847 cf04 	str.w	ip, [r7, #4]!
 800a91e:	e7c3      	b.n	800a8a8 <rshift+0x28>
 800a920:	4623      	mov	r3, r4
 800a922:	e7e1      	b.n	800a8e8 <rshift+0x68>

0800a924 <__hexdig_fun>:
 800a924:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a928:	2b09      	cmp	r3, #9
 800a92a:	d802      	bhi.n	800a932 <__hexdig_fun+0xe>
 800a92c:	3820      	subs	r0, #32
 800a92e:	b2c0      	uxtb	r0, r0
 800a930:	4770      	bx	lr
 800a932:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a936:	2b05      	cmp	r3, #5
 800a938:	d801      	bhi.n	800a93e <__hexdig_fun+0x1a>
 800a93a:	3847      	subs	r0, #71	; 0x47
 800a93c:	e7f7      	b.n	800a92e <__hexdig_fun+0xa>
 800a93e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a942:	2b05      	cmp	r3, #5
 800a944:	d801      	bhi.n	800a94a <__hexdig_fun+0x26>
 800a946:	3827      	subs	r0, #39	; 0x27
 800a948:	e7f1      	b.n	800a92e <__hexdig_fun+0xa>
 800a94a:	2000      	movs	r0, #0
 800a94c:	4770      	bx	lr
	...

0800a950 <__gethex>:
 800a950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a954:	ed2d 8b02 	vpush	{d8}
 800a958:	b089      	sub	sp, #36	; 0x24
 800a95a:	ee08 0a10 	vmov	s16, r0
 800a95e:	9304      	str	r3, [sp, #16]
 800a960:	4bbc      	ldr	r3, [pc, #752]	; (800ac54 <__gethex+0x304>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	9301      	str	r3, [sp, #4]
 800a966:	4618      	mov	r0, r3
 800a968:	468b      	mov	fp, r1
 800a96a:	4690      	mov	r8, r2
 800a96c:	f7f5 fc30 	bl	80001d0 <strlen>
 800a970:	9b01      	ldr	r3, [sp, #4]
 800a972:	f8db 2000 	ldr.w	r2, [fp]
 800a976:	4403      	add	r3, r0
 800a978:	4682      	mov	sl, r0
 800a97a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a97e:	9305      	str	r3, [sp, #20]
 800a980:	1c93      	adds	r3, r2, #2
 800a982:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a986:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a98a:	32fe      	adds	r2, #254	; 0xfe
 800a98c:	18d1      	adds	r1, r2, r3
 800a98e:	461f      	mov	r7, r3
 800a990:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a994:	9100      	str	r1, [sp, #0]
 800a996:	2830      	cmp	r0, #48	; 0x30
 800a998:	d0f8      	beq.n	800a98c <__gethex+0x3c>
 800a99a:	f7ff ffc3 	bl	800a924 <__hexdig_fun>
 800a99e:	4604      	mov	r4, r0
 800a9a0:	2800      	cmp	r0, #0
 800a9a2:	d13a      	bne.n	800aa1a <__gethex+0xca>
 800a9a4:	9901      	ldr	r1, [sp, #4]
 800a9a6:	4652      	mov	r2, sl
 800a9a8:	4638      	mov	r0, r7
 800a9aa:	f001 fc21 	bl	800c1f0 <strncmp>
 800a9ae:	4605      	mov	r5, r0
 800a9b0:	2800      	cmp	r0, #0
 800a9b2:	d168      	bne.n	800aa86 <__gethex+0x136>
 800a9b4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a9b8:	eb07 060a 	add.w	r6, r7, sl
 800a9bc:	f7ff ffb2 	bl	800a924 <__hexdig_fun>
 800a9c0:	2800      	cmp	r0, #0
 800a9c2:	d062      	beq.n	800aa8a <__gethex+0x13a>
 800a9c4:	4633      	mov	r3, r6
 800a9c6:	7818      	ldrb	r0, [r3, #0]
 800a9c8:	2830      	cmp	r0, #48	; 0x30
 800a9ca:	461f      	mov	r7, r3
 800a9cc:	f103 0301 	add.w	r3, r3, #1
 800a9d0:	d0f9      	beq.n	800a9c6 <__gethex+0x76>
 800a9d2:	f7ff ffa7 	bl	800a924 <__hexdig_fun>
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	fab0 f480 	clz	r4, r0
 800a9dc:	0964      	lsrs	r4, r4, #5
 800a9de:	4635      	mov	r5, r6
 800a9e0:	9300      	str	r3, [sp, #0]
 800a9e2:	463a      	mov	r2, r7
 800a9e4:	4616      	mov	r6, r2
 800a9e6:	3201      	adds	r2, #1
 800a9e8:	7830      	ldrb	r0, [r6, #0]
 800a9ea:	f7ff ff9b 	bl	800a924 <__hexdig_fun>
 800a9ee:	2800      	cmp	r0, #0
 800a9f0:	d1f8      	bne.n	800a9e4 <__gethex+0x94>
 800a9f2:	9901      	ldr	r1, [sp, #4]
 800a9f4:	4652      	mov	r2, sl
 800a9f6:	4630      	mov	r0, r6
 800a9f8:	f001 fbfa 	bl	800c1f0 <strncmp>
 800a9fc:	b980      	cbnz	r0, 800aa20 <__gethex+0xd0>
 800a9fe:	b94d      	cbnz	r5, 800aa14 <__gethex+0xc4>
 800aa00:	eb06 050a 	add.w	r5, r6, sl
 800aa04:	462a      	mov	r2, r5
 800aa06:	4616      	mov	r6, r2
 800aa08:	3201      	adds	r2, #1
 800aa0a:	7830      	ldrb	r0, [r6, #0]
 800aa0c:	f7ff ff8a 	bl	800a924 <__hexdig_fun>
 800aa10:	2800      	cmp	r0, #0
 800aa12:	d1f8      	bne.n	800aa06 <__gethex+0xb6>
 800aa14:	1bad      	subs	r5, r5, r6
 800aa16:	00ad      	lsls	r5, r5, #2
 800aa18:	e004      	b.n	800aa24 <__gethex+0xd4>
 800aa1a:	2400      	movs	r4, #0
 800aa1c:	4625      	mov	r5, r4
 800aa1e:	e7e0      	b.n	800a9e2 <__gethex+0x92>
 800aa20:	2d00      	cmp	r5, #0
 800aa22:	d1f7      	bne.n	800aa14 <__gethex+0xc4>
 800aa24:	7833      	ldrb	r3, [r6, #0]
 800aa26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aa2a:	2b50      	cmp	r3, #80	; 0x50
 800aa2c:	d13b      	bne.n	800aaa6 <__gethex+0x156>
 800aa2e:	7873      	ldrb	r3, [r6, #1]
 800aa30:	2b2b      	cmp	r3, #43	; 0x2b
 800aa32:	d02c      	beq.n	800aa8e <__gethex+0x13e>
 800aa34:	2b2d      	cmp	r3, #45	; 0x2d
 800aa36:	d02e      	beq.n	800aa96 <__gethex+0x146>
 800aa38:	1c71      	adds	r1, r6, #1
 800aa3a:	f04f 0900 	mov.w	r9, #0
 800aa3e:	7808      	ldrb	r0, [r1, #0]
 800aa40:	f7ff ff70 	bl	800a924 <__hexdig_fun>
 800aa44:	1e43      	subs	r3, r0, #1
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	2b18      	cmp	r3, #24
 800aa4a:	d82c      	bhi.n	800aaa6 <__gethex+0x156>
 800aa4c:	f1a0 0210 	sub.w	r2, r0, #16
 800aa50:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aa54:	f7ff ff66 	bl	800a924 <__hexdig_fun>
 800aa58:	1e43      	subs	r3, r0, #1
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	2b18      	cmp	r3, #24
 800aa5e:	d91d      	bls.n	800aa9c <__gethex+0x14c>
 800aa60:	f1b9 0f00 	cmp.w	r9, #0
 800aa64:	d000      	beq.n	800aa68 <__gethex+0x118>
 800aa66:	4252      	negs	r2, r2
 800aa68:	4415      	add	r5, r2
 800aa6a:	f8cb 1000 	str.w	r1, [fp]
 800aa6e:	b1e4      	cbz	r4, 800aaaa <__gethex+0x15a>
 800aa70:	9b00      	ldr	r3, [sp, #0]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	bf14      	ite	ne
 800aa76:	2700      	movne	r7, #0
 800aa78:	2706      	moveq	r7, #6
 800aa7a:	4638      	mov	r0, r7
 800aa7c:	b009      	add	sp, #36	; 0x24
 800aa7e:	ecbd 8b02 	vpop	{d8}
 800aa82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa86:	463e      	mov	r6, r7
 800aa88:	4625      	mov	r5, r4
 800aa8a:	2401      	movs	r4, #1
 800aa8c:	e7ca      	b.n	800aa24 <__gethex+0xd4>
 800aa8e:	f04f 0900 	mov.w	r9, #0
 800aa92:	1cb1      	adds	r1, r6, #2
 800aa94:	e7d3      	b.n	800aa3e <__gethex+0xee>
 800aa96:	f04f 0901 	mov.w	r9, #1
 800aa9a:	e7fa      	b.n	800aa92 <__gethex+0x142>
 800aa9c:	230a      	movs	r3, #10
 800aa9e:	fb03 0202 	mla	r2, r3, r2, r0
 800aaa2:	3a10      	subs	r2, #16
 800aaa4:	e7d4      	b.n	800aa50 <__gethex+0x100>
 800aaa6:	4631      	mov	r1, r6
 800aaa8:	e7df      	b.n	800aa6a <__gethex+0x11a>
 800aaaa:	1bf3      	subs	r3, r6, r7
 800aaac:	3b01      	subs	r3, #1
 800aaae:	4621      	mov	r1, r4
 800aab0:	2b07      	cmp	r3, #7
 800aab2:	dc0b      	bgt.n	800aacc <__gethex+0x17c>
 800aab4:	ee18 0a10 	vmov	r0, s16
 800aab8:	f000 fa7e 	bl	800afb8 <_Balloc>
 800aabc:	4604      	mov	r4, r0
 800aabe:	b940      	cbnz	r0, 800aad2 <__gethex+0x182>
 800aac0:	4b65      	ldr	r3, [pc, #404]	; (800ac58 <__gethex+0x308>)
 800aac2:	4602      	mov	r2, r0
 800aac4:	21de      	movs	r1, #222	; 0xde
 800aac6:	4865      	ldr	r0, [pc, #404]	; (800ac5c <__gethex+0x30c>)
 800aac8:	f7ff feaa 	bl	800a820 <__assert_func>
 800aacc:	3101      	adds	r1, #1
 800aace:	105b      	asrs	r3, r3, #1
 800aad0:	e7ee      	b.n	800aab0 <__gethex+0x160>
 800aad2:	f100 0914 	add.w	r9, r0, #20
 800aad6:	f04f 0b00 	mov.w	fp, #0
 800aada:	f1ca 0301 	rsb	r3, sl, #1
 800aade:	f8cd 9008 	str.w	r9, [sp, #8]
 800aae2:	f8cd b000 	str.w	fp, [sp]
 800aae6:	9306      	str	r3, [sp, #24]
 800aae8:	42b7      	cmp	r7, r6
 800aaea:	d340      	bcc.n	800ab6e <__gethex+0x21e>
 800aaec:	9802      	ldr	r0, [sp, #8]
 800aaee:	9b00      	ldr	r3, [sp, #0]
 800aaf0:	f840 3b04 	str.w	r3, [r0], #4
 800aaf4:	eba0 0009 	sub.w	r0, r0, r9
 800aaf8:	1080      	asrs	r0, r0, #2
 800aafa:	0146      	lsls	r6, r0, #5
 800aafc:	6120      	str	r0, [r4, #16]
 800aafe:	4618      	mov	r0, r3
 800ab00:	f000 fb50 	bl	800b1a4 <__hi0bits>
 800ab04:	1a30      	subs	r0, r6, r0
 800ab06:	f8d8 6000 	ldr.w	r6, [r8]
 800ab0a:	42b0      	cmp	r0, r6
 800ab0c:	dd63      	ble.n	800abd6 <__gethex+0x286>
 800ab0e:	1b87      	subs	r7, r0, r6
 800ab10:	4639      	mov	r1, r7
 800ab12:	4620      	mov	r0, r4
 800ab14:	f000 feea 	bl	800b8ec <__any_on>
 800ab18:	4682      	mov	sl, r0
 800ab1a:	b1a8      	cbz	r0, 800ab48 <__gethex+0x1f8>
 800ab1c:	1e7b      	subs	r3, r7, #1
 800ab1e:	1159      	asrs	r1, r3, #5
 800ab20:	f003 021f 	and.w	r2, r3, #31
 800ab24:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ab28:	f04f 0a01 	mov.w	sl, #1
 800ab2c:	fa0a f202 	lsl.w	r2, sl, r2
 800ab30:	420a      	tst	r2, r1
 800ab32:	d009      	beq.n	800ab48 <__gethex+0x1f8>
 800ab34:	4553      	cmp	r3, sl
 800ab36:	dd05      	ble.n	800ab44 <__gethex+0x1f4>
 800ab38:	1eb9      	subs	r1, r7, #2
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	f000 fed6 	bl	800b8ec <__any_on>
 800ab40:	2800      	cmp	r0, #0
 800ab42:	d145      	bne.n	800abd0 <__gethex+0x280>
 800ab44:	f04f 0a02 	mov.w	sl, #2
 800ab48:	4639      	mov	r1, r7
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	f7ff fe98 	bl	800a880 <rshift>
 800ab50:	443d      	add	r5, r7
 800ab52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab56:	42ab      	cmp	r3, r5
 800ab58:	da4c      	bge.n	800abf4 <__gethex+0x2a4>
 800ab5a:	ee18 0a10 	vmov	r0, s16
 800ab5e:	4621      	mov	r1, r4
 800ab60:	f000 fa6a 	bl	800b038 <_Bfree>
 800ab64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ab66:	2300      	movs	r3, #0
 800ab68:	6013      	str	r3, [r2, #0]
 800ab6a:	27a3      	movs	r7, #163	; 0xa3
 800ab6c:	e785      	b.n	800aa7a <__gethex+0x12a>
 800ab6e:	1e73      	subs	r3, r6, #1
 800ab70:	9a05      	ldr	r2, [sp, #20]
 800ab72:	9303      	str	r3, [sp, #12]
 800ab74:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d019      	beq.n	800abb0 <__gethex+0x260>
 800ab7c:	f1bb 0f20 	cmp.w	fp, #32
 800ab80:	d107      	bne.n	800ab92 <__gethex+0x242>
 800ab82:	9b02      	ldr	r3, [sp, #8]
 800ab84:	9a00      	ldr	r2, [sp, #0]
 800ab86:	f843 2b04 	str.w	r2, [r3], #4
 800ab8a:	9302      	str	r3, [sp, #8]
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	9300      	str	r3, [sp, #0]
 800ab90:	469b      	mov	fp, r3
 800ab92:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ab96:	f7ff fec5 	bl	800a924 <__hexdig_fun>
 800ab9a:	9b00      	ldr	r3, [sp, #0]
 800ab9c:	f000 000f 	and.w	r0, r0, #15
 800aba0:	fa00 f00b 	lsl.w	r0, r0, fp
 800aba4:	4303      	orrs	r3, r0
 800aba6:	9300      	str	r3, [sp, #0]
 800aba8:	f10b 0b04 	add.w	fp, fp, #4
 800abac:	9b03      	ldr	r3, [sp, #12]
 800abae:	e00d      	b.n	800abcc <__gethex+0x27c>
 800abb0:	9b03      	ldr	r3, [sp, #12]
 800abb2:	9a06      	ldr	r2, [sp, #24]
 800abb4:	4413      	add	r3, r2
 800abb6:	42bb      	cmp	r3, r7
 800abb8:	d3e0      	bcc.n	800ab7c <__gethex+0x22c>
 800abba:	4618      	mov	r0, r3
 800abbc:	9901      	ldr	r1, [sp, #4]
 800abbe:	9307      	str	r3, [sp, #28]
 800abc0:	4652      	mov	r2, sl
 800abc2:	f001 fb15 	bl	800c1f0 <strncmp>
 800abc6:	9b07      	ldr	r3, [sp, #28]
 800abc8:	2800      	cmp	r0, #0
 800abca:	d1d7      	bne.n	800ab7c <__gethex+0x22c>
 800abcc:	461e      	mov	r6, r3
 800abce:	e78b      	b.n	800aae8 <__gethex+0x198>
 800abd0:	f04f 0a03 	mov.w	sl, #3
 800abd4:	e7b8      	b.n	800ab48 <__gethex+0x1f8>
 800abd6:	da0a      	bge.n	800abee <__gethex+0x29e>
 800abd8:	1a37      	subs	r7, r6, r0
 800abda:	4621      	mov	r1, r4
 800abdc:	ee18 0a10 	vmov	r0, s16
 800abe0:	463a      	mov	r2, r7
 800abe2:	f000 fc45 	bl	800b470 <__lshift>
 800abe6:	1bed      	subs	r5, r5, r7
 800abe8:	4604      	mov	r4, r0
 800abea:	f100 0914 	add.w	r9, r0, #20
 800abee:	f04f 0a00 	mov.w	sl, #0
 800abf2:	e7ae      	b.n	800ab52 <__gethex+0x202>
 800abf4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800abf8:	42a8      	cmp	r0, r5
 800abfa:	dd72      	ble.n	800ace2 <__gethex+0x392>
 800abfc:	1b45      	subs	r5, r0, r5
 800abfe:	42ae      	cmp	r6, r5
 800ac00:	dc36      	bgt.n	800ac70 <__gethex+0x320>
 800ac02:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ac06:	2b02      	cmp	r3, #2
 800ac08:	d02a      	beq.n	800ac60 <__gethex+0x310>
 800ac0a:	2b03      	cmp	r3, #3
 800ac0c:	d02c      	beq.n	800ac68 <__gethex+0x318>
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d115      	bne.n	800ac3e <__gethex+0x2ee>
 800ac12:	42ae      	cmp	r6, r5
 800ac14:	d113      	bne.n	800ac3e <__gethex+0x2ee>
 800ac16:	2e01      	cmp	r6, #1
 800ac18:	d10b      	bne.n	800ac32 <__gethex+0x2e2>
 800ac1a:	9a04      	ldr	r2, [sp, #16]
 800ac1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ac20:	6013      	str	r3, [r2, #0]
 800ac22:	2301      	movs	r3, #1
 800ac24:	6123      	str	r3, [r4, #16]
 800ac26:	f8c9 3000 	str.w	r3, [r9]
 800ac2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac2c:	2762      	movs	r7, #98	; 0x62
 800ac2e:	601c      	str	r4, [r3, #0]
 800ac30:	e723      	b.n	800aa7a <__gethex+0x12a>
 800ac32:	1e71      	subs	r1, r6, #1
 800ac34:	4620      	mov	r0, r4
 800ac36:	f000 fe59 	bl	800b8ec <__any_on>
 800ac3a:	2800      	cmp	r0, #0
 800ac3c:	d1ed      	bne.n	800ac1a <__gethex+0x2ca>
 800ac3e:	ee18 0a10 	vmov	r0, s16
 800ac42:	4621      	mov	r1, r4
 800ac44:	f000 f9f8 	bl	800b038 <_Bfree>
 800ac48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	6013      	str	r3, [r2, #0]
 800ac4e:	2750      	movs	r7, #80	; 0x50
 800ac50:	e713      	b.n	800aa7a <__gethex+0x12a>
 800ac52:	bf00      	nop
 800ac54:	0800f090 	.word	0x0800f090
 800ac58:	0800f015 	.word	0x0800f015
 800ac5c:	0800f026 	.word	0x0800f026
 800ac60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d1eb      	bne.n	800ac3e <__gethex+0x2ee>
 800ac66:	e7d8      	b.n	800ac1a <__gethex+0x2ca>
 800ac68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d1d5      	bne.n	800ac1a <__gethex+0x2ca>
 800ac6e:	e7e6      	b.n	800ac3e <__gethex+0x2ee>
 800ac70:	1e6f      	subs	r7, r5, #1
 800ac72:	f1ba 0f00 	cmp.w	sl, #0
 800ac76:	d131      	bne.n	800acdc <__gethex+0x38c>
 800ac78:	b127      	cbz	r7, 800ac84 <__gethex+0x334>
 800ac7a:	4639      	mov	r1, r7
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	f000 fe35 	bl	800b8ec <__any_on>
 800ac82:	4682      	mov	sl, r0
 800ac84:	117b      	asrs	r3, r7, #5
 800ac86:	2101      	movs	r1, #1
 800ac88:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ac8c:	f007 071f 	and.w	r7, r7, #31
 800ac90:	fa01 f707 	lsl.w	r7, r1, r7
 800ac94:	421f      	tst	r7, r3
 800ac96:	4629      	mov	r1, r5
 800ac98:	4620      	mov	r0, r4
 800ac9a:	bf18      	it	ne
 800ac9c:	f04a 0a02 	orrne.w	sl, sl, #2
 800aca0:	1b76      	subs	r6, r6, r5
 800aca2:	f7ff fded 	bl	800a880 <rshift>
 800aca6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800acaa:	2702      	movs	r7, #2
 800acac:	f1ba 0f00 	cmp.w	sl, #0
 800acb0:	d048      	beq.n	800ad44 <__gethex+0x3f4>
 800acb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800acb6:	2b02      	cmp	r3, #2
 800acb8:	d015      	beq.n	800ace6 <__gethex+0x396>
 800acba:	2b03      	cmp	r3, #3
 800acbc:	d017      	beq.n	800acee <__gethex+0x39e>
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d109      	bne.n	800acd6 <__gethex+0x386>
 800acc2:	f01a 0f02 	tst.w	sl, #2
 800acc6:	d006      	beq.n	800acd6 <__gethex+0x386>
 800acc8:	f8d9 0000 	ldr.w	r0, [r9]
 800accc:	ea4a 0a00 	orr.w	sl, sl, r0
 800acd0:	f01a 0f01 	tst.w	sl, #1
 800acd4:	d10e      	bne.n	800acf4 <__gethex+0x3a4>
 800acd6:	f047 0710 	orr.w	r7, r7, #16
 800acda:	e033      	b.n	800ad44 <__gethex+0x3f4>
 800acdc:	f04f 0a01 	mov.w	sl, #1
 800ace0:	e7d0      	b.n	800ac84 <__gethex+0x334>
 800ace2:	2701      	movs	r7, #1
 800ace4:	e7e2      	b.n	800acac <__gethex+0x35c>
 800ace6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ace8:	f1c3 0301 	rsb	r3, r3, #1
 800acec:	9315      	str	r3, [sp, #84]	; 0x54
 800acee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d0f0      	beq.n	800acd6 <__gethex+0x386>
 800acf4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800acf8:	f104 0314 	add.w	r3, r4, #20
 800acfc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ad00:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ad04:	f04f 0c00 	mov.w	ip, #0
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad0e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ad12:	d01c      	beq.n	800ad4e <__gethex+0x3fe>
 800ad14:	3201      	adds	r2, #1
 800ad16:	6002      	str	r2, [r0, #0]
 800ad18:	2f02      	cmp	r7, #2
 800ad1a:	f104 0314 	add.w	r3, r4, #20
 800ad1e:	d13f      	bne.n	800ada0 <__gethex+0x450>
 800ad20:	f8d8 2000 	ldr.w	r2, [r8]
 800ad24:	3a01      	subs	r2, #1
 800ad26:	42b2      	cmp	r2, r6
 800ad28:	d10a      	bne.n	800ad40 <__gethex+0x3f0>
 800ad2a:	1171      	asrs	r1, r6, #5
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ad32:	f006 061f 	and.w	r6, r6, #31
 800ad36:	fa02 f606 	lsl.w	r6, r2, r6
 800ad3a:	421e      	tst	r6, r3
 800ad3c:	bf18      	it	ne
 800ad3e:	4617      	movne	r7, r2
 800ad40:	f047 0720 	orr.w	r7, r7, #32
 800ad44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ad46:	601c      	str	r4, [r3, #0]
 800ad48:	9b04      	ldr	r3, [sp, #16]
 800ad4a:	601d      	str	r5, [r3, #0]
 800ad4c:	e695      	b.n	800aa7a <__gethex+0x12a>
 800ad4e:	4299      	cmp	r1, r3
 800ad50:	f843 cc04 	str.w	ip, [r3, #-4]
 800ad54:	d8d8      	bhi.n	800ad08 <__gethex+0x3b8>
 800ad56:	68a3      	ldr	r3, [r4, #8]
 800ad58:	459b      	cmp	fp, r3
 800ad5a:	db19      	blt.n	800ad90 <__gethex+0x440>
 800ad5c:	6861      	ldr	r1, [r4, #4]
 800ad5e:	ee18 0a10 	vmov	r0, s16
 800ad62:	3101      	adds	r1, #1
 800ad64:	f000 f928 	bl	800afb8 <_Balloc>
 800ad68:	4681      	mov	r9, r0
 800ad6a:	b918      	cbnz	r0, 800ad74 <__gethex+0x424>
 800ad6c:	4b1a      	ldr	r3, [pc, #104]	; (800add8 <__gethex+0x488>)
 800ad6e:	4602      	mov	r2, r0
 800ad70:	2184      	movs	r1, #132	; 0x84
 800ad72:	e6a8      	b.n	800aac6 <__gethex+0x176>
 800ad74:	6922      	ldr	r2, [r4, #16]
 800ad76:	3202      	adds	r2, #2
 800ad78:	f104 010c 	add.w	r1, r4, #12
 800ad7c:	0092      	lsls	r2, r2, #2
 800ad7e:	300c      	adds	r0, #12
 800ad80:	f000 f900 	bl	800af84 <memcpy>
 800ad84:	4621      	mov	r1, r4
 800ad86:	ee18 0a10 	vmov	r0, s16
 800ad8a:	f000 f955 	bl	800b038 <_Bfree>
 800ad8e:	464c      	mov	r4, r9
 800ad90:	6923      	ldr	r3, [r4, #16]
 800ad92:	1c5a      	adds	r2, r3, #1
 800ad94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ad98:	6122      	str	r2, [r4, #16]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	615a      	str	r2, [r3, #20]
 800ad9e:	e7bb      	b.n	800ad18 <__gethex+0x3c8>
 800ada0:	6922      	ldr	r2, [r4, #16]
 800ada2:	455a      	cmp	r2, fp
 800ada4:	dd0b      	ble.n	800adbe <__gethex+0x46e>
 800ada6:	2101      	movs	r1, #1
 800ada8:	4620      	mov	r0, r4
 800adaa:	f7ff fd69 	bl	800a880 <rshift>
 800adae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800adb2:	3501      	adds	r5, #1
 800adb4:	42ab      	cmp	r3, r5
 800adb6:	f6ff aed0 	blt.w	800ab5a <__gethex+0x20a>
 800adba:	2701      	movs	r7, #1
 800adbc:	e7c0      	b.n	800ad40 <__gethex+0x3f0>
 800adbe:	f016 061f 	ands.w	r6, r6, #31
 800adc2:	d0fa      	beq.n	800adba <__gethex+0x46a>
 800adc4:	449a      	add	sl, r3
 800adc6:	f1c6 0620 	rsb	r6, r6, #32
 800adca:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800adce:	f000 f9e9 	bl	800b1a4 <__hi0bits>
 800add2:	42b0      	cmp	r0, r6
 800add4:	dbe7      	blt.n	800ada6 <__gethex+0x456>
 800add6:	e7f0      	b.n	800adba <__gethex+0x46a>
 800add8:	0800f015 	.word	0x0800f015

0800addc <L_shift>:
 800addc:	f1c2 0208 	rsb	r2, r2, #8
 800ade0:	0092      	lsls	r2, r2, #2
 800ade2:	b570      	push	{r4, r5, r6, lr}
 800ade4:	f1c2 0620 	rsb	r6, r2, #32
 800ade8:	6843      	ldr	r3, [r0, #4]
 800adea:	6804      	ldr	r4, [r0, #0]
 800adec:	fa03 f506 	lsl.w	r5, r3, r6
 800adf0:	432c      	orrs	r4, r5
 800adf2:	40d3      	lsrs	r3, r2
 800adf4:	6004      	str	r4, [r0, #0]
 800adf6:	f840 3f04 	str.w	r3, [r0, #4]!
 800adfa:	4288      	cmp	r0, r1
 800adfc:	d3f4      	bcc.n	800ade8 <L_shift+0xc>
 800adfe:	bd70      	pop	{r4, r5, r6, pc}

0800ae00 <__match>:
 800ae00:	b530      	push	{r4, r5, lr}
 800ae02:	6803      	ldr	r3, [r0, #0]
 800ae04:	3301      	adds	r3, #1
 800ae06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae0a:	b914      	cbnz	r4, 800ae12 <__match+0x12>
 800ae0c:	6003      	str	r3, [r0, #0]
 800ae0e:	2001      	movs	r0, #1
 800ae10:	bd30      	pop	{r4, r5, pc}
 800ae12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae16:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ae1a:	2d19      	cmp	r5, #25
 800ae1c:	bf98      	it	ls
 800ae1e:	3220      	addls	r2, #32
 800ae20:	42a2      	cmp	r2, r4
 800ae22:	d0f0      	beq.n	800ae06 <__match+0x6>
 800ae24:	2000      	movs	r0, #0
 800ae26:	e7f3      	b.n	800ae10 <__match+0x10>

0800ae28 <__hexnan>:
 800ae28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae2c:	680b      	ldr	r3, [r1, #0]
 800ae2e:	6801      	ldr	r1, [r0, #0]
 800ae30:	115e      	asrs	r6, r3, #5
 800ae32:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ae36:	f013 031f 	ands.w	r3, r3, #31
 800ae3a:	b087      	sub	sp, #28
 800ae3c:	bf18      	it	ne
 800ae3e:	3604      	addne	r6, #4
 800ae40:	2500      	movs	r5, #0
 800ae42:	1f37      	subs	r7, r6, #4
 800ae44:	4682      	mov	sl, r0
 800ae46:	4690      	mov	r8, r2
 800ae48:	9301      	str	r3, [sp, #4]
 800ae4a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ae4e:	46b9      	mov	r9, r7
 800ae50:	463c      	mov	r4, r7
 800ae52:	9502      	str	r5, [sp, #8]
 800ae54:	46ab      	mov	fp, r5
 800ae56:	784a      	ldrb	r2, [r1, #1]
 800ae58:	1c4b      	adds	r3, r1, #1
 800ae5a:	9303      	str	r3, [sp, #12]
 800ae5c:	b342      	cbz	r2, 800aeb0 <__hexnan+0x88>
 800ae5e:	4610      	mov	r0, r2
 800ae60:	9105      	str	r1, [sp, #20]
 800ae62:	9204      	str	r2, [sp, #16]
 800ae64:	f7ff fd5e 	bl	800a924 <__hexdig_fun>
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	d14f      	bne.n	800af0c <__hexnan+0xe4>
 800ae6c:	9a04      	ldr	r2, [sp, #16]
 800ae6e:	9905      	ldr	r1, [sp, #20]
 800ae70:	2a20      	cmp	r2, #32
 800ae72:	d818      	bhi.n	800aea6 <__hexnan+0x7e>
 800ae74:	9b02      	ldr	r3, [sp, #8]
 800ae76:	459b      	cmp	fp, r3
 800ae78:	dd13      	ble.n	800aea2 <__hexnan+0x7a>
 800ae7a:	454c      	cmp	r4, r9
 800ae7c:	d206      	bcs.n	800ae8c <__hexnan+0x64>
 800ae7e:	2d07      	cmp	r5, #7
 800ae80:	dc04      	bgt.n	800ae8c <__hexnan+0x64>
 800ae82:	462a      	mov	r2, r5
 800ae84:	4649      	mov	r1, r9
 800ae86:	4620      	mov	r0, r4
 800ae88:	f7ff ffa8 	bl	800addc <L_shift>
 800ae8c:	4544      	cmp	r4, r8
 800ae8e:	d950      	bls.n	800af32 <__hexnan+0x10a>
 800ae90:	2300      	movs	r3, #0
 800ae92:	f1a4 0904 	sub.w	r9, r4, #4
 800ae96:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae9a:	f8cd b008 	str.w	fp, [sp, #8]
 800ae9e:	464c      	mov	r4, r9
 800aea0:	461d      	mov	r5, r3
 800aea2:	9903      	ldr	r1, [sp, #12]
 800aea4:	e7d7      	b.n	800ae56 <__hexnan+0x2e>
 800aea6:	2a29      	cmp	r2, #41	; 0x29
 800aea8:	d156      	bne.n	800af58 <__hexnan+0x130>
 800aeaa:	3102      	adds	r1, #2
 800aeac:	f8ca 1000 	str.w	r1, [sl]
 800aeb0:	f1bb 0f00 	cmp.w	fp, #0
 800aeb4:	d050      	beq.n	800af58 <__hexnan+0x130>
 800aeb6:	454c      	cmp	r4, r9
 800aeb8:	d206      	bcs.n	800aec8 <__hexnan+0xa0>
 800aeba:	2d07      	cmp	r5, #7
 800aebc:	dc04      	bgt.n	800aec8 <__hexnan+0xa0>
 800aebe:	462a      	mov	r2, r5
 800aec0:	4649      	mov	r1, r9
 800aec2:	4620      	mov	r0, r4
 800aec4:	f7ff ff8a 	bl	800addc <L_shift>
 800aec8:	4544      	cmp	r4, r8
 800aeca:	d934      	bls.n	800af36 <__hexnan+0x10e>
 800aecc:	f1a8 0204 	sub.w	r2, r8, #4
 800aed0:	4623      	mov	r3, r4
 800aed2:	f853 1b04 	ldr.w	r1, [r3], #4
 800aed6:	f842 1f04 	str.w	r1, [r2, #4]!
 800aeda:	429f      	cmp	r7, r3
 800aedc:	d2f9      	bcs.n	800aed2 <__hexnan+0xaa>
 800aede:	1b3b      	subs	r3, r7, r4
 800aee0:	f023 0303 	bic.w	r3, r3, #3
 800aee4:	3304      	adds	r3, #4
 800aee6:	3401      	adds	r4, #1
 800aee8:	3e03      	subs	r6, #3
 800aeea:	42b4      	cmp	r4, r6
 800aeec:	bf88      	it	hi
 800aeee:	2304      	movhi	r3, #4
 800aef0:	4443      	add	r3, r8
 800aef2:	2200      	movs	r2, #0
 800aef4:	f843 2b04 	str.w	r2, [r3], #4
 800aef8:	429f      	cmp	r7, r3
 800aefa:	d2fb      	bcs.n	800aef4 <__hexnan+0xcc>
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	b91b      	cbnz	r3, 800af08 <__hexnan+0xe0>
 800af00:	4547      	cmp	r7, r8
 800af02:	d127      	bne.n	800af54 <__hexnan+0x12c>
 800af04:	2301      	movs	r3, #1
 800af06:	603b      	str	r3, [r7, #0]
 800af08:	2005      	movs	r0, #5
 800af0a:	e026      	b.n	800af5a <__hexnan+0x132>
 800af0c:	3501      	adds	r5, #1
 800af0e:	2d08      	cmp	r5, #8
 800af10:	f10b 0b01 	add.w	fp, fp, #1
 800af14:	dd06      	ble.n	800af24 <__hexnan+0xfc>
 800af16:	4544      	cmp	r4, r8
 800af18:	d9c3      	bls.n	800aea2 <__hexnan+0x7a>
 800af1a:	2300      	movs	r3, #0
 800af1c:	f844 3c04 	str.w	r3, [r4, #-4]
 800af20:	2501      	movs	r5, #1
 800af22:	3c04      	subs	r4, #4
 800af24:	6822      	ldr	r2, [r4, #0]
 800af26:	f000 000f 	and.w	r0, r0, #15
 800af2a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800af2e:	6022      	str	r2, [r4, #0]
 800af30:	e7b7      	b.n	800aea2 <__hexnan+0x7a>
 800af32:	2508      	movs	r5, #8
 800af34:	e7b5      	b.n	800aea2 <__hexnan+0x7a>
 800af36:	9b01      	ldr	r3, [sp, #4]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d0df      	beq.n	800aefc <__hexnan+0xd4>
 800af3c:	f04f 32ff 	mov.w	r2, #4294967295
 800af40:	f1c3 0320 	rsb	r3, r3, #32
 800af44:	fa22 f303 	lsr.w	r3, r2, r3
 800af48:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800af4c:	401a      	ands	r2, r3
 800af4e:	f846 2c04 	str.w	r2, [r6, #-4]
 800af52:	e7d3      	b.n	800aefc <__hexnan+0xd4>
 800af54:	3f04      	subs	r7, #4
 800af56:	e7d1      	b.n	800aefc <__hexnan+0xd4>
 800af58:	2004      	movs	r0, #4
 800af5a:	b007      	add	sp, #28
 800af5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800af60 <__ascii_mbtowc>:
 800af60:	b082      	sub	sp, #8
 800af62:	b901      	cbnz	r1, 800af66 <__ascii_mbtowc+0x6>
 800af64:	a901      	add	r1, sp, #4
 800af66:	b142      	cbz	r2, 800af7a <__ascii_mbtowc+0x1a>
 800af68:	b14b      	cbz	r3, 800af7e <__ascii_mbtowc+0x1e>
 800af6a:	7813      	ldrb	r3, [r2, #0]
 800af6c:	600b      	str	r3, [r1, #0]
 800af6e:	7812      	ldrb	r2, [r2, #0]
 800af70:	1e10      	subs	r0, r2, #0
 800af72:	bf18      	it	ne
 800af74:	2001      	movne	r0, #1
 800af76:	b002      	add	sp, #8
 800af78:	4770      	bx	lr
 800af7a:	4610      	mov	r0, r2
 800af7c:	e7fb      	b.n	800af76 <__ascii_mbtowc+0x16>
 800af7e:	f06f 0001 	mvn.w	r0, #1
 800af82:	e7f8      	b.n	800af76 <__ascii_mbtowc+0x16>

0800af84 <memcpy>:
 800af84:	440a      	add	r2, r1
 800af86:	4291      	cmp	r1, r2
 800af88:	f100 33ff 	add.w	r3, r0, #4294967295
 800af8c:	d100      	bne.n	800af90 <memcpy+0xc>
 800af8e:	4770      	bx	lr
 800af90:	b510      	push	{r4, lr}
 800af92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af9a:	4291      	cmp	r1, r2
 800af9c:	d1f9      	bne.n	800af92 <memcpy+0xe>
 800af9e:	bd10      	pop	{r4, pc}

0800afa0 <__malloc_lock>:
 800afa0:	4801      	ldr	r0, [pc, #4]	; (800afa8 <__malloc_lock+0x8>)
 800afa2:	f001 bbc5 	b.w	800c730 <__retarget_lock_acquire_recursive>
 800afa6:	bf00      	nop
 800afa8:	20000dd8 	.word	0x20000dd8

0800afac <__malloc_unlock>:
 800afac:	4801      	ldr	r0, [pc, #4]	; (800afb4 <__malloc_unlock+0x8>)
 800afae:	f001 bbc0 	b.w	800c732 <__retarget_lock_release_recursive>
 800afb2:	bf00      	nop
 800afb4:	20000dd8 	.word	0x20000dd8

0800afb8 <_Balloc>:
 800afb8:	b570      	push	{r4, r5, r6, lr}
 800afba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800afbc:	4604      	mov	r4, r0
 800afbe:	460d      	mov	r5, r1
 800afc0:	b976      	cbnz	r6, 800afe0 <_Balloc+0x28>
 800afc2:	2010      	movs	r0, #16
 800afc4:	f7fe fc0a 	bl	80097dc <malloc>
 800afc8:	4602      	mov	r2, r0
 800afca:	6260      	str	r0, [r4, #36]	; 0x24
 800afcc:	b920      	cbnz	r0, 800afd8 <_Balloc+0x20>
 800afce:	4b18      	ldr	r3, [pc, #96]	; (800b030 <_Balloc+0x78>)
 800afd0:	4818      	ldr	r0, [pc, #96]	; (800b034 <_Balloc+0x7c>)
 800afd2:	2166      	movs	r1, #102	; 0x66
 800afd4:	f7ff fc24 	bl	800a820 <__assert_func>
 800afd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afdc:	6006      	str	r6, [r0, #0]
 800afde:	60c6      	str	r6, [r0, #12]
 800afe0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800afe2:	68f3      	ldr	r3, [r6, #12]
 800afe4:	b183      	cbz	r3, 800b008 <_Balloc+0x50>
 800afe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afe8:	68db      	ldr	r3, [r3, #12]
 800afea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800afee:	b9b8      	cbnz	r0, 800b020 <_Balloc+0x68>
 800aff0:	2101      	movs	r1, #1
 800aff2:	fa01 f605 	lsl.w	r6, r1, r5
 800aff6:	1d72      	adds	r2, r6, #5
 800aff8:	0092      	lsls	r2, r2, #2
 800affa:	4620      	mov	r0, r4
 800affc:	f000 fc97 	bl	800b92e <_calloc_r>
 800b000:	b160      	cbz	r0, 800b01c <_Balloc+0x64>
 800b002:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b006:	e00e      	b.n	800b026 <_Balloc+0x6e>
 800b008:	2221      	movs	r2, #33	; 0x21
 800b00a:	2104      	movs	r1, #4
 800b00c:	4620      	mov	r0, r4
 800b00e:	f000 fc8e 	bl	800b92e <_calloc_r>
 800b012:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b014:	60f0      	str	r0, [r6, #12]
 800b016:	68db      	ldr	r3, [r3, #12]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d1e4      	bne.n	800afe6 <_Balloc+0x2e>
 800b01c:	2000      	movs	r0, #0
 800b01e:	bd70      	pop	{r4, r5, r6, pc}
 800b020:	6802      	ldr	r2, [r0, #0]
 800b022:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b026:	2300      	movs	r3, #0
 800b028:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b02c:	e7f7      	b.n	800b01e <_Balloc+0x66>
 800b02e:	bf00      	nop
 800b030:	0800ee60 	.word	0x0800ee60
 800b034:	0800f0a4 	.word	0x0800f0a4

0800b038 <_Bfree>:
 800b038:	b570      	push	{r4, r5, r6, lr}
 800b03a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b03c:	4605      	mov	r5, r0
 800b03e:	460c      	mov	r4, r1
 800b040:	b976      	cbnz	r6, 800b060 <_Bfree+0x28>
 800b042:	2010      	movs	r0, #16
 800b044:	f7fe fbca 	bl	80097dc <malloc>
 800b048:	4602      	mov	r2, r0
 800b04a:	6268      	str	r0, [r5, #36]	; 0x24
 800b04c:	b920      	cbnz	r0, 800b058 <_Bfree+0x20>
 800b04e:	4b09      	ldr	r3, [pc, #36]	; (800b074 <_Bfree+0x3c>)
 800b050:	4809      	ldr	r0, [pc, #36]	; (800b078 <_Bfree+0x40>)
 800b052:	218a      	movs	r1, #138	; 0x8a
 800b054:	f7ff fbe4 	bl	800a820 <__assert_func>
 800b058:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b05c:	6006      	str	r6, [r0, #0]
 800b05e:	60c6      	str	r6, [r0, #12]
 800b060:	b13c      	cbz	r4, 800b072 <_Bfree+0x3a>
 800b062:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b064:	6862      	ldr	r2, [r4, #4]
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b06c:	6021      	str	r1, [r4, #0]
 800b06e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b072:	bd70      	pop	{r4, r5, r6, pc}
 800b074:	0800ee60 	.word	0x0800ee60
 800b078:	0800f0a4 	.word	0x0800f0a4

0800b07c <__multadd>:
 800b07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b080:	690e      	ldr	r6, [r1, #16]
 800b082:	4607      	mov	r7, r0
 800b084:	4698      	mov	r8, r3
 800b086:	460c      	mov	r4, r1
 800b088:	f101 0014 	add.w	r0, r1, #20
 800b08c:	2300      	movs	r3, #0
 800b08e:	6805      	ldr	r5, [r0, #0]
 800b090:	b2a9      	uxth	r1, r5
 800b092:	fb02 8101 	mla	r1, r2, r1, r8
 800b096:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b09a:	0c2d      	lsrs	r5, r5, #16
 800b09c:	fb02 c505 	mla	r5, r2, r5, ip
 800b0a0:	b289      	uxth	r1, r1
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b0a8:	429e      	cmp	r6, r3
 800b0aa:	f840 1b04 	str.w	r1, [r0], #4
 800b0ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b0b2:	dcec      	bgt.n	800b08e <__multadd+0x12>
 800b0b4:	f1b8 0f00 	cmp.w	r8, #0
 800b0b8:	d022      	beq.n	800b100 <__multadd+0x84>
 800b0ba:	68a3      	ldr	r3, [r4, #8]
 800b0bc:	42b3      	cmp	r3, r6
 800b0be:	dc19      	bgt.n	800b0f4 <__multadd+0x78>
 800b0c0:	6861      	ldr	r1, [r4, #4]
 800b0c2:	4638      	mov	r0, r7
 800b0c4:	3101      	adds	r1, #1
 800b0c6:	f7ff ff77 	bl	800afb8 <_Balloc>
 800b0ca:	4605      	mov	r5, r0
 800b0cc:	b928      	cbnz	r0, 800b0da <__multadd+0x5e>
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	4b0d      	ldr	r3, [pc, #52]	; (800b108 <__multadd+0x8c>)
 800b0d2:	480e      	ldr	r0, [pc, #56]	; (800b10c <__multadd+0x90>)
 800b0d4:	21b5      	movs	r1, #181	; 0xb5
 800b0d6:	f7ff fba3 	bl	800a820 <__assert_func>
 800b0da:	6922      	ldr	r2, [r4, #16]
 800b0dc:	3202      	adds	r2, #2
 800b0de:	f104 010c 	add.w	r1, r4, #12
 800b0e2:	0092      	lsls	r2, r2, #2
 800b0e4:	300c      	adds	r0, #12
 800b0e6:	f7ff ff4d 	bl	800af84 <memcpy>
 800b0ea:	4621      	mov	r1, r4
 800b0ec:	4638      	mov	r0, r7
 800b0ee:	f7ff ffa3 	bl	800b038 <_Bfree>
 800b0f2:	462c      	mov	r4, r5
 800b0f4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b0f8:	3601      	adds	r6, #1
 800b0fa:	f8c3 8014 	str.w	r8, [r3, #20]
 800b0fe:	6126      	str	r6, [r4, #16]
 800b100:	4620      	mov	r0, r4
 800b102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b106:	bf00      	nop
 800b108:	0800f015 	.word	0x0800f015
 800b10c:	0800f0a4 	.word	0x0800f0a4

0800b110 <__s2b>:
 800b110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b114:	460c      	mov	r4, r1
 800b116:	4615      	mov	r5, r2
 800b118:	461f      	mov	r7, r3
 800b11a:	2209      	movs	r2, #9
 800b11c:	3308      	adds	r3, #8
 800b11e:	4606      	mov	r6, r0
 800b120:	fb93 f3f2 	sdiv	r3, r3, r2
 800b124:	2100      	movs	r1, #0
 800b126:	2201      	movs	r2, #1
 800b128:	429a      	cmp	r2, r3
 800b12a:	db09      	blt.n	800b140 <__s2b+0x30>
 800b12c:	4630      	mov	r0, r6
 800b12e:	f7ff ff43 	bl	800afb8 <_Balloc>
 800b132:	b940      	cbnz	r0, 800b146 <__s2b+0x36>
 800b134:	4602      	mov	r2, r0
 800b136:	4b19      	ldr	r3, [pc, #100]	; (800b19c <__s2b+0x8c>)
 800b138:	4819      	ldr	r0, [pc, #100]	; (800b1a0 <__s2b+0x90>)
 800b13a:	21ce      	movs	r1, #206	; 0xce
 800b13c:	f7ff fb70 	bl	800a820 <__assert_func>
 800b140:	0052      	lsls	r2, r2, #1
 800b142:	3101      	adds	r1, #1
 800b144:	e7f0      	b.n	800b128 <__s2b+0x18>
 800b146:	9b08      	ldr	r3, [sp, #32]
 800b148:	6143      	str	r3, [r0, #20]
 800b14a:	2d09      	cmp	r5, #9
 800b14c:	f04f 0301 	mov.w	r3, #1
 800b150:	6103      	str	r3, [r0, #16]
 800b152:	dd16      	ble.n	800b182 <__s2b+0x72>
 800b154:	f104 0909 	add.w	r9, r4, #9
 800b158:	46c8      	mov	r8, r9
 800b15a:	442c      	add	r4, r5
 800b15c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b160:	4601      	mov	r1, r0
 800b162:	3b30      	subs	r3, #48	; 0x30
 800b164:	220a      	movs	r2, #10
 800b166:	4630      	mov	r0, r6
 800b168:	f7ff ff88 	bl	800b07c <__multadd>
 800b16c:	45a0      	cmp	r8, r4
 800b16e:	d1f5      	bne.n	800b15c <__s2b+0x4c>
 800b170:	f1a5 0408 	sub.w	r4, r5, #8
 800b174:	444c      	add	r4, r9
 800b176:	1b2d      	subs	r5, r5, r4
 800b178:	1963      	adds	r3, r4, r5
 800b17a:	42bb      	cmp	r3, r7
 800b17c:	db04      	blt.n	800b188 <__s2b+0x78>
 800b17e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b182:	340a      	adds	r4, #10
 800b184:	2509      	movs	r5, #9
 800b186:	e7f6      	b.n	800b176 <__s2b+0x66>
 800b188:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b18c:	4601      	mov	r1, r0
 800b18e:	3b30      	subs	r3, #48	; 0x30
 800b190:	220a      	movs	r2, #10
 800b192:	4630      	mov	r0, r6
 800b194:	f7ff ff72 	bl	800b07c <__multadd>
 800b198:	e7ee      	b.n	800b178 <__s2b+0x68>
 800b19a:	bf00      	nop
 800b19c:	0800f015 	.word	0x0800f015
 800b1a0:	0800f0a4 	.word	0x0800f0a4

0800b1a4 <__hi0bits>:
 800b1a4:	0c03      	lsrs	r3, r0, #16
 800b1a6:	041b      	lsls	r3, r3, #16
 800b1a8:	b9d3      	cbnz	r3, 800b1e0 <__hi0bits+0x3c>
 800b1aa:	0400      	lsls	r0, r0, #16
 800b1ac:	2310      	movs	r3, #16
 800b1ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b1b2:	bf04      	itt	eq
 800b1b4:	0200      	lsleq	r0, r0, #8
 800b1b6:	3308      	addeq	r3, #8
 800b1b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b1bc:	bf04      	itt	eq
 800b1be:	0100      	lsleq	r0, r0, #4
 800b1c0:	3304      	addeq	r3, #4
 800b1c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b1c6:	bf04      	itt	eq
 800b1c8:	0080      	lsleq	r0, r0, #2
 800b1ca:	3302      	addeq	r3, #2
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	db05      	blt.n	800b1dc <__hi0bits+0x38>
 800b1d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b1d4:	f103 0301 	add.w	r3, r3, #1
 800b1d8:	bf08      	it	eq
 800b1da:	2320      	moveq	r3, #32
 800b1dc:	4618      	mov	r0, r3
 800b1de:	4770      	bx	lr
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	e7e4      	b.n	800b1ae <__hi0bits+0xa>

0800b1e4 <__lo0bits>:
 800b1e4:	6803      	ldr	r3, [r0, #0]
 800b1e6:	f013 0207 	ands.w	r2, r3, #7
 800b1ea:	4601      	mov	r1, r0
 800b1ec:	d00b      	beq.n	800b206 <__lo0bits+0x22>
 800b1ee:	07da      	lsls	r2, r3, #31
 800b1f0:	d424      	bmi.n	800b23c <__lo0bits+0x58>
 800b1f2:	0798      	lsls	r0, r3, #30
 800b1f4:	bf49      	itett	mi
 800b1f6:	085b      	lsrmi	r3, r3, #1
 800b1f8:	089b      	lsrpl	r3, r3, #2
 800b1fa:	2001      	movmi	r0, #1
 800b1fc:	600b      	strmi	r3, [r1, #0]
 800b1fe:	bf5c      	itt	pl
 800b200:	600b      	strpl	r3, [r1, #0]
 800b202:	2002      	movpl	r0, #2
 800b204:	4770      	bx	lr
 800b206:	b298      	uxth	r0, r3
 800b208:	b9b0      	cbnz	r0, 800b238 <__lo0bits+0x54>
 800b20a:	0c1b      	lsrs	r3, r3, #16
 800b20c:	2010      	movs	r0, #16
 800b20e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b212:	bf04      	itt	eq
 800b214:	0a1b      	lsreq	r3, r3, #8
 800b216:	3008      	addeq	r0, #8
 800b218:	071a      	lsls	r2, r3, #28
 800b21a:	bf04      	itt	eq
 800b21c:	091b      	lsreq	r3, r3, #4
 800b21e:	3004      	addeq	r0, #4
 800b220:	079a      	lsls	r2, r3, #30
 800b222:	bf04      	itt	eq
 800b224:	089b      	lsreq	r3, r3, #2
 800b226:	3002      	addeq	r0, #2
 800b228:	07da      	lsls	r2, r3, #31
 800b22a:	d403      	bmi.n	800b234 <__lo0bits+0x50>
 800b22c:	085b      	lsrs	r3, r3, #1
 800b22e:	f100 0001 	add.w	r0, r0, #1
 800b232:	d005      	beq.n	800b240 <__lo0bits+0x5c>
 800b234:	600b      	str	r3, [r1, #0]
 800b236:	4770      	bx	lr
 800b238:	4610      	mov	r0, r2
 800b23a:	e7e8      	b.n	800b20e <__lo0bits+0x2a>
 800b23c:	2000      	movs	r0, #0
 800b23e:	4770      	bx	lr
 800b240:	2020      	movs	r0, #32
 800b242:	4770      	bx	lr

0800b244 <__i2b>:
 800b244:	b510      	push	{r4, lr}
 800b246:	460c      	mov	r4, r1
 800b248:	2101      	movs	r1, #1
 800b24a:	f7ff feb5 	bl	800afb8 <_Balloc>
 800b24e:	4602      	mov	r2, r0
 800b250:	b928      	cbnz	r0, 800b25e <__i2b+0x1a>
 800b252:	4b05      	ldr	r3, [pc, #20]	; (800b268 <__i2b+0x24>)
 800b254:	4805      	ldr	r0, [pc, #20]	; (800b26c <__i2b+0x28>)
 800b256:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b25a:	f7ff fae1 	bl	800a820 <__assert_func>
 800b25e:	2301      	movs	r3, #1
 800b260:	6144      	str	r4, [r0, #20]
 800b262:	6103      	str	r3, [r0, #16]
 800b264:	bd10      	pop	{r4, pc}
 800b266:	bf00      	nop
 800b268:	0800f015 	.word	0x0800f015
 800b26c:	0800f0a4 	.word	0x0800f0a4

0800b270 <__multiply>:
 800b270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b274:	4614      	mov	r4, r2
 800b276:	690a      	ldr	r2, [r1, #16]
 800b278:	6923      	ldr	r3, [r4, #16]
 800b27a:	429a      	cmp	r2, r3
 800b27c:	bfb8      	it	lt
 800b27e:	460b      	movlt	r3, r1
 800b280:	460d      	mov	r5, r1
 800b282:	bfbc      	itt	lt
 800b284:	4625      	movlt	r5, r4
 800b286:	461c      	movlt	r4, r3
 800b288:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b28c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b290:	68ab      	ldr	r3, [r5, #8]
 800b292:	6869      	ldr	r1, [r5, #4]
 800b294:	eb0a 0709 	add.w	r7, sl, r9
 800b298:	42bb      	cmp	r3, r7
 800b29a:	b085      	sub	sp, #20
 800b29c:	bfb8      	it	lt
 800b29e:	3101      	addlt	r1, #1
 800b2a0:	f7ff fe8a 	bl	800afb8 <_Balloc>
 800b2a4:	b930      	cbnz	r0, 800b2b4 <__multiply+0x44>
 800b2a6:	4602      	mov	r2, r0
 800b2a8:	4b42      	ldr	r3, [pc, #264]	; (800b3b4 <__multiply+0x144>)
 800b2aa:	4843      	ldr	r0, [pc, #268]	; (800b3b8 <__multiply+0x148>)
 800b2ac:	f240 115d 	movw	r1, #349	; 0x15d
 800b2b0:	f7ff fab6 	bl	800a820 <__assert_func>
 800b2b4:	f100 0614 	add.w	r6, r0, #20
 800b2b8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b2bc:	4633      	mov	r3, r6
 800b2be:	2200      	movs	r2, #0
 800b2c0:	4543      	cmp	r3, r8
 800b2c2:	d31e      	bcc.n	800b302 <__multiply+0x92>
 800b2c4:	f105 0c14 	add.w	ip, r5, #20
 800b2c8:	f104 0314 	add.w	r3, r4, #20
 800b2cc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b2d0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b2d4:	9202      	str	r2, [sp, #8]
 800b2d6:	ebac 0205 	sub.w	r2, ip, r5
 800b2da:	3a15      	subs	r2, #21
 800b2dc:	f022 0203 	bic.w	r2, r2, #3
 800b2e0:	3204      	adds	r2, #4
 800b2e2:	f105 0115 	add.w	r1, r5, #21
 800b2e6:	458c      	cmp	ip, r1
 800b2e8:	bf38      	it	cc
 800b2ea:	2204      	movcc	r2, #4
 800b2ec:	9201      	str	r2, [sp, #4]
 800b2ee:	9a02      	ldr	r2, [sp, #8]
 800b2f0:	9303      	str	r3, [sp, #12]
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d808      	bhi.n	800b308 <__multiply+0x98>
 800b2f6:	2f00      	cmp	r7, #0
 800b2f8:	dc55      	bgt.n	800b3a6 <__multiply+0x136>
 800b2fa:	6107      	str	r7, [r0, #16]
 800b2fc:	b005      	add	sp, #20
 800b2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b302:	f843 2b04 	str.w	r2, [r3], #4
 800b306:	e7db      	b.n	800b2c0 <__multiply+0x50>
 800b308:	f8b3 a000 	ldrh.w	sl, [r3]
 800b30c:	f1ba 0f00 	cmp.w	sl, #0
 800b310:	d020      	beq.n	800b354 <__multiply+0xe4>
 800b312:	f105 0e14 	add.w	lr, r5, #20
 800b316:	46b1      	mov	r9, r6
 800b318:	2200      	movs	r2, #0
 800b31a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b31e:	f8d9 b000 	ldr.w	fp, [r9]
 800b322:	b2a1      	uxth	r1, r4
 800b324:	fa1f fb8b 	uxth.w	fp, fp
 800b328:	fb0a b101 	mla	r1, sl, r1, fp
 800b32c:	4411      	add	r1, r2
 800b32e:	f8d9 2000 	ldr.w	r2, [r9]
 800b332:	0c24      	lsrs	r4, r4, #16
 800b334:	0c12      	lsrs	r2, r2, #16
 800b336:	fb0a 2404 	mla	r4, sl, r4, r2
 800b33a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b33e:	b289      	uxth	r1, r1
 800b340:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b344:	45f4      	cmp	ip, lr
 800b346:	f849 1b04 	str.w	r1, [r9], #4
 800b34a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b34e:	d8e4      	bhi.n	800b31a <__multiply+0xaa>
 800b350:	9901      	ldr	r1, [sp, #4]
 800b352:	5072      	str	r2, [r6, r1]
 800b354:	9a03      	ldr	r2, [sp, #12]
 800b356:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b35a:	3304      	adds	r3, #4
 800b35c:	f1b9 0f00 	cmp.w	r9, #0
 800b360:	d01f      	beq.n	800b3a2 <__multiply+0x132>
 800b362:	6834      	ldr	r4, [r6, #0]
 800b364:	f105 0114 	add.w	r1, r5, #20
 800b368:	46b6      	mov	lr, r6
 800b36a:	f04f 0a00 	mov.w	sl, #0
 800b36e:	880a      	ldrh	r2, [r1, #0]
 800b370:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b374:	fb09 b202 	mla	r2, r9, r2, fp
 800b378:	4492      	add	sl, r2
 800b37a:	b2a4      	uxth	r4, r4
 800b37c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b380:	f84e 4b04 	str.w	r4, [lr], #4
 800b384:	f851 4b04 	ldr.w	r4, [r1], #4
 800b388:	f8be 2000 	ldrh.w	r2, [lr]
 800b38c:	0c24      	lsrs	r4, r4, #16
 800b38e:	fb09 2404 	mla	r4, r9, r4, r2
 800b392:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b396:	458c      	cmp	ip, r1
 800b398:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b39c:	d8e7      	bhi.n	800b36e <__multiply+0xfe>
 800b39e:	9a01      	ldr	r2, [sp, #4]
 800b3a0:	50b4      	str	r4, [r6, r2]
 800b3a2:	3604      	adds	r6, #4
 800b3a4:	e7a3      	b.n	800b2ee <__multiply+0x7e>
 800b3a6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d1a5      	bne.n	800b2fa <__multiply+0x8a>
 800b3ae:	3f01      	subs	r7, #1
 800b3b0:	e7a1      	b.n	800b2f6 <__multiply+0x86>
 800b3b2:	bf00      	nop
 800b3b4:	0800f015 	.word	0x0800f015
 800b3b8:	0800f0a4 	.word	0x0800f0a4

0800b3bc <__pow5mult>:
 800b3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3c0:	4615      	mov	r5, r2
 800b3c2:	f012 0203 	ands.w	r2, r2, #3
 800b3c6:	4606      	mov	r6, r0
 800b3c8:	460f      	mov	r7, r1
 800b3ca:	d007      	beq.n	800b3dc <__pow5mult+0x20>
 800b3cc:	4c25      	ldr	r4, [pc, #148]	; (800b464 <__pow5mult+0xa8>)
 800b3ce:	3a01      	subs	r2, #1
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b3d6:	f7ff fe51 	bl	800b07c <__multadd>
 800b3da:	4607      	mov	r7, r0
 800b3dc:	10ad      	asrs	r5, r5, #2
 800b3de:	d03d      	beq.n	800b45c <__pow5mult+0xa0>
 800b3e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b3e2:	b97c      	cbnz	r4, 800b404 <__pow5mult+0x48>
 800b3e4:	2010      	movs	r0, #16
 800b3e6:	f7fe f9f9 	bl	80097dc <malloc>
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	6270      	str	r0, [r6, #36]	; 0x24
 800b3ee:	b928      	cbnz	r0, 800b3fc <__pow5mult+0x40>
 800b3f0:	4b1d      	ldr	r3, [pc, #116]	; (800b468 <__pow5mult+0xac>)
 800b3f2:	481e      	ldr	r0, [pc, #120]	; (800b46c <__pow5mult+0xb0>)
 800b3f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b3f8:	f7ff fa12 	bl	800a820 <__assert_func>
 800b3fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b400:	6004      	str	r4, [r0, #0]
 800b402:	60c4      	str	r4, [r0, #12]
 800b404:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b408:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b40c:	b94c      	cbnz	r4, 800b422 <__pow5mult+0x66>
 800b40e:	f240 2171 	movw	r1, #625	; 0x271
 800b412:	4630      	mov	r0, r6
 800b414:	f7ff ff16 	bl	800b244 <__i2b>
 800b418:	2300      	movs	r3, #0
 800b41a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b41e:	4604      	mov	r4, r0
 800b420:	6003      	str	r3, [r0, #0]
 800b422:	f04f 0900 	mov.w	r9, #0
 800b426:	07eb      	lsls	r3, r5, #31
 800b428:	d50a      	bpl.n	800b440 <__pow5mult+0x84>
 800b42a:	4639      	mov	r1, r7
 800b42c:	4622      	mov	r2, r4
 800b42e:	4630      	mov	r0, r6
 800b430:	f7ff ff1e 	bl	800b270 <__multiply>
 800b434:	4639      	mov	r1, r7
 800b436:	4680      	mov	r8, r0
 800b438:	4630      	mov	r0, r6
 800b43a:	f7ff fdfd 	bl	800b038 <_Bfree>
 800b43e:	4647      	mov	r7, r8
 800b440:	106d      	asrs	r5, r5, #1
 800b442:	d00b      	beq.n	800b45c <__pow5mult+0xa0>
 800b444:	6820      	ldr	r0, [r4, #0]
 800b446:	b938      	cbnz	r0, 800b458 <__pow5mult+0x9c>
 800b448:	4622      	mov	r2, r4
 800b44a:	4621      	mov	r1, r4
 800b44c:	4630      	mov	r0, r6
 800b44e:	f7ff ff0f 	bl	800b270 <__multiply>
 800b452:	6020      	str	r0, [r4, #0]
 800b454:	f8c0 9000 	str.w	r9, [r0]
 800b458:	4604      	mov	r4, r0
 800b45a:	e7e4      	b.n	800b426 <__pow5mult+0x6a>
 800b45c:	4638      	mov	r0, r7
 800b45e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b462:	bf00      	nop
 800b464:	0800f1f8 	.word	0x0800f1f8
 800b468:	0800ee60 	.word	0x0800ee60
 800b46c:	0800f0a4 	.word	0x0800f0a4

0800b470 <__lshift>:
 800b470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b474:	460c      	mov	r4, r1
 800b476:	6849      	ldr	r1, [r1, #4]
 800b478:	6923      	ldr	r3, [r4, #16]
 800b47a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b47e:	68a3      	ldr	r3, [r4, #8]
 800b480:	4607      	mov	r7, r0
 800b482:	4691      	mov	r9, r2
 800b484:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b488:	f108 0601 	add.w	r6, r8, #1
 800b48c:	42b3      	cmp	r3, r6
 800b48e:	db0b      	blt.n	800b4a8 <__lshift+0x38>
 800b490:	4638      	mov	r0, r7
 800b492:	f7ff fd91 	bl	800afb8 <_Balloc>
 800b496:	4605      	mov	r5, r0
 800b498:	b948      	cbnz	r0, 800b4ae <__lshift+0x3e>
 800b49a:	4602      	mov	r2, r0
 800b49c:	4b28      	ldr	r3, [pc, #160]	; (800b540 <__lshift+0xd0>)
 800b49e:	4829      	ldr	r0, [pc, #164]	; (800b544 <__lshift+0xd4>)
 800b4a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b4a4:	f7ff f9bc 	bl	800a820 <__assert_func>
 800b4a8:	3101      	adds	r1, #1
 800b4aa:	005b      	lsls	r3, r3, #1
 800b4ac:	e7ee      	b.n	800b48c <__lshift+0x1c>
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	f100 0114 	add.w	r1, r0, #20
 800b4b4:	f100 0210 	add.w	r2, r0, #16
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	4553      	cmp	r3, sl
 800b4bc:	db33      	blt.n	800b526 <__lshift+0xb6>
 800b4be:	6920      	ldr	r0, [r4, #16]
 800b4c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b4c4:	f104 0314 	add.w	r3, r4, #20
 800b4c8:	f019 091f 	ands.w	r9, r9, #31
 800b4cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b4d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b4d4:	d02b      	beq.n	800b52e <__lshift+0xbe>
 800b4d6:	f1c9 0e20 	rsb	lr, r9, #32
 800b4da:	468a      	mov	sl, r1
 800b4dc:	2200      	movs	r2, #0
 800b4de:	6818      	ldr	r0, [r3, #0]
 800b4e0:	fa00 f009 	lsl.w	r0, r0, r9
 800b4e4:	4302      	orrs	r2, r0
 800b4e6:	f84a 2b04 	str.w	r2, [sl], #4
 800b4ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4ee:	459c      	cmp	ip, r3
 800b4f0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b4f4:	d8f3      	bhi.n	800b4de <__lshift+0x6e>
 800b4f6:	ebac 0304 	sub.w	r3, ip, r4
 800b4fa:	3b15      	subs	r3, #21
 800b4fc:	f023 0303 	bic.w	r3, r3, #3
 800b500:	3304      	adds	r3, #4
 800b502:	f104 0015 	add.w	r0, r4, #21
 800b506:	4584      	cmp	ip, r0
 800b508:	bf38      	it	cc
 800b50a:	2304      	movcc	r3, #4
 800b50c:	50ca      	str	r2, [r1, r3]
 800b50e:	b10a      	cbz	r2, 800b514 <__lshift+0xa4>
 800b510:	f108 0602 	add.w	r6, r8, #2
 800b514:	3e01      	subs	r6, #1
 800b516:	4638      	mov	r0, r7
 800b518:	612e      	str	r6, [r5, #16]
 800b51a:	4621      	mov	r1, r4
 800b51c:	f7ff fd8c 	bl	800b038 <_Bfree>
 800b520:	4628      	mov	r0, r5
 800b522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b526:	f842 0f04 	str.w	r0, [r2, #4]!
 800b52a:	3301      	adds	r3, #1
 800b52c:	e7c5      	b.n	800b4ba <__lshift+0x4a>
 800b52e:	3904      	subs	r1, #4
 800b530:	f853 2b04 	ldr.w	r2, [r3], #4
 800b534:	f841 2f04 	str.w	r2, [r1, #4]!
 800b538:	459c      	cmp	ip, r3
 800b53a:	d8f9      	bhi.n	800b530 <__lshift+0xc0>
 800b53c:	e7ea      	b.n	800b514 <__lshift+0xa4>
 800b53e:	bf00      	nop
 800b540:	0800f015 	.word	0x0800f015
 800b544:	0800f0a4 	.word	0x0800f0a4

0800b548 <__mcmp>:
 800b548:	b530      	push	{r4, r5, lr}
 800b54a:	6902      	ldr	r2, [r0, #16]
 800b54c:	690c      	ldr	r4, [r1, #16]
 800b54e:	1b12      	subs	r2, r2, r4
 800b550:	d10e      	bne.n	800b570 <__mcmp+0x28>
 800b552:	f100 0314 	add.w	r3, r0, #20
 800b556:	3114      	adds	r1, #20
 800b558:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b55c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b560:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b564:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b568:	42a5      	cmp	r5, r4
 800b56a:	d003      	beq.n	800b574 <__mcmp+0x2c>
 800b56c:	d305      	bcc.n	800b57a <__mcmp+0x32>
 800b56e:	2201      	movs	r2, #1
 800b570:	4610      	mov	r0, r2
 800b572:	bd30      	pop	{r4, r5, pc}
 800b574:	4283      	cmp	r3, r0
 800b576:	d3f3      	bcc.n	800b560 <__mcmp+0x18>
 800b578:	e7fa      	b.n	800b570 <__mcmp+0x28>
 800b57a:	f04f 32ff 	mov.w	r2, #4294967295
 800b57e:	e7f7      	b.n	800b570 <__mcmp+0x28>

0800b580 <__mdiff>:
 800b580:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b584:	460c      	mov	r4, r1
 800b586:	4606      	mov	r6, r0
 800b588:	4611      	mov	r1, r2
 800b58a:	4620      	mov	r0, r4
 800b58c:	4617      	mov	r7, r2
 800b58e:	f7ff ffdb 	bl	800b548 <__mcmp>
 800b592:	1e05      	subs	r5, r0, #0
 800b594:	d110      	bne.n	800b5b8 <__mdiff+0x38>
 800b596:	4629      	mov	r1, r5
 800b598:	4630      	mov	r0, r6
 800b59a:	f7ff fd0d 	bl	800afb8 <_Balloc>
 800b59e:	b930      	cbnz	r0, 800b5ae <__mdiff+0x2e>
 800b5a0:	4b39      	ldr	r3, [pc, #228]	; (800b688 <__mdiff+0x108>)
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	f240 2132 	movw	r1, #562	; 0x232
 800b5a8:	4838      	ldr	r0, [pc, #224]	; (800b68c <__mdiff+0x10c>)
 800b5aa:	f7ff f939 	bl	800a820 <__assert_func>
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b5b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5b8:	bfa4      	itt	ge
 800b5ba:	463b      	movge	r3, r7
 800b5bc:	4627      	movge	r7, r4
 800b5be:	4630      	mov	r0, r6
 800b5c0:	6879      	ldr	r1, [r7, #4]
 800b5c2:	bfa6      	itte	ge
 800b5c4:	461c      	movge	r4, r3
 800b5c6:	2500      	movge	r5, #0
 800b5c8:	2501      	movlt	r5, #1
 800b5ca:	f7ff fcf5 	bl	800afb8 <_Balloc>
 800b5ce:	b920      	cbnz	r0, 800b5da <__mdiff+0x5a>
 800b5d0:	4b2d      	ldr	r3, [pc, #180]	; (800b688 <__mdiff+0x108>)
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b5d8:	e7e6      	b.n	800b5a8 <__mdiff+0x28>
 800b5da:	693e      	ldr	r6, [r7, #16]
 800b5dc:	60c5      	str	r5, [r0, #12]
 800b5de:	6925      	ldr	r5, [r4, #16]
 800b5e0:	f107 0114 	add.w	r1, r7, #20
 800b5e4:	f104 0914 	add.w	r9, r4, #20
 800b5e8:	f100 0e14 	add.w	lr, r0, #20
 800b5ec:	f107 0210 	add.w	r2, r7, #16
 800b5f0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b5f4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b5f8:	46f2      	mov	sl, lr
 800b5fa:	2700      	movs	r7, #0
 800b5fc:	f859 3b04 	ldr.w	r3, [r9], #4
 800b600:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b604:	fa1f f883 	uxth.w	r8, r3
 800b608:	fa17 f78b 	uxtah	r7, r7, fp
 800b60c:	0c1b      	lsrs	r3, r3, #16
 800b60e:	eba7 0808 	sub.w	r8, r7, r8
 800b612:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b616:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b61a:	fa1f f888 	uxth.w	r8, r8
 800b61e:	141f      	asrs	r7, r3, #16
 800b620:	454d      	cmp	r5, r9
 800b622:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b626:	f84a 3b04 	str.w	r3, [sl], #4
 800b62a:	d8e7      	bhi.n	800b5fc <__mdiff+0x7c>
 800b62c:	1b2b      	subs	r3, r5, r4
 800b62e:	3b15      	subs	r3, #21
 800b630:	f023 0303 	bic.w	r3, r3, #3
 800b634:	3304      	adds	r3, #4
 800b636:	3415      	adds	r4, #21
 800b638:	42a5      	cmp	r5, r4
 800b63a:	bf38      	it	cc
 800b63c:	2304      	movcc	r3, #4
 800b63e:	4419      	add	r1, r3
 800b640:	4473      	add	r3, lr
 800b642:	469e      	mov	lr, r3
 800b644:	460d      	mov	r5, r1
 800b646:	4565      	cmp	r5, ip
 800b648:	d30e      	bcc.n	800b668 <__mdiff+0xe8>
 800b64a:	f10c 0203 	add.w	r2, ip, #3
 800b64e:	1a52      	subs	r2, r2, r1
 800b650:	f022 0203 	bic.w	r2, r2, #3
 800b654:	3903      	subs	r1, #3
 800b656:	458c      	cmp	ip, r1
 800b658:	bf38      	it	cc
 800b65a:	2200      	movcc	r2, #0
 800b65c:	441a      	add	r2, r3
 800b65e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b662:	b17b      	cbz	r3, 800b684 <__mdiff+0x104>
 800b664:	6106      	str	r6, [r0, #16]
 800b666:	e7a5      	b.n	800b5b4 <__mdiff+0x34>
 800b668:	f855 8b04 	ldr.w	r8, [r5], #4
 800b66c:	fa17 f488 	uxtah	r4, r7, r8
 800b670:	1422      	asrs	r2, r4, #16
 800b672:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b676:	b2a4      	uxth	r4, r4
 800b678:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b67c:	f84e 4b04 	str.w	r4, [lr], #4
 800b680:	1417      	asrs	r7, r2, #16
 800b682:	e7e0      	b.n	800b646 <__mdiff+0xc6>
 800b684:	3e01      	subs	r6, #1
 800b686:	e7ea      	b.n	800b65e <__mdiff+0xde>
 800b688:	0800f015 	.word	0x0800f015
 800b68c:	0800f0a4 	.word	0x0800f0a4

0800b690 <__ulp>:
 800b690:	b082      	sub	sp, #8
 800b692:	ed8d 0b00 	vstr	d0, [sp]
 800b696:	9b01      	ldr	r3, [sp, #4]
 800b698:	4912      	ldr	r1, [pc, #72]	; (800b6e4 <__ulp+0x54>)
 800b69a:	4019      	ands	r1, r3
 800b69c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b6a0:	2900      	cmp	r1, #0
 800b6a2:	dd05      	ble.n	800b6b0 <__ulp+0x20>
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	460b      	mov	r3, r1
 800b6a8:	ec43 2b10 	vmov	d0, r2, r3
 800b6ac:	b002      	add	sp, #8
 800b6ae:	4770      	bx	lr
 800b6b0:	4249      	negs	r1, r1
 800b6b2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b6b6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b6ba:	f04f 0200 	mov.w	r2, #0
 800b6be:	f04f 0300 	mov.w	r3, #0
 800b6c2:	da04      	bge.n	800b6ce <__ulp+0x3e>
 800b6c4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b6c8:	fa41 f300 	asr.w	r3, r1, r0
 800b6cc:	e7ec      	b.n	800b6a8 <__ulp+0x18>
 800b6ce:	f1a0 0114 	sub.w	r1, r0, #20
 800b6d2:	291e      	cmp	r1, #30
 800b6d4:	bfda      	itte	le
 800b6d6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b6da:	fa20 f101 	lsrle.w	r1, r0, r1
 800b6de:	2101      	movgt	r1, #1
 800b6e0:	460a      	mov	r2, r1
 800b6e2:	e7e1      	b.n	800b6a8 <__ulp+0x18>
 800b6e4:	7ff00000 	.word	0x7ff00000

0800b6e8 <__b2d>:
 800b6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ea:	6905      	ldr	r5, [r0, #16]
 800b6ec:	f100 0714 	add.w	r7, r0, #20
 800b6f0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b6f4:	1f2e      	subs	r6, r5, #4
 800b6f6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	f7ff fd52 	bl	800b1a4 <__hi0bits>
 800b700:	f1c0 0320 	rsb	r3, r0, #32
 800b704:	280a      	cmp	r0, #10
 800b706:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b784 <__b2d+0x9c>
 800b70a:	600b      	str	r3, [r1, #0]
 800b70c:	dc14      	bgt.n	800b738 <__b2d+0x50>
 800b70e:	f1c0 0e0b 	rsb	lr, r0, #11
 800b712:	fa24 f10e 	lsr.w	r1, r4, lr
 800b716:	42b7      	cmp	r7, r6
 800b718:	ea41 030c 	orr.w	r3, r1, ip
 800b71c:	bf34      	ite	cc
 800b71e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b722:	2100      	movcs	r1, #0
 800b724:	3015      	adds	r0, #21
 800b726:	fa04 f000 	lsl.w	r0, r4, r0
 800b72a:	fa21 f10e 	lsr.w	r1, r1, lr
 800b72e:	ea40 0201 	orr.w	r2, r0, r1
 800b732:	ec43 2b10 	vmov	d0, r2, r3
 800b736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b738:	42b7      	cmp	r7, r6
 800b73a:	bf3a      	itte	cc
 800b73c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b740:	f1a5 0608 	subcc.w	r6, r5, #8
 800b744:	2100      	movcs	r1, #0
 800b746:	380b      	subs	r0, #11
 800b748:	d017      	beq.n	800b77a <__b2d+0x92>
 800b74a:	f1c0 0c20 	rsb	ip, r0, #32
 800b74e:	fa04 f500 	lsl.w	r5, r4, r0
 800b752:	42be      	cmp	r6, r7
 800b754:	fa21 f40c 	lsr.w	r4, r1, ip
 800b758:	ea45 0504 	orr.w	r5, r5, r4
 800b75c:	bf8c      	ite	hi
 800b75e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b762:	2400      	movls	r4, #0
 800b764:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b768:	fa01 f000 	lsl.w	r0, r1, r0
 800b76c:	fa24 f40c 	lsr.w	r4, r4, ip
 800b770:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b774:	ea40 0204 	orr.w	r2, r0, r4
 800b778:	e7db      	b.n	800b732 <__b2d+0x4a>
 800b77a:	ea44 030c 	orr.w	r3, r4, ip
 800b77e:	460a      	mov	r2, r1
 800b780:	e7d7      	b.n	800b732 <__b2d+0x4a>
 800b782:	bf00      	nop
 800b784:	3ff00000 	.word	0x3ff00000

0800b788 <__d2b>:
 800b788:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b78c:	4689      	mov	r9, r1
 800b78e:	2101      	movs	r1, #1
 800b790:	ec57 6b10 	vmov	r6, r7, d0
 800b794:	4690      	mov	r8, r2
 800b796:	f7ff fc0f 	bl	800afb8 <_Balloc>
 800b79a:	4604      	mov	r4, r0
 800b79c:	b930      	cbnz	r0, 800b7ac <__d2b+0x24>
 800b79e:	4602      	mov	r2, r0
 800b7a0:	4b25      	ldr	r3, [pc, #148]	; (800b838 <__d2b+0xb0>)
 800b7a2:	4826      	ldr	r0, [pc, #152]	; (800b83c <__d2b+0xb4>)
 800b7a4:	f240 310a 	movw	r1, #778	; 0x30a
 800b7a8:	f7ff f83a 	bl	800a820 <__assert_func>
 800b7ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b7b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b7b4:	bb35      	cbnz	r5, 800b804 <__d2b+0x7c>
 800b7b6:	2e00      	cmp	r6, #0
 800b7b8:	9301      	str	r3, [sp, #4]
 800b7ba:	d028      	beq.n	800b80e <__d2b+0x86>
 800b7bc:	4668      	mov	r0, sp
 800b7be:	9600      	str	r6, [sp, #0]
 800b7c0:	f7ff fd10 	bl	800b1e4 <__lo0bits>
 800b7c4:	9900      	ldr	r1, [sp, #0]
 800b7c6:	b300      	cbz	r0, 800b80a <__d2b+0x82>
 800b7c8:	9a01      	ldr	r2, [sp, #4]
 800b7ca:	f1c0 0320 	rsb	r3, r0, #32
 800b7ce:	fa02 f303 	lsl.w	r3, r2, r3
 800b7d2:	430b      	orrs	r3, r1
 800b7d4:	40c2      	lsrs	r2, r0
 800b7d6:	6163      	str	r3, [r4, #20]
 800b7d8:	9201      	str	r2, [sp, #4]
 800b7da:	9b01      	ldr	r3, [sp, #4]
 800b7dc:	61a3      	str	r3, [r4, #24]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	bf14      	ite	ne
 800b7e2:	2202      	movne	r2, #2
 800b7e4:	2201      	moveq	r2, #1
 800b7e6:	6122      	str	r2, [r4, #16]
 800b7e8:	b1d5      	cbz	r5, 800b820 <__d2b+0x98>
 800b7ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b7ee:	4405      	add	r5, r0
 800b7f0:	f8c9 5000 	str.w	r5, [r9]
 800b7f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b7f8:	f8c8 0000 	str.w	r0, [r8]
 800b7fc:	4620      	mov	r0, r4
 800b7fe:	b003      	add	sp, #12
 800b800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b804:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b808:	e7d5      	b.n	800b7b6 <__d2b+0x2e>
 800b80a:	6161      	str	r1, [r4, #20]
 800b80c:	e7e5      	b.n	800b7da <__d2b+0x52>
 800b80e:	a801      	add	r0, sp, #4
 800b810:	f7ff fce8 	bl	800b1e4 <__lo0bits>
 800b814:	9b01      	ldr	r3, [sp, #4]
 800b816:	6163      	str	r3, [r4, #20]
 800b818:	2201      	movs	r2, #1
 800b81a:	6122      	str	r2, [r4, #16]
 800b81c:	3020      	adds	r0, #32
 800b81e:	e7e3      	b.n	800b7e8 <__d2b+0x60>
 800b820:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b824:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b828:	f8c9 0000 	str.w	r0, [r9]
 800b82c:	6918      	ldr	r0, [r3, #16]
 800b82e:	f7ff fcb9 	bl	800b1a4 <__hi0bits>
 800b832:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b836:	e7df      	b.n	800b7f8 <__d2b+0x70>
 800b838:	0800f015 	.word	0x0800f015
 800b83c:	0800f0a4 	.word	0x0800f0a4

0800b840 <__ratio>:
 800b840:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b844:	4688      	mov	r8, r1
 800b846:	4669      	mov	r1, sp
 800b848:	4681      	mov	r9, r0
 800b84a:	f7ff ff4d 	bl	800b6e8 <__b2d>
 800b84e:	a901      	add	r1, sp, #4
 800b850:	4640      	mov	r0, r8
 800b852:	ec55 4b10 	vmov	r4, r5, d0
 800b856:	f7ff ff47 	bl	800b6e8 <__b2d>
 800b85a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b85e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b862:	eba3 0c02 	sub.w	ip, r3, r2
 800b866:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b86a:	1a9b      	subs	r3, r3, r2
 800b86c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b870:	ec51 0b10 	vmov	r0, r1, d0
 800b874:	2b00      	cmp	r3, #0
 800b876:	bfd6      	itet	le
 800b878:	460a      	movle	r2, r1
 800b87a:	462a      	movgt	r2, r5
 800b87c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b880:	468b      	mov	fp, r1
 800b882:	462f      	mov	r7, r5
 800b884:	bfd4      	ite	le
 800b886:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b88a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b88e:	4620      	mov	r0, r4
 800b890:	ee10 2a10 	vmov	r2, s0
 800b894:	465b      	mov	r3, fp
 800b896:	4639      	mov	r1, r7
 800b898:	f7f4 ffd8 	bl	800084c <__aeabi_ddiv>
 800b89c:	ec41 0b10 	vmov	d0, r0, r1
 800b8a0:	b003      	add	sp, #12
 800b8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b8a6 <__copybits>:
 800b8a6:	3901      	subs	r1, #1
 800b8a8:	b570      	push	{r4, r5, r6, lr}
 800b8aa:	1149      	asrs	r1, r1, #5
 800b8ac:	6914      	ldr	r4, [r2, #16]
 800b8ae:	3101      	adds	r1, #1
 800b8b0:	f102 0314 	add.w	r3, r2, #20
 800b8b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b8b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b8bc:	1f05      	subs	r5, r0, #4
 800b8be:	42a3      	cmp	r3, r4
 800b8c0:	d30c      	bcc.n	800b8dc <__copybits+0x36>
 800b8c2:	1aa3      	subs	r3, r4, r2
 800b8c4:	3b11      	subs	r3, #17
 800b8c6:	f023 0303 	bic.w	r3, r3, #3
 800b8ca:	3211      	adds	r2, #17
 800b8cc:	42a2      	cmp	r2, r4
 800b8ce:	bf88      	it	hi
 800b8d0:	2300      	movhi	r3, #0
 800b8d2:	4418      	add	r0, r3
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	4288      	cmp	r0, r1
 800b8d8:	d305      	bcc.n	800b8e6 <__copybits+0x40>
 800b8da:	bd70      	pop	{r4, r5, r6, pc}
 800b8dc:	f853 6b04 	ldr.w	r6, [r3], #4
 800b8e0:	f845 6f04 	str.w	r6, [r5, #4]!
 800b8e4:	e7eb      	b.n	800b8be <__copybits+0x18>
 800b8e6:	f840 3b04 	str.w	r3, [r0], #4
 800b8ea:	e7f4      	b.n	800b8d6 <__copybits+0x30>

0800b8ec <__any_on>:
 800b8ec:	f100 0214 	add.w	r2, r0, #20
 800b8f0:	6900      	ldr	r0, [r0, #16]
 800b8f2:	114b      	asrs	r3, r1, #5
 800b8f4:	4298      	cmp	r0, r3
 800b8f6:	b510      	push	{r4, lr}
 800b8f8:	db11      	blt.n	800b91e <__any_on+0x32>
 800b8fa:	dd0a      	ble.n	800b912 <__any_on+0x26>
 800b8fc:	f011 011f 	ands.w	r1, r1, #31
 800b900:	d007      	beq.n	800b912 <__any_on+0x26>
 800b902:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b906:	fa24 f001 	lsr.w	r0, r4, r1
 800b90a:	fa00 f101 	lsl.w	r1, r0, r1
 800b90e:	428c      	cmp	r4, r1
 800b910:	d10b      	bne.n	800b92a <__any_on+0x3e>
 800b912:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b916:	4293      	cmp	r3, r2
 800b918:	d803      	bhi.n	800b922 <__any_on+0x36>
 800b91a:	2000      	movs	r0, #0
 800b91c:	bd10      	pop	{r4, pc}
 800b91e:	4603      	mov	r3, r0
 800b920:	e7f7      	b.n	800b912 <__any_on+0x26>
 800b922:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b926:	2900      	cmp	r1, #0
 800b928:	d0f5      	beq.n	800b916 <__any_on+0x2a>
 800b92a:	2001      	movs	r0, #1
 800b92c:	e7f6      	b.n	800b91c <__any_on+0x30>

0800b92e <_calloc_r>:
 800b92e:	b513      	push	{r0, r1, r4, lr}
 800b930:	434a      	muls	r2, r1
 800b932:	4611      	mov	r1, r2
 800b934:	9201      	str	r2, [sp, #4]
 800b936:	f7fd ffb9 	bl	80098ac <_malloc_r>
 800b93a:	4604      	mov	r4, r0
 800b93c:	b118      	cbz	r0, 800b946 <_calloc_r+0x18>
 800b93e:	9a01      	ldr	r2, [sp, #4]
 800b940:	2100      	movs	r1, #0
 800b942:	f7fd ff5b 	bl	80097fc <memset>
 800b946:	4620      	mov	r0, r4
 800b948:	b002      	add	sp, #8
 800b94a:	bd10      	pop	{r4, pc}

0800b94c <__ssputs_r>:
 800b94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b950:	688e      	ldr	r6, [r1, #8]
 800b952:	429e      	cmp	r6, r3
 800b954:	4682      	mov	sl, r0
 800b956:	460c      	mov	r4, r1
 800b958:	4690      	mov	r8, r2
 800b95a:	461f      	mov	r7, r3
 800b95c:	d838      	bhi.n	800b9d0 <__ssputs_r+0x84>
 800b95e:	898a      	ldrh	r2, [r1, #12]
 800b960:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b964:	d032      	beq.n	800b9cc <__ssputs_r+0x80>
 800b966:	6825      	ldr	r5, [r4, #0]
 800b968:	6909      	ldr	r1, [r1, #16]
 800b96a:	eba5 0901 	sub.w	r9, r5, r1
 800b96e:	6965      	ldr	r5, [r4, #20]
 800b970:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b974:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b978:	3301      	adds	r3, #1
 800b97a:	444b      	add	r3, r9
 800b97c:	106d      	asrs	r5, r5, #1
 800b97e:	429d      	cmp	r5, r3
 800b980:	bf38      	it	cc
 800b982:	461d      	movcc	r5, r3
 800b984:	0553      	lsls	r3, r2, #21
 800b986:	d531      	bpl.n	800b9ec <__ssputs_r+0xa0>
 800b988:	4629      	mov	r1, r5
 800b98a:	f7fd ff8f 	bl	80098ac <_malloc_r>
 800b98e:	4606      	mov	r6, r0
 800b990:	b950      	cbnz	r0, 800b9a8 <__ssputs_r+0x5c>
 800b992:	230c      	movs	r3, #12
 800b994:	f8ca 3000 	str.w	r3, [sl]
 800b998:	89a3      	ldrh	r3, [r4, #12]
 800b99a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b99e:	81a3      	strh	r3, [r4, #12]
 800b9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9a8:	6921      	ldr	r1, [r4, #16]
 800b9aa:	464a      	mov	r2, r9
 800b9ac:	f7ff faea 	bl	800af84 <memcpy>
 800b9b0:	89a3      	ldrh	r3, [r4, #12]
 800b9b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b9b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9ba:	81a3      	strh	r3, [r4, #12]
 800b9bc:	6126      	str	r6, [r4, #16]
 800b9be:	6165      	str	r5, [r4, #20]
 800b9c0:	444e      	add	r6, r9
 800b9c2:	eba5 0509 	sub.w	r5, r5, r9
 800b9c6:	6026      	str	r6, [r4, #0]
 800b9c8:	60a5      	str	r5, [r4, #8]
 800b9ca:	463e      	mov	r6, r7
 800b9cc:	42be      	cmp	r6, r7
 800b9ce:	d900      	bls.n	800b9d2 <__ssputs_r+0x86>
 800b9d0:	463e      	mov	r6, r7
 800b9d2:	4632      	mov	r2, r6
 800b9d4:	6820      	ldr	r0, [r4, #0]
 800b9d6:	4641      	mov	r1, r8
 800b9d8:	f000 ff10 	bl	800c7fc <memmove>
 800b9dc:	68a3      	ldr	r3, [r4, #8]
 800b9de:	6822      	ldr	r2, [r4, #0]
 800b9e0:	1b9b      	subs	r3, r3, r6
 800b9e2:	4432      	add	r2, r6
 800b9e4:	60a3      	str	r3, [r4, #8]
 800b9e6:	6022      	str	r2, [r4, #0]
 800b9e8:	2000      	movs	r0, #0
 800b9ea:	e7db      	b.n	800b9a4 <__ssputs_r+0x58>
 800b9ec:	462a      	mov	r2, r5
 800b9ee:	f000 ff1f 	bl	800c830 <_realloc_r>
 800b9f2:	4606      	mov	r6, r0
 800b9f4:	2800      	cmp	r0, #0
 800b9f6:	d1e1      	bne.n	800b9bc <__ssputs_r+0x70>
 800b9f8:	6921      	ldr	r1, [r4, #16]
 800b9fa:	4650      	mov	r0, sl
 800b9fc:	f7fd ff06 	bl	800980c <_free_r>
 800ba00:	e7c7      	b.n	800b992 <__ssputs_r+0x46>
	...

0800ba04 <_svfiprintf_r>:
 800ba04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba08:	4698      	mov	r8, r3
 800ba0a:	898b      	ldrh	r3, [r1, #12]
 800ba0c:	061b      	lsls	r3, r3, #24
 800ba0e:	b09d      	sub	sp, #116	; 0x74
 800ba10:	4607      	mov	r7, r0
 800ba12:	460d      	mov	r5, r1
 800ba14:	4614      	mov	r4, r2
 800ba16:	d50e      	bpl.n	800ba36 <_svfiprintf_r+0x32>
 800ba18:	690b      	ldr	r3, [r1, #16]
 800ba1a:	b963      	cbnz	r3, 800ba36 <_svfiprintf_r+0x32>
 800ba1c:	2140      	movs	r1, #64	; 0x40
 800ba1e:	f7fd ff45 	bl	80098ac <_malloc_r>
 800ba22:	6028      	str	r0, [r5, #0]
 800ba24:	6128      	str	r0, [r5, #16]
 800ba26:	b920      	cbnz	r0, 800ba32 <_svfiprintf_r+0x2e>
 800ba28:	230c      	movs	r3, #12
 800ba2a:	603b      	str	r3, [r7, #0]
 800ba2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba30:	e0d1      	b.n	800bbd6 <_svfiprintf_r+0x1d2>
 800ba32:	2340      	movs	r3, #64	; 0x40
 800ba34:	616b      	str	r3, [r5, #20]
 800ba36:	2300      	movs	r3, #0
 800ba38:	9309      	str	r3, [sp, #36]	; 0x24
 800ba3a:	2320      	movs	r3, #32
 800ba3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba40:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba44:	2330      	movs	r3, #48	; 0x30
 800ba46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bbf0 <_svfiprintf_r+0x1ec>
 800ba4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba4e:	f04f 0901 	mov.w	r9, #1
 800ba52:	4623      	mov	r3, r4
 800ba54:	469a      	mov	sl, r3
 800ba56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba5a:	b10a      	cbz	r2, 800ba60 <_svfiprintf_r+0x5c>
 800ba5c:	2a25      	cmp	r2, #37	; 0x25
 800ba5e:	d1f9      	bne.n	800ba54 <_svfiprintf_r+0x50>
 800ba60:	ebba 0b04 	subs.w	fp, sl, r4
 800ba64:	d00b      	beq.n	800ba7e <_svfiprintf_r+0x7a>
 800ba66:	465b      	mov	r3, fp
 800ba68:	4622      	mov	r2, r4
 800ba6a:	4629      	mov	r1, r5
 800ba6c:	4638      	mov	r0, r7
 800ba6e:	f7ff ff6d 	bl	800b94c <__ssputs_r>
 800ba72:	3001      	adds	r0, #1
 800ba74:	f000 80aa 	beq.w	800bbcc <_svfiprintf_r+0x1c8>
 800ba78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba7a:	445a      	add	r2, fp
 800ba7c:	9209      	str	r2, [sp, #36]	; 0x24
 800ba7e:	f89a 3000 	ldrb.w	r3, [sl]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	f000 80a2 	beq.w	800bbcc <_svfiprintf_r+0x1c8>
 800ba88:	2300      	movs	r3, #0
 800ba8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ba8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba92:	f10a 0a01 	add.w	sl, sl, #1
 800ba96:	9304      	str	r3, [sp, #16]
 800ba98:	9307      	str	r3, [sp, #28]
 800ba9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba9e:	931a      	str	r3, [sp, #104]	; 0x68
 800baa0:	4654      	mov	r4, sl
 800baa2:	2205      	movs	r2, #5
 800baa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baa8:	4851      	ldr	r0, [pc, #324]	; (800bbf0 <_svfiprintf_r+0x1ec>)
 800baaa:	f7f4 fb99 	bl	80001e0 <memchr>
 800baae:	9a04      	ldr	r2, [sp, #16]
 800bab0:	b9d8      	cbnz	r0, 800baea <_svfiprintf_r+0xe6>
 800bab2:	06d0      	lsls	r0, r2, #27
 800bab4:	bf44      	itt	mi
 800bab6:	2320      	movmi	r3, #32
 800bab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800babc:	0711      	lsls	r1, r2, #28
 800babe:	bf44      	itt	mi
 800bac0:	232b      	movmi	r3, #43	; 0x2b
 800bac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bac6:	f89a 3000 	ldrb.w	r3, [sl]
 800baca:	2b2a      	cmp	r3, #42	; 0x2a
 800bacc:	d015      	beq.n	800bafa <_svfiprintf_r+0xf6>
 800bace:	9a07      	ldr	r2, [sp, #28]
 800bad0:	4654      	mov	r4, sl
 800bad2:	2000      	movs	r0, #0
 800bad4:	f04f 0c0a 	mov.w	ip, #10
 800bad8:	4621      	mov	r1, r4
 800bada:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bade:	3b30      	subs	r3, #48	; 0x30
 800bae0:	2b09      	cmp	r3, #9
 800bae2:	d94e      	bls.n	800bb82 <_svfiprintf_r+0x17e>
 800bae4:	b1b0      	cbz	r0, 800bb14 <_svfiprintf_r+0x110>
 800bae6:	9207      	str	r2, [sp, #28]
 800bae8:	e014      	b.n	800bb14 <_svfiprintf_r+0x110>
 800baea:	eba0 0308 	sub.w	r3, r0, r8
 800baee:	fa09 f303 	lsl.w	r3, r9, r3
 800baf2:	4313      	orrs	r3, r2
 800baf4:	9304      	str	r3, [sp, #16]
 800baf6:	46a2      	mov	sl, r4
 800baf8:	e7d2      	b.n	800baa0 <_svfiprintf_r+0x9c>
 800bafa:	9b03      	ldr	r3, [sp, #12]
 800bafc:	1d19      	adds	r1, r3, #4
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	9103      	str	r1, [sp, #12]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	bfbb      	ittet	lt
 800bb06:	425b      	neglt	r3, r3
 800bb08:	f042 0202 	orrlt.w	r2, r2, #2
 800bb0c:	9307      	strge	r3, [sp, #28]
 800bb0e:	9307      	strlt	r3, [sp, #28]
 800bb10:	bfb8      	it	lt
 800bb12:	9204      	strlt	r2, [sp, #16]
 800bb14:	7823      	ldrb	r3, [r4, #0]
 800bb16:	2b2e      	cmp	r3, #46	; 0x2e
 800bb18:	d10c      	bne.n	800bb34 <_svfiprintf_r+0x130>
 800bb1a:	7863      	ldrb	r3, [r4, #1]
 800bb1c:	2b2a      	cmp	r3, #42	; 0x2a
 800bb1e:	d135      	bne.n	800bb8c <_svfiprintf_r+0x188>
 800bb20:	9b03      	ldr	r3, [sp, #12]
 800bb22:	1d1a      	adds	r2, r3, #4
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	9203      	str	r2, [sp, #12]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	bfb8      	it	lt
 800bb2c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb30:	3402      	adds	r4, #2
 800bb32:	9305      	str	r3, [sp, #20]
 800bb34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bc00 <_svfiprintf_r+0x1fc>
 800bb38:	7821      	ldrb	r1, [r4, #0]
 800bb3a:	2203      	movs	r2, #3
 800bb3c:	4650      	mov	r0, sl
 800bb3e:	f7f4 fb4f 	bl	80001e0 <memchr>
 800bb42:	b140      	cbz	r0, 800bb56 <_svfiprintf_r+0x152>
 800bb44:	2340      	movs	r3, #64	; 0x40
 800bb46:	eba0 000a 	sub.w	r0, r0, sl
 800bb4a:	fa03 f000 	lsl.w	r0, r3, r0
 800bb4e:	9b04      	ldr	r3, [sp, #16]
 800bb50:	4303      	orrs	r3, r0
 800bb52:	3401      	adds	r4, #1
 800bb54:	9304      	str	r3, [sp, #16]
 800bb56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb5a:	4826      	ldr	r0, [pc, #152]	; (800bbf4 <_svfiprintf_r+0x1f0>)
 800bb5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb60:	2206      	movs	r2, #6
 800bb62:	f7f4 fb3d 	bl	80001e0 <memchr>
 800bb66:	2800      	cmp	r0, #0
 800bb68:	d038      	beq.n	800bbdc <_svfiprintf_r+0x1d8>
 800bb6a:	4b23      	ldr	r3, [pc, #140]	; (800bbf8 <_svfiprintf_r+0x1f4>)
 800bb6c:	bb1b      	cbnz	r3, 800bbb6 <_svfiprintf_r+0x1b2>
 800bb6e:	9b03      	ldr	r3, [sp, #12]
 800bb70:	3307      	adds	r3, #7
 800bb72:	f023 0307 	bic.w	r3, r3, #7
 800bb76:	3308      	adds	r3, #8
 800bb78:	9303      	str	r3, [sp, #12]
 800bb7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb7c:	4433      	add	r3, r6
 800bb7e:	9309      	str	r3, [sp, #36]	; 0x24
 800bb80:	e767      	b.n	800ba52 <_svfiprintf_r+0x4e>
 800bb82:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb86:	460c      	mov	r4, r1
 800bb88:	2001      	movs	r0, #1
 800bb8a:	e7a5      	b.n	800bad8 <_svfiprintf_r+0xd4>
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	3401      	adds	r4, #1
 800bb90:	9305      	str	r3, [sp, #20]
 800bb92:	4619      	mov	r1, r3
 800bb94:	f04f 0c0a 	mov.w	ip, #10
 800bb98:	4620      	mov	r0, r4
 800bb9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb9e:	3a30      	subs	r2, #48	; 0x30
 800bba0:	2a09      	cmp	r2, #9
 800bba2:	d903      	bls.n	800bbac <_svfiprintf_r+0x1a8>
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d0c5      	beq.n	800bb34 <_svfiprintf_r+0x130>
 800bba8:	9105      	str	r1, [sp, #20]
 800bbaa:	e7c3      	b.n	800bb34 <_svfiprintf_r+0x130>
 800bbac:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbb0:	4604      	mov	r4, r0
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	e7f0      	b.n	800bb98 <_svfiprintf_r+0x194>
 800bbb6:	ab03      	add	r3, sp, #12
 800bbb8:	9300      	str	r3, [sp, #0]
 800bbba:	462a      	mov	r2, r5
 800bbbc:	4b0f      	ldr	r3, [pc, #60]	; (800bbfc <_svfiprintf_r+0x1f8>)
 800bbbe:	a904      	add	r1, sp, #16
 800bbc0:	4638      	mov	r0, r7
 800bbc2:	f3af 8000 	nop.w
 800bbc6:	1c42      	adds	r2, r0, #1
 800bbc8:	4606      	mov	r6, r0
 800bbca:	d1d6      	bne.n	800bb7a <_svfiprintf_r+0x176>
 800bbcc:	89ab      	ldrh	r3, [r5, #12]
 800bbce:	065b      	lsls	r3, r3, #25
 800bbd0:	f53f af2c 	bmi.w	800ba2c <_svfiprintf_r+0x28>
 800bbd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbd6:	b01d      	add	sp, #116	; 0x74
 800bbd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbdc:	ab03      	add	r3, sp, #12
 800bbde:	9300      	str	r3, [sp, #0]
 800bbe0:	462a      	mov	r2, r5
 800bbe2:	4b06      	ldr	r3, [pc, #24]	; (800bbfc <_svfiprintf_r+0x1f8>)
 800bbe4:	a904      	add	r1, sp, #16
 800bbe6:	4638      	mov	r0, r7
 800bbe8:	f000 f9d4 	bl	800bf94 <_printf_i>
 800bbec:	e7eb      	b.n	800bbc6 <_svfiprintf_r+0x1c2>
 800bbee:	bf00      	nop
 800bbf0:	0800f204 	.word	0x0800f204
 800bbf4:	0800f20e 	.word	0x0800f20e
 800bbf8:	00000000 	.word	0x00000000
 800bbfc:	0800b94d 	.word	0x0800b94d
 800bc00:	0800f20a 	.word	0x0800f20a

0800bc04 <__sfputc_r>:
 800bc04:	6893      	ldr	r3, [r2, #8]
 800bc06:	3b01      	subs	r3, #1
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	b410      	push	{r4}
 800bc0c:	6093      	str	r3, [r2, #8]
 800bc0e:	da08      	bge.n	800bc22 <__sfputc_r+0x1e>
 800bc10:	6994      	ldr	r4, [r2, #24]
 800bc12:	42a3      	cmp	r3, r4
 800bc14:	db01      	blt.n	800bc1a <__sfputc_r+0x16>
 800bc16:	290a      	cmp	r1, #10
 800bc18:	d103      	bne.n	800bc22 <__sfputc_r+0x1e>
 800bc1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc1e:	f000 baf9 	b.w	800c214 <__swbuf_r>
 800bc22:	6813      	ldr	r3, [r2, #0]
 800bc24:	1c58      	adds	r0, r3, #1
 800bc26:	6010      	str	r0, [r2, #0]
 800bc28:	7019      	strb	r1, [r3, #0]
 800bc2a:	4608      	mov	r0, r1
 800bc2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc30:	4770      	bx	lr

0800bc32 <__sfputs_r>:
 800bc32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc34:	4606      	mov	r6, r0
 800bc36:	460f      	mov	r7, r1
 800bc38:	4614      	mov	r4, r2
 800bc3a:	18d5      	adds	r5, r2, r3
 800bc3c:	42ac      	cmp	r4, r5
 800bc3e:	d101      	bne.n	800bc44 <__sfputs_r+0x12>
 800bc40:	2000      	movs	r0, #0
 800bc42:	e007      	b.n	800bc54 <__sfputs_r+0x22>
 800bc44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc48:	463a      	mov	r2, r7
 800bc4a:	4630      	mov	r0, r6
 800bc4c:	f7ff ffda 	bl	800bc04 <__sfputc_r>
 800bc50:	1c43      	adds	r3, r0, #1
 800bc52:	d1f3      	bne.n	800bc3c <__sfputs_r+0xa>
 800bc54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc58 <_vfiprintf_r>:
 800bc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc5c:	460d      	mov	r5, r1
 800bc5e:	b09d      	sub	sp, #116	; 0x74
 800bc60:	4614      	mov	r4, r2
 800bc62:	4698      	mov	r8, r3
 800bc64:	4606      	mov	r6, r0
 800bc66:	b118      	cbz	r0, 800bc70 <_vfiprintf_r+0x18>
 800bc68:	6983      	ldr	r3, [r0, #24]
 800bc6a:	b90b      	cbnz	r3, 800bc70 <_vfiprintf_r+0x18>
 800bc6c:	f000 fcc2 	bl	800c5f4 <__sinit>
 800bc70:	4b89      	ldr	r3, [pc, #548]	; (800be98 <_vfiprintf_r+0x240>)
 800bc72:	429d      	cmp	r5, r3
 800bc74:	d11b      	bne.n	800bcae <_vfiprintf_r+0x56>
 800bc76:	6875      	ldr	r5, [r6, #4]
 800bc78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc7a:	07d9      	lsls	r1, r3, #31
 800bc7c:	d405      	bmi.n	800bc8a <_vfiprintf_r+0x32>
 800bc7e:	89ab      	ldrh	r3, [r5, #12]
 800bc80:	059a      	lsls	r2, r3, #22
 800bc82:	d402      	bmi.n	800bc8a <_vfiprintf_r+0x32>
 800bc84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc86:	f000 fd53 	bl	800c730 <__retarget_lock_acquire_recursive>
 800bc8a:	89ab      	ldrh	r3, [r5, #12]
 800bc8c:	071b      	lsls	r3, r3, #28
 800bc8e:	d501      	bpl.n	800bc94 <_vfiprintf_r+0x3c>
 800bc90:	692b      	ldr	r3, [r5, #16]
 800bc92:	b9eb      	cbnz	r3, 800bcd0 <_vfiprintf_r+0x78>
 800bc94:	4629      	mov	r1, r5
 800bc96:	4630      	mov	r0, r6
 800bc98:	f000 fb1c 	bl	800c2d4 <__swsetup_r>
 800bc9c:	b1c0      	cbz	r0, 800bcd0 <_vfiprintf_r+0x78>
 800bc9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bca0:	07dc      	lsls	r4, r3, #31
 800bca2:	d50e      	bpl.n	800bcc2 <_vfiprintf_r+0x6a>
 800bca4:	f04f 30ff 	mov.w	r0, #4294967295
 800bca8:	b01d      	add	sp, #116	; 0x74
 800bcaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcae:	4b7b      	ldr	r3, [pc, #492]	; (800be9c <_vfiprintf_r+0x244>)
 800bcb0:	429d      	cmp	r5, r3
 800bcb2:	d101      	bne.n	800bcb8 <_vfiprintf_r+0x60>
 800bcb4:	68b5      	ldr	r5, [r6, #8]
 800bcb6:	e7df      	b.n	800bc78 <_vfiprintf_r+0x20>
 800bcb8:	4b79      	ldr	r3, [pc, #484]	; (800bea0 <_vfiprintf_r+0x248>)
 800bcba:	429d      	cmp	r5, r3
 800bcbc:	bf08      	it	eq
 800bcbe:	68f5      	ldreq	r5, [r6, #12]
 800bcc0:	e7da      	b.n	800bc78 <_vfiprintf_r+0x20>
 800bcc2:	89ab      	ldrh	r3, [r5, #12]
 800bcc4:	0598      	lsls	r0, r3, #22
 800bcc6:	d4ed      	bmi.n	800bca4 <_vfiprintf_r+0x4c>
 800bcc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcca:	f000 fd32 	bl	800c732 <__retarget_lock_release_recursive>
 800bcce:	e7e9      	b.n	800bca4 <_vfiprintf_r+0x4c>
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	9309      	str	r3, [sp, #36]	; 0x24
 800bcd4:	2320      	movs	r3, #32
 800bcd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bcda:	f8cd 800c 	str.w	r8, [sp, #12]
 800bcde:	2330      	movs	r3, #48	; 0x30
 800bce0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bea4 <_vfiprintf_r+0x24c>
 800bce4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bce8:	f04f 0901 	mov.w	r9, #1
 800bcec:	4623      	mov	r3, r4
 800bcee:	469a      	mov	sl, r3
 800bcf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcf4:	b10a      	cbz	r2, 800bcfa <_vfiprintf_r+0xa2>
 800bcf6:	2a25      	cmp	r2, #37	; 0x25
 800bcf8:	d1f9      	bne.n	800bcee <_vfiprintf_r+0x96>
 800bcfa:	ebba 0b04 	subs.w	fp, sl, r4
 800bcfe:	d00b      	beq.n	800bd18 <_vfiprintf_r+0xc0>
 800bd00:	465b      	mov	r3, fp
 800bd02:	4622      	mov	r2, r4
 800bd04:	4629      	mov	r1, r5
 800bd06:	4630      	mov	r0, r6
 800bd08:	f7ff ff93 	bl	800bc32 <__sfputs_r>
 800bd0c:	3001      	adds	r0, #1
 800bd0e:	f000 80aa 	beq.w	800be66 <_vfiprintf_r+0x20e>
 800bd12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd14:	445a      	add	r2, fp
 800bd16:	9209      	str	r2, [sp, #36]	; 0x24
 800bd18:	f89a 3000 	ldrb.w	r3, [sl]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	f000 80a2 	beq.w	800be66 <_vfiprintf_r+0x20e>
 800bd22:	2300      	movs	r3, #0
 800bd24:	f04f 32ff 	mov.w	r2, #4294967295
 800bd28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd2c:	f10a 0a01 	add.w	sl, sl, #1
 800bd30:	9304      	str	r3, [sp, #16]
 800bd32:	9307      	str	r3, [sp, #28]
 800bd34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd38:	931a      	str	r3, [sp, #104]	; 0x68
 800bd3a:	4654      	mov	r4, sl
 800bd3c:	2205      	movs	r2, #5
 800bd3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd42:	4858      	ldr	r0, [pc, #352]	; (800bea4 <_vfiprintf_r+0x24c>)
 800bd44:	f7f4 fa4c 	bl	80001e0 <memchr>
 800bd48:	9a04      	ldr	r2, [sp, #16]
 800bd4a:	b9d8      	cbnz	r0, 800bd84 <_vfiprintf_r+0x12c>
 800bd4c:	06d1      	lsls	r1, r2, #27
 800bd4e:	bf44      	itt	mi
 800bd50:	2320      	movmi	r3, #32
 800bd52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd56:	0713      	lsls	r3, r2, #28
 800bd58:	bf44      	itt	mi
 800bd5a:	232b      	movmi	r3, #43	; 0x2b
 800bd5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd60:	f89a 3000 	ldrb.w	r3, [sl]
 800bd64:	2b2a      	cmp	r3, #42	; 0x2a
 800bd66:	d015      	beq.n	800bd94 <_vfiprintf_r+0x13c>
 800bd68:	9a07      	ldr	r2, [sp, #28]
 800bd6a:	4654      	mov	r4, sl
 800bd6c:	2000      	movs	r0, #0
 800bd6e:	f04f 0c0a 	mov.w	ip, #10
 800bd72:	4621      	mov	r1, r4
 800bd74:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd78:	3b30      	subs	r3, #48	; 0x30
 800bd7a:	2b09      	cmp	r3, #9
 800bd7c:	d94e      	bls.n	800be1c <_vfiprintf_r+0x1c4>
 800bd7e:	b1b0      	cbz	r0, 800bdae <_vfiprintf_r+0x156>
 800bd80:	9207      	str	r2, [sp, #28]
 800bd82:	e014      	b.n	800bdae <_vfiprintf_r+0x156>
 800bd84:	eba0 0308 	sub.w	r3, r0, r8
 800bd88:	fa09 f303 	lsl.w	r3, r9, r3
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	9304      	str	r3, [sp, #16]
 800bd90:	46a2      	mov	sl, r4
 800bd92:	e7d2      	b.n	800bd3a <_vfiprintf_r+0xe2>
 800bd94:	9b03      	ldr	r3, [sp, #12]
 800bd96:	1d19      	adds	r1, r3, #4
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	9103      	str	r1, [sp, #12]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	bfbb      	ittet	lt
 800bda0:	425b      	neglt	r3, r3
 800bda2:	f042 0202 	orrlt.w	r2, r2, #2
 800bda6:	9307      	strge	r3, [sp, #28]
 800bda8:	9307      	strlt	r3, [sp, #28]
 800bdaa:	bfb8      	it	lt
 800bdac:	9204      	strlt	r2, [sp, #16]
 800bdae:	7823      	ldrb	r3, [r4, #0]
 800bdb0:	2b2e      	cmp	r3, #46	; 0x2e
 800bdb2:	d10c      	bne.n	800bdce <_vfiprintf_r+0x176>
 800bdb4:	7863      	ldrb	r3, [r4, #1]
 800bdb6:	2b2a      	cmp	r3, #42	; 0x2a
 800bdb8:	d135      	bne.n	800be26 <_vfiprintf_r+0x1ce>
 800bdba:	9b03      	ldr	r3, [sp, #12]
 800bdbc:	1d1a      	adds	r2, r3, #4
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	9203      	str	r2, [sp, #12]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	bfb8      	it	lt
 800bdc6:	f04f 33ff 	movlt.w	r3, #4294967295
 800bdca:	3402      	adds	r4, #2
 800bdcc:	9305      	str	r3, [sp, #20]
 800bdce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800beb4 <_vfiprintf_r+0x25c>
 800bdd2:	7821      	ldrb	r1, [r4, #0]
 800bdd4:	2203      	movs	r2, #3
 800bdd6:	4650      	mov	r0, sl
 800bdd8:	f7f4 fa02 	bl	80001e0 <memchr>
 800bddc:	b140      	cbz	r0, 800bdf0 <_vfiprintf_r+0x198>
 800bdde:	2340      	movs	r3, #64	; 0x40
 800bde0:	eba0 000a 	sub.w	r0, r0, sl
 800bde4:	fa03 f000 	lsl.w	r0, r3, r0
 800bde8:	9b04      	ldr	r3, [sp, #16]
 800bdea:	4303      	orrs	r3, r0
 800bdec:	3401      	adds	r4, #1
 800bdee:	9304      	str	r3, [sp, #16]
 800bdf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdf4:	482c      	ldr	r0, [pc, #176]	; (800bea8 <_vfiprintf_r+0x250>)
 800bdf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdfa:	2206      	movs	r2, #6
 800bdfc:	f7f4 f9f0 	bl	80001e0 <memchr>
 800be00:	2800      	cmp	r0, #0
 800be02:	d03f      	beq.n	800be84 <_vfiprintf_r+0x22c>
 800be04:	4b29      	ldr	r3, [pc, #164]	; (800beac <_vfiprintf_r+0x254>)
 800be06:	bb1b      	cbnz	r3, 800be50 <_vfiprintf_r+0x1f8>
 800be08:	9b03      	ldr	r3, [sp, #12]
 800be0a:	3307      	adds	r3, #7
 800be0c:	f023 0307 	bic.w	r3, r3, #7
 800be10:	3308      	adds	r3, #8
 800be12:	9303      	str	r3, [sp, #12]
 800be14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be16:	443b      	add	r3, r7
 800be18:	9309      	str	r3, [sp, #36]	; 0x24
 800be1a:	e767      	b.n	800bcec <_vfiprintf_r+0x94>
 800be1c:	fb0c 3202 	mla	r2, ip, r2, r3
 800be20:	460c      	mov	r4, r1
 800be22:	2001      	movs	r0, #1
 800be24:	e7a5      	b.n	800bd72 <_vfiprintf_r+0x11a>
 800be26:	2300      	movs	r3, #0
 800be28:	3401      	adds	r4, #1
 800be2a:	9305      	str	r3, [sp, #20]
 800be2c:	4619      	mov	r1, r3
 800be2e:	f04f 0c0a 	mov.w	ip, #10
 800be32:	4620      	mov	r0, r4
 800be34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be38:	3a30      	subs	r2, #48	; 0x30
 800be3a:	2a09      	cmp	r2, #9
 800be3c:	d903      	bls.n	800be46 <_vfiprintf_r+0x1ee>
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d0c5      	beq.n	800bdce <_vfiprintf_r+0x176>
 800be42:	9105      	str	r1, [sp, #20]
 800be44:	e7c3      	b.n	800bdce <_vfiprintf_r+0x176>
 800be46:	fb0c 2101 	mla	r1, ip, r1, r2
 800be4a:	4604      	mov	r4, r0
 800be4c:	2301      	movs	r3, #1
 800be4e:	e7f0      	b.n	800be32 <_vfiprintf_r+0x1da>
 800be50:	ab03      	add	r3, sp, #12
 800be52:	9300      	str	r3, [sp, #0]
 800be54:	462a      	mov	r2, r5
 800be56:	4b16      	ldr	r3, [pc, #88]	; (800beb0 <_vfiprintf_r+0x258>)
 800be58:	a904      	add	r1, sp, #16
 800be5a:	4630      	mov	r0, r6
 800be5c:	f3af 8000 	nop.w
 800be60:	4607      	mov	r7, r0
 800be62:	1c78      	adds	r0, r7, #1
 800be64:	d1d6      	bne.n	800be14 <_vfiprintf_r+0x1bc>
 800be66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be68:	07d9      	lsls	r1, r3, #31
 800be6a:	d405      	bmi.n	800be78 <_vfiprintf_r+0x220>
 800be6c:	89ab      	ldrh	r3, [r5, #12]
 800be6e:	059a      	lsls	r2, r3, #22
 800be70:	d402      	bmi.n	800be78 <_vfiprintf_r+0x220>
 800be72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be74:	f000 fc5d 	bl	800c732 <__retarget_lock_release_recursive>
 800be78:	89ab      	ldrh	r3, [r5, #12]
 800be7a:	065b      	lsls	r3, r3, #25
 800be7c:	f53f af12 	bmi.w	800bca4 <_vfiprintf_r+0x4c>
 800be80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be82:	e711      	b.n	800bca8 <_vfiprintf_r+0x50>
 800be84:	ab03      	add	r3, sp, #12
 800be86:	9300      	str	r3, [sp, #0]
 800be88:	462a      	mov	r2, r5
 800be8a:	4b09      	ldr	r3, [pc, #36]	; (800beb0 <_vfiprintf_r+0x258>)
 800be8c:	a904      	add	r1, sp, #16
 800be8e:	4630      	mov	r0, r6
 800be90:	f000 f880 	bl	800bf94 <_printf_i>
 800be94:	e7e4      	b.n	800be60 <_vfiprintf_r+0x208>
 800be96:	bf00      	nop
 800be98:	0800f258 	.word	0x0800f258
 800be9c:	0800f278 	.word	0x0800f278
 800bea0:	0800f238 	.word	0x0800f238
 800bea4:	0800f204 	.word	0x0800f204
 800bea8:	0800f20e 	.word	0x0800f20e
 800beac:	00000000 	.word	0x00000000
 800beb0:	0800bc33 	.word	0x0800bc33
 800beb4:	0800f20a 	.word	0x0800f20a

0800beb8 <_printf_common>:
 800beb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bebc:	4616      	mov	r6, r2
 800bebe:	4699      	mov	r9, r3
 800bec0:	688a      	ldr	r2, [r1, #8]
 800bec2:	690b      	ldr	r3, [r1, #16]
 800bec4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bec8:	4293      	cmp	r3, r2
 800beca:	bfb8      	it	lt
 800becc:	4613      	movlt	r3, r2
 800bece:	6033      	str	r3, [r6, #0]
 800bed0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bed4:	4607      	mov	r7, r0
 800bed6:	460c      	mov	r4, r1
 800bed8:	b10a      	cbz	r2, 800bede <_printf_common+0x26>
 800beda:	3301      	adds	r3, #1
 800bedc:	6033      	str	r3, [r6, #0]
 800bede:	6823      	ldr	r3, [r4, #0]
 800bee0:	0699      	lsls	r1, r3, #26
 800bee2:	bf42      	ittt	mi
 800bee4:	6833      	ldrmi	r3, [r6, #0]
 800bee6:	3302      	addmi	r3, #2
 800bee8:	6033      	strmi	r3, [r6, #0]
 800beea:	6825      	ldr	r5, [r4, #0]
 800beec:	f015 0506 	ands.w	r5, r5, #6
 800bef0:	d106      	bne.n	800bf00 <_printf_common+0x48>
 800bef2:	f104 0a19 	add.w	sl, r4, #25
 800bef6:	68e3      	ldr	r3, [r4, #12]
 800bef8:	6832      	ldr	r2, [r6, #0]
 800befa:	1a9b      	subs	r3, r3, r2
 800befc:	42ab      	cmp	r3, r5
 800befe:	dc26      	bgt.n	800bf4e <_printf_common+0x96>
 800bf00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bf04:	1e13      	subs	r3, r2, #0
 800bf06:	6822      	ldr	r2, [r4, #0]
 800bf08:	bf18      	it	ne
 800bf0a:	2301      	movne	r3, #1
 800bf0c:	0692      	lsls	r2, r2, #26
 800bf0e:	d42b      	bmi.n	800bf68 <_printf_common+0xb0>
 800bf10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf14:	4649      	mov	r1, r9
 800bf16:	4638      	mov	r0, r7
 800bf18:	47c0      	blx	r8
 800bf1a:	3001      	adds	r0, #1
 800bf1c:	d01e      	beq.n	800bf5c <_printf_common+0xa4>
 800bf1e:	6823      	ldr	r3, [r4, #0]
 800bf20:	68e5      	ldr	r5, [r4, #12]
 800bf22:	6832      	ldr	r2, [r6, #0]
 800bf24:	f003 0306 	and.w	r3, r3, #6
 800bf28:	2b04      	cmp	r3, #4
 800bf2a:	bf08      	it	eq
 800bf2c:	1aad      	subeq	r5, r5, r2
 800bf2e:	68a3      	ldr	r3, [r4, #8]
 800bf30:	6922      	ldr	r2, [r4, #16]
 800bf32:	bf0c      	ite	eq
 800bf34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf38:	2500      	movne	r5, #0
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	bfc4      	itt	gt
 800bf3e:	1a9b      	subgt	r3, r3, r2
 800bf40:	18ed      	addgt	r5, r5, r3
 800bf42:	2600      	movs	r6, #0
 800bf44:	341a      	adds	r4, #26
 800bf46:	42b5      	cmp	r5, r6
 800bf48:	d11a      	bne.n	800bf80 <_printf_common+0xc8>
 800bf4a:	2000      	movs	r0, #0
 800bf4c:	e008      	b.n	800bf60 <_printf_common+0xa8>
 800bf4e:	2301      	movs	r3, #1
 800bf50:	4652      	mov	r2, sl
 800bf52:	4649      	mov	r1, r9
 800bf54:	4638      	mov	r0, r7
 800bf56:	47c0      	blx	r8
 800bf58:	3001      	adds	r0, #1
 800bf5a:	d103      	bne.n	800bf64 <_printf_common+0xac>
 800bf5c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf64:	3501      	adds	r5, #1
 800bf66:	e7c6      	b.n	800bef6 <_printf_common+0x3e>
 800bf68:	18e1      	adds	r1, r4, r3
 800bf6a:	1c5a      	adds	r2, r3, #1
 800bf6c:	2030      	movs	r0, #48	; 0x30
 800bf6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf72:	4422      	add	r2, r4
 800bf74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf7c:	3302      	adds	r3, #2
 800bf7e:	e7c7      	b.n	800bf10 <_printf_common+0x58>
 800bf80:	2301      	movs	r3, #1
 800bf82:	4622      	mov	r2, r4
 800bf84:	4649      	mov	r1, r9
 800bf86:	4638      	mov	r0, r7
 800bf88:	47c0      	blx	r8
 800bf8a:	3001      	adds	r0, #1
 800bf8c:	d0e6      	beq.n	800bf5c <_printf_common+0xa4>
 800bf8e:	3601      	adds	r6, #1
 800bf90:	e7d9      	b.n	800bf46 <_printf_common+0x8e>
	...

0800bf94 <_printf_i>:
 800bf94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf98:	460c      	mov	r4, r1
 800bf9a:	4691      	mov	r9, r2
 800bf9c:	7e27      	ldrb	r7, [r4, #24]
 800bf9e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bfa0:	2f78      	cmp	r7, #120	; 0x78
 800bfa2:	4680      	mov	r8, r0
 800bfa4:	469a      	mov	sl, r3
 800bfa6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bfaa:	d807      	bhi.n	800bfbc <_printf_i+0x28>
 800bfac:	2f62      	cmp	r7, #98	; 0x62
 800bfae:	d80a      	bhi.n	800bfc6 <_printf_i+0x32>
 800bfb0:	2f00      	cmp	r7, #0
 800bfb2:	f000 80d8 	beq.w	800c166 <_printf_i+0x1d2>
 800bfb6:	2f58      	cmp	r7, #88	; 0x58
 800bfb8:	f000 80a3 	beq.w	800c102 <_printf_i+0x16e>
 800bfbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bfc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bfc4:	e03a      	b.n	800c03c <_printf_i+0xa8>
 800bfc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bfca:	2b15      	cmp	r3, #21
 800bfcc:	d8f6      	bhi.n	800bfbc <_printf_i+0x28>
 800bfce:	a001      	add	r0, pc, #4	; (adr r0, 800bfd4 <_printf_i+0x40>)
 800bfd0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bfd4:	0800c02d 	.word	0x0800c02d
 800bfd8:	0800c041 	.word	0x0800c041
 800bfdc:	0800bfbd 	.word	0x0800bfbd
 800bfe0:	0800bfbd 	.word	0x0800bfbd
 800bfe4:	0800bfbd 	.word	0x0800bfbd
 800bfe8:	0800bfbd 	.word	0x0800bfbd
 800bfec:	0800c041 	.word	0x0800c041
 800bff0:	0800bfbd 	.word	0x0800bfbd
 800bff4:	0800bfbd 	.word	0x0800bfbd
 800bff8:	0800bfbd 	.word	0x0800bfbd
 800bffc:	0800bfbd 	.word	0x0800bfbd
 800c000:	0800c14d 	.word	0x0800c14d
 800c004:	0800c071 	.word	0x0800c071
 800c008:	0800c12f 	.word	0x0800c12f
 800c00c:	0800bfbd 	.word	0x0800bfbd
 800c010:	0800bfbd 	.word	0x0800bfbd
 800c014:	0800c16f 	.word	0x0800c16f
 800c018:	0800bfbd 	.word	0x0800bfbd
 800c01c:	0800c071 	.word	0x0800c071
 800c020:	0800bfbd 	.word	0x0800bfbd
 800c024:	0800bfbd 	.word	0x0800bfbd
 800c028:	0800c137 	.word	0x0800c137
 800c02c:	680b      	ldr	r3, [r1, #0]
 800c02e:	1d1a      	adds	r2, r3, #4
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	600a      	str	r2, [r1, #0]
 800c034:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c03c:	2301      	movs	r3, #1
 800c03e:	e0a3      	b.n	800c188 <_printf_i+0x1f4>
 800c040:	6825      	ldr	r5, [r4, #0]
 800c042:	6808      	ldr	r0, [r1, #0]
 800c044:	062e      	lsls	r6, r5, #24
 800c046:	f100 0304 	add.w	r3, r0, #4
 800c04a:	d50a      	bpl.n	800c062 <_printf_i+0xce>
 800c04c:	6805      	ldr	r5, [r0, #0]
 800c04e:	600b      	str	r3, [r1, #0]
 800c050:	2d00      	cmp	r5, #0
 800c052:	da03      	bge.n	800c05c <_printf_i+0xc8>
 800c054:	232d      	movs	r3, #45	; 0x2d
 800c056:	426d      	negs	r5, r5
 800c058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c05c:	485e      	ldr	r0, [pc, #376]	; (800c1d8 <_printf_i+0x244>)
 800c05e:	230a      	movs	r3, #10
 800c060:	e019      	b.n	800c096 <_printf_i+0x102>
 800c062:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c066:	6805      	ldr	r5, [r0, #0]
 800c068:	600b      	str	r3, [r1, #0]
 800c06a:	bf18      	it	ne
 800c06c:	b22d      	sxthne	r5, r5
 800c06e:	e7ef      	b.n	800c050 <_printf_i+0xbc>
 800c070:	680b      	ldr	r3, [r1, #0]
 800c072:	6825      	ldr	r5, [r4, #0]
 800c074:	1d18      	adds	r0, r3, #4
 800c076:	6008      	str	r0, [r1, #0]
 800c078:	0628      	lsls	r0, r5, #24
 800c07a:	d501      	bpl.n	800c080 <_printf_i+0xec>
 800c07c:	681d      	ldr	r5, [r3, #0]
 800c07e:	e002      	b.n	800c086 <_printf_i+0xf2>
 800c080:	0669      	lsls	r1, r5, #25
 800c082:	d5fb      	bpl.n	800c07c <_printf_i+0xe8>
 800c084:	881d      	ldrh	r5, [r3, #0]
 800c086:	4854      	ldr	r0, [pc, #336]	; (800c1d8 <_printf_i+0x244>)
 800c088:	2f6f      	cmp	r7, #111	; 0x6f
 800c08a:	bf0c      	ite	eq
 800c08c:	2308      	moveq	r3, #8
 800c08e:	230a      	movne	r3, #10
 800c090:	2100      	movs	r1, #0
 800c092:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c096:	6866      	ldr	r6, [r4, #4]
 800c098:	60a6      	str	r6, [r4, #8]
 800c09a:	2e00      	cmp	r6, #0
 800c09c:	bfa2      	ittt	ge
 800c09e:	6821      	ldrge	r1, [r4, #0]
 800c0a0:	f021 0104 	bicge.w	r1, r1, #4
 800c0a4:	6021      	strge	r1, [r4, #0]
 800c0a6:	b90d      	cbnz	r5, 800c0ac <_printf_i+0x118>
 800c0a8:	2e00      	cmp	r6, #0
 800c0aa:	d04d      	beq.n	800c148 <_printf_i+0x1b4>
 800c0ac:	4616      	mov	r6, r2
 800c0ae:	fbb5 f1f3 	udiv	r1, r5, r3
 800c0b2:	fb03 5711 	mls	r7, r3, r1, r5
 800c0b6:	5dc7      	ldrb	r7, [r0, r7]
 800c0b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c0bc:	462f      	mov	r7, r5
 800c0be:	42bb      	cmp	r3, r7
 800c0c0:	460d      	mov	r5, r1
 800c0c2:	d9f4      	bls.n	800c0ae <_printf_i+0x11a>
 800c0c4:	2b08      	cmp	r3, #8
 800c0c6:	d10b      	bne.n	800c0e0 <_printf_i+0x14c>
 800c0c8:	6823      	ldr	r3, [r4, #0]
 800c0ca:	07df      	lsls	r7, r3, #31
 800c0cc:	d508      	bpl.n	800c0e0 <_printf_i+0x14c>
 800c0ce:	6923      	ldr	r3, [r4, #16]
 800c0d0:	6861      	ldr	r1, [r4, #4]
 800c0d2:	4299      	cmp	r1, r3
 800c0d4:	bfde      	ittt	le
 800c0d6:	2330      	movle	r3, #48	; 0x30
 800c0d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c0dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c0e0:	1b92      	subs	r2, r2, r6
 800c0e2:	6122      	str	r2, [r4, #16]
 800c0e4:	f8cd a000 	str.w	sl, [sp]
 800c0e8:	464b      	mov	r3, r9
 800c0ea:	aa03      	add	r2, sp, #12
 800c0ec:	4621      	mov	r1, r4
 800c0ee:	4640      	mov	r0, r8
 800c0f0:	f7ff fee2 	bl	800beb8 <_printf_common>
 800c0f4:	3001      	adds	r0, #1
 800c0f6:	d14c      	bne.n	800c192 <_printf_i+0x1fe>
 800c0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c0fc:	b004      	add	sp, #16
 800c0fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c102:	4835      	ldr	r0, [pc, #212]	; (800c1d8 <_printf_i+0x244>)
 800c104:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c108:	6823      	ldr	r3, [r4, #0]
 800c10a:	680e      	ldr	r6, [r1, #0]
 800c10c:	061f      	lsls	r7, r3, #24
 800c10e:	f856 5b04 	ldr.w	r5, [r6], #4
 800c112:	600e      	str	r6, [r1, #0]
 800c114:	d514      	bpl.n	800c140 <_printf_i+0x1ac>
 800c116:	07d9      	lsls	r1, r3, #31
 800c118:	bf44      	itt	mi
 800c11a:	f043 0320 	orrmi.w	r3, r3, #32
 800c11e:	6023      	strmi	r3, [r4, #0]
 800c120:	b91d      	cbnz	r5, 800c12a <_printf_i+0x196>
 800c122:	6823      	ldr	r3, [r4, #0]
 800c124:	f023 0320 	bic.w	r3, r3, #32
 800c128:	6023      	str	r3, [r4, #0]
 800c12a:	2310      	movs	r3, #16
 800c12c:	e7b0      	b.n	800c090 <_printf_i+0xfc>
 800c12e:	6823      	ldr	r3, [r4, #0]
 800c130:	f043 0320 	orr.w	r3, r3, #32
 800c134:	6023      	str	r3, [r4, #0]
 800c136:	2378      	movs	r3, #120	; 0x78
 800c138:	4828      	ldr	r0, [pc, #160]	; (800c1dc <_printf_i+0x248>)
 800c13a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c13e:	e7e3      	b.n	800c108 <_printf_i+0x174>
 800c140:	065e      	lsls	r6, r3, #25
 800c142:	bf48      	it	mi
 800c144:	b2ad      	uxthmi	r5, r5
 800c146:	e7e6      	b.n	800c116 <_printf_i+0x182>
 800c148:	4616      	mov	r6, r2
 800c14a:	e7bb      	b.n	800c0c4 <_printf_i+0x130>
 800c14c:	680b      	ldr	r3, [r1, #0]
 800c14e:	6826      	ldr	r6, [r4, #0]
 800c150:	6960      	ldr	r0, [r4, #20]
 800c152:	1d1d      	adds	r5, r3, #4
 800c154:	600d      	str	r5, [r1, #0]
 800c156:	0635      	lsls	r5, r6, #24
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	d501      	bpl.n	800c160 <_printf_i+0x1cc>
 800c15c:	6018      	str	r0, [r3, #0]
 800c15e:	e002      	b.n	800c166 <_printf_i+0x1d2>
 800c160:	0671      	lsls	r1, r6, #25
 800c162:	d5fb      	bpl.n	800c15c <_printf_i+0x1c8>
 800c164:	8018      	strh	r0, [r3, #0]
 800c166:	2300      	movs	r3, #0
 800c168:	6123      	str	r3, [r4, #16]
 800c16a:	4616      	mov	r6, r2
 800c16c:	e7ba      	b.n	800c0e4 <_printf_i+0x150>
 800c16e:	680b      	ldr	r3, [r1, #0]
 800c170:	1d1a      	adds	r2, r3, #4
 800c172:	600a      	str	r2, [r1, #0]
 800c174:	681e      	ldr	r6, [r3, #0]
 800c176:	6862      	ldr	r2, [r4, #4]
 800c178:	2100      	movs	r1, #0
 800c17a:	4630      	mov	r0, r6
 800c17c:	f7f4 f830 	bl	80001e0 <memchr>
 800c180:	b108      	cbz	r0, 800c186 <_printf_i+0x1f2>
 800c182:	1b80      	subs	r0, r0, r6
 800c184:	6060      	str	r0, [r4, #4]
 800c186:	6863      	ldr	r3, [r4, #4]
 800c188:	6123      	str	r3, [r4, #16]
 800c18a:	2300      	movs	r3, #0
 800c18c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c190:	e7a8      	b.n	800c0e4 <_printf_i+0x150>
 800c192:	6923      	ldr	r3, [r4, #16]
 800c194:	4632      	mov	r2, r6
 800c196:	4649      	mov	r1, r9
 800c198:	4640      	mov	r0, r8
 800c19a:	47d0      	blx	sl
 800c19c:	3001      	adds	r0, #1
 800c19e:	d0ab      	beq.n	800c0f8 <_printf_i+0x164>
 800c1a0:	6823      	ldr	r3, [r4, #0]
 800c1a2:	079b      	lsls	r3, r3, #30
 800c1a4:	d413      	bmi.n	800c1ce <_printf_i+0x23a>
 800c1a6:	68e0      	ldr	r0, [r4, #12]
 800c1a8:	9b03      	ldr	r3, [sp, #12]
 800c1aa:	4298      	cmp	r0, r3
 800c1ac:	bfb8      	it	lt
 800c1ae:	4618      	movlt	r0, r3
 800c1b0:	e7a4      	b.n	800c0fc <_printf_i+0x168>
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	4632      	mov	r2, r6
 800c1b6:	4649      	mov	r1, r9
 800c1b8:	4640      	mov	r0, r8
 800c1ba:	47d0      	blx	sl
 800c1bc:	3001      	adds	r0, #1
 800c1be:	d09b      	beq.n	800c0f8 <_printf_i+0x164>
 800c1c0:	3501      	adds	r5, #1
 800c1c2:	68e3      	ldr	r3, [r4, #12]
 800c1c4:	9903      	ldr	r1, [sp, #12]
 800c1c6:	1a5b      	subs	r3, r3, r1
 800c1c8:	42ab      	cmp	r3, r5
 800c1ca:	dcf2      	bgt.n	800c1b2 <_printf_i+0x21e>
 800c1cc:	e7eb      	b.n	800c1a6 <_printf_i+0x212>
 800c1ce:	2500      	movs	r5, #0
 800c1d0:	f104 0619 	add.w	r6, r4, #25
 800c1d4:	e7f5      	b.n	800c1c2 <_printf_i+0x22e>
 800c1d6:	bf00      	nop
 800c1d8:	0800f215 	.word	0x0800f215
 800c1dc:	0800f226 	.word	0x0800f226

0800c1e0 <nan>:
 800c1e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c1e8 <nan+0x8>
 800c1e4:	4770      	bx	lr
 800c1e6:	bf00      	nop
 800c1e8:	00000000 	.word	0x00000000
 800c1ec:	7ff80000 	.word	0x7ff80000

0800c1f0 <strncmp>:
 800c1f0:	b510      	push	{r4, lr}
 800c1f2:	b16a      	cbz	r2, 800c210 <strncmp+0x20>
 800c1f4:	3901      	subs	r1, #1
 800c1f6:	1884      	adds	r4, r0, r2
 800c1f8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c1fc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c200:	4293      	cmp	r3, r2
 800c202:	d103      	bne.n	800c20c <strncmp+0x1c>
 800c204:	42a0      	cmp	r0, r4
 800c206:	d001      	beq.n	800c20c <strncmp+0x1c>
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d1f5      	bne.n	800c1f8 <strncmp+0x8>
 800c20c:	1a98      	subs	r0, r3, r2
 800c20e:	bd10      	pop	{r4, pc}
 800c210:	4610      	mov	r0, r2
 800c212:	e7fc      	b.n	800c20e <strncmp+0x1e>

0800c214 <__swbuf_r>:
 800c214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c216:	460e      	mov	r6, r1
 800c218:	4614      	mov	r4, r2
 800c21a:	4605      	mov	r5, r0
 800c21c:	b118      	cbz	r0, 800c226 <__swbuf_r+0x12>
 800c21e:	6983      	ldr	r3, [r0, #24]
 800c220:	b90b      	cbnz	r3, 800c226 <__swbuf_r+0x12>
 800c222:	f000 f9e7 	bl	800c5f4 <__sinit>
 800c226:	4b21      	ldr	r3, [pc, #132]	; (800c2ac <__swbuf_r+0x98>)
 800c228:	429c      	cmp	r4, r3
 800c22a:	d12b      	bne.n	800c284 <__swbuf_r+0x70>
 800c22c:	686c      	ldr	r4, [r5, #4]
 800c22e:	69a3      	ldr	r3, [r4, #24]
 800c230:	60a3      	str	r3, [r4, #8]
 800c232:	89a3      	ldrh	r3, [r4, #12]
 800c234:	071a      	lsls	r2, r3, #28
 800c236:	d52f      	bpl.n	800c298 <__swbuf_r+0x84>
 800c238:	6923      	ldr	r3, [r4, #16]
 800c23a:	b36b      	cbz	r3, 800c298 <__swbuf_r+0x84>
 800c23c:	6923      	ldr	r3, [r4, #16]
 800c23e:	6820      	ldr	r0, [r4, #0]
 800c240:	1ac0      	subs	r0, r0, r3
 800c242:	6963      	ldr	r3, [r4, #20]
 800c244:	b2f6      	uxtb	r6, r6
 800c246:	4283      	cmp	r3, r0
 800c248:	4637      	mov	r7, r6
 800c24a:	dc04      	bgt.n	800c256 <__swbuf_r+0x42>
 800c24c:	4621      	mov	r1, r4
 800c24e:	4628      	mov	r0, r5
 800c250:	f000 f93c 	bl	800c4cc <_fflush_r>
 800c254:	bb30      	cbnz	r0, 800c2a4 <__swbuf_r+0x90>
 800c256:	68a3      	ldr	r3, [r4, #8]
 800c258:	3b01      	subs	r3, #1
 800c25a:	60a3      	str	r3, [r4, #8]
 800c25c:	6823      	ldr	r3, [r4, #0]
 800c25e:	1c5a      	adds	r2, r3, #1
 800c260:	6022      	str	r2, [r4, #0]
 800c262:	701e      	strb	r6, [r3, #0]
 800c264:	6963      	ldr	r3, [r4, #20]
 800c266:	3001      	adds	r0, #1
 800c268:	4283      	cmp	r3, r0
 800c26a:	d004      	beq.n	800c276 <__swbuf_r+0x62>
 800c26c:	89a3      	ldrh	r3, [r4, #12]
 800c26e:	07db      	lsls	r3, r3, #31
 800c270:	d506      	bpl.n	800c280 <__swbuf_r+0x6c>
 800c272:	2e0a      	cmp	r6, #10
 800c274:	d104      	bne.n	800c280 <__swbuf_r+0x6c>
 800c276:	4621      	mov	r1, r4
 800c278:	4628      	mov	r0, r5
 800c27a:	f000 f927 	bl	800c4cc <_fflush_r>
 800c27e:	b988      	cbnz	r0, 800c2a4 <__swbuf_r+0x90>
 800c280:	4638      	mov	r0, r7
 800c282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c284:	4b0a      	ldr	r3, [pc, #40]	; (800c2b0 <__swbuf_r+0x9c>)
 800c286:	429c      	cmp	r4, r3
 800c288:	d101      	bne.n	800c28e <__swbuf_r+0x7a>
 800c28a:	68ac      	ldr	r4, [r5, #8]
 800c28c:	e7cf      	b.n	800c22e <__swbuf_r+0x1a>
 800c28e:	4b09      	ldr	r3, [pc, #36]	; (800c2b4 <__swbuf_r+0xa0>)
 800c290:	429c      	cmp	r4, r3
 800c292:	bf08      	it	eq
 800c294:	68ec      	ldreq	r4, [r5, #12]
 800c296:	e7ca      	b.n	800c22e <__swbuf_r+0x1a>
 800c298:	4621      	mov	r1, r4
 800c29a:	4628      	mov	r0, r5
 800c29c:	f000 f81a 	bl	800c2d4 <__swsetup_r>
 800c2a0:	2800      	cmp	r0, #0
 800c2a2:	d0cb      	beq.n	800c23c <__swbuf_r+0x28>
 800c2a4:	f04f 37ff 	mov.w	r7, #4294967295
 800c2a8:	e7ea      	b.n	800c280 <__swbuf_r+0x6c>
 800c2aa:	bf00      	nop
 800c2ac:	0800f258 	.word	0x0800f258
 800c2b0:	0800f278 	.word	0x0800f278
 800c2b4:	0800f238 	.word	0x0800f238

0800c2b8 <__ascii_wctomb>:
 800c2b8:	b149      	cbz	r1, 800c2ce <__ascii_wctomb+0x16>
 800c2ba:	2aff      	cmp	r2, #255	; 0xff
 800c2bc:	bf85      	ittet	hi
 800c2be:	238a      	movhi	r3, #138	; 0x8a
 800c2c0:	6003      	strhi	r3, [r0, #0]
 800c2c2:	700a      	strbls	r2, [r1, #0]
 800c2c4:	f04f 30ff 	movhi.w	r0, #4294967295
 800c2c8:	bf98      	it	ls
 800c2ca:	2001      	movls	r0, #1
 800c2cc:	4770      	bx	lr
 800c2ce:	4608      	mov	r0, r1
 800c2d0:	4770      	bx	lr
	...

0800c2d4 <__swsetup_r>:
 800c2d4:	4b32      	ldr	r3, [pc, #200]	; (800c3a0 <__swsetup_r+0xcc>)
 800c2d6:	b570      	push	{r4, r5, r6, lr}
 800c2d8:	681d      	ldr	r5, [r3, #0]
 800c2da:	4606      	mov	r6, r0
 800c2dc:	460c      	mov	r4, r1
 800c2de:	b125      	cbz	r5, 800c2ea <__swsetup_r+0x16>
 800c2e0:	69ab      	ldr	r3, [r5, #24]
 800c2e2:	b913      	cbnz	r3, 800c2ea <__swsetup_r+0x16>
 800c2e4:	4628      	mov	r0, r5
 800c2e6:	f000 f985 	bl	800c5f4 <__sinit>
 800c2ea:	4b2e      	ldr	r3, [pc, #184]	; (800c3a4 <__swsetup_r+0xd0>)
 800c2ec:	429c      	cmp	r4, r3
 800c2ee:	d10f      	bne.n	800c310 <__swsetup_r+0x3c>
 800c2f0:	686c      	ldr	r4, [r5, #4]
 800c2f2:	89a3      	ldrh	r3, [r4, #12]
 800c2f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2f8:	0719      	lsls	r1, r3, #28
 800c2fa:	d42c      	bmi.n	800c356 <__swsetup_r+0x82>
 800c2fc:	06dd      	lsls	r5, r3, #27
 800c2fe:	d411      	bmi.n	800c324 <__swsetup_r+0x50>
 800c300:	2309      	movs	r3, #9
 800c302:	6033      	str	r3, [r6, #0]
 800c304:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c308:	81a3      	strh	r3, [r4, #12]
 800c30a:	f04f 30ff 	mov.w	r0, #4294967295
 800c30e:	e03e      	b.n	800c38e <__swsetup_r+0xba>
 800c310:	4b25      	ldr	r3, [pc, #148]	; (800c3a8 <__swsetup_r+0xd4>)
 800c312:	429c      	cmp	r4, r3
 800c314:	d101      	bne.n	800c31a <__swsetup_r+0x46>
 800c316:	68ac      	ldr	r4, [r5, #8]
 800c318:	e7eb      	b.n	800c2f2 <__swsetup_r+0x1e>
 800c31a:	4b24      	ldr	r3, [pc, #144]	; (800c3ac <__swsetup_r+0xd8>)
 800c31c:	429c      	cmp	r4, r3
 800c31e:	bf08      	it	eq
 800c320:	68ec      	ldreq	r4, [r5, #12]
 800c322:	e7e6      	b.n	800c2f2 <__swsetup_r+0x1e>
 800c324:	0758      	lsls	r0, r3, #29
 800c326:	d512      	bpl.n	800c34e <__swsetup_r+0x7a>
 800c328:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c32a:	b141      	cbz	r1, 800c33e <__swsetup_r+0x6a>
 800c32c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c330:	4299      	cmp	r1, r3
 800c332:	d002      	beq.n	800c33a <__swsetup_r+0x66>
 800c334:	4630      	mov	r0, r6
 800c336:	f7fd fa69 	bl	800980c <_free_r>
 800c33a:	2300      	movs	r3, #0
 800c33c:	6363      	str	r3, [r4, #52]	; 0x34
 800c33e:	89a3      	ldrh	r3, [r4, #12]
 800c340:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c344:	81a3      	strh	r3, [r4, #12]
 800c346:	2300      	movs	r3, #0
 800c348:	6063      	str	r3, [r4, #4]
 800c34a:	6923      	ldr	r3, [r4, #16]
 800c34c:	6023      	str	r3, [r4, #0]
 800c34e:	89a3      	ldrh	r3, [r4, #12]
 800c350:	f043 0308 	orr.w	r3, r3, #8
 800c354:	81a3      	strh	r3, [r4, #12]
 800c356:	6923      	ldr	r3, [r4, #16]
 800c358:	b94b      	cbnz	r3, 800c36e <__swsetup_r+0x9a>
 800c35a:	89a3      	ldrh	r3, [r4, #12]
 800c35c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c364:	d003      	beq.n	800c36e <__swsetup_r+0x9a>
 800c366:	4621      	mov	r1, r4
 800c368:	4630      	mov	r0, r6
 800c36a:	f000 fa07 	bl	800c77c <__smakebuf_r>
 800c36e:	89a0      	ldrh	r0, [r4, #12]
 800c370:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c374:	f010 0301 	ands.w	r3, r0, #1
 800c378:	d00a      	beq.n	800c390 <__swsetup_r+0xbc>
 800c37a:	2300      	movs	r3, #0
 800c37c:	60a3      	str	r3, [r4, #8]
 800c37e:	6963      	ldr	r3, [r4, #20]
 800c380:	425b      	negs	r3, r3
 800c382:	61a3      	str	r3, [r4, #24]
 800c384:	6923      	ldr	r3, [r4, #16]
 800c386:	b943      	cbnz	r3, 800c39a <__swsetup_r+0xc6>
 800c388:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c38c:	d1ba      	bne.n	800c304 <__swsetup_r+0x30>
 800c38e:	bd70      	pop	{r4, r5, r6, pc}
 800c390:	0781      	lsls	r1, r0, #30
 800c392:	bf58      	it	pl
 800c394:	6963      	ldrpl	r3, [r4, #20]
 800c396:	60a3      	str	r3, [r4, #8]
 800c398:	e7f4      	b.n	800c384 <__swsetup_r+0xb0>
 800c39a:	2000      	movs	r0, #0
 800c39c:	e7f7      	b.n	800c38e <__swsetup_r+0xba>
 800c39e:	bf00      	nop
 800c3a0:	200003cc 	.word	0x200003cc
 800c3a4:	0800f258 	.word	0x0800f258
 800c3a8:	0800f278 	.word	0x0800f278
 800c3ac:	0800f238 	.word	0x0800f238

0800c3b0 <abort>:
 800c3b0:	b508      	push	{r3, lr}
 800c3b2:	2006      	movs	r0, #6
 800c3b4:	f000 fa8a 	bl	800c8cc <raise>
 800c3b8:	2001      	movs	r0, #1
 800c3ba:	f7f6 f9ef 	bl	800279c <_exit>
	...

0800c3c0 <__sflush_r>:
 800c3c0:	898a      	ldrh	r2, [r1, #12]
 800c3c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3c6:	4605      	mov	r5, r0
 800c3c8:	0710      	lsls	r0, r2, #28
 800c3ca:	460c      	mov	r4, r1
 800c3cc:	d458      	bmi.n	800c480 <__sflush_r+0xc0>
 800c3ce:	684b      	ldr	r3, [r1, #4]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	dc05      	bgt.n	800c3e0 <__sflush_r+0x20>
 800c3d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	dc02      	bgt.n	800c3e0 <__sflush_r+0x20>
 800c3da:	2000      	movs	r0, #0
 800c3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3e2:	2e00      	cmp	r6, #0
 800c3e4:	d0f9      	beq.n	800c3da <__sflush_r+0x1a>
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c3ec:	682f      	ldr	r7, [r5, #0]
 800c3ee:	602b      	str	r3, [r5, #0]
 800c3f0:	d032      	beq.n	800c458 <__sflush_r+0x98>
 800c3f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c3f4:	89a3      	ldrh	r3, [r4, #12]
 800c3f6:	075a      	lsls	r2, r3, #29
 800c3f8:	d505      	bpl.n	800c406 <__sflush_r+0x46>
 800c3fa:	6863      	ldr	r3, [r4, #4]
 800c3fc:	1ac0      	subs	r0, r0, r3
 800c3fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c400:	b10b      	cbz	r3, 800c406 <__sflush_r+0x46>
 800c402:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c404:	1ac0      	subs	r0, r0, r3
 800c406:	2300      	movs	r3, #0
 800c408:	4602      	mov	r2, r0
 800c40a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c40c:	6a21      	ldr	r1, [r4, #32]
 800c40e:	4628      	mov	r0, r5
 800c410:	47b0      	blx	r6
 800c412:	1c43      	adds	r3, r0, #1
 800c414:	89a3      	ldrh	r3, [r4, #12]
 800c416:	d106      	bne.n	800c426 <__sflush_r+0x66>
 800c418:	6829      	ldr	r1, [r5, #0]
 800c41a:	291d      	cmp	r1, #29
 800c41c:	d82c      	bhi.n	800c478 <__sflush_r+0xb8>
 800c41e:	4a2a      	ldr	r2, [pc, #168]	; (800c4c8 <__sflush_r+0x108>)
 800c420:	40ca      	lsrs	r2, r1
 800c422:	07d6      	lsls	r6, r2, #31
 800c424:	d528      	bpl.n	800c478 <__sflush_r+0xb8>
 800c426:	2200      	movs	r2, #0
 800c428:	6062      	str	r2, [r4, #4]
 800c42a:	04d9      	lsls	r1, r3, #19
 800c42c:	6922      	ldr	r2, [r4, #16]
 800c42e:	6022      	str	r2, [r4, #0]
 800c430:	d504      	bpl.n	800c43c <__sflush_r+0x7c>
 800c432:	1c42      	adds	r2, r0, #1
 800c434:	d101      	bne.n	800c43a <__sflush_r+0x7a>
 800c436:	682b      	ldr	r3, [r5, #0]
 800c438:	b903      	cbnz	r3, 800c43c <__sflush_r+0x7c>
 800c43a:	6560      	str	r0, [r4, #84]	; 0x54
 800c43c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c43e:	602f      	str	r7, [r5, #0]
 800c440:	2900      	cmp	r1, #0
 800c442:	d0ca      	beq.n	800c3da <__sflush_r+0x1a>
 800c444:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c448:	4299      	cmp	r1, r3
 800c44a:	d002      	beq.n	800c452 <__sflush_r+0x92>
 800c44c:	4628      	mov	r0, r5
 800c44e:	f7fd f9dd 	bl	800980c <_free_r>
 800c452:	2000      	movs	r0, #0
 800c454:	6360      	str	r0, [r4, #52]	; 0x34
 800c456:	e7c1      	b.n	800c3dc <__sflush_r+0x1c>
 800c458:	6a21      	ldr	r1, [r4, #32]
 800c45a:	2301      	movs	r3, #1
 800c45c:	4628      	mov	r0, r5
 800c45e:	47b0      	blx	r6
 800c460:	1c41      	adds	r1, r0, #1
 800c462:	d1c7      	bne.n	800c3f4 <__sflush_r+0x34>
 800c464:	682b      	ldr	r3, [r5, #0]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d0c4      	beq.n	800c3f4 <__sflush_r+0x34>
 800c46a:	2b1d      	cmp	r3, #29
 800c46c:	d001      	beq.n	800c472 <__sflush_r+0xb2>
 800c46e:	2b16      	cmp	r3, #22
 800c470:	d101      	bne.n	800c476 <__sflush_r+0xb6>
 800c472:	602f      	str	r7, [r5, #0]
 800c474:	e7b1      	b.n	800c3da <__sflush_r+0x1a>
 800c476:	89a3      	ldrh	r3, [r4, #12]
 800c478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c47c:	81a3      	strh	r3, [r4, #12]
 800c47e:	e7ad      	b.n	800c3dc <__sflush_r+0x1c>
 800c480:	690f      	ldr	r7, [r1, #16]
 800c482:	2f00      	cmp	r7, #0
 800c484:	d0a9      	beq.n	800c3da <__sflush_r+0x1a>
 800c486:	0793      	lsls	r3, r2, #30
 800c488:	680e      	ldr	r6, [r1, #0]
 800c48a:	bf08      	it	eq
 800c48c:	694b      	ldreq	r3, [r1, #20]
 800c48e:	600f      	str	r7, [r1, #0]
 800c490:	bf18      	it	ne
 800c492:	2300      	movne	r3, #0
 800c494:	eba6 0807 	sub.w	r8, r6, r7
 800c498:	608b      	str	r3, [r1, #8]
 800c49a:	f1b8 0f00 	cmp.w	r8, #0
 800c49e:	dd9c      	ble.n	800c3da <__sflush_r+0x1a>
 800c4a0:	6a21      	ldr	r1, [r4, #32]
 800c4a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c4a4:	4643      	mov	r3, r8
 800c4a6:	463a      	mov	r2, r7
 800c4a8:	4628      	mov	r0, r5
 800c4aa:	47b0      	blx	r6
 800c4ac:	2800      	cmp	r0, #0
 800c4ae:	dc06      	bgt.n	800c4be <__sflush_r+0xfe>
 800c4b0:	89a3      	ldrh	r3, [r4, #12]
 800c4b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4b6:	81a3      	strh	r3, [r4, #12]
 800c4b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4bc:	e78e      	b.n	800c3dc <__sflush_r+0x1c>
 800c4be:	4407      	add	r7, r0
 800c4c0:	eba8 0800 	sub.w	r8, r8, r0
 800c4c4:	e7e9      	b.n	800c49a <__sflush_r+0xda>
 800c4c6:	bf00      	nop
 800c4c8:	20400001 	.word	0x20400001

0800c4cc <_fflush_r>:
 800c4cc:	b538      	push	{r3, r4, r5, lr}
 800c4ce:	690b      	ldr	r3, [r1, #16]
 800c4d0:	4605      	mov	r5, r0
 800c4d2:	460c      	mov	r4, r1
 800c4d4:	b913      	cbnz	r3, 800c4dc <_fflush_r+0x10>
 800c4d6:	2500      	movs	r5, #0
 800c4d8:	4628      	mov	r0, r5
 800c4da:	bd38      	pop	{r3, r4, r5, pc}
 800c4dc:	b118      	cbz	r0, 800c4e6 <_fflush_r+0x1a>
 800c4de:	6983      	ldr	r3, [r0, #24]
 800c4e0:	b90b      	cbnz	r3, 800c4e6 <_fflush_r+0x1a>
 800c4e2:	f000 f887 	bl	800c5f4 <__sinit>
 800c4e6:	4b14      	ldr	r3, [pc, #80]	; (800c538 <_fflush_r+0x6c>)
 800c4e8:	429c      	cmp	r4, r3
 800c4ea:	d11b      	bne.n	800c524 <_fflush_r+0x58>
 800c4ec:	686c      	ldr	r4, [r5, #4]
 800c4ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d0ef      	beq.n	800c4d6 <_fflush_r+0xa>
 800c4f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c4f8:	07d0      	lsls	r0, r2, #31
 800c4fa:	d404      	bmi.n	800c506 <_fflush_r+0x3a>
 800c4fc:	0599      	lsls	r1, r3, #22
 800c4fe:	d402      	bmi.n	800c506 <_fflush_r+0x3a>
 800c500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c502:	f000 f915 	bl	800c730 <__retarget_lock_acquire_recursive>
 800c506:	4628      	mov	r0, r5
 800c508:	4621      	mov	r1, r4
 800c50a:	f7ff ff59 	bl	800c3c0 <__sflush_r>
 800c50e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c510:	07da      	lsls	r2, r3, #31
 800c512:	4605      	mov	r5, r0
 800c514:	d4e0      	bmi.n	800c4d8 <_fflush_r+0xc>
 800c516:	89a3      	ldrh	r3, [r4, #12]
 800c518:	059b      	lsls	r3, r3, #22
 800c51a:	d4dd      	bmi.n	800c4d8 <_fflush_r+0xc>
 800c51c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c51e:	f000 f908 	bl	800c732 <__retarget_lock_release_recursive>
 800c522:	e7d9      	b.n	800c4d8 <_fflush_r+0xc>
 800c524:	4b05      	ldr	r3, [pc, #20]	; (800c53c <_fflush_r+0x70>)
 800c526:	429c      	cmp	r4, r3
 800c528:	d101      	bne.n	800c52e <_fflush_r+0x62>
 800c52a:	68ac      	ldr	r4, [r5, #8]
 800c52c:	e7df      	b.n	800c4ee <_fflush_r+0x22>
 800c52e:	4b04      	ldr	r3, [pc, #16]	; (800c540 <_fflush_r+0x74>)
 800c530:	429c      	cmp	r4, r3
 800c532:	bf08      	it	eq
 800c534:	68ec      	ldreq	r4, [r5, #12]
 800c536:	e7da      	b.n	800c4ee <_fflush_r+0x22>
 800c538:	0800f258 	.word	0x0800f258
 800c53c:	0800f278 	.word	0x0800f278
 800c540:	0800f238 	.word	0x0800f238

0800c544 <std>:
 800c544:	2300      	movs	r3, #0
 800c546:	b510      	push	{r4, lr}
 800c548:	4604      	mov	r4, r0
 800c54a:	e9c0 3300 	strd	r3, r3, [r0]
 800c54e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c552:	6083      	str	r3, [r0, #8]
 800c554:	8181      	strh	r1, [r0, #12]
 800c556:	6643      	str	r3, [r0, #100]	; 0x64
 800c558:	81c2      	strh	r2, [r0, #14]
 800c55a:	6183      	str	r3, [r0, #24]
 800c55c:	4619      	mov	r1, r3
 800c55e:	2208      	movs	r2, #8
 800c560:	305c      	adds	r0, #92	; 0x5c
 800c562:	f7fd f94b 	bl	80097fc <memset>
 800c566:	4b05      	ldr	r3, [pc, #20]	; (800c57c <std+0x38>)
 800c568:	6263      	str	r3, [r4, #36]	; 0x24
 800c56a:	4b05      	ldr	r3, [pc, #20]	; (800c580 <std+0x3c>)
 800c56c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c56e:	4b05      	ldr	r3, [pc, #20]	; (800c584 <std+0x40>)
 800c570:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c572:	4b05      	ldr	r3, [pc, #20]	; (800c588 <std+0x44>)
 800c574:	6224      	str	r4, [r4, #32]
 800c576:	6323      	str	r3, [r4, #48]	; 0x30
 800c578:	bd10      	pop	{r4, pc}
 800c57a:	bf00      	nop
 800c57c:	0800c905 	.word	0x0800c905
 800c580:	0800c927 	.word	0x0800c927
 800c584:	0800c95f 	.word	0x0800c95f
 800c588:	0800c983 	.word	0x0800c983

0800c58c <_cleanup_r>:
 800c58c:	4901      	ldr	r1, [pc, #4]	; (800c594 <_cleanup_r+0x8>)
 800c58e:	f000 b8af 	b.w	800c6f0 <_fwalk_reent>
 800c592:	bf00      	nop
 800c594:	0800c4cd 	.word	0x0800c4cd

0800c598 <__sfmoreglue>:
 800c598:	b570      	push	{r4, r5, r6, lr}
 800c59a:	1e4a      	subs	r2, r1, #1
 800c59c:	2568      	movs	r5, #104	; 0x68
 800c59e:	4355      	muls	r5, r2
 800c5a0:	460e      	mov	r6, r1
 800c5a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c5a6:	f7fd f981 	bl	80098ac <_malloc_r>
 800c5aa:	4604      	mov	r4, r0
 800c5ac:	b140      	cbz	r0, 800c5c0 <__sfmoreglue+0x28>
 800c5ae:	2100      	movs	r1, #0
 800c5b0:	e9c0 1600 	strd	r1, r6, [r0]
 800c5b4:	300c      	adds	r0, #12
 800c5b6:	60a0      	str	r0, [r4, #8]
 800c5b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c5bc:	f7fd f91e 	bl	80097fc <memset>
 800c5c0:	4620      	mov	r0, r4
 800c5c2:	bd70      	pop	{r4, r5, r6, pc}

0800c5c4 <__sfp_lock_acquire>:
 800c5c4:	4801      	ldr	r0, [pc, #4]	; (800c5cc <__sfp_lock_acquire+0x8>)
 800c5c6:	f000 b8b3 	b.w	800c730 <__retarget_lock_acquire_recursive>
 800c5ca:	bf00      	nop
 800c5cc:	20000ddc 	.word	0x20000ddc

0800c5d0 <__sfp_lock_release>:
 800c5d0:	4801      	ldr	r0, [pc, #4]	; (800c5d8 <__sfp_lock_release+0x8>)
 800c5d2:	f000 b8ae 	b.w	800c732 <__retarget_lock_release_recursive>
 800c5d6:	bf00      	nop
 800c5d8:	20000ddc 	.word	0x20000ddc

0800c5dc <__sinit_lock_acquire>:
 800c5dc:	4801      	ldr	r0, [pc, #4]	; (800c5e4 <__sinit_lock_acquire+0x8>)
 800c5de:	f000 b8a7 	b.w	800c730 <__retarget_lock_acquire_recursive>
 800c5e2:	bf00      	nop
 800c5e4:	20000dd7 	.word	0x20000dd7

0800c5e8 <__sinit_lock_release>:
 800c5e8:	4801      	ldr	r0, [pc, #4]	; (800c5f0 <__sinit_lock_release+0x8>)
 800c5ea:	f000 b8a2 	b.w	800c732 <__retarget_lock_release_recursive>
 800c5ee:	bf00      	nop
 800c5f0:	20000dd7 	.word	0x20000dd7

0800c5f4 <__sinit>:
 800c5f4:	b510      	push	{r4, lr}
 800c5f6:	4604      	mov	r4, r0
 800c5f8:	f7ff fff0 	bl	800c5dc <__sinit_lock_acquire>
 800c5fc:	69a3      	ldr	r3, [r4, #24]
 800c5fe:	b11b      	cbz	r3, 800c608 <__sinit+0x14>
 800c600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c604:	f7ff bff0 	b.w	800c5e8 <__sinit_lock_release>
 800c608:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c60c:	6523      	str	r3, [r4, #80]	; 0x50
 800c60e:	4b13      	ldr	r3, [pc, #76]	; (800c65c <__sinit+0x68>)
 800c610:	4a13      	ldr	r2, [pc, #76]	; (800c660 <__sinit+0x6c>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	62a2      	str	r2, [r4, #40]	; 0x28
 800c616:	42a3      	cmp	r3, r4
 800c618:	bf04      	itt	eq
 800c61a:	2301      	moveq	r3, #1
 800c61c:	61a3      	streq	r3, [r4, #24]
 800c61e:	4620      	mov	r0, r4
 800c620:	f000 f820 	bl	800c664 <__sfp>
 800c624:	6060      	str	r0, [r4, #4]
 800c626:	4620      	mov	r0, r4
 800c628:	f000 f81c 	bl	800c664 <__sfp>
 800c62c:	60a0      	str	r0, [r4, #8]
 800c62e:	4620      	mov	r0, r4
 800c630:	f000 f818 	bl	800c664 <__sfp>
 800c634:	2200      	movs	r2, #0
 800c636:	60e0      	str	r0, [r4, #12]
 800c638:	2104      	movs	r1, #4
 800c63a:	6860      	ldr	r0, [r4, #4]
 800c63c:	f7ff ff82 	bl	800c544 <std>
 800c640:	68a0      	ldr	r0, [r4, #8]
 800c642:	2201      	movs	r2, #1
 800c644:	2109      	movs	r1, #9
 800c646:	f7ff ff7d 	bl	800c544 <std>
 800c64a:	68e0      	ldr	r0, [r4, #12]
 800c64c:	2202      	movs	r2, #2
 800c64e:	2112      	movs	r1, #18
 800c650:	f7ff ff78 	bl	800c544 <std>
 800c654:	2301      	movs	r3, #1
 800c656:	61a3      	str	r3, [r4, #24]
 800c658:	e7d2      	b.n	800c600 <__sinit+0xc>
 800c65a:	bf00      	nop
 800c65c:	0800edfc 	.word	0x0800edfc
 800c660:	0800c58d 	.word	0x0800c58d

0800c664 <__sfp>:
 800c664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c666:	4607      	mov	r7, r0
 800c668:	f7ff ffac 	bl	800c5c4 <__sfp_lock_acquire>
 800c66c:	4b1e      	ldr	r3, [pc, #120]	; (800c6e8 <__sfp+0x84>)
 800c66e:	681e      	ldr	r6, [r3, #0]
 800c670:	69b3      	ldr	r3, [r6, #24]
 800c672:	b913      	cbnz	r3, 800c67a <__sfp+0x16>
 800c674:	4630      	mov	r0, r6
 800c676:	f7ff ffbd 	bl	800c5f4 <__sinit>
 800c67a:	3648      	adds	r6, #72	; 0x48
 800c67c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c680:	3b01      	subs	r3, #1
 800c682:	d503      	bpl.n	800c68c <__sfp+0x28>
 800c684:	6833      	ldr	r3, [r6, #0]
 800c686:	b30b      	cbz	r3, 800c6cc <__sfp+0x68>
 800c688:	6836      	ldr	r6, [r6, #0]
 800c68a:	e7f7      	b.n	800c67c <__sfp+0x18>
 800c68c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c690:	b9d5      	cbnz	r5, 800c6c8 <__sfp+0x64>
 800c692:	4b16      	ldr	r3, [pc, #88]	; (800c6ec <__sfp+0x88>)
 800c694:	60e3      	str	r3, [r4, #12]
 800c696:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c69a:	6665      	str	r5, [r4, #100]	; 0x64
 800c69c:	f000 f847 	bl	800c72e <__retarget_lock_init_recursive>
 800c6a0:	f7ff ff96 	bl	800c5d0 <__sfp_lock_release>
 800c6a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c6a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c6ac:	6025      	str	r5, [r4, #0]
 800c6ae:	61a5      	str	r5, [r4, #24]
 800c6b0:	2208      	movs	r2, #8
 800c6b2:	4629      	mov	r1, r5
 800c6b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c6b8:	f7fd f8a0 	bl	80097fc <memset>
 800c6bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c6c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6c8:	3468      	adds	r4, #104	; 0x68
 800c6ca:	e7d9      	b.n	800c680 <__sfp+0x1c>
 800c6cc:	2104      	movs	r1, #4
 800c6ce:	4638      	mov	r0, r7
 800c6d0:	f7ff ff62 	bl	800c598 <__sfmoreglue>
 800c6d4:	4604      	mov	r4, r0
 800c6d6:	6030      	str	r0, [r6, #0]
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	d1d5      	bne.n	800c688 <__sfp+0x24>
 800c6dc:	f7ff ff78 	bl	800c5d0 <__sfp_lock_release>
 800c6e0:	230c      	movs	r3, #12
 800c6e2:	603b      	str	r3, [r7, #0]
 800c6e4:	e7ee      	b.n	800c6c4 <__sfp+0x60>
 800c6e6:	bf00      	nop
 800c6e8:	0800edfc 	.word	0x0800edfc
 800c6ec:	ffff0001 	.word	0xffff0001

0800c6f0 <_fwalk_reent>:
 800c6f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6f4:	4606      	mov	r6, r0
 800c6f6:	4688      	mov	r8, r1
 800c6f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c6fc:	2700      	movs	r7, #0
 800c6fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c702:	f1b9 0901 	subs.w	r9, r9, #1
 800c706:	d505      	bpl.n	800c714 <_fwalk_reent+0x24>
 800c708:	6824      	ldr	r4, [r4, #0]
 800c70a:	2c00      	cmp	r4, #0
 800c70c:	d1f7      	bne.n	800c6fe <_fwalk_reent+0xe>
 800c70e:	4638      	mov	r0, r7
 800c710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c714:	89ab      	ldrh	r3, [r5, #12]
 800c716:	2b01      	cmp	r3, #1
 800c718:	d907      	bls.n	800c72a <_fwalk_reent+0x3a>
 800c71a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c71e:	3301      	adds	r3, #1
 800c720:	d003      	beq.n	800c72a <_fwalk_reent+0x3a>
 800c722:	4629      	mov	r1, r5
 800c724:	4630      	mov	r0, r6
 800c726:	47c0      	blx	r8
 800c728:	4307      	orrs	r7, r0
 800c72a:	3568      	adds	r5, #104	; 0x68
 800c72c:	e7e9      	b.n	800c702 <_fwalk_reent+0x12>

0800c72e <__retarget_lock_init_recursive>:
 800c72e:	4770      	bx	lr

0800c730 <__retarget_lock_acquire_recursive>:
 800c730:	4770      	bx	lr

0800c732 <__retarget_lock_release_recursive>:
 800c732:	4770      	bx	lr

0800c734 <__swhatbuf_r>:
 800c734:	b570      	push	{r4, r5, r6, lr}
 800c736:	460e      	mov	r6, r1
 800c738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c73c:	2900      	cmp	r1, #0
 800c73e:	b096      	sub	sp, #88	; 0x58
 800c740:	4614      	mov	r4, r2
 800c742:	461d      	mov	r5, r3
 800c744:	da07      	bge.n	800c756 <__swhatbuf_r+0x22>
 800c746:	2300      	movs	r3, #0
 800c748:	602b      	str	r3, [r5, #0]
 800c74a:	89b3      	ldrh	r3, [r6, #12]
 800c74c:	061a      	lsls	r2, r3, #24
 800c74e:	d410      	bmi.n	800c772 <__swhatbuf_r+0x3e>
 800c750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c754:	e00e      	b.n	800c774 <__swhatbuf_r+0x40>
 800c756:	466a      	mov	r2, sp
 800c758:	f000 f93a 	bl	800c9d0 <_fstat_r>
 800c75c:	2800      	cmp	r0, #0
 800c75e:	dbf2      	blt.n	800c746 <__swhatbuf_r+0x12>
 800c760:	9a01      	ldr	r2, [sp, #4]
 800c762:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c766:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c76a:	425a      	negs	r2, r3
 800c76c:	415a      	adcs	r2, r3
 800c76e:	602a      	str	r2, [r5, #0]
 800c770:	e7ee      	b.n	800c750 <__swhatbuf_r+0x1c>
 800c772:	2340      	movs	r3, #64	; 0x40
 800c774:	2000      	movs	r0, #0
 800c776:	6023      	str	r3, [r4, #0]
 800c778:	b016      	add	sp, #88	; 0x58
 800c77a:	bd70      	pop	{r4, r5, r6, pc}

0800c77c <__smakebuf_r>:
 800c77c:	898b      	ldrh	r3, [r1, #12]
 800c77e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c780:	079d      	lsls	r5, r3, #30
 800c782:	4606      	mov	r6, r0
 800c784:	460c      	mov	r4, r1
 800c786:	d507      	bpl.n	800c798 <__smakebuf_r+0x1c>
 800c788:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c78c:	6023      	str	r3, [r4, #0]
 800c78e:	6123      	str	r3, [r4, #16]
 800c790:	2301      	movs	r3, #1
 800c792:	6163      	str	r3, [r4, #20]
 800c794:	b002      	add	sp, #8
 800c796:	bd70      	pop	{r4, r5, r6, pc}
 800c798:	ab01      	add	r3, sp, #4
 800c79a:	466a      	mov	r2, sp
 800c79c:	f7ff ffca 	bl	800c734 <__swhatbuf_r>
 800c7a0:	9900      	ldr	r1, [sp, #0]
 800c7a2:	4605      	mov	r5, r0
 800c7a4:	4630      	mov	r0, r6
 800c7a6:	f7fd f881 	bl	80098ac <_malloc_r>
 800c7aa:	b948      	cbnz	r0, 800c7c0 <__smakebuf_r+0x44>
 800c7ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7b0:	059a      	lsls	r2, r3, #22
 800c7b2:	d4ef      	bmi.n	800c794 <__smakebuf_r+0x18>
 800c7b4:	f023 0303 	bic.w	r3, r3, #3
 800c7b8:	f043 0302 	orr.w	r3, r3, #2
 800c7bc:	81a3      	strh	r3, [r4, #12]
 800c7be:	e7e3      	b.n	800c788 <__smakebuf_r+0xc>
 800c7c0:	4b0d      	ldr	r3, [pc, #52]	; (800c7f8 <__smakebuf_r+0x7c>)
 800c7c2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c7c4:	89a3      	ldrh	r3, [r4, #12]
 800c7c6:	6020      	str	r0, [r4, #0]
 800c7c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7cc:	81a3      	strh	r3, [r4, #12]
 800c7ce:	9b00      	ldr	r3, [sp, #0]
 800c7d0:	6163      	str	r3, [r4, #20]
 800c7d2:	9b01      	ldr	r3, [sp, #4]
 800c7d4:	6120      	str	r0, [r4, #16]
 800c7d6:	b15b      	cbz	r3, 800c7f0 <__smakebuf_r+0x74>
 800c7d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7dc:	4630      	mov	r0, r6
 800c7de:	f000 f909 	bl	800c9f4 <_isatty_r>
 800c7e2:	b128      	cbz	r0, 800c7f0 <__smakebuf_r+0x74>
 800c7e4:	89a3      	ldrh	r3, [r4, #12]
 800c7e6:	f023 0303 	bic.w	r3, r3, #3
 800c7ea:	f043 0301 	orr.w	r3, r3, #1
 800c7ee:	81a3      	strh	r3, [r4, #12]
 800c7f0:	89a0      	ldrh	r0, [r4, #12]
 800c7f2:	4305      	orrs	r5, r0
 800c7f4:	81a5      	strh	r5, [r4, #12]
 800c7f6:	e7cd      	b.n	800c794 <__smakebuf_r+0x18>
 800c7f8:	0800c58d 	.word	0x0800c58d

0800c7fc <memmove>:
 800c7fc:	4288      	cmp	r0, r1
 800c7fe:	b510      	push	{r4, lr}
 800c800:	eb01 0402 	add.w	r4, r1, r2
 800c804:	d902      	bls.n	800c80c <memmove+0x10>
 800c806:	4284      	cmp	r4, r0
 800c808:	4623      	mov	r3, r4
 800c80a:	d807      	bhi.n	800c81c <memmove+0x20>
 800c80c:	1e43      	subs	r3, r0, #1
 800c80e:	42a1      	cmp	r1, r4
 800c810:	d008      	beq.n	800c824 <memmove+0x28>
 800c812:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c816:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c81a:	e7f8      	b.n	800c80e <memmove+0x12>
 800c81c:	4402      	add	r2, r0
 800c81e:	4601      	mov	r1, r0
 800c820:	428a      	cmp	r2, r1
 800c822:	d100      	bne.n	800c826 <memmove+0x2a>
 800c824:	bd10      	pop	{r4, pc}
 800c826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c82a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c82e:	e7f7      	b.n	800c820 <memmove+0x24>

0800c830 <_realloc_r>:
 800c830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c832:	4607      	mov	r7, r0
 800c834:	4614      	mov	r4, r2
 800c836:	460e      	mov	r6, r1
 800c838:	b921      	cbnz	r1, 800c844 <_realloc_r+0x14>
 800c83a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c83e:	4611      	mov	r1, r2
 800c840:	f7fd b834 	b.w	80098ac <_malloc_r>
 800c844:	b922      	cbnz	r2, 800c850 <_realloc_r+0x20>
 800c846:	f7fc ffe1 	bl	800980c <_free_r>
 800c84a:	4625      	mov	r5, r4
 800c84c:	4628      	mov	r0, r5
 800c84e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c850:	f000 f8f2 	bl	800ca38 <_malloc_usable_size_r>
 800c854:	42a0      	cmp	r0, r4
 800c856:	d20f      	bcs.n	800c878 <_realloc_r+0x48>
 800c858:	4621      	mov	r1, r4
 800c85a:	4638      	mov	r0, r7
 800c85c:	f7fd f826 	bl	80098ac <_malloc_r>
 800c860:	4605      	mov	r5, r0
 800c862:	2800      	cmp	r0, #0
 800c864:	d0f2      	beq.n	800c84c <_realloc_r+0x1c>
 800c866:	4631      	mov	r1, r6
 800c868:	4622      	mov	r2, r4
 800c86a:	f7fe fb8b 	bl	800af84 <memcpy>
 800c86e:	4631      	mov	r1, r6
 800c870:	4638      	mov	r0, r7
 800c872:	f7fc ffcb 	bl	800980c <_free_r>
 800c876:	e7e9      	b.n	800c84c <_realloc_r+0x1c>
 800c878:	4635      	mov	r5, r6
 800c87a:	e7e7      	b.n	800c84c <_realloc_r+0x1c>

0800c87c <_raise_r>:
 800c87c:	291f      	cmp	r1, #31
 800c87e:	b538      	push	{r3, r4, r5, lr}
 800c880:	4604      	mov	r4, r0
 800c882:	460d      	mov	r5, r1
 800c884:	d904      	bls.n	800c890 <_raise_r+0x14>
 800c886:	2316      	movs	r3, #22
 800c888:	6003      	str	r3, [r0, #0]
 800c88a:	f04f 30ff 	mov.w	r0, #4294967295
 800c88e:	bd38      	pop	{r3, r4, r5, pc}
 800c890:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c892:	b112      	cbz	r2, 800c89a <_raise_r+0x1e>
 800c894:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c898:	b94b      	cbnz	r3, 800c8ae <_raise_r+0x32>
 800c89a:	4620      	mov	r0, r4
 800c89c:	f000 f830 	bl	800c900 <_getpid_r>
 800c8a0:	462a      	mov	r2, r5
 800c8a2:	4601      	mov	r1, r0
 800c8a4:	4620      	mov	r0, r4
 800c8a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8aa:	f000 b817 	b.w	800c8dc <_kill_r>
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	d00a      	beq.n	800c8c8 <_raise_r+0x4c>
 800c8b2:	1c59      	adds	r1, r3, #1
 800c8b4:	d103      	bne.n	800c8be <_raise_r+0x42>
 800c8b6:	2316      	movs	r3, #22
 800c8b8:	6003      	str	r3, [r0, #0]
 800c8ba:	2001      	movs	r0, #1
 800c8bc:	e7e7      	b.n	800c88e <_raise_r+0x12>
 800c8be:	2400      	movs	r4, #0
 800c8c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c8c4:	4628      	mov	r0, r5
 800c8c6:	4798      	blx	r3
 800c8c8:	2000      	movs	r0, #0
 800c8ca:	e7e0      	b.n	800c88e <_raise_r+0x12>

0800c8cc <raise>:
 800c8cc:	4b02      	ldr	r3, [pc, #8]	; (800c8d8 <raise+0xc>)
 800c8ce:	4601      	mov	r1, r0
 800c8d0:	6818      	ldr	r0, [r3, #0]
 800c8d2:	f7ff bfd3 	b.w	800c87c <_raise_r>
 800c8d6:	bf00      	nop
 800c8d8:	200003cc 	.word	0x200003cc

0800c8dc <_kill_r>:
 800c8dc:	b538      	push	{r3, r4, r5, lr}
 800c8de:	4d07      	ldr	r5, [pc, #28]	; (800c8fc <_kill_r+0x20>)
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	4604      	mov	r4, r0
 800c8e4:	4608      	mov	r0, r1
 800c8e6:	4611      	mov	r1, r2
 800c8e8:	602b      	str	r3, [r5, #0]
 800c8ea:	f7f5 ff47 	bl	800277c <_kill>
 800c8ee:	1c43      	adds	r3, r0, #1
 800c8f0:	d102      	bne.n	800c8f8 <_kill_r+0x1c>
 800c8f2:	682b      	ldr	r3, [r5, #0]
 800c8f4:	b103      	cbz	r3, 800c8f8 <_kill_r+0x1c>
 800c8f6:	6023      	str	r3, [r4, #0]
 800c8f8:	bd38      	pop	{r3, r4, r5, pc}
 800c8fa:	bf00      	nop
 800c8fc:	20000dd0 	.word	0x20000dd0

0800c900 <_getpid_r>:
 800c900:	f7f5 bf34 	b.w	800276c <_getpid>

0800c904 <__sread>:
 800c904:	b510      	push	{r4, lr}
 800c906:	460c      	mov	r4, r1
 800c908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c90c:	f000 f89c 	bl	800ca48 <_read_r>
 800c910:	2800      	cmp	r0, #0
 800c912:	bfab      	itete	ge
 800c914:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c916:	89a3      	ldrhlt	r3, [r4, #12]
 800c918:	181b      	addge	r3, r3, r0
 800c91a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c91e:	bfac      	ite	ge
 800c920:	6563      	strge	r3, [r4, #84]	; 0x54
 800c922:	81a3      	strhlt	r3, [r4, #12]
 800c924:	bd10      	pop	{r4, pc}

0800c926 <__swrite>:
 800c926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c92a:	461f      	mov	r7, r3
 800c92c:	898b      	ldrh	r3, [r1, #12]
 800c92e:	05db      	lsls	r3, r3, #23
 800c930:	4605      	mov	r5, r0
 800c932:	460c      	mov	r4, r1
 800c934:	4616      	mov	r6, r2
 800c936:	d505      	bpl.n	800c944 <__swrite+0x1e>
 800c938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c93c:	2302      	movs	r3, #2
 800c93e:	2200      	movs	r2, #0
 800c940:	f000 f868 	bl	800ca14 <_lseek_r>
 800c944:	89a3      	ldrh	r3, [r4, #12]
 800c946:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c94a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c94e:	81a3      	strh	r3, [r4, #12]
 800c950:	4632      	mov	r2, r6
 800c952:	463b      	mov	r3, r7
 800c954:	4628      	mov	r0, r5
 800c956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c95a:	f000 b817 	b.w	800c98c <_write_r>

0800c95e <__sseek>:
 800c95e:	b510      	push	{r4, lr}
 800c960:	460c      	mov	r4, r1
 800c962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c966:	f000 f855 	bl	800ca14 <_lseek_r>
 800c96a:	1c43      	adds	r3, r0, #1
 800c96c:	89a3      	ldrh	r3, [r4, #12]
 800c96e:	bf15      	itete	ne
 800c970:	6560      	strne	r0, [r4, #84]	; 0x54
 800c972:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c976:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c97a:	81a3      	strheq	r3, [r4, #12]
 800c97c:	bf18      	it	ne
 800c97e:	81a3      	strhne	r3, [r4, #12]
 800c980:	bd10      	pop	{r4, pc}

0800c982 <__sclose>:
 800c982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c986:	f000 b813 	b.w	800c9b0 <_close_r>
	...

0800c98c <_write_r>:
 800c98c:	b538      	push	{r3, r4, r5, lr}
 800c98e:	4d07      	ldr	r5, [pc, #28]	; (800c9ac <_write_r+0x20>)
 800c990:	4604      	mov	r4, r0
 800c992:	4608      	mov	r0, r1
 800c994:	4611      	mov	r1, r2
 800c996:	2200      	movs	r2, #0
 800c998:	602a      	str	r2, [r5, #0]
 800c99a:	461a      	mov	r2, r3
 800c99c:	f7f5 ff25 	bl	80027ea <_write>
 800c9a0:	1c43      	adds	r3, r0, #1
 800c9a2:	d102      	bne.n	800c9aa <_write_r+0x1e>
 800c9a4:	682b      	ldr	r3, [r5, #0]
 800c9a6:	b103      	cbz	r3, 800c9aa <_write_r+0x1e>
 800c9a8:	6023      	str	r3, [r4, #0]
 800c9aa:	bd38      	pop	{r3, r4, r5, pc}
 800c9ac:	20000dd0 	.word	0x20000dd0

0800c9b0 <_close_r>:
 800c9b0:	b538      	push	{r3, r4, r5, lr}
 800c9b2:	4d06      	ldr	r5, [pc, #24]	; (800c9cc <_close_r+0x1c>)
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	4604      	mov	r4, r0
 800c9b8:	4608      	mov	r0, r1
 800c9ba:	602b      	str	r3, [r5, #0]
 800c9bc:	f7f5 ff31 	bl	8002822 <_close>
 800c9c0:	1c43      	adds	r3, r0, #1
 800c9c2:	d102      	bne.n	800c9ca <_close_r+0x1a>
 800c9c4:	682b      	ldr	r3, [r5, #0]
 800c9c6:	b103      	cbz	r3, 800c9ca <_close_r+0x1a>
 800c9c8:	6023      	str	r3, [r4, #0]
 800c9ca:	bd38      	pop	{r3, r4, r5, pc}
 800c9cc:	20000dd0 	.word	0x20000dd0

0800c9d0 <_fstat_r>:
 800c9d0:	b538      	push	{r3, r4, r5, lr}
 800c9d2:	4d07      	ldr	r5, [pc, #28]	; (800c9f0 <_fstat_r+0x20>)
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	4604      	mov	r4, r0
 800c9d8:	4608      	mov	r0, r1
 800c9da:	4611      	mov	r1, r2
 800c9dc:	602b      	str	r3, [r5, #0]
 800c9de:	f7f5 ff2c 	bl	800283a <_fstat>
 800c9e2:	1c43      	adds	r3, r0, #1
 800c9e4:	d102      	bne.n	800c9ec <_fstat_r+0x1c>
 800c9e6:	682b      	ldr	r3, [r5, #0]
 800c9e8:	b103      	cbz	r3, 800c9ec <_fstat_r+0x1c>
 800c9ea:	6023      	str	r3, [r4, #0]
 800c9ec:	bd38      	pop	{r3, r4, r5, pc}
 800c9ee:	bf00      	nop
 800c9f0:	20000dd0 	.word	0x20000dd0

0800c9f4 <_isatty_r>:
 800c9f4:	b538      	push	{r3, r4, r5, lr}
 800c9f6:	4d06      	ldr	r5, [pc, #24]	; (800ca10 <_isatty_r+0x1c>)
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	4604      	mov	r4, r0
 800c9fc:	4608      	mov	r0, r1
 800c9fe:	602b      	str	r3, [r5, #0]
 800ca00:	f7f5 ff2b 	bl	800285a <_isatty>
 800ca04:	1c43      	adds	r3, r0, #1
 800ca06:	d102      	bne.n	800ca0e <_isatty_r+0x1a>
 800ca08:	682b      	ldr	r3, [r5, #0]
 800ca0a:	b103      	cbz	r3, 800ca0e <_isatty_r+0x1a>
 800ca0c:	6023      	str	r3, [r4, #0]
 800ca0e:	bd38      	pop	{r3, r4, r5, pc}
 800ca10:	20000dd0 	.word	0x20000dd0

0800ca14 <_lseek_r>:
 800ca14:	b538      	push	{r3, r4, r5, lr}
 800ca16:	4d07      	ldr	r5, [pc, #28]	; (800ca34 <_lseek_r+0x20>)
 800ca18:	4604      	mov	r4, r0
 800ca1a:	4608      	mov	r0, r1
 800ca1c:	4611      	mov	r1, r2
 800ca1e:	2200      	movs	r2, #0
 800ca20:	602a      	str	r2, [r5, #0]
 800ca22:	461a      	mov	r2, r3
 800ca24:	f7f5 ff24 	bl	8002870 <_lseek>
 800ca28:	1c43      	adds	r3, r0, #1
 800ca2a:	d102      	bne.n	800ca32 <_lseek_r+0x1e>
 800ca2c:	682b      	ldr	r3, [r5, #0]
 800ca2e:	b103      	cbz	r3, 800ca32 <_lseek_r+0x1e>
 800ca30:	6023      	str	r3, [r4, #0]
 800ca32:	bd38      	pop	{r3, r4, r5, pc}
 800ca34:	20000dd0 	.word	0x20000dd0

0800ca38 <_malloc_usable_size_r>:
 800ca38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca3c:	1f18      	subs	r0, r3, #4
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	bfbc      	itt	lt
 800ca42:	580b      	ldrlt	r3, [r1, r0]
 800ca44:	18c0      	addlt	r0, r0, r3
 800ca46:	4770      	bx	lr

0800ca48 <_read_r>:
 800ca48:	b538      	push	{r3, r4, r5, lr}
 800ca4a:	4d07      	ldr	r5, [pc, #28]	; (800ca68 <_read_r+0x20>)
 800ca4c:	4604      	mov	r4, r0
 800ca4e:	4608      	mov	r0, r1
 800ca50:	4611      	mov	r1, r2
 800ca52:	2200      	movs	r2, #0
 800ca54:	602a      	str	r2, [r5, #0]
 800ca56:	461a      	mov	r2, r3
 800ca58:	f7f5 feaa 	bl	80027b0 <_read>
 800ca5c:	1c43      	adds	r3, r0, #1
 800ca5e:	d102      	bne.n	800ca66 <_read_r+0x1e>
 800ca60:	682b      	ldr	r3, [r5, #0]
 800ca62:	b103      	cbz	r3, 800ca66 <_read_r+0x1e>
 800ca64:	6023      	str	r3, [r4, #0]
 800ca66:	bd38      	pop	{r3, r4, r5, pc}
 800ca68:	20000dd0 	.word	0x20000dd0
 800ca6c:	00000000 	.word	0x00000000

0800ca70 <atan>:
 800ca70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca74:	ec55 4b10 	vmov	r4, r5, d0
 800ca78:	4bc3      	ldr	r3, [pc, #780]	; (800cd88 <atan+0x318>)
 800ca7a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ca7e:	429e      	cmp	r6, r3
 800ca80:	46ab      	mov	fp, r5
 800ca82:	dd18      	ble.n	800cab6 <atan+0x46>
 800ca84:	4bc1      	ldr	r3, [pc, #772]	; (800cd8c <atan+0x31c>)
 800ca86:	429e      	cmp	r6, r3
 800ca88:	dc01      	bgt.n	800ca8e <atan+0x1e>
 800ca8a:	d109      	bne.n	800caa0 <atan+0x30>
 800ca8c:	b144      	cbz	r4, 800caa0 <atan+0x30>
 800ca8e:	4622      	mov	r2, r4
 800ca90:	462b      	mov	r3, r5
 800ca92:	4620      	mov	r0, r4
 800ca94:	4629      	mov	r1, r5
 800ca96:	f7f3 fbf9 	bl	800028c <__adddf3>
 800ca9a:	4604      	mov	r4, r0
 800ca9c:	460d      	mov	r5, r1
 800ca9e:	e006      	b.n	800caae <atan+0x3e>
 800caa0:	f1bb 0f00 	cmp.w	fp, #0
 800caa4:	f300 8131 	bgt.w	800cd0a <atan+0x29a>
 800caa8:	a59b      	add	r5, pc, #620	; (adr r5, 800cd18 <atan+0x2a8>)
 800caaa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800caae:	ec45 4b10 	vmov	d0, r4, r5
 800cab2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cab6:	4bb6      	ldr	r3, [pc, #728]	; (800cd90 <atan+0x320>)
 800cab8:	429e      	cmp	r6, r3
 800caba:	dc14      	bgt.n	800cae6 <atan+0x76>
 800cabc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800cac0:	429e      	cmp	r6, r3
 800cac2:	dc0d      	bgt.n	800cae0 <atan+0x70>
 800cac4:	a396      	add	r3, pc, #600	; (adr r3, 800cd20 <atan+0x2b0>)
 800cac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caca:	ee10 0a10 	vmov	r0, s0
 800cace:	4629      	mov	r1, r5
 800cad0:	f7f3 fbdc 	bl	800028c <__adddf3>
 800cad4:	4baf      	ldr	r3, [pc, #700]	; (800cd94 <atan+0x324>)
 800cad6:	2200      	movs	r2, #0
 800cad8:	f7f4 f81e 	bl	8000b18 <__aeabi_dcmpgt>
 800cadc:	2800      	cmp	r0, #0
 800cade:	d1e6      	bne.n	800caae <atan+0x3e>
 800cae0:	f04f 3aff 	mov.w	sl, #4294967295
 800cae4:	e02b      	b.n	800cb3e <atan+0xce>
 800cae6:	f000 f9b3 	bl	800ce50 <fabs>
 800caea:	4bab      	ldr	r3, [pc, #684]	; (800cd98 <atan+0x328>)
 800caec:	429e      	cmp	r6, r3
 800caee:	ec55 4b10 	vmov	r4, r5, d0
 800caf2:	f300 80bf 	bgt.w	800cc74 <atan+0x204>
 800caf6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800cafa:	429e      	cmp	r6, r3
 800cafc:	f300 80a0 	bgt.w	800cc40 <atan+0x1d0>
 800cb00:	ee10 2a10 	vmov	r2, s0
 800cb04:	ee10 0a10 	vmov	r0, s0
 800cb08:	462b      	mov	r3, r5
 800cb0a:	4629      	mov	r1, r5
 800cb0c:	f7f3 fbbe 	bl	800028c <__adddf3>
 800cb10:	4ba0      	ldr	r3, [pc, #640]	; (800cd94 <atan+0x324>)
 800cb12:	2200      	movs	r2, #0
 800cb14:	f7f3 fbb8 	bl	8000288 <__aeabi_dsub>
 800cb18:	2200      	movs	r2, #0
 800cb1a:	4606      	mov	r6, r0
 800cb1c:	460f      	mov	r7, r1
 800cb1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cb22:	4620      	mov	r0, r4
 800cb24:	4629      	mov	r1, r5
 800cb26:	f7f3 fbb1 	bl	800028c <__adddf3>
 800cb2a:	4602      	mov	r2, r0
 800cb2c:	460b      	mov	r3, r1
 800cb2e:	4630      	mov	r0, r6
 800cb30:	4639      	mov	r1, r7
 800cb32:	f7f3 fe8b 	bl	800084c <__aeabi_ddiv>
 800cb36:	f04f 0a00 	mov.w	sl, #0
 800cb3a:	4604      	mov	r4, r0
 800cb3c:	460d      	mov	r5, r1
 800cb3e:	4622      	mov	r2, r4
 800cb40:	462b      	mov	r3, r5
 800cb42:	4620      	mov	r0, r4
 800cb44:	4629      	mov	r1, r5
 800cb46:	f7f3 fd57 	bl	80005f8 <__aeabi_dmul>
 800cb4a:	4602      	mov	r2, r0
 800cb4c:	460b      	mov	r3, r1
 800cb4e:	4680      	mov	r8, r0
 800cb50:	4689      	mov	r9, r1
 800cb52:	f7f3 fd51 	bl	80005f8 <__aeabi_dmul>
 800cb56:	a374      	add	r3, pc, #464	; (adr r3, 800cd28 <atan+0x2b8>)
 800cb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb5c:	4606      	mov	r6, r0
 800cb5e:	460f      	mov	r7, r1
 800cb60:	f7f3 fd4a 	bl	80005f8 <__aeabi_dmul>
 800cb64:	a372      	add	r3, pc, #456	; (adr r3, 800cd30 <atan+0x2c0>)
 800cb66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6a:	f7f3 fb8f 	bl	800028c <__adddf3>
 800cb6e:	4632      	mov	r2, r6
 800cb70:	463b      	mov	r3, r7
 800cb72:	f7f3 fd41 	bl	80005f8 <__aeabi_dmul>
 800cb76:	a370      	add	r3, pc, #448	; (adr r3, 800cd38 <atan+0x2c8>)
 800cb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb7c:	f7f3 fb86 	bl	800028c <__adddf3>
 800cb80:	4632      	mov	r2, r6
 800cb82:	463b      	mov	r3, r7
 800cb84:	f7f3 fd38 	bl	80005f8 <__aeabi_dmul>
 800cb88:	a36d      	add	r3, pc, #436	; (adr r3, 800cd40 <atan+0x2d0>)
 800cb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8e:	f7f3 fb7d 	bl	800028c <__adddf3>
 800cb92:	4632      	mov	r2, r6
 800cb94:	463b      	mov	r3, r7
 800cb96:	f7f3 fd2f 	bl	80005f8 <__aeabi_dmul>
 800cb9a:	a36b      	add	r3, pc, #428	; (adr r3, 800cd48 <atan+0x2d8>)
 800cb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba0:	f7f3 fb74 	bl	800028c <__adddf3>
 800cba4:	4632      	mov	r2, r6
 800cba6:	463b      	mov	r3, r7
 800cba8:	f7f3 fd26 	bl	80005f8 <__aeabi_dmul>
 800cbac:	a368      	add	r3, pc, #416	; (adr r3, 800cd50 <atan+0x2e0>)
 800cbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb2:	f7f3 fb6b 	bl	800028c <__adddf3>
 800cbb6:	4642      	mov	r2, r8
 800cbb8:	464b      	mov	r3, r9
 800cbba:	f7f3 fd1d 	bl	80005f8 <__aeabi_dmul>
 800cbbe:	a366      	add	r3, pc, #408	; (adr r3, 800cd58 <atan+0x2e8>)
 800cbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc4:	4680      	mov	r8, r0
 800cbc6:	4689      	mov	r9, r1
 800cbc8:	4630      	mov	r0, r6
 800cbca:	4639      	mov	r1, r7
 800cbcc:	f7f3 fd14 	bl	80005f8 <__aeabi_dmul>
 800cbd0:	a363      	add	r3, pc, #396	; (adr r3, 800cd60 <atan+0x2f0>)
 800cbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd6:	f7f3 fb57 	bl	8000288 <__aeabi_dsub>
 800cbda:	4632      	mov	r2, r6
 800cbdc:	463b      	mov	r3, r7
 800cbde:	f7f3 fd0b 	bl	80005f8 <__aeabi_dmul>
 800cbe2:	a361      	add	r3, pc, #388	; (adr r3, 800cd68 <atan+0x2f8>)
 800cbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe8:	f7f3 fb4e 	bl	8000288 <__aeabi_dsub>
 800cbec:	4632      	mov	r2, r6
 800cbee:	463b      	mov	r3, r7
 800cbf0:	f7f3 fd02 	bl	80005f8 <__aeabi_dmul>
 800cbf4:	a35e      	add	r3, pc, #376	; (adr r3, 800cd70 <atan+0x300>)
 800cbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfa:	f7f3 fb45 	bl	8000288 <__aeabi_dsub>
 800cbfe:	4632      	mov	r2, r6
 800cc00:	463b      	mov	r3, r7
 800cc02:	f7f3 fcf9 	bl	80005f8 <__aeabi_dmul>
 800cc06:	a35c      	add	r3, pc, #368	; (adr r3, 800cd78 <atan+0x308>)
 800cc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0c:	f7f3 fb3c 	bl	8000288 <__aeabi_dsub>
 800cc10:	4632      	mov	r2, r6
 800cc12:	463b      	mov	r3, r7
 800cc14:	f7f3 fcf0 	bl	80005f8 <__aeabi_dmul>
 800cc18:	4602      	mov	r2, r0
 800cc1a:	460b      	mov	r3, r1
 800cc1c:	4640      	mov	r0, r8
 800cc1e:	4649      	mov	r1, r9
 800cc20:	f7f3 fb34 	bl	800028c <__adddf3>
 800cc24:	4622      	mov	r2, r4
 800cc26:	462b      	mov	r3, r5
 800cc28:	f7f3 fce6 	bl	80005f8 <__aeabi_dmul>
 800cc2c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800cc30:	4602      	mov	r2, r0
 800cc32:	460b      	mov	r3, r1
 800cc34:	d14b      	bne.n	800ccce <atan+0x25e>
 800cc36:	4620      	mov	r0, r4
 800cc38:	4629      	mov	r1, r5
 800cc3a:	f7f3 fb25 	bl	8000288 <__aeabi_dsub>
 800cc3e:	e72c      	b.n	800ca9a <atan+0x2a>
 800cc40:	ee10 0a10 	vmov	r0, s0
 800cc44:	4b53      	ldr	r3, [pc, #332]	; (800cd94 <atan+0x324>)
 800cc46:	2200      	movs	r2, #0
 800cc48:	4629      	mov	r1, r5
 800cc4a:	f7f3 fb1d 	bl	8000288 <__aeabi_dsub>
 800cc4e:	4b51      	ldr	r3, [pc, #324]	; (800cd94 <atan+0x324>)
 800cc50:	4606      	mov	r6, r0
 800cc52:	460f      	mov	r7, r1
 800cc54:	2200      	movs	r2, #0
 800cc56:	4620      	mov	r0, r4
 800cc58:	4629      	mov	r1, r5
 800cc5a:	f7f3 fb17 	bl	800028c <__adddf3>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	460b      	mov	r3, r1
 800cc62:	4630      	mov	r0, r6
 800cc64:	4639      	mov	r1, r7
 800cc66:	f7f3 fdf1 	bl	800084c <__aeabi_ddiv>
 800cc6a:	f04f 0a01 	mov.w	sl, #1
 800cc6e:	4604      	mov	r4, r0
 800cc70:	460d      	mov	r5, r1
 800cc72:	e764      	b.n	800cb3e <atan+0xce>
 800cc74:	4b49      	ldr	r3, [pc, #292]	; (800cd9c <atan+0x32c>)
 800cc76:	429e      	cmp	r6, r3
 800cc78:	da1d      	bge.n	800ccb6 <atan+0x246>
 800cc7a:	ee10 0a10 	vmov	r0, s0
 800cc7e:	4b48      	ldr	r3, [pc, #288]	; (800cda0 <atan+0x330>)
 800cc80:	2200      	movs	r2, #0
 800cc82:	4629      	mov	r1, r5
 800cc84:	f7f3 fb00 	bl	8000288 <__aeabi_dsub>
 800cc88:	4b45      	ldr	r3, [pc, #276]	; (800cda0 <atan+0x330>)
 800cc8a:	4606      	mov	r6, r0
 800cc8c:	460f      	mov	r7, r1
 800cc8e:	2200      	movs	r2, #0
 800cc90:	4620      	mov	r0, r4
 800cc92:	4629      	mov	r1, r5
 800cc94:	f7f3 fcb0 	bl	80005f8 <__aeabi_dmul>
 800cc98:	4b3e      	ldr	r3, [pc, #248]	; (800cd94 <atan+0x324>)
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	f7f3 faf6 	bl	800028c <__adddf3>
 800cca0:	4602      	mov	r2, r0
 800cca2:	460b      	mov	r3, r1
 800cca4:	4630      	mov	r0, r6
 800cca6:	4639      	mov	r1, r7
 800cca8:	f7f3 fdd0 	bl	800084c <__aeabi_ddiv>
 800ccac:	f04f 0a02 	mov.w	sl, #2
 800ccb0:	4604      	mov	r4, r0
 800ccb2:	460d      	mov	r5, r1
 800ccb4:	e743      	b.n	800cb3e <atan+0xce>
 800ccb6:	462b      	mov	r3, r5
 800ccb8:	ee10 2a10 	vmov	r2, s0
 800ccbc:	4939      	ldr	r1, [pc, #228]	; (800cda4 <atan+0x334>)
 800ccbe:	2000      	movs	r0, #0
 800ccc0:	f7f3 fdc4 	bl	800084c <__aeabi_ddiv>
 800ccc4:	f04f 0a03 	mov.w	sl, #3
 800ccc8:	4604      	mov	r4, r0
 800ccca:	460d      	mov	r5, r1
 800cccc:	e737      	b.n	800cb3e <atan+0xce>
 800ccce:	4b36      	ldr	r3, [pc, #216]	; (800cda8 <atan+0x338>)
 800ccd0:	4e36      	ldr	r6, [pc, #216]	; (800cdac <atan+0x33c>)
 800ccd2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ccd6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800ccda:	e9da 2300 	ldrd	r2, r3, [sl]
 800ccde:	f7f3 fad3 	bl	8000288 <__aeabi_dsub>
 800cce2:	4622      	mov	r2, r4
 800cce4:	462b      	mov	r3, r5
 800cce6:	f7f3 facf 	bl	8000288 <__aeabi_dsub>
 800ccea:	4602      	mov	r2, r0
 800ccec:	460b      	mov	r3, r1
 800ccee:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ccf2:	f7f3 fac9 	bl	8000288 <__aeabi_dsub>
 800ccf6:	f1bb 0f00 	cmp.w	fp, #0
 800ccfa:	4604      	mov	r4, r0
 800ccfc:	460d      	mov	r5, r1
 800ccfe:	f6bf aed6 	bge.w	800caae <atan+0x3e>
 800cd02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd06:	461d      	mov	r5, r3
 800cd08:	e6d1      	b.n	800caae <atan+0x3e>
 800cd0a:	a51d      	add	r5, pc, #116	; (adr r5, 800cd80 <atan+0x310>)
 800cd0c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cd10:	e6cd      	b.n	800caae <atan+0x3e>
 800cd12:	bf00      	nop
 800cd14:	f3af 8000 	nop.w
 800cd18:	54442d18 	.word	0x54442d18
 800cd1c:	bff921fb 	.word	0xbff921fb
 800cd20:	8800759c 	.word	0x8800759c
 800cd24:	7e37e43c 	.word	0x7e37e43c
 800cd28:	e322da11 	.word	0xe322da11
 800cd2c:	3f90ad3a 	.word	0x3f90ad3a
 800cd30:	24760deb 	.word	0x24760deb
 800cd34:	3fa97b4b 	.word	0x3fa97b4b
 800cd38:	a0d03d51 	.word	0xa0d03d51
 800cd3c:	3fb10d66 	.word	0x3fb10d66
 800cd40:	c54c206e 	.word	0xc54c206e
 800cd44:	3fb745cd 	.word	0x3fb745cd
 800cd48:	920083ff 	.word	0x920083ff
 800cd4c:	3fc24924 	.word	0x3fc24924
 800cd50:	5555550d 	.word	0x5555550d
 800cd54:	3fd55555 	.word	0x3fd55555
 800cd58:	2c6a6c2f 	.word	0x2c6a6c2f
 800cd5c:	bfa2b444 	.word	0xbfa2b444
 800cd60:	52defd9a 	.word	0x52defd9a
 800cd64:	3fadde2d 	.word	0x3fadde2d
 800cd68:	af749a6d 	.word	0xaf749a6d
 800cd6c:	3fb3b0f2 	.word	0x3fb3b0f2
 800cd70:	fe231671 	.word	0xfe231671
 800cd74:	3fbc71c6 	.word	0x3fbc71c6
 800cd78:	9998ebc4 	.word	0x9998ebc4
 800cd7c:	3fc99999 	.word	0x3fc99999
 800cd80:	54442d18 	.word	0x54442d18
 800cd84:	3ff921fb 	.word	0x3ff921fb
 800cd88:	440fffff 	.word	0x440fffff
 800cd8c:	7ff00000 	.word	0x7ff00000
 800cd90:	3fdbffff 	.word	0x3fdbffff
 800cd94:	3ff00000 	.word	0x3ff00000
 800cd98:	3ff2ffff 	.word	0x3ff2ffff
 800cd9c:	40038000 	.word	0x40038000
 800cda0:	3ff80000 	.word	0x3ff80000
 800cda4:	bff00000 	.word	0xbff00000
 800cda8:	0800f2b8 	.word	0x0800f2b8
 800cdac:	0800f298 	.word	0x0800f298

0800cdb0 <cos>:
 800cdb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cdb2:	ec53 2b10 	vmov	r2, r3, d0
 800cdb6:	4824      	ldr	r0, [pc, #144]	; (800ce48 <cos+0x98>)
 800cdb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cdbc:	4281      	cmp	r1, r0
 800cdbe:	dc06      	bgt.n	800cdce <cos+0x1e>
 800cdc0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800ce40 <cos+0x90>
 800cdc4:	f001 f96c 	bl	800e0a0 <__kernel_cos>
 800cdc8:	ec51 0b10 	vmov	r0, r1, d0
 800cdcc:	e007      	b.n	800cdde <cos+0x2e>
 800cdce:	481f      	ldr	r0, [pc, #124]	; (800ce4c <cos+0x9c>)
 800cdd0:	4281      	cmp	r1, r0
 800cdd2:	dd09      	ble.n	800cde8 <cos+0x38>
 800cdd4:	ee10 0a10 	vmov	r0, s0
 800cdd8:	4619      	mov	r1, r3
 800cdda:	f7f3 fa55 	bl	8000288 <__aeabi_dsub>
 800cdde:	ec41 0b10 	vmov	d0, r0, r1
 800cde2:	b005      	add	sp, #20
 800cde4:	f85d fb04 	ldr.w	pc, [sp], #4
 800cde8:	4668      	mov	r0, sp
 800cdea:	f000 fe99 	bl	800db20 <__ieee754_rem_pio2>
 800cdee:	f000 0003 	and.w	r0, r0, #3
 800cdf2:	2801      	cmp	r0, #1
 800cdf4:	d007      	beq.n	800ce06 <cos+0x56>
 800cdf6:	2802      	cmp	r0, #2
 800cdf8:	d012      	beq.n	800ce20 <cos+0x70>
 800cdfa:	b9c0      	cbnz	r0, 800ce2e <cos+0x7e>
 800cdfc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ce00:	ed9d 0b00 	vldr	d0, [sp]
 800ce04:	e7de      	b.n	800cdc4 <cos+0x14>
 800ce06:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ce0a:	ed9d 0b00 	vldr	d0, [sp]
 800ce0e:	f001 fd4f 	bl	800e8b0 <__kernel_sin>
 800ce12:	ec53 2b10 	vmov	r2, r3, d0
 800ce16:	ee10 0a10 	vmov	r0, s0
 800ce1a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ce1e:	e7de      	b.n	800cdde <cos+0x2e>
 800ce20:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ce24:	ed9d 0b00 	vldr	d0, [sp]
 800ce28:	f001 f93a 	bl	800e0a0 <__kernel_cos>
 800ce2c:	e7f1      	b.n	800ce12 <cos+0x62>
 800ce2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ce32:	ed9d 0b00 	vldr	d0, [sp]
 800ce36:	2001      	movs	r0, #1
 800ce38:	f001 fd3a 	bl	800e8b0 <__kernel_sin>
 800ce3c:	e7c4      	b.n	800cdc8 <cos+0x18>
 800ce3e:	bf00      	nop
	...
 800ce48:	3fe921fb 	.word	0x3fe921fb
 800ce4c:	7fefffff 	.word	0x7fefffff

0800ce50 <fabs>:
 800ce50:	ec51 0b10 	vmov	r0, r1, d0
 800ce54:	ee10 2a10 	vmov	r2, s0
 800ce58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ce5c:	ec43 2b10 	vmov	d0, r2, r3
 800ce60:	4770      	bx	lr
 800ce62:	0000      	movs	r0, r0
 800ce64:	0000      	movs	r0, r0
	...

0800ce68 <sin>:
 800ce68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce6a:	ec53 2b10 	vmov	r2, r3, d0
 800ce6e:	4826      	ldr	r0, [pc, #152]	; (800cf08 <sin+0xa0>)
 800ce70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ce74:	4281      	cmp	r1, r0
 800ce76:	dc07      	bgt.n	800ce88 <sin+0x20>
 800ce78:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800cf00 <sin+0x98>
 800ce7c:	2000      	movs	r0, #0
 800ce7e:	f001 fd17 	bl	800e8b0 <__kernel_sin>
 800ce82:	ec51 0b10 	vmov	r0, r1, d0
 800ce86:	e007      	b.n	800ce98 <sin+0x30>
 800ce88:	4820      	ldr	r0, [pc, #128]	; (800cf0c <sin+0xa4>)
 800ce8a:	4281      	cmp	r1, r0
 800ce8c:	dd09      	ble.n	800cea2 <sin+0x3a>
 800ce8e:	ee10 0a10 	vmov	r0, s0
 800ce92:	4619      	mov	r1, r3
 800ce94:	f7f3 f9f8 	bl	8000288 <__aeabi_dsub>
 800ce98:	ec41 0b10 	vmov	d0, r0, r1
 800ce9c:	b005      	add	sp, #20
 800ce9e:	f85d fb04 	ldr.w	pc, [sp], #4
 800cea2:	4668      	mov	r0, sp
 800cea4:	f000 fe3c 	bl	800db20 <__ieee754_rem_pio2>
 800cea8:	f000 0003 	and.w	r0, r0, #3
 800ceac:	2801      	cmp	r0, #1
 800ceae:	d008      	beq.n	800cec2 <sin+0x5a>
 800ceb0:	2802      	cmp	r0, #2
 800ceb2:	d00d      	beq.n	800ced0 <sin+0x68>
 800ceb4:	b9d0      	cbnz	r0, 800ceec <sin+0x84>
 800ceb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ceba:	ed9d 0b00 	vldr	d0, [sp]
 800cebe:	2001      	movs	r0, #1
 800cec0:	e7dd      	b.n	800ce7e <sin+0x16>
 800cec2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cec6:	ed9d 0b00 	vldr	d0, [sp]
 800ceca:	f001 f8e9 	bl	800e0a0 <__kernel_cos>
 800cece:	e7d8      	b.n	800ce82 <sin+0x1a>
 800ced0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ced4:	ed9d 0b00 	vldr	d0, [sp]
 800ced8:	2001      	movs	r0, #1
 800ceda:	f001 fce9 	bl	800e8b0 <__kernel_sin>
 800cede:	ec53 2b10 	vmov	r2, r3, d0
 800cee2:	ee10 0a10 	vmov	r0, s0
 800cee6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ceea:	e7d5      	b.n	800ce98 <sin+0x30>
 800ceec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cef0:	ed9d 0b00 	vldr	d0, [sp]
 800cef4:	f001 f8d4 	bl	800e0a0 <__kernel_cos>
 800cef8:	e7f1      	b.n	800cede <sin+0x76>
 800cefa:	bf00      	nop
 800cefc:	f3af 8000 	nop.w
	...
 800cf08:	3fe921fb 	.word	0x3fe921fb
 800cf0c:	7fefffff 	.word	0x7fefffff

0800cf10 <pow>:
 800cf10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf14:	ec59 8b10 	vmov	r8, r9, d0
 800cf18:	ec57 6b11 	vmov	r6, r7, d1
 800cf1c:	f000 f8dc 	bl	800d0d8 <__ieee754_pow>
 800cf20:	4b4e      	ldr	r3, [pc, #312]	; (800d05c <pow+0x14c>)
 800cf22:	f993 3000 	ldrsb.w	r3, [r3]
 800cf26:	3301      	adds	r3, #1
 800cf28:	ec55 4b10 	vmov	r4, r5, d0
 800cf2c:	d015      	beq.n	800cf5a <pow+0x4a>
 800cf2e:	4632      	mov	r2, r6
 800cf30:	463b      	mov	r3, r7
 800cf32:	4630      	mov	r0, r6
 800cf34:	4639      	mov	r1, r7
 800cf36:	f7f3 fdf9 	bl	8000b2c <__aeabi_dcmpun>
 800cf3a:	b970      	cbnz	r0, 800cf5a <pow+0x4a>
 800cf3c:	4642      	mov	r2, r8
 800cf3e:	464b      	mov	r3, r9
 800cf40:	4640      	mov	r0, r8
 800cf42:	4649      	mov	r1, r9
 800cf44:	f7f3 fdf2 	bl	8000b2c <__aeabi_dcmpun>
 800cf48:	2200      	movs	r2, #0
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	b148      	cbz	r0, 800cf62 <pow+0x52>
 800cf4e:	4630      	mov	r0, r6
 800cf50:	4639      	mov	r1, r7
 800cf52:	f7f3 fdb9 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf56:	2800      	cmp	r0, #0
 800cf58:	d17d      	bne.n	800d056 <pow+0x146>
 800cf5a:	ec45 4b10 	vmov	d0, r4, r5
 800cf5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf62:	4640      	mov	r0, r8
 800cf64:	4649      	mov	r1, r9
 800cf66:	f7f3 fdaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf6a:	b1e0      	cbz	r0, 800cfa6 <pow+0x96>
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	2300      	movs	r3, #0
 800cf70:	4630      	mov	r0, r6
 800cf72:	4639      	mov	r1, r7
 800cf74:	f7f3 fda8 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf78:	2800      	cmp	r0, #0
 800cf7a:	d16c      	bne.n	800d056 <pow+0x146>
 800cf7c:	ec47 6b10 	vmov	d0, r6, r7
 800cf80:	f001 fd54 	bl	800ea2c <finite>
 800cf84:	2800      	cmp	r0, #0
 800cf86:	d0e8      	beq.n	800cf5a <pow+0x4a>
 800cf88:	2200      	movs	r2, #0
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	4630      	mov	r0, r6
 800cf8e:	4639      	mov	r1, r7
 800cf90:	f7f3 fda4 	bl	8000adc <__aeabi_dcmplt>
 800cf94:	2800      	cmp	r0, #0
 800cf96:	d0e0      	beq.n	800cf5a <pow+0x4a>
 800cf98:	f7fc fbf6 	bl	8009788 <__errno>
 800cf9c:	2321      	movs	r3, #33	; 0x21
 800cf9e:	6003      	str	r3, [r0, #0]
 800cfa0:	2400      	movs	r4, #0
 800cfa2:	4d2f      	ldr	r5, [pc, #188]	; (800d060 <pow+0x150>)
 800cfa4:	e7d9      	b.n	800cf5a <pow+0x4a>
 800cfa6:	ec45 4b10 	vmov	d0, r4, r5
 800cfaa:	f001 fd3f 	bl	800ea2c <finite>
 800cfae:	bbb8      	cbnz	r0, 800d020 <pow+0x110>
 800cfb0:	ec49 8b10 	vmov	d0, r8, r9
 800cfb4:	f001 fd3a 	bl	800ea2c <finite>
 800cfb8:	b390      	cbz	r0, 800d020 <pow+0x110>
 800cfba:	ec47 6b10 	vmov	d0, r6, r7
 800cfbe:	f001 fd35 	bl	800ea2c <finite>
 800cfc2:	b368      	cbz	r0, 800d020 <pow+0x110>
 800cfc4:	4622      	mov	r2, r4
 800cfc6:	462b      	mov	r3, r5
 800cfc8:	4620      	mov	r0, r4
 800cfca:	4629      	mov	r1, r5
 800cfcc:	f7f3 fdae 	bl	8000b2c <__aeabi_dcmpun>
 800cfd0:	b160      	cbz	r0, 800cfec <pow+0xdc>
 800cfd2:	f7fc fbd9 	bl	8009788 <__errno>
 800cfd6:	2321      	movs	r3, #33	; 0x21
 800cfd8:	6003      	str	r3, [r0, #0]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	2300      	movs	r3, #0
 800cfde:	4610      	mov	r0, r2
 800cfe0:	4619      	mov	r1, r3
 800cfe2:	f7f3 fc33 	bl	800084c <__aeabi_ddiv>
 800cfe6:	4604      	mov	r4, r0
 800cfe8:	460d      	mov	r5, r1
 800cfea:	e7b6      	b.n	800cf5a <pow+0x4a>
 800cfec:	f7fc fbcc 	bl	8009788 <__errno>
 800cff0:	2322      	movs	r3, #34	; 0x22
 800cff2:	6003      	str	r3, [r0, #0]
 800cff4:	2200      	movs	r2, #0
 800cff6:	2300      	movs	r3, #0
 800cff8:	4640      	mov	r0, r8
 800cffa:	4649      	mov	r1, r9
 800cffc:	f7f3 fd6e 	bl	8000adc <__aeabi_dcmplt>
 800d000:	2400      	movs	r4, #0
 800d002:	b158      	cbz	r0, 800d01c <pow+0x10c>
 800d004:	ec47 6b10 	vmov	d0, r6, r7
 800d008:	f001 fd9e 	bl	800eb48 <rint>
 800d00c:	4632      	mov	r2, r6
 800d00e:	ec51 0b10 	vmov	r0, r1, d0
 800d012:	463b      	mov	r3, r7
 800d014:	f7f3 fd58 	bl	8000ac8 <__aeabi_dcmpeq>
 800d018:	2800      	cmp	r0, #0
 800d01a:	d0c2      	beq.n	800cfa2 <pow+0x92>
 800d01c:	4d11      	ldr	r5, [pc, #68]	; (800d064 <pow+0x154>)
 800d01e:	e79c      	b.n	800cf5a <pow+0x4a>
 800d020:	2200      	movs	r2, #0
 800d022:	2300      	movs	r3, #0
 800d024:	4620      	mov	r0, r4
 800d026:	4629      	mov	r1, r5
 800d028:	f7f3 fd4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d02c:	2800      	cmp	r0, #0
 800d02e:	d094      	beq.n	800cf5a <pow+0x4a>
 800d030:	ec49 8b10 	vmov	d0, r8, r9
 800d034:	f001 fcfa 	bl	800ea2c <finite>
 800d038:	2800      	cmp	r0, #0
 800d03a:	d08e      	beq.n	800cf5a <pow+0x4a>
 800d03c:	ec47 6b10 	vmov	d0, r6, r7
 800d040:	f001 fcf4 	bl	800ea2c <finite>
 800d044:	2800      	cmp	r0, #0
 800d046:	d088      	beq.n	800cf5a <pow+0x4a>
 800d048:	f7fc fb9e 	bl	8009788 <__errno>
 800d04c:	2322      	movs	r3, #34	; 0x22
 800d04e:	6003      	str	r3, [r0, #0]
 800d050:	2400      	movs	r4, #0
 800d052:	2500      	movs	r5, #0
 800d054:	e781      	b.n	800cf5a <pow+0x4a>
 800d056:	4d04      	ldr	r5, [pc, #16]	; (800d068 <pow+0x158>)
 800d058:	2400      	movs	r4, #0
 800d05a:	e77e      	b.n	800cf5a <pow+0x4a>
 800d05c:	200005a0 	.word	0x200005a0
 800d060:	fff00000 	.word	0xfff00000
 800d064:	7ff00000 	.word	0x7ff00000
 800d068:	3ff00000 	.word	0x3ff00000

0800d06c <sqrt>:
 800d06c:	b538      	push	{r3, r4, r5, lr}
 800d06e:	ed2d 8b02 	vpush	{d8}
 800d072:	ec55 4b10 	vmov	r4, r5, d0
 800d076:	f000 ff5d 	bl	800df34 <__ieee754_sqrt>
 800d07a:	4b15      	ldr	r3, [pc, #84]	; (800d0d0 <sqrt+0x64>)
 800d07c:	eeb0 8a40 	vmov.f32	s16, s0
 800d080:	eef0 8a60 	vmov.f32	s17, s1
 800d084:	f993 3000 	ldrsb.w	r3, [r3]
 800d088:	3301      	adds	r3, #1
 800d08a:	d019      	beq.n	800d0c0 <sqrt+0x54>
 800d08c:	4622      	mov	r2, r4
 800d08e:	462b      	mov	r3, r5
 800d090:	4620      	mov	r0, r4
 800d092:	4629      	mov	r1, r5
 800d094:	f7f3 fd4a 	bl	8000b2c <__aeabi_dcmpun>
 800d098:	b990      	cbnz	r0, 800d0c0 <sqrt+0x54>
 800d09a:	2200      	movs	r2, #0
 800d09c:	2300      	movs	r3, #0
 800d09e:	4620      	mov	r0, r4
 800d0a0:	4629      	mov	r1, r5
 800d0a2:	f7f3 fd1b 	bl	8000adc <__aeabi_dcmplt>
 800d0a6:	b158      	cbz	r0, 800d0c0 <sqrt+0x54>
 800d0a8:	f7fc fb6e 	bl	8009788 <__errno>
 800d0ac:	2321      	movs	r3, #33	; 0x21
 800d0ae:	6003      	str	r3, [r0, #0]
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	4610      	mov	r0, r2
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	f7f3 fbc8 	bl	800084c <__aeabi_ddiv>
 800d0bc:	ec41 0b18 	vmov	d8, r0, r1
 800d0c0:	eeb0 0a48 	vmov.f32	s0, s16
 800d0c4:	eef0 0a68 	vmov.f32	s1, s17
 800d0c8:	ecbd 8b02 	vpop	{d8}
 800d0cc:	bd38      	pop	{r3, r4, r5, pc}
 800d0ce:	bf00      	nop
 800d0d0:	200005a0 	.word	0x200005a0
 800d0d4:	00000000 	.word	0x00000000

0800d0d8 <__ieee754_pow>:
 800d0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0dc:	ed2d 8b06 	vpush	{d8-d10}
 800d0e0:	b08d      	sub	sp, #52	; 0x34
 800d0e2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d0e6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800d0ea:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800d0ee:	ea56 0100 	orrs.w	r1, r6, r0
 800d0f2:	ec53 2b10 	vmov	r2, r3, d0
 800d0f6:	f000 84d1 	beq.w	800da9c <__ieee754_pow+0x9c4>
 800d0fa:	497f      	ldr	r1, [pc, #508]	; (800d2f8 <__ieee754_pow+0x220>)
 800d0fc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800d100:	428c      	cmp	r4, r1
 800d102:	ee10 8a10 	vmov	r8, s0
 800d106:	4699      	mov	r9, r3
 800d108:	dc09      	bgt.n	800d11e <__ieee754_pow+0x46>
 800d10a:	d103      	bne.n	800d114 <__ieee754_pow+0x3c>
 800d10c:	b97a      	cbnz	r2, 800d12e <__ieee754_pow+0x56>
 800d10e:	42a6      	cmp	r6, r4
 800d110:	dd02      	ble.n	800d118 <__ieee754_pow+0x40>
 800d112:	e00c      	b.n	800d12e <__ieee754_pow+0x56>
 800d114:	428e      	cmp	r6, r1
 800d116:	dc02      	bgt.n	800d11e <__ieee754_pow+0x46>
 800d118:	428e      	cmp	r6, r1
 800d11a:	d110      	bne.n	800d13e <__ieee754_pow+0x66>
 800d11c:	b178      	cbz	r0, 800d13e <__ieee754_pow+0x66>
 800d11e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d122:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d126:	ea54 0308 	orrs.w	r3, r4, r8
 800d12a:	f000 84b7 	beq.w	800da9c <__ieee754_pow+0x9c4>
 800d12e:	4873      	ldr	r0, [pc, #460]	; (800d2fc <__ieee754_pow+0x224>)
 800d130:	b00d      	add	sp, #52	; 0x34
 800d132:	ecbd 8b06 	vpop	{d8-d10}
 800d136:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d13a:	f7ff b851 	b.w	800c1e0 <nan>
 800d13e:	f1b9 0f00 	cmp.w	r9, #0
 800d142:	da36      	bge.n	800d1b2 <__ieee754_pow+0xda>
 800d144:	496e      	ldr	r1, [pc, #440]	; (800d300 <__ieee754_pow+0x228>)
 800d146:	428e      	cmp	r6, r1
 800d148:	dc51      	bgt.n	800d1ee <__ieee754_pow+0x116>
 800d14a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800d14e:	428e      	cmp	r6, r1
 800d150:	f340 84af 	ble.w	800dab2 <__ieee754_pow+0x9da>
 800d154:	1531      	asrs	r1, r6, #20
 800d156:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d15a:	2914      	cmp	r1, #20
 800d15c:	dd0f      	ble.n	800d17e <__ieee754_pow+0xa6>
 800d15e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800d162:	fa20 fc01 	lsr.w	ip, r0, r1
 800d166:	fa0c f101 	lsl.w	r1, ip, r1
 800d16a:	4281      	cmp	r1, r0
 800d16c:	f040 84a1 	bne.w	800dab2 <__ieee754_pow+0x9da>
 800d170:	f00c 0c01 	and.w	ip, ip, #1
 800d174:	f1cc 0102 	rsb	r1, ip, #2
 800d178:	9100      	str	r1, [sp, #0]
 800d17a:	b180      	cbz	r0, 800d19e <__ieee754_pow+0xc6>
 800d17c:	e059      	b.n	800d232 <__ieee754_pow+0x15a>
 800d17e:	2800      	cmp	r0, #0
 800d180:	d155      	bne.n	800d22e <__ieee754_pow+0x156>
 800d182:	f1c1 0114 	rsb	r1, r1, #20
 800d186:	fa46 fc01 	asr.w	ip, r6, r1
 800d18a:	fa0c f101 	lsl.w	r1, ip, r1
 800d18e:	42b1      	cmp	r1, r6
 800d190:	f040 848c 	bne.w	800daac <__ieee754_pow+0x9d4>
 800d194:	f00c 0c01 	and.w	ip, ip, #1
 800d198:	f1cc 0102 	rsb	r1, ip, #2
 800d19c:	9100      	str	r1, [sp, #0]
 800d19e:	4959      	ldr	r1, [pc, #356]	; (800d304 <__ieee754_pow+0x22c>)
 800d1a0:	428e      	cmp	r6, r1
 800d1a2:	d12d      	bne.n	800d200 <__ieee754_pow+0x128>
 800d1a4:	2f00      	cmp	r7, #0
 800d1a6:	da79      	bge.n	800d29c <__ieee754_pow+0x1c4>
 800d1a8:	4956      	ldr	r1, [pc, #344]	; (800d304 <__ieee754_pow+0x22c>)
 800d1aa:	2000      	movs	r0, #0
 800d1ac:	f7f3 fb4e 	bl	800084c <__aeabi_ddiv>
 800d1b0:	e016      	b.n	800d1e0 <__ieee754_pow+0x108>
 800d1b2:	2100      	movs	r1, #0
 800d1b4:	9100      	str	r1, [sp, #0]
 800d1b6:	2800      	cmp	r0, #0
 800d1b8:	d13b      	bne.n	800d232 <__ieee754_pow+0x15a>
 800d1ba:	494f      	ldr	r1, [pc, #316]	; (800d2f8 <__ieee754_pow+0x220>)
 800d1bc:	428e      	cmp	r6, r1
 800d1be:	d1ee      	bne.n	800d19e <__ieee754_pow+0xc6>
 800d1c0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d1c4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d1c8:	ea53 0308 	orrs.w	r3, r3, r8
 800d1cc:	f000 8466 	beq.w	800da9c <__ieee754_pow+0x9c4>
 800d1d0:	4b4d      	ldr	r3, [pc, #308]	; (800d308 <__ieee754_pow+0x230>)
 800d1d2:	429c      	cmp	r4, r3
 800d1d4:	dd0d      	ble.n	800d1f2 <__ieee754_pow+0x11a>
 800d1d6:	2f00      	cmp	r7, #0
 800d1d8:	f280 8464 	bge.w	800daa4 <__ieee754_pow+0x9cc>
 800d1dc:	2000      	movs	r0, #0
 800d1de:	2100      	movs	r1, #0
 800d1e0:	ec41 0b10 	vmov	d0, r0, r1
 800d1e4:	b00d      	add	sp, #52	; 0x34
 800d1e6:	ecbd 8b06 	vpop	{d8-d10}
 800d1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ee:	2102      	movs	r1, #2
 800d1f0:	e7e0      	b.n	800d1b4 <__ieee754_pow+0xdc>
 800d1f2:	2f00      	cmp	r7, #0
 800d1f4:	daf2      	bge.n	800d1dc <__ieee754_pow+0x104>
 800d1f6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800d1fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d1fe:	e7ef      	b.n	800d1e0 <__ieee754_pow+0x108>
 800d200:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800d204:	d104      	bne.n	800d210 <__ieee754_pow+0x138>
 800d206:	4610      	mov	r0, r2
 800d208:	4619      	mov	r1, r3
 800d20a:	f7f3 f9f5 	bl	80005f8 <__aeabi_dmul>
 800d20e:	e7e7      	b.n	800d1e0 <__ieee754_pow+0x108>
 800d210:	493e      	ldr	r1, [pc, #248]	; (800d30c <__ieee754_pow+0x234>)
 800d212:	428f      	cmp	r7, r1
 800d214:	d10d      	bne.n	800d232 <__ieee754_pow+0x15a>
 800d216:	f1b9 0f00 	cmp.w	r9, #0
 800d21a:	db0a      	blt.n	800d232 <__ieee754_pow+0x15a>
 800d21c:	ec43 2b10 	vmov	d0, r2, r3
 800d220:	b00d      	add	sp, #52	; 0x34
 800d222:	ecbd 8b06 	vpop	{d8-d10}
 800d226:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d22a:	f000 be83 	b.w	800df34 <__ieee754_sqrt>
 800d22e:	2100      	movs	r1, #0
 800d230:	9100      	str	r1, [sp, #0]
 800d232:	ec43 2b10 	vmov	d0, r2, r3
 800d236:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d23a:	f7ff fe09 	bl	800ce50 <fabs>
 800d23e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d242:	ec51 0b10 	vmov	r0, r1, d0
 800d246:	f1b8 0f00 	cmp.w	r8, #0
 800d24a:	d12a      	bne.n	800d2a2 <__ieee754_pow+0x1ca>
 800d24c:	b12c      	cbz	r4, 800d25a <__ieee754_pow+0x182>
 800d24e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800d304 <__ieee754_pow+0x22c>
 800d252:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800d256:	45e6      	cmp	lr, ip
 800d258:	d123      	bne.n	800d2a2 <__ieee754_pow+0x1ca>
 800d25a:	2f00      	cmp	r7, #0
 800d25c:	da05      	bge.n	800d26a <__ieee754_pow+0x192>
 800d25e:	4602      	mov	r2, r0
 800d260:	460b      	mov	r3, r1
 800d262:	2000      	movs	r0, #0
 800d264:	4927      	ldr	r1, [pc, #156]	; (800d304 <__ieee754_pow+0x22c>)
 800d266:	f7f3 faf1 	bl	800084c <__aeabi_ddiv>
 800d26a:	f1b9 0f00 	cmp.w	r9, #0
 800d26e:	dab7      	bge.n	800d1e0 <__ieee754_pow+0x108>
 800d270:	9b00      	ldr	r3, [sp, #0]
 800d272:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d276:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d27a:	4323      	orrs	r3, r4
 800d27c:	d108      	bne.n	800d290 <__ieee754_pow+0x1b8>
 800d27e:	4602      	mov	r2, r0
 800d280:	460b      	mov	r3, r1
 800d282:	4610      	mov	r0, r2
 800d284:	4619      	mov	r1, r3
 800d286:	f7f2 ffff 	bl	8000288 <__aeabi_dsub>
 800d28a:	4602      	mov	r2, r0
 800d28c:	460b      	mov	r3, r1
 800d28e:	e78d      	b.n	800d1ac <__ieee754_pow+0xd4>
 800d290:	9b00      	ldr	r3, [sp, #0]
 800d292:	2b01      	cmp	r3, #1
 800d294:	d1a4      	bne.n	800d1e0 <__ieee754_pow+0x108>
 800d296:	4602      	mov	r2, r0
 800d298:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d29c:	4610      	mov	r0, r2
 800d29e:	4619      	mov	r1, r3
 800d2a0:	e79e      	b.n	800d1e0 <__ieee754_pow+0x108>
 800d2a2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800d2a6:	f10c 35ff 	add.w	r5, ip, #4294967295
 800d2aa:	950a      	str	r5, [sp, #40]	; 0x28
 800d2ac:	9d00      	ldr	r5, [sp, #0]
 800d2ae:	46ac      	mov	ip, r5
 800d2b0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d2b2:	ea5c 0505 	orrs.w	r5, ip, r5
 800d2b6:	d0e4      	beq.n	800d282 <__ieee754_pow+0x1aa>
 800d2b8:	4b15      	ldr	r3, [pc, #84]	; (800d310 <__ieee754_pow+0x238>)
 800d2ba:	429e      	cmp	r6, r3
 800d2bc:	f340 80fc 	ble.w	800d4b8 <__ieee754_pow+0x3e0>
 800d2c0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d2c4:	429e      	cmp	r6, r3
 800d2c6:	4b10      	ldr	r3, [pc, #64]	; (800d308 <__ieee754_pow+0x230>)
 800d2c8:	dd07      	ble.n	800d2da <__ieee754_pow+0x202>
 800d2ca:	429c      	cmp	r4, r3
 800d2cc:	dc0a      	bgt.n	800d2e4 <__ieee754_pow+0x20c>
 800d2ce:	2f00      	cmp	r7, #0
 800d2d0:	da84      	bge.n	800d1dc <__ieee754_pow+0x104>
 800d2d2:	a307      	add	r3, pc, #28	; (adr r3, 800d2f0 <__ieee754_pow+0x218>)
 800d2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d8:	e795      	b.n	800d206 <__ieee754_pow+0x12e>
 800d2da:	429c      	cmp	r4, r3
 800d2dc:	dbf7      	blt.n	800d2ce <__ieee754_pow+0x1f6>
 800d2de:	4b09      	ldr	r3, [pc, #36]	; (800d304 <__ieee754_pow+0x22c>)
 800d2e0:	429c      	cmp	r4, r3
 800d2e2:	dd17      	ble.n	800d314 <__ieee754_pow+0x23c>
 800d2e4:	2f00      	cmp	r7, #0
 800d2e6:	dcf4      	bgt.n	800d2d2 <__ieee754_pow+0x1fa>
 800d2e8:	e778      	b.n	800d1dc <__ieee754_pow+0x104>
 800d2ea:	bf00      	nop
 800d2ec:	f3af 8000 	nop.w
 800d2f0:	8800759c 	.word	0x8800759c
 800d2f4:	7e37e43c 	.word	0x7e37e43c
 800d2f8:	7ff00000 	.word	0x7ff00000
 800d2fc:	0800ef13 	.word	0x0800ef13
 800d300:	433fffff 	.word	0x433fffff
 800d304:	3ff00000 	.word	0x3ff00000
 800d308:	3fefffff 	.word	0x3fefffff
 800d30c:	3fe00000 	.word	0x3fe00000
 800d310:	41e00000 	.word	0x41e00000
 800d314:	4b64      	ldr	r3, [pc, #400]	; (800d4a8 <__ieee754_pow+0x3d0>)
 800d316:	2200      	movs	r2, #0
 800d318:	f7f2 ffb6 	bl	8000288 <__aeabi_dsub>
 800d31c:	a356      	add	r3, pc, #344	; (adr r3, 800d478 <__ieee754_pow+0x3a0>)
 800d31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d322:	4604      	mov	r4, r0
 800d324:	460d      	mov	r5, r1
 800d326:	f7f3 f967 	bl	80005f8 <__aeabi_dmul>
 800d32a:	a355      	add	r3, pc, #340	; (adr r3, 800d480 <__ieee754_pow+0x3a8>)
 800d32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d330:	4606      	mov	r6, r0
 800d332:	460f      	mov	r7, r1
 800d334:	4620      	mov	r0, r4
 800d336:	4629      	mov	r1, r5
 800d338:	f7f3 f95e 	bl	80005f8 <__aeabi_dmul>
 800d33c:	4b5b      	ldr	r3, [pc, #364]	; (800d4ac <__ieee754_pow+0x3d4>)
 800d33e:	4682      	mov	sl, r0
 800d340:	468b      	mov	fp, r1
 800d342:	2200      	movs	r2, #0
 800d344:	4620      	mov	r0, r4
 800d346:	4629      	mov	r1, r5
 800d348:	f7f3 f956 	bl	80005f8 <__aeabi_dmul>
 800d34c:	4602      	mov	r2, r0
 800d34e:	460b      	mov	r3, r1
 800d350:	a14d      	add	r1, pc, #308	; (adr r1, 800d488 <__ieee754_pow+0x3b0>)
 800d352:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d356:	f7f2 ff97 	bl	8000288 <__aeabi_dsub>
 800d35a:	4622      	mov	r2, r4
 800d35c:	462b      	mov	r3, r5
 800d35e:	f7f3 f94b 	bl	80005f8 <__aeabi_dmul>
 800d362:	4602      	mov	r2, r0
 800d364:	460b      	mov	r3, r1
 800d366:	2000      	movs	r0, #0
 800d368:	4951      	ldr	r1, [pc, #324]	; (800d4b0 <__ieee754_pow+0x3d8>)
 800d36a:	f7f2 ff8d 	bl	8000288 <__aeabi_dsub>
 800d36e:	4622      	mov	r2, r4
 800d370:	4680      	mov	r8, r0
 800d372:	4689      	mov	r9, r1
 800d374:	462b      	mov	r3, r5
 800d376:	4620      	mov	r0, r4
 800d378:	4629      	mov	r1, r5
 800d37a:	f7f3 f93d 	bl	80005f8 <__aeabi_dmul>
 800d37e:	4602      	mov	r2, r0
 800d380:	460b      	mov	r3, r1
 800d382:	4640      	mov	r0, r8
 800d384:	4649      	mov	r1, r9
 800d386:	f7f3 f937 	bl	80005f8 <__aeabi_dmul>
 800d38a:	a341      	add	r3, pc, #260	; (adr r3, 800d490 <__ieee754_pow+0x3b8>)
 800d38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d390:	f7f3 f932 	bl	80005f8 <__aeabi_dmul>
 800d394:	4602      	mov	r2, r0
 800d396:	460b      	mov	r3, r1
 800d398:	4650      	mov	r0, sl
 800d39a:	4659      	mov	r1, fp
 800d39c:	f7f2 ff74 	bl	8000288 <__aeabi_dsub>
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	460b      	mov	r3, r1
 800d3a4:	4680      	mov	r8, r0
 800d3a6:	4689      	mov	r9, r1
 800d3a8:	4630      	mov	r0, r6
 800d3aa:	4639      	mov	r1, r7
 800d3ac:	f7f2 ff6e 	bl	800028c <__adddf3>
 800d3b0:	2400      	movs	r4, #0
 800d3b2:	4632      	mov	r2, r6
 800d3b4:	463b      	mov	r3, r7
 800d3b6:	4620      	mov	r0, r4
 800d3b8:	460d      	mov	r5, r1
 800d3ba:	f7f2 ff65 	bl	8000288 <__aeabi_dsub>
 800d3be:	4602      	mov	r2, r0
 800d3c0:	460b      	mov	r3, r1
 800d3c2:	4640      	mov	r0, r8
 800d3c4:	4649      	mov	r1, r9
 800d3c6:	f7f2 ff5f 	bl	8000288 <__aeabi_dsub>
 800d3ca:	9b00      	ldr	r3, [sp, #0]
 800d3cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3ce:	3b01      	subs	r3, #1
 800d3d0:	4313      	orrs	r3, r2
 800d3d2:	4682      	mov	sl, r0
 800d3d4:	468b      	mov	fp, r1
 800d3d6:	f040 81f1 	bne.w	800d7bc <__ieee754_pow+0x6e4>
 800d3da:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800d498 <__ieee754_pow+0x3c0>
 800d3de:	eeb0 8a47 	vmov.f32	s16, s14
 800d3e2:	eef0 8a67 	vmov.f32	s17, s15
 800d3e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d3ea:	2600      	movs	r6, #0
 800d3ec:	4632      	mov	r2, r6
 800d3ee:	463b      	mov	r3, r7
 800d3f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3f4:	f7f2 ff48 	bl	8000288 <__aeabi_dsub>
 800d3f8:	4622      	mov	r2, r4
 800d3fa:	462b      	mov	r3, r5
 800d3fc:	f7f3 f8fc 	bl	80005f8 <__aeabi_dmul>
 800d400:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d404:	4680      	mov	r8, r0
 800d406:	4689      	mov	r9, r1
 800d408:	4650      	mov	r0, sl
 800d40a:	4659      	mov	r1, fp
 800d40c:	f7f3 f8f4 	bl	80005f8 <__aeabi_dmul>
 800d410:	4602      	mov	r2, r0
 800d412:	460b      	mov	r3, r1
 800d414:	4640      	mov	r0, r8
 800d416:	4649      	mov	r1, r9
 800d418:	f7f2 ff38 	bl	800028c <__adddf3>
 800d41c:	4632      	mov	r2, r6
 800d41e:	463b      	mov	r3, r7
 800d420:	4680      	mov	r8, r0
 800d422:	4689      	mov	r9, r1
 800d424:	4620      	mov	r0, r4
 800d426:	4629      	mov	r1, r5
 800d428:	f7f3 f8e6 	bl	80005f8 <__aeabi_dmul>
 800d42c:	460b      	mov	r3, r1
 800d42e:	4604      	mov	r4, r0
 800d430:	460d      	mov	r5, r1
 800d432:	4602      	mov	r2, r0
 800d434:	4649      	mov	r1, r9
 800d436:	4640      	mov	r0, r8
 800d438:	f7f2 ff28 	bl	800028c <__adddf3>
 800d43c:	4b1d      	ldr	r3, [pc, #116]	; (800d4b4 <__ieee754_pow+0x3dc>)
 800d43e:	4299      	cmp	r1, r3
 800d440:	ec45 4b19 	vmov	d9, r4, r5
 800d444:	4606      	mov	r6, r0
 800d446:	460f      	mov	r7, r1
 800d448:	468b      	mov	fp, r1
 800d44a:	f340 82fe 	ble.w	800da4a <__ieee754_pow+0x972>
 800d44e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d452:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d456:	4303      	orrs	r3, r0
 800d458:	f000 81f0 	beq.w	800d83c <__ieee754_pow+0x764>
 800d45c:	a310      	add	r3, pc, #64	; (adr r3, 800d4a0 <__ieee754_pow+0x3c8>)
 800d45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d462:	ec51 0b18 	vmov	r0, r1, d8
 800d466:	f7f3 f8c7 	bl	80005f8 <__aeabi_dmul>
 800d46a:	a30d      	add	r3, pc, #52	; (adr r3, 800d4a0 <__ieee754_pow+0x3c8>)
 800d46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d470:	e6cb      	b.n	800d20a <__ieee754_pow+0x132>
 800d472:	bf00      	nop
 800d474:	f3af 8000 	nop.w
 800d478:	60000000 	.word	0x60000000
 800d47c:	3ff71547 	.word	0x3ff71547
 800d480:	f85ddf44 	.word	0xf85ddf44
 800d484:	3e54ae0b 	.word	0x3e54ae0b
 800d488:	55555555 	.word	0x55555555
 800d48c:	3fd55555 	.word	0x3fd55555
 800d490:	652b82fe 	.word	0x652b82fe
 800d494:	3ff71547 	.word	0x3ff71547
 800d498:	00000000 	.word	0x00000000
 800d49c:	bff00000 	.word	0xbff00000
 800d4a0:	8800759c 	.word	0x8800759c
 800d4a4:	7e37e43c 	.word	0x7e37e43c
 800d4a8:	3ff00000 	.word	0x3ff00000
 800d4ac:	3fd00000 	.word	0x3fd00000
 800d4b0:	3fe00000 	.word	0x3fe00000
 800d4b4:	408fffff 	.word	0x408fffff
 800d4b8:	4bd7      	ldr	r3, [pc, #860]	; (800d818 <__ieee754_pow+0x740>)
 800d4ba:	ea03 0309 	and.w	r3, r3, r9
 800d4be:	2200      	movs	r2, #0
 800d4c0:	b92b      	cbnz	r3, 800d4ce <__ieee754_pow+0x3f6>
 800d4c2:	4bd6      	ldr	r3, [pc, #856]	; (800d81c <__ieee754_pow+0x744>)
 800d4c4:	f7f3 f898 	bl	80005f8 <__aeabi_dmul>
 800d4c8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d4cc:	460c      	mov	r4, r1
 800d4ce:	1523      	asrs	r3, r4, #20
 800d4d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d4d4:	4413      	add	r3, r2
 800d4d6:	9309      	str	r3, [sp, #36]	; 0x24
 800d4d8:	4bd1      	ldr	r3, [pc, #836]	; (800d820 <__ieee754_pow+0x748>)
 800d4da:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d4de:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d4e2:	429c      	cmp	r4, r3
 800d4e4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d4e8:	dd08      	ble.n	800d4fc <__ieee754_pow+0x424>
 800d4ea:	4bce      	ldr	r3, [pc, #824]	; (800d824 <__ieee754_pow+0x74c>)
 800d4ec:	429c      	cmp	r4, r3
 800d4ee:	f340 8163 	ble.w	800d7b8 <__ieee754_pow+0x6e0>
 800d4f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4f4:	3301      	adds	r3, #1
 800d4f6:	9309      	str	r3, [sp, #36]	; 0x24
 800d4f8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d4fc:	2400      	movs	r4, #0
 800d4fe:	00e3      	lsls	r3, r4, #3
 800d500:	930b      	str	r3, [sp, #44]	; 0x2c
 800d502:	4bc9      	ldr	r3, [pc, #804]	; (800d828 <__ieee754_pow+0x750>)
 800d504:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d508:	ed93 7b00 	vldr	d7, [r3]
 800d50c:	4629      	mov	r1, r5
 800d50e:	ec53 2b17 	vmov	r2, r3, d7
 800d512:	eeb0 8a47 	vmov.f32	s16, s14
 800d516:	eef0 8a67 	vmov.f32	s17, s15
 800d51a:	4682      	mov	sl, r0
 800d51c:	f7f2 feb4 	bl	8000288 <__aeabi_dsub>
 800d520:	4652      	mov	r2, sl
 800d522:	4606      	mov	r6, r0
 800d524:	460f      	mov	r7, r1
 800d526:	462b      	mov	r3, r5
 800d528:	ec51 0b18 	vmov	r0, r1, d8
 800d52c:	f7f2 feae 	bl	800028c <__adddf3>
 800d530:	4602      	mov	r2, r0
 800d532:	460b      	mov	r3, r1
 800d534:	2000      	movs	r0, #0
 800d536:	49bd      	ldr	r1, [pc, #756]	; (800d82c <__ieee754_pow+0x754>)
 800d538:	f7f3 f988 	bl	800084c <__aeabi_ddiv>
 800d53c:	ec41 0b19 	vmov	d9, r0, r1
 800d540:	4602      	mov	r2, r0
 800d542:	460b      	mov	r3, r1
 800d544:	4630      	mov	r0, r6
 800d546:	4639      	mov	r1, r7
 800d548:	f7f3 f856 	bl	80005f8 <__aeabi_dmul>
 800d54c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d550:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d554:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d558:	2300      	movs	r3, #0
 800d55a:	9304      	str	r3, [sp, #16]
 800d55c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d560:	46ab      	mov	fp, r5
 800d562:	106d      	asrs	r5, r5, #1
 800d564:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d568:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d56c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800d570:	2200      	movs	r2, #0
 800d572:	4640      	mov	r0, r8
 800d574:	4649      	mov	r1, r9
 800d576:	4614      	mov	r4, r2
 800d578:	461d      	mov	r5, r3
 800d57a:	f7f3 f83d 	bl	80005f8 <__aeabi_dmul>
 800d57e:	4602      	mov	r2, r0
 800d580:	460b      	mov	r3, r1
 800d582:	4630      	mov	r0, r6
 800d584:	4639      	mov	r1, r7
 800d586:	f7f2 fe7f 	bl	8000288 <__aeabi_dsub>
 800d58a:	ec53 2b18 	vmov	r2, r3, d8
 800d58e:	4606      	mov	r6, r0
 800d590:	460f      	mov	r7, r1
 800d592:	4620      	mov	r0, r4
 800d594:	4629      	mov	r1, r5
 800d596:	f7f2 fe77 	bl	8000288 <__aeabi_dsub>
 800d59a:	4602      	mov	r2, r0
 800d59c:	460b      	mov	r3, r1
 800d59e:	4650      	mov	r0, sl
 800d5a0:	4659      	mov	r1, fp
 800d5a2:	f7f2 fe71 	bl	8000288 <__aeabi_dsub>
 800d5a6:	4642      	mov	r2, r8
 800d5a8:	464b      	mov	r3, r9
 800d5aa:	f7f3 f825 	bl	80005f8 <__aeabi_dmul>
 800d5ae:	4602      	mov	r2, r0
 800d5b0:	460b      	mov	r3, r1
 800d5b2:	4630      	mov	r0, r6
 800d5b4:	4639      	mov	r1, r7
 800d5b6:	f7f2 fe67 	bl	8000288 <__aeabi_dsub>
 800d5ba:	ec53 2b19 	vmov	r2, r3, d9
 800d5be:	f7f3 f81b 	bl	80005f8 <__aeabi_dmul>
 800d5c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d5c6:	ec41 0b18 	vmov	d8, r0, r1
 800d5ca:	4610      	mov	r0, r2
 800d5cc:	4619      	mov	r1, r3
 800d5ce:	f7f3 f813 	bl	80005f8 <__aeabi_dmul>
 800d5d2:	a37d      	add	r3, pc, #500	; (adr r3, 800d7c8 <__ieee754_pow+0x6f0>)
 800d5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d8:	4604      	mov	r4, r0
 800d5da:	460d      	mov	r5, r1
 800d5dc:	f7f3 f80c 	bl	80005f8 <__aeabi_dmul>
 800d5e0:	a37b      	add	r3, pc, #492	; (adr r3, 800d7d0 <__ieee754_pow+0x6f8>)
 800d5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e6:	f7f2 fe51 	bl	800028c <__adddf3>
 800d5ea:	4622      	mov	r2, r4
 800d5ec:	462b      	mov	r3, r5
 800d5ee:	f7f3 f803 	bl	80005f8 <__aeabi_dmul>
 800d5f2:	a379      	add	r3, pc, #484	; (adr r3, 800d7d8 <__ieee754_pow+0x700>)
 800d5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f8:	f7f2 fe48 	bl	800028c <__adddf3>
 800d5fc:	4622      	mov	r2, r4
 800d5fe:	462b      	mov	r3, r5
 800d600:	f7f2 fffa 	bl	80005f8 <__aeabi_dmul>
 800d604:	a376      	add	r3, pc, #472	; (adr r3, 800d7e0 <__ieee754_pow+0x708>)
 800d606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d60a:	f7f2 fe3f 	bl	800028c <__adddf3>
 800d60e:	4622      	mov	r2, r4
 800d610:	462b      	mov	r3, r5
 800d612:	f7f2 fff1 	bl	80005f8 <__aeabi_dmul>
 800d616:	a374      	add	r3, pc, #464	; (adr r3, 800d7e8 <__ieee754_pow+0x710>)
 800d618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d61c:	f7f2 fe36 	bl	800028c <__adddf3>
 800d620:	4622      	mov	r2, r4
 800d622:	462b      	mov	r3, r5
 800d624:	f7f2 ffe8 	bl	80005f8 <__aeabi_dmul>
 800d628:	a371      	add	r3, pc, #452	; (adr r3, 800d7f0 <__ieee754_pow+0x718>)
 800d62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d62e:	f7f2 fe2d 	bl	800028c <__adddf3>
 800d632:	4622      	mov	r2, r4
 800d634:	4606      	mov	r6, r0
 800d636:	460f      	mov	r7, r1
 800d638:	462b      	mov	r3, r5
 800d63a:	4620      	mov	r0, r4
 800d63c:	4629      	mov	r1, r5
 800d63e:	f7f2 ffdb 	bl	80005f8 <__aeabi_dmul>
 800d642:	4602      	mov	r2, r0
 800d644:	460b      	mov	r3, r1
 800d646:	4630      	mov	r0, r6
 800d648:	4639      	mov	r1, r7
 800d64a:	f7f2 ffd5 	bl	80005f8 <__aeabi_dmul>
 800d64e:	4642      	mov	r2, r8
 800d650:	4604      	mov	r4, r0
 800d652:	460d      	mov	r5, r1
 800d654:	464b      	mov	r3, r9
 800d656:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d65a:	f7f2 fe17 	bl	800028c <__adddf3>
 800d65e:	ec53 2b18 	vmov	r2, r3, d8
 800d662:	f7f2 ffc9 	bl	80005f8 <__aeabi_dmul>
 800d666:	4622      	mov	r2, r4
 800d668:	462b      	mov	r3, r5
 800d66a:	f7f2 fe0f 	bl	800028c <__adddf3>
 800d66e:	4642      	mov	r2, r8
 800d670:	4682      	mov	sl, r0
 800d672:	468b      	mov	fp, r1
 800d674:	464b      	mov	r3, r9
 800d676:	4640      	mov	r0, r8
 800d678:	4649      	mov	r1, r9
 800d67a:	f7f2 ffbd 	bl	80005f8 <__aeabi_dmul>
 800d67e:	4b6c      	ldr	r3, [pc, #432]	; (800d830 <__ieee754_pow+0x758>)
 800d680:	2200      	movs	r2, #0
 800d682:	4606      	mov	r6, r0
 800d684:	460f      	mov	r7, r1
 800d686:	f7f2 fe01 	bl	800028c <__adddf3>
 800d68a:	4652      	mov	r2, sl
 800d68c:	465b      	mov	r3, fp
 800d68e:	f7f2 fdfd 	bl	800028c <__adddf3>
 800d692:	9c04      	ldr	r4, [sp, #16]
 800d694:	460d      	mov	r5, r1
 800d696:	4622      	mov	r2, r4
 800d698:	460b      	mov	r3, r1
 800d69a:	4640      	mov	r0, r8
 800d69c:	4649      	mov	r1, r9
 800d69e:	f7f2 ffab 	bl	80005f8 <__aeabi_dmul>
 800d6a2:	4b63      	ldr	r3, [pc, #396]	; (800d830 <__ieee754_pow+0x758>)
 800d6a4:	4680      	mov	r8, r0
 800d6a6:	4689      	mov	r9, r1
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	4620      	mov	r0, r4
 800d6ac:	4629      	mov	r1, r5
 800d6ae:	f7f2 fdeb 	bl	8000288 <__aeabi_dsub>
 800d6b2:	4632      	mov	r2, r6
 800d6b4:	463b      	mov	r3, r7
 800d6b6:	f7f2 fde7 	bl	8000288 <__aeabi_dsub>
 800d6ba:	4602      	mov	r2, r0
 800d6bc:	460b      	mov	r3, r1
 800d6be:	4650      	mov	r0, sl
 800d6c0:	4659      	mov	r1, fp
 800d6c2:	f7f2 fde1 	bl	8000288 <__aeabi_dsub>
 800d6c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d6ca:	f7f2 ff95 	bl	80005f8 <__aeabi_dmul>
 800d6ce:	4622      	mov	r2, r4
 800d6d0:	4606      	mov	r6, r0
 800d6d2:	460f      	mov	r7, r1
 800d6d4:	462b      	mov	r3, r5
 800d6d6:	ec51 0b18 	vmov	r0, r1, d8
 800d6da:	f7f2 ff8d 	bl	80005f8 <__aeabi_dmul>
 800d6de:	4602      	mov	r2, r0
 800d6e0:	460b      	mov	r3, r1
 800d6e2:	4630      	mov	r0, r6
 800d6e4:	4639      	mov	r1, r7
 800d6e6:	f7f2 fdd1 	bl	800028c <__adddf3>
 800d6ea:	4606      	mov	r6, r0
 800d6ec:	460f      	mov	r7, r1
 800d6ee:	4602      	mov	r2, r0
 800d6f0:	460b      	mov	r3, r1
 800d6f2:	4640      	mov	r0, r8
 800d6f4:	4649      	mov	r1, r9
 800d6f6:	f7f2 fdc9 	bl	800028c <__adddf3>
 800d6fa:	9c04      	ldr	r4, [sp, #16]
 800d6fc:	a33e      	add	r3, pc, #248	; (adr r3, 800d7f8 <__ieee754_pow+0x720>)
 800d6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d702:	4620      	mov	r0, r4
 800d704:	460d      	mov	r5, r1
 800d706:	f7f2 ff77 	bl	80005f8 <__aeabi_dmul>
 800d70a:	4642      	mov	r2, r8
 800d70c:	ec41 0b18 	vmov	d8, r0, r1
 800d710:	464b      	mov	r3, r9
 800d712:	4620      	mov	r0, r4
 800d714:	4629      	mov	r1, r5
 800d716:	f7f2 fdb7 	bl	8000288 <__aeabi_dsub>
 800d71a:	4602      	mov	r2, r0
 800d71c:	460b      	mov	r3, r1
 800d71e:	4630      	mov	r0, r6
 800d720:	4639      	mov	r1, r7
 800d722:	f7f2 fdb1 	bl	8000288 <__aeabi_dsub>
 800d726:	a336      	add	r3, pc, #216	; (adr r3, 800d800 <__ieee754_pow+0x728>)
 800d728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d72c:	f7f2 ff64 	bl	80005f8 <__aeabi_dmul>
 800d730:	a335      	add	r3, pc, #212	; (adr r3, 800d808 <__ieee754_pow+0x730>)
 800d732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d736:	4606      	mov	r6, r0
 800d738:	460f      	mov	r7, r1
 800d73a:	4620      	mov	r0, r4
 800d73c:	4629      	mov	r1, r5
 800d73e:	f7f2 ff5b 	bl	80005f8 <__aeabi_dmul>
 800d742:	4602      	mov	r2, r0
 800d744:	460b      	mov	r3, r1
 800d746:	4630      	mov	r0, r6
 800d748:	4639      	mov	r1, r7
 800d74a:	f7f2 fd9f 	bl	800028c <__adddf3>
 800d74e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d750:	4b38      	ldr	r3, [pc, #224]	; (800d834 <__ieee754_pow+0x75c>)
 800d752:	4413      	add	r3, r2
 800d754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d758:	f7f2 fd98 	bl	800028c <__adddf3>
 800d75c:	4682      	mov	sl, r0
 800d75e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d760:	468b      	mov	fp, r1
 800d762:	f7f2 fedf 	bl	8000524 <__aeabi_i2d>
 800d766:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d768:	4b33      	ldr	r3, [pc, #204]	; (800d838 <__ieee754_pow+0x760>)
 800d76a:	4413      	add	r3, r2
 800d76c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d770:	4606      	mov	r6, r0
 800d772:	460f      	mov	r7, r1
 800d774:	4652      	mov	r2, sl
 800d776:	465b      	mov	r3, fp
 800d778:	ec51 0b18 	vmov	r0, r1, d8
 800d77c:	f7f2 fd86 	bl	800028c <__adddf3>
 800d780:	4642      	mov	r2, r8
 800d782:	464b      	mov	r3, r9
 800d784:	f7f2 fd82 	bl	800028c <__adddf3>
 800d788:	4632      	mov	r2, r6
 800d78a:	463b      	mov	r3, r7
 800d78c:	f7f2 fd7e 	bl	800028c <__adddf3>
 800d790:	9c04      	ldr	r4, [sp, #16]
 800d792:	4632      	mov	r2, r6
 800d794:	463b      	mov	r3, r7
 800d796:	4620      	mov	r0, r4
 800d798:	460d      	mov	r5, r1
 800d79a:	f7f2 fd75 	bl	8000288 <__aeabi_dsub>
 800d79e:	4642      	mov	r2, r8
 800d7a0:	464b      	mov	r3, r9
 800d7a2:	f7f2 fd71 	bl	8000288 <__aeabi_dsub>
 800d7a6:	ec53 2b18 	vmov	r2, r3, d8
 800d7aa:	f7f2 fd6d 	bl	8000288 <__aeabi_dsub>
 800d7ae:	4602      	mov	r2, r0
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	4650      	mov	r0, sl
 800d7b4:	4659      	mov	r1, fp
 800d7b6:	e606      	b.n	800d3c6 <__ieee754_pow+0x2ee>
 800d7b8:	2401      	movs	r4, #1
 800d7ba:	e6a0      	b.n	800d4fe <__ieee754_pow+0x426>
 800d7bc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800d810 <__ieee754_pow+0x738>
 800d7c0:	e60d      	b.n	800d3de <__ieee754_pow+0x306>
 800d7c2:	bf00      	nop
 800d7c4:	f3af 8000 	nop.w
 800d7c8:	4a454eef 	.word	0x4a454eef
 800d7cc:	3fca7e28 	.word	0x3fca7e28
 800d7d0:	93c9db65 	.word	0x93c9db65
 800d7d4:	3fcd864a 	.word	0x3fcd864a
 800d7d8:	a91d4101 	.word	0xa91d4101
 800d7dc:	3fd17460 	.word	0x3fd17460
 800d7e0:	518f264d 	.word	0x518f264d
 800d7e4:	3fd55555 	.word	0x3fd55555
 800d7e8:	db6fabff 	.word	0xdb6fabff
 800d7ec:	3fdb6db6 	.word	0x3fdb6db6
 800d7f0:	33333303 	.word	0x33333303
 800d7f4:	3fe33333 	.word	0x3fe33333
 800d7f8:	e0000000 	.word	0xe0000000
 800d7fc:	3feec709 	.word	0x3feec709
 800d800:	dc3a03fd 	.word	0xdc3a03fd
 800d804:	3feec709 	.word	0x3feec709
 800d808:	145b01f5 	.word	0x145b01f5
 800d80c:	be3e2fe0 	.word	0xbe3e2fe0
 800d810:	00000000 	.word	0x00000000
 800d814:	3ff00000 	.word	0x3ff00000
 800d818:	7ff00000 	.word	0x7ff00000
 800d81c:	43400000 	.word	0x43400000
 800d820:	0003988e 	.word	0x0003988e
 800d824:	000bb679 	.word	0x000bb679
 800d828:	0800f2d8 	.word	0x0800f2d8
 800d82c:	3ff00000 	.word	0x3ff00000
 800d830:	40080000 	.word	0x40080000
 800d834:	0800f2f8 	.word	0x0800f2f8
 800d838:	0800f2e8 	.word	0x0800f2e8
 800d83c:	a3b5      	add	r3, pc, #724	; (adr r3, 800db14 <__ieee754_pow+0xa3c>)
 800d83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d842:	4640      	mov	r0, r8
 800d844:	4649      	mov	r1, r9
 800d846:	f7f2 fd21 	bl	800028c <__adddf3>
 800d84a:	4622      	mov	r2, r4
 800d84c:	ec41 0b1a 	vmov	d10, r0, r1
 800d850:	462b      	mov	r3, r5
 800d852:	4630      	mov	r0, r6
 800d854:	4639      	mov	r1, r7
 800d856:	f7f2 fd17 	bl	8000288 <__aeabi_dsub>
 800d85a:	4602      	mov	r2, r0
 800d85c:	460b      	mov	r3, r1
 800d85e:	ec51 0b1a 	vmov	r0, r1, d10
 800d862:	f7f3 f959 	bl	8000b18 <__aeabi_dcmpgt>
 800d866:	2800      	cmp	r0, #0
 800d868:	f47f adf8 	bne.w	800d45c <__ieee754_pow+0x384>
 800d86c:	4aa4      	ldr	r2, [pc, #656]	; (800db00 <__ieee754_pow+0xa28>)
 800d86e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d872:	4293      	cmp	r3, r2
 800d874:	f340 810b 	ble.w	800da8e <__ieee754_pow+0x9b6>
 800d878:	151b      	asrs	r3, r3, #20
 800d87a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d87e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d882:	fa4a f303 	asr.w	r3, sl, r3
 800d886:	445b      	add	r3, fp
 800d888:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d88c:	4e9d      	ldr	r6, [pc, #628]	; (800db04 <__ieee754_pow+0xa2c>)
 800d88e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d892:	4116      	asrs	r6, r2
 800d894:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d898:	2000      	movs	r0, #0
 800d89a:	ea23 0106 	bic.w	r1, r3, r6
 800d89e:	f1c2 0214 	rsb	r2, r2, #20
 800d8a2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d8a6:	fa4a fa02 	asr.w	sl, sl, r2
 800d8aa:	f1bb 0f00 	cmp.w	fp, #0
 800d8ae:	4602      	mov	r2, r0
 800d8b0:	460b      	mov	r3, r1
 800d8b2:	4620      	mov	r0, r4
 800d8b4:	4629      	mov	r1, r5
 800d8b6:	bfb8      	it	lt
 800d8b8:	f1ca 0a00 	rsblt	sl, sl, #0
 800d8bc:	f7f2 fce4 	bl	8000288 <__aeabi_dsub>
 800d8c0:	ec41 0b19 	vmov	d9, r0, r1
 800d8c4:	4642      	mov	r2, r8
 800d8c6:	464b      	mov	r3, r9
 800d8c8:	ec51 0b19 	vmov	r0, r1, d9
 800d8cc:	f7f2 fcde 	bl	800028c <__adddf3>
 800d8d0:	2400      	movs	r4, #0
 800d8d2:	a379      	add	r3, pc, #484	; (adr r3, 800dab8 <__ieee754_pow+0x9e0>)
 800d8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d8:	4620      	mov	r0, r4
 800d8da:	460d      	mov	r5, r1
 800d8dc:	f7f2 fe8c 	bl	80005f8 <__aeabi_dmul>
 800d8e0:	ec53 2b19 	vmov	r2, r3, d9
 800d8e4:	4606      	mov	r6, r0
 800d8e6:	460f      	mov	r7, r1
 800d8e8:	4620      	mov	r0, r4
 800d8ea:	4629      	mov	r1, r5
 800d8ec:	f7f2 fccc 	bl	8000288 <__aeabi_dsub>
 800d8f0:	4602      	mov	r2, r0
 800d8f2:	460b      	mov	r3, r1
 800d8f4:	4640      	mov	r0, r8
 800d8f6:	4649      	mov	r1, r9
 800d8f8:	f7f2 fcc6 	bl	8000288 <__aeabi_dsub>
 800d8fc:	a370      	add	r3, pc, #448	; (adr r3, 800dac0 <__ieee754_pow+0x9e8>)
 800d8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d902:	f7f2 fe79 	bl	80005f8 <__aeabi_dmul>
 800d906:	a370      	add	r3, pc, #448	; (adr r3, 800dac8 <__ieee754_pow+0x9f0>)
 800d908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d90c:	4680      	mov	r8, r0
 800d90e:	4689      	mov	r9, r1
 800d910:	4620      	mov	r0, r4
 800d912:	4629      	mov	r1, r5
 800d914:	f7f2 fe70 	bl	80005f8 <__aeabi_dmul>
 800d918:	4602      	mov	r2, r0
 800d91a:	460b      	mov	r3, r1
 800d91c:	4640      	mov	r0, r8
 800d91e:	4649      	mov	r1, r9
 800d920:	f7f2 fcb4 	bl	800028c <__adddf3>
 800d924:	4604      	mov	r4, r0
 800d926:	460d      	mov	r5, r1
 800d928:	4602      	mov	r2, r0
 800d92a:	460b      	mov	r3, r1
 800d92c:	4630      	mov	r0, r6
 800d92e:	4639      	mov	r1, r7
 800d930:	f7f2 fcac 	bl	800028c <__adddf3>
 800d934:	4632      	mov	r2, r6
 800d936:	463b      	mov	r3, r7
 800d938:	4680      	mov	r8, r0
 800d93a:	4689      	mov	r9, r1
 800d93c:	f7f2 fca4 	bl	8000288 <__aeabi_dsub>
 800d940:	4602      	mov	r2, r0
 800d942:	460b      	mov	r3, r1
 800d944:	4620      	mov	r0, r4
 800d946:	4629      	mov	r1, r5
 800d948:	f7f2 fc9e 	bl	8000288 <__aeabi_dsub>
 800d94c:	4642      	mov	r2, r8
 800d94e:	4606      	mov	r6, r0
 800d950:	460f      	mov	r7, r1
 800d952:	464b      	mov	r3, r9
 800d954:	4640      	mov	r0, r8
 800d956:	4649      	mov	r1, r9
 800d958:	f7f2 fe4e 	bl	80005f8 <__aeabi_dmul>
 800d95c:	a35c      	add	r3, pc, #368	; (adr r3, 800dad0 <__ieee754_pow+0x9f8>)
 800d95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d962:	4604      	mov	r4, r0
 800d964:	460d      	mov	r5, r1
 800d966:	f7f2 fe47 	bl	80005f8 <__aeabi_dmul>
 800d96a:	a35b      	add	r3, pc, #364	; (adr r3, 800dad8 <__ieee754_pow+0xa00>)
 800d96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d970:	f7f2 fc8a 	bl	8000288 <__aeabi_dsub>
 800d974:	4622      	mov	r2, r4
 800d976:	462b      	mov	r3, r5
 800d978:	f7f2 fe3e 	bl	80005f8 <__aeabi_dmul>
 800d97c:	a358      	add	r3, pc, #352	; (adr r3, 800dae0 <__ieee754_pow+0xa08>)
 800d97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d982:	f7f2 fc83 	bl	800028c <__adddf3>
 800d986:	4622      	mov	r2, r4
 800d988:	462b      	mov	r3, r5
 800d98a:	f7f2 fe35 	bl	80005f8 <__aeabi_dmul>
 800d98e:	a356      	add	r3, pc, #344	; (adr r3, 800dae8 <__ieee754_pow+0xa10>)
 800d990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d994:	f7f2 fc78 	bl	8000288 <__aeabi_dsub>
 800d998:	4622      	mov	r2, r4
 800d99a:	462b      	mov	r3, r5
 800d99c:	f7f2 fe2c 	bl	80005f8 <__aeabi_dmul>
 800d9a0:	a353      	add	r3, pc, #332	; (adr r3, 800daf0 <__ieee754_pow+0xa18>)
 800d9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a6:	f7f2 fc71 	bl	800028c <__adddf3>
 800d9aa:	4622      	mov	r2, r4
 800d9ac:	462b      	mov	r3, r5
 800d9ae:	f7f2 fe23 	bl	80005f8 <__aeabi_dmul>
 800d9b2:	4602      	mov	r2, r0
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	4640      	mov	r0, r8
 800d9b8:	4649      	mov	r1, r9
 800d9ba:	f7f2 fc65 	bl	8000288 <__aeabi_dsub>
 800d9be:	4604      	mov	r4, r0
 800d9c0:	460d      	mov	r5, r1
 800d9c2:	4602      	mov	r2, r0
 800d9c4:	460b      	mov	r3, r1
 800d9c6:	4640      	mov	r0, r8
 800d9c8:	4649      	mov	r1, r9
 800d9ca:	f7f2 fe15 	bl	80005f8 <__aeabi_dmul>
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	ec41 0b19 	vmov	d9, r0, r1
 800d9d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d9d8:	4620      	mov	r0, r4
 800d9da:	4629      	mov	r1, r5
 800d9dc:	f7f2 fc54 	bl	8000288 <__aeabi_dsub>
 800d9e0:	4602      	mov	r2, r0
 800d9e2:	460b      	mov	r3, r1
 800d9e4:	ec51 0b19 	vmov	r0, r1, d9
 800d9e8:	f7f2 ff30 	bl	800084c <__aeabi_ddiv>
 800d9ec:	4632      	mov	r2, r6
 800d9ee:	4604      	mov	r4, r0
 800d9f0:	460d      	mov	r5, r1
 800d9f2:	463b      	mov	r3, r7
 800d9f4:	4640      	mov	r0, r8
 800d9f6:	4649      	mov	r1, r9
 800d9f8:	f7f2 fdfe 	bl	80005f8 <__aeabi_dmul>
 800d9fc:	4632      	mov	r2, r6
 800d9fe:	463b      	mov	r3, r7
 800da00:	f7f2 fc44 	bl	800028c <__adddf3>
 800da04:	4602      	mov	r2, r0
 800da06:	460b      	mov	r3, r1
 800da08:	4620      	mov	r0, r4
 800da0a:	4629      	mov	r1, r5
 800da0c:	f7f2 fc3c 	bl	8000288 <__aeabi_dsub>
 800da10:	4642      	mov	r2, r8
 800da12:	464b      	mov	r3, r9
 800da14:	f7f2 fc38 	bl	8000288 <__aeabi_dsub>
 800da18:	460b      	mov	r3, r1
 800da1a:	4602      	mov	r2, r0
 800da1c:	493a      	ldr	r1, [pc, #232]	; (800db08 <__ieee754_pow+0xa30>)
 800da1e:	2000      	movs	r0, #0
 800da20:	f7f2 fc32 	bl	8000288 <__aeabi_dsub>
 800da24:	e9cd 0100 	strd	r0, r1, [sp]
 800da28:	9b01      	ldr	r3, [sp, #4]
 800da2a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800da2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800da32:	da2f      	bge.n	800da94 <__ieee754_pow+0x9bc>
 800da34:	4650      	mov	r0, sl
 800da36:	ed9d 0b00 	vldr	d0, [sp]
 800da3a:	f001 f911 	bl	800ec60 <scalbn>
 800da3e:	ec51 0b10 	vmov	r0, r1, d0
 800da42:	ec53 2b18 	vmov	r2, r3, d8
 800da46:	f7ff bbe0 	b.w	800d20a <__ieee754_pow+0x132>
 800da4a:	4b30      	ldr	r3, [pc, #192]	; (800db0c <__ieee754_pow+0xa34>)
 800da4c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800da50:	429e      	cmp	r6, r3
 800da52:	f77f af0b 	ble.w	800d86c <__ieee754_pow+0x794>
 800da56:	4b2e      	ldr	r3, [pc, #184]	; (800db10 <__ieee754_pow+0xa38>)
 800da58:	440b      	add	r3, r1
 800da5a:	4303      	orrs	r3, r0
 800da5c:	d00b      	beq.n	800da76 <__ieee754_pow+0x99e>
 800da5e:	a326      	add	r3, pc, #152	; (adr r3, 800daf8 <__ieee754_pow+0xa20>)
 800da60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da64:	ec51 0b18 	vmov	r0, r1, d8
 800da68:	f7f2 fdc6 	bl	80005f8 <__aeabi_dmul>
 800da6c:	a322      	add	r3, pc, #136	; (adr r3, 800daf8 <__ieee754_pow+0xa20>)
 800da6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da72:	f7ff bbca 	b.w	800d20a <__ieee754_pow+0x132>
 800da76:	4622      	mov	r2, r4
 800da78:	462b      	mov	r3, r5
 800da7a:	f7f2 fc05 	bl	8000288 <__aeabi_dsub>
 800da7e:	4642      	mov	r2, r8
 800da80:	464b      	mov	r3, r9
 800da82:	f7f3 f83f 	bl	8000b04 <__aeabi_dcmpge>
 800da86:	2800      	cmp	r0, #0
 800da88:	f43f aef0 	beq.w	800d86c <__ieee754_pow+0x794>
 800da8c:	e7e7      	b.n	800da5e <__ieee754_pow+0x986>
 800da8e:	f04f 0a00 	mov.w	sl, #0
 800da92:	e717      	b.n	800d8c4 <__ieee754_pow+0x7ec>
 800da94:	e9dd 0100 	ldrd	r0, r1, [sp]
 800da98:	4619      	mov	r1, r3
 800da9a:	e7d2      	b.n	800da42 <__ieee754_pow+0x96a>
 800da9c:	491a      	ldr	r1, [pc, #104]	; (800db08 <__ieee754_pow+0xa30>)
 800da9e:	2000      	movs	r0, #0
 800daa0:	f7ff bb9e 	b.w	800d1e0 <__ieee754_pow+0x108>
 800daa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800daa8:	f7ff bb9a 	b.w	800d1e0 <__ieee754_pow+0x108>
 800daac:	9000      	str	r0, [sp, #0]
 800daae:	f7ff bb76 	b.w	800d19e <__ieee754_pow+0xc6>
 800dab2:	2100      	movs	r1, #0
 800dab4:	f7ff bb60 	b.w	800d178 <__ieee754_pow+0xa0>
 800dab8:	00000000 	.word	0x00000000
 800dabc:	3fe62e43 	.word	0x3fe62e43
 800dac0:	fefa39ef 	.word	0xfefa39ef
 800dac4:	3fe62e42 	.word	0x3fe62e42
 800dac8:	0ca86c39 	.word	0x0ca86c39
 800dacc:	be205c61 	.word	0xbe205c61
 800dad0:	72bea4d0 	.word	0x72bea4d0
 800dad4:	3e663769 	.word	0x3e663769
 800dad8:	c5d26bf1 	.word	0xc5d26bf1
 800dadc:	3ebbbd41 	.word	0x3ebbbd41
 800dae0:	af25de2c 	.word	0xaf25de2c
 800dae4:	3f11566a 	.word	0x3f11566a
 800dae8:	16bebd93 	.word	0x16bebd93
 800daec:	3f66c16c 	.word	0x3f66c16c
 800daf0:	5555553e 	.word	0x5555553e
 800daf4:	3fc55555 	.word	0x3fc55555
 800daf8:	c2f8f359 	.word	0xc2f8f359
 800dafc:	01a56e1f 	.word	0x01a56e1f
 800db00:	3fe00000 	.word	0x3fe00000
 800db04:	000fffff 	.word	0x000fffff
 800db08:	3ff00000 	.word	0x3ff00000
 800db0c:	4090cbff 	.word	0x4090cbff
 800db10:	3f6f3400 	.word	0x3f6f3400
 800db14:	652b82fe 	.word	0x652b82fe
 800db18:	3c971547 	.word	0x3c971547
 800db1c:	00000000 	.word	0x00000000

0800db20 <__ieee754_rem_pio2>:
 800db20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db24:	ed2d 8b02 	vpush	{d8}
 800db28:	ec55 4b10 	vmov	r4, r5, d0
 800db2c:	4bca      	ldr	r3, [pc, #808]	; (800de58 <__ieee754_rem_pio2+0x338>)
 800db2e:	b08b      	sub	sp, #44	; 0x2c
 800db30:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800db34:	4598      	cmp	r8, r3
 800db36:	4682      	mov	sl, r0
 800db38:	9502      	str	r5, [sp, #8]
 800db3a:	dc08      	bgt.n	800db4e <__ieee754_rem_pio2+0x2e>
 800db3c:	2200      	movs	r2, #0
 800db3e:	2300      	movs	r3, #0
 800db40:	ed80 0b00 	vstr	d0, [r0]
 800db44:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800db48:	f04f 0b00 	mov.w	fp, #0
 800db4c:	e028      	b.n	800dba0 <__ieee754_rem_pio2+0x80>
 800db4e:	4bc3      	ldr	r3, [pc, #780]	; (800de5c <__ieee754_rem_pio2+0x33c>)
 800db50:	4598      	cmp	r8, r3
 800db52:	dc78      	bgt.n	800dc46 <__ieee754_rem_pio2+0x126>
 800db54:	9b02      	ldr	r3, [sp, #8]
 800db56:	4ec2      	ldr	r6, [pc, #776]	; (800de60 <__ieee754_rem_pio2+0x340>)
 800db58:	2b00      	cmp	r3, #0
 800db5a:	ee10 0a10 	vmov	r0, s0
 800db5e:	a3b0      	add	r3, pc, #704	; (adr r3, 800de20 <__ieee754_rem_pio2+0x300>)
 800db60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db64:	4629      	mov	r1, r5
 800db66:	dd39      	ble.n	800dbdc <__ieee754_rem_pio2+0xbc>
 800db68:	f7f2 fb8e 	bl	8000288 <__aeabi_dsub>
 800db6c:	45b0      	cmp	r8, r6
 800db6e:	4604      	mov	r4, r0
 800db70:	460d      	mov	r5, r1
 800db72:	d01b      	beq.n	800dbac <__ieee754_rem_pio2+0x8c>
 800db74:	a3ac      	add	r3, pc, #688	; (adr r3, 800de28 <__ieee754_rem_pio2+0x308>)
 800db76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db7a:	f7f2 fb85 	bl	8000288 <__aeabi_dsub>
 800db7e:	4602      	mov	r2, r0
 800db80:	460b      	mov	r3, r1
 800db82:	e9ca 2300 	strd	r2, r3, [sl]
 800db86:	4620      	mov	r0, r4
 800db88:	4629      	mov	r1, r5
 800db8a:	f7f2 fb7d 	bl	8000288 <__aeabi_dsub>
 800db8e:	a3a6      	add	r3, pc, #664	; (adr r3, 800de28 <__ieee754_rem_pio2+0x308>)
 800db90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db94:	f7f2 fb78 	bl	8000288 <__aeabi_dsub>
 800db98:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800db9c:	f04f 0b01 	mov.w	fp, #1
 800dba0:	4658      	mov	r0, fp
 800dba2:	b00b      	add	sp, #44	; 0x2c
 800dba4:	ecbd 8b02 	vpop	{d8}
 800dba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbac:	a3a0      	add	r3, pc, #640	; (adr r3, 800de30 <__ieee754_rem_pio2+0x310>)
 800dbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb2:	f7f2 fb69 	bl	8000288 <__aeabi_dsub>
 800dbb6:	a3a0      	add	r3, pc, #640	; (adr r3, 800de38 <__ieee754_rem_pio2+0x318>)
 800dbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbbc:	4604      	mov	r4, r0
 800dbbe:	460d      	mov	r5, r1
 800dbc0:	f7f2 fb62 	bl	8000288 <__aeabi_dsub>
 800dbc4:	4602      	mov	r2, r0
 800dbc6:	460b      	mov	r3, r1
 800dbc8:	e9ca 2300 	strd	r2, r3, [sl]
 800dbcc:	4620      	mov	r0, r4
 800dbce:	4629      	mov	r1, r5
 800dbd0:	f7f2 fb5a 	bl	8000288 <__aeabi_dsub>
 800dbd4:	a398      	add	r3, pc, #608	; (adr r3, 800de38 <__ieee754_rem_pio2+0x318>)
 800dbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbda:	e7db      	b.n	800db94 <__ieee754_rem_pio2+0x74>
 800dbdc:	f7f2 fb56 	bl	800028c <__adddf3>
 800dbe0:	45b0      	cmp	r8, r6
 800dbe2:	4604      	mov	r4, r0
 800dbe4:	460d      	mov	r5, r1
 800dbe6:	d016      	beq.n	800dc16 <__ieee754_rem_pio2+0xf6>
 800dbe8:	a38f      	add	r3, pc, #572	; (adr r3, 800de28 <__ieee754_rem_pio2+0x308>)
 800dbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbee:	f7f2 fb4d 	bl	800028c <__adddf3>
 800dbf2:	4602      	mov	r2, r0
 800dbf4:	460b      	mov	r3, r1
 800dbf6:	e9ca 2300 	strd	r2, r3, [sl]
 800dbfa:	4620      	mov	r0, r4
 800dbfc:	4629      	mov	r1, r5
 800dbfe:	f7f2 fb43 	bl	8000288 <__aeabi_dsub>
 800dc02:	a389      	add	r3, pc, #548	; (adr r3, 800de28 <__ieee754_rem_pio2+0x308>)
 800dc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc08:	f7f2 fb40 	bl	800028c <__adddf3>
 800dc0c:	f04f 3bff 	mov.w	fp, #4294967295
 800dc10:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dc14:	e7c4      	b.n	800dba0 <__ieee754_rem_pio2+0x80>
 800dc16:	a386      	add	r3, pc, #536	; (adr r3, 800de30 <__ieee754_rem_pio2+0x310>)
 800dc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc1c:	f7f2 fb36 	bl	800028c <__adddf3>
 800dc20:	a385      	add	r3, pc, #532	; (adr r3, 800de38 <__ieee754_rem_pio2+0x318>)
 800dc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc26:	4604      	mov	r4, r0
 800dc28:	460d      	mov	r5, r1
 800dc2a:	f7f2 fb2f 	bl	800028c <__adddf3>
 800dc2e:	4602      	mov	r2, r0
 800dc30:	460b      	mov	r3, r1
 800dc32:	e9ca 2300 	strd	r2, r3, [sl]
 800dc36:	4620      	mov	r0, r4
 800dc38:	4629      	mov	r1, r5
 800dc3a:	f7f2 fb25 	bl	8000288 <__aeabi_dsub>
 800dc3e:	a37e      	add	r3, pc, #504	; (adr r3, 800de38 <__ieee754_rem_pio2+0x318>)
 800dc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc44:	e7e0      	b.n	800dc08 <__ieee754_rem_pio2+0xe8>
 800dc46:	4b87      	ldr	r3, [pc, #540]	; (800de64 <__ieee754_rem_pio2+0x344>)
 800dc48:	4598      	cmp	r8, r3
 800dc4a:	f300 80d9 	bgt.w	800de00 <__ieee754_rem_pio2+0x2e0>
 800dc4e:	f7ff f8ff 	bl	800ce50 <fabs>
 800dc52:	ec55 4b10 	vmov	r4, r5, d0
 800dc56:	ee10 0a10 	vmov	r0, s0
 800dc5a:	a379      	add	r3, pc, #484	; (adr r3, 800de40 <__ieee754_rem_pio2+0x320>)
 800dc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc60:	4629      	mov	r1, r5
 800dc62:	f7f2 fcc9 	bl	80005f8 <__aeabi_dmul>
 800dc66:	4b80      	ldr	r3, [pc, #512]	; (800de68 <__ieee754_rem_pio2+0x348>)
 800dc68:	2200      	movs	r2, #0
 800dc6a:	f7f2 fb0f 	bl	800028c <__adddf3>
 800dc6e:	f7f2 ff73 	bl	8000b58 <__aeabi_d2iz>
 800dc72:	4683      	mov	fp, r0
 800dc74:	f7f2 fc56 	bl	8000524 <__aeabi_i2d>
 800dc78:	4602      	mov	r2, r0
 800dc7a:	460b      	mov	r3, r1
 800dc7c:	ec43 2b18 	vmov	d8, r2, r3
 800dc80:	a367      	add	r3, pc, #412	; (adr r3, 800de20 <__ieee754_rem_pio2+0x300>)
 800dc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc86:	f7f2 fcb7 	bl	80005f8 <__aeabi_dmul>
 800dc8a:	4602      	mov	r2, r0
 800dc8c:	460b      	mov	r3, r1
 800dc8e:	4620      	mov	r0, r4
 800dc90:	4629      	mov	r1, r5
 800dc92:	f7f2 faf9 	bl	8000288 <__aeabi_dsub>
 800dc96:	a364      	add	r3, pc, #400	; (adr r3, 800de28 <__ieee754_rem_pio2+0x308>)
 800dc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9c:	4606      	mov	r6, r0
 800dc9e:	460f      	mov	r7, r1
 800dca0:	ec51 0b18 	vmov	r0, r1, d8
 800dca4:	f7f2 fca8 	bl	80005f8 <__aeabi_dmul>
 800dca8:	f1bb 0f1f 	cmp.w	fp, #31
 800dcac:	4604      	mov	r4, r0
 800dcae:	460d      	mov	r5, r1
 800dcb0:	dc0d      	bgt.n	800dcce <__ieee754_rem_pio2+0x1ae>
 800dcb2:	4b6e      	ldr	r3, [pc, #440]	; (800de6c <__ieee754_rem_pio2+0x34c>)
 800dcb4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800dcb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcbc:	4543      	cmp	r3, r8
 800dcbe:	d006      	beq.n	800dcce <__ieee754_rem_pio2+0x1ae>
 800dcc0:	4622      	mov	r2, r4
 800dcc2:	462b      	mov	r3, r5
 800dcc4:	4630      	mov	r0, r6
 800dcc6:	4639      	mov	r1, r7
 800dcc8:	f7f2 fade 	bl	8000288 <__aeabi_dsub>
 800dccc:	e00f      	b.n	800dcee <__ieee754_rem_pio2+0x1ce>
 800dcce:	462b      	mov	r3, r5
 800dcd0:	4622      	mov	r2, r4
 800dcd2:	4630      	mov	r0, r6
 800dcd4:	4639      	mov	r1, r7
 800dcd6:	f7f2 fad7 	bl	8000288 <__aeabi_dsub>
 800dcda:	ea4f 5328 	mov.w	r3, r8, asr #20
 800dcde:	9303      	str	r3, [sp, #12]
 800dce0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dce4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800dce8:	f1b8 0f10 	cmp.w	r8, #16
 800dcec:	dc02      	bgt.n	800dcf4 <__ieee754_rem_pio2+0x1d4>
 800dcee:	e9ca 0100 	strd	r0, r1, [sl]
 800dcf2:	e039      	b.n	800dd68 <__ieee754_rem_pio2+0x248>
 800dcf4:	a34e      	add	r3, pc, #312	; (adr r3, 800de30 <__ieee754_rem_pio2+0x310>)
 800dcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcfa:	ec51 0b18 	vmov	r0, r1, d8
 800dcfe:	f7f2 fc7b 	bl	80005f8 <__aeabi_dmul>
 800dd02:	4604      	mov	r4, r0
 800dd04:	460d      	mov	r5, r1
 800dd06:	4602      	mov	r2, r0
 800dd08:	460b      	mov	r3, r1
 800dd0a:	4630      	mov	r0, r6
 800dd0c:	4639      	mov	r1, r7
 800dd0e:	f7f2 fabb 	bl	8000288 <__aeabi_dsub>
 800dd12:	4602      	mov	r2, r0
 800dd14:	460b      	mov	r3, r1
 800dd16:	4680      	mov	r8, r0
 800dd18:	4689      	mov	r9, r1
 800dd1a:	4630      	mov	r0, r6
 800dd1c:	4639      	mov	r1, r7
 800dd1e:	f7f2 fab3 	bl	8000288 <__aeabi_dsub>
 800dd22:	4622      	mov	r2, r4
 800dd24:	462b      	mov	r3, r5
 800dd26:	f7f2 faaf 	bl	8000288 <__aeabi_dsub>
 800dd2a:	a343      	add	r3, pc, #268	; (adr r3, 800de38 <__ieee754_rem_pio2+0x318>)
 800dd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd30:	4604      	mov	r4, r0
 800dd32:	460d      	mov	r5, r1
 800dd34:	ec51 0b18 	vmov	r0, r1, d8
 800dd38:	f7f2 fc5e 	bl	80005f8 <__aeabi_dmul>
 800dd3c:	4622      	mov	r2, r4
 800dd3e:	462b      	mov	r3, r5
 800dd40:	f7f2 faa2 	bl	8000288 <__aeabi_dsub>
 800dd44:	4602      	mov	r2, r0
 800dd46:	460b      	mov	r3, r1
 800dd48:	4604      	mov	r4, r0
 800dd4a:	460d      	mov	r5, r1
 800dd4c:	4640      	mov	r0, r8
 800dd4e:	4649      	mov	r1, r9
 800dd50:	f7f2 fa9a 	bl	8000288 <__aeabi_dsub>
 800dd54:	9a03      	ldr	r2, [sp, #12]
 800dd56:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dd5a:	1ad3      	subs	r3, r2, r3
 800dd5c:	2b31      	cmp	r3, #49	; 0x31
 800dd5e:	dc24      	bgt.n	800ddaa <__ieee754_rem_pio2+0x28a>
 800dd60:	e9ca 0100 	strd	r0, r1, [sl]
 800dd64:	4646      	mov	r6, r8
 800dd66:	464f      	mov	r7, r9
 800dd68:	e9da 8900 	ldrd	r8, r9, [sl]
 800dd6c:	4630      	mov	r0, r6
 800dd6e:	4642      	mov	r2, r8
 800dd70:	464b      	mov	r3, r9
 800dd72:	4639      	mov	r1, r7
 800dd74:	f7f2 fa88 	bl	8000288 <__aeabi_dsub>
 800dd78:	462b      	mov	r3, r5
 800dd7a:	4622      	mov	r2, r4
 800dd7c:	f7f2 fa84 	bl	8000288 <__aeabi_dsub>
 800dd80:	9b02      	ldr	r3, [sp, #8]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dd88:	f6bf af0a 	bge.w	800dba0 <__ieee754_rem_pio2+0x80>
 800dd8c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dd90:	f8ca 3004 	str.w	r3, [sl, #4]
 800dd94:	f8ca 8000 	str.w	r8, [sl]
 800dd98:	f8ca 0008 	str.w	r0, [sl, #8]
 800dd9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dda0:	f8ca 300c 	str.w	r3, [sl, #12]
 800dda4:	f1cb 0b00 	rsb	fp, fp, #0
 800dda8:	e6fa      	b.n	800dba0 <__ieee754_rem_pio2+0x80>
 800ddaa:	a327      	add	r3, pc, #156	; (adr r3, 800de48 <__ieee754_rem_pio2+0x328>)
 800ddac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddb0:	ec51 0b18 	vmov	r0, r1, d8
 800ddb4:	f7f2 fc20 	bl	80005f8 <__aeabi_dmul>
 800ddb8:	4604      	mov	r4, r0
 800ddba:	460d      	mov	r5, r1
 800ddbc:	4602      	mov	r2, r0
 800ddbe:	460b      	mov	r3, r1
 800ddc0:	4640      	mov	r0, r8
 800ddc2:	4649      	mov	r1, r9
 800ddc4:	f7f2 fa60 	bl	8000288 <__aeabi_dsub>
 800ddc8:	4602      	mov	r2, r0
 800ddca:	460b      	mov	r3, r1
 800ddcc:	4606      	mov	r6, r0
 800ddce:	460f      	mov	r7, r1
 800ddd0:	4640      	mov	r0, r8
 800ddd2:	4649      	mov	r1, r9
 800ddd4:	f7f2 fa58 	bl	8000288 <__aeabi_dsub>
 800ddd8:	4622      	mov	r2, r4
 800ddda:	462b      	mov	r3, r5
 800dddc:	f7f2 fa54 	bl	8000288 <__aeabi_dsub>
 800dde0:	a31b      	add	r3, pc, #108	; (adr r3, 800de50 <__ieee754_rem_pio2+0x330>)
 800dde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde6:	4604      	mov	r4, r0
 800dde8:	460d      	mov	r5, r1
 800ddea:	ec51 0b18 	vmov	r0, r1, d8
 800ddee:	f7f2 fc03 	bl	80005f8 <__aeabi_dmul>
 800ddf2:	4622      	mov	r2, r4
 800ddf4:	462b      	mov	r3, r5
 800ddf6:	f7f2 fa47 	bl	8000288 <__aeabi_dsub>
 800ddfa:	4604      	mov	r4, r0
 800ddfc:	460d      	mov	r5, r1
 800ddfe:	e75f      	b.n	800dcc0 <__ieee754_rem_pio2+0x1a0>
 800de00:	4b1b      	ldr	r3, [pc, #108]	; (800de70 <__ieee754_rem_pio2+0x350>)
 800de02:	4598      	cmp	r8, r3
 800de04:	dd36      	ble.n	800de74 <__ieee754_rem_pio2+0x354>
 800de06:	ee10 2a10 	vmov	r2, s0
 800de0a:	462b      	mov	r3, r5
 800de0c:	4620      	mov	r0, r4
 800de0e:	4629      	mov	r1, r5
 800de10:	f7f2 fa3a 	bl	8000288 <__aeabi_dsub>
 800de14:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800de18:	e9ca 0100 	strd	r0, r1, [sl]
 800de1c:	e694      	b.n	800db48 <__ieee754_rem_pio2+0x28>
 800de1e:	bf00      	nop
 800de20:	54400000 	.word	0x54400000
 800de24:	3ff921fb 	.word	0x3ff921fb
 800de28:	1a626331 	.word	0x1a626331
 800de2c:	3dd0b461 	.word	0x3dd0b461
 800de30:	1a600000 	.word	0x1a600000
 800de34:	3dd0b461 	.word	0x3dd0b461
 800de38:	2e037073 	.word	0x2e037073
 800de3c:	3ba3198a 	.word	0x3ba3198a
 800de40:	6dc9c883 	.word	0x6dc9c883
 800de44:	3fe45f30 	.word	0x3fe45f30
 800de48:	2e000000 	.word	0x2e000000
 800de4c:	3ba3198a 	.word	0x3ba3198a
 800de50:	252049c1 	.word	0x252049c1
 800de54:	397b839a 	.word	0x397b839a
 800de58:	3fe921fb 	.word	0x3fe921fb
 800de5c:	4002d97b 	.word	0x4002d97b
 800de60:	3ff921fb 	.word	0x3ff921fb
 800de64:	413921fb 	.word	0x413921fb
 800de68:	3fe00000 	.word	0x3fe00000
 800de6c:	0800f308 	.word	0x0800f308
 800de70:	7fefffff 	.word	0x7fefffff
 800de74:	ea4f 5428 	mov.w	r4, r8, asr #20
 800de78:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800de7c:	ee10 0a10 	vmov	r0, s0
 800de80:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800de84:	ee10 6a10 	vmov	r6, s0
 800de88:	460f      	mov	r7, r1
 800de8a:	f7f2 fe65 	bl	8000b58 <__aeabi_d2iz>
 800de8e:	f7f2 fb49 	bl	8000524 <__aeabi_i2d>
 800de92:	4602      	mov	r2, r0
 800de94:	460b      	mov	r3, r1
 800de96:	4630      	mov	r0, r6
 800de98:	4639      	mov	r1, r7
 800de9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800de9e:	f7f2 f9f3 	bl	8000288 <__aeabi_dsub>
 800dea2:	4b22      	ldr	r3, [pc, #136]	; (800df2c <__ieee754_rem_pio2+0x40c>)
 800dea4:	2200      	movs	r2, #0
 800dea6:	f7f2 fba7 	bl	80005f8 <__aeabi_dmul>
 800deaa:	460f      	mov	r7, r1
 800deac:	4606      	mov	r6, r0
 800deae:	f7f2 fe53 	bl	8000b58 <__aeabi_d2iz>
 800deb2:	f7f2 fb37 	bl	8000524 <__aeabi_i2d>
 800deb6:	4602      	mov	r2, r0
 800deb8:	460b      	mov	r3, r1
 800deba:	4630      	mov	r0, r6
 800debc:	4639      	mov	r1, r7
 800debe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dec2:	f7f2 f9e1 	bl	8000288 <__aeabi_dsub>
 800dec6:	4b19      	ldr	r3, [pc, #100]	; (800df2c <__ieee754_rem_pio2+0x40c>)
 800dec8:	2200      	movs	r2, #0
 800deca:	f7f2 fb95 	bl	80005f8 <__aeabi_dmul>
 800dece:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ded2:	ad04      	add	r5, sp, #16
 800ded4:	f04f 0803 	mov.w	r8, #3
 800ded8:	46a9      	mov	r9, r5
 800deda:	2600      	movs	r6, #0
 800dedc:	2700      	movs	r7, #0
 800dede:	4632      	mov	r2, r6
 800dee0:	463b      	mov	r3, r7
 800dee2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800dee6:	46c3      	mov	fp, r8
 800dee8:	3d08      	subs	r5, #8
 800deea:	f108 38ff 	add.w	r8, r8, #4294967295
 800deee:	f7f2 fdeb 	bl	8000ac8 <__aeabi_dcmpeq>
 800def2:	2800      	cmp	r0, #0
 800def4:	d1f3      	bne.n	800dede <__ieee754_rem_pio2+0x3be>
 800def6:	4b0e      	ldr	r3, [pc, #56]	; (800df30 <__ieee754_rem_pio2+0x410>)
 800def8:	9301      	str	r3, [sp, #4]
 800defa:	2302      	movs	r3, #2
 800defc:	9300      	str	r3, [sp, #0]
 800defe:	4622      	mov	r2, r4
 800df00:	465b      	mov	r3, fp
 800df02:	4651      	mov	r1, sl
 800df04:	4648      	mov	r0, r9
 800df06:	f000 f993 	bl	800e230 <__kernel_rem_pio2>
 800df0a:	9b02      	ldr	r3, [sp, #8]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	4683      	mov	fp, r0
 800df10:	f6bf ae46 	bge.w	800dba0 <__ieee754_rem_pio2+0x80>
 800df14:	f8da 3004 	ldr.w	r3, [sl, #4]
 800df18:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800df1c:	f8ca 3004 	str.w	r3, [sl, #4]
 800df20:	f8da 300c 	ldr.w	r3, [sl, #12]
 800df24:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800df28:	e73a      	b.n	800dda0 <__ieee754_rem_pio2+0x280>
 800df2a:	bf00      	nop
 800df2c:	41700000 	.word	0x41700000
 800df30:	0800f388 	.word	0x0800f388

0800df34 <__ieee754_sqrt>:
 800df34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df38:	ec55 4b10 	vmov	r4, r5, d0
 800df3c:	4e56      	ldr	r6, [pc, #344]	; (800e098 <__ieee754_sqrt+0x164>)
 800df3e:	43ae      	bics	r6, r5
 800df40:	ee10 0a10 	vmov	r0, s0
 800df44:	ee10 3a10 	vmov	r3, s0
 800df48:	4629      	mov	r1, r5
 800df4a:	462a      	mov	r2, r5
 800df4c:	d110      	bne.n	800df70 <__ieee754_sqrt+0x3c>
 800df4e:	ee10 2a10 	vmov	r2, s0
 800df52:	462b      	mov	r3, r5
 800df54:	f7f2 fb50 	bl	80005f8 <__aeabi_dmul>
 800df58:	4602      	mov	r2, r0
 800df5a:	460b      	mov	r3, r1
 800df5c:	4620      	mov	r0, r4
 800df5e:	4629      	mov	r1, r5
 800df60:	f7f2 f994 	bl	800028c <__adddf3>
 800df64:	4604      	mov	r4, r0
 800df66:	460d      	mov	r5, r1
 800df68:	ec45 4b10 	vmov	d0, r4, r5
 800df6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df70:	2d00      	cmp	r5, #0
 800df72:	dc10      	bgt.n	800df96 <__ieee754_sqrt+0x62>
 800df74:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800df78:	4330      	orrs	r0, r6
 800df7a:	d0f5      	beq.n	800df68 <__ieee754_sqrt+0x34>
 800df7c:	b15d      	cbz	r5, 800df96 <__ieee754_sqrt+0x62>
 800df7e:	ee10 2a10 	vmov	r2, s0
 800df82:	462b      	mov	r3, r5
 800df84:	ee10 0a10 	vmov	r0, s0
 800df88:	f7f2 f97e 	bl	8000288 <__aeabi_dsub>
 800df8c:	4602      	mov	r2, r0
 800df8e:	460b      	mov	r3, r1
 800df90:	f7f2 fc5c 	bl	800084c <__aeabi_ddiv>
 800df94:	e7e6      	b.n	800df64 <__ieee754_sqrt+0x30>
 800df96:	1509      	asrs	r1, r1, #20
 800df98:	d076      	beq.n	800e088 <__ieee754_sqrt+0x154>
 800df9a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800df9e:	07ce      	lsls	r6, r1, #31
 800dfa0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800dfa4:	bf5e      	ittt	pl
 800dfa6:	0fda      	lsrpl	r2, r3, #31
 800dfa8:	005b      	lslpl	r3, r3, #1
 800dfaa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800dfae:	0fda      	lsrs	r2, r3, #31
 800dfb0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800dfb4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800dfb8:	2000      	movs	r0, #0
 800dfba:	106d      	asrs	r5, r5, #1
 800dfbc:	005b      	lsls	r3, r3, #1
 800dfbe:	f04f 0e16 	mov.w	lr, #22
 800dfc2:	4684      	mov	ip, r0
 800dfc4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dfc8:	eb0c 0401 	add.w	r4, ip, r1
 800dfcc:	4294      	cmp	r4, r2
 800dfce:	bfde      	ittt	le
 800dfd0:	1b12      	suble	r2, r2, r4
 800dfd2:	eb04 0c01 	addle.w	ip, r4, r1
 800dfd6:	1840      	addle	r0, r0, r1
 800dfd8:	0052      	lsls	r2, r2, #1
 800dfda:	f1be 0e01 	subs.w	lr, lr, #1
 800dfde:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800dfe2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800dfe6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dfea:	d1ed      	bne.n	800dfc8 <__ieee754_sqrt+0x94>
 800dfec:	4671      	mov	r1, lr
 800dfee:	2720      	movs	r7, #32
 800dff0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800dff4:	4562      	cmp	r2, ip
 800dff6:	eb04 060e 	add.w	r6, r4, lr
 800dffa:	dc02      	bgt.n	800e002 <__ieee754_sqrt+0xce>
 800dffc:	d113      	bne.n	800e026 <__ieee754_sqrt+0xf2>
 800dffe:	429e      	cmp	r6, r3
 800e000:	d811      	bhi.n	800e026 <__ieee754_sqrt+0xf2>
 800e002:	2e00      	cmp	r6, #0
 800e004:	eb06 0e04 	add.w	lr, r6, r4
 800e008:	da43      	bge.n	800e092 <__ieee754_sqrt+0x15e>
 800e00a:	f1be 0f00 	cmp.w	lr, #0
 800e00e:	db40      	blt.n	800e092 <__ieee754_sqrt+0x15e>
 800e010:	f10c 0801 	add.w	r8, ip, #1
 800e014:	eba2 020c 	sub.w	r2, r2, ip
 800e018:	429e      	cmp	r6, r3
 800e01a:	bf88      	it	hi
 800e01c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800e020:	1b9b      	subs	r3, r3, r6
 800e022:	4421      	add	r1, r4
 800e024:	46c4      	mov	ip, r8
 800e026:	0052      	lsls	r2, r2, #1
 800e028:	3f01      	subs	r7, #1
 800e02a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800e02e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e032:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e036:	d1dd      	bne.n	800dff4 <__ieee754_sqrt+0xc0>
 800e038:	4313      	orrs	r3, r2
 800e03a:	d006      	beq.n	800e04a <__ieee754_sqrt+0x116>
 800e03c:	1c4c      	adds	r4, r1, #1
 800e03e:	bf13      	iteet	ne
 800e040:	3101      	addne	r1, #1
 800e042:	3001      	addeq	r0, #1
 800e044:	4639      	moveq	r1, r7
 800e046:	f021 0101 	bicne.w	r1, r1, #1
 800e04a:	1043      	asrs	r3, r0, #1
 800e04c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e050:	0849      	lsrs	r1, r1, #1
 800e052:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e056:	07c2      	lsls	r2, r0, #31
 800e058:	bf48      	it	mi
 800e05a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800e05e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800e062:	460c      	mov	r4, r1
 800e064:	463d      	mov	r5, r7
 800e066:	e77f      	b.n	800df68 <__ieee754_sqrt+0x34>
 800e068:	0ada      	lsrs	r2, r3, #11
 800e06a:	3815      	subs	r0, #21
 800e06c:	055b      	lsls	r3, r3, #21
 800e06e:	2a00      	cmp	r2, #0
 800e070:	d0fa      	beq.n	800e068 <__ieee754_sqrt+0x134>
 800e072:	02d7      	lsls	r7, r2, #11
 800e074:	d50a      	bpl.n	800e08c <__ieee754_sqrt+0x158>
 800e076:	f1c1 0420 	rsb	r4, r1, #32
 800e07a:	fa23 f404 	lsr.w	r4, r3, r4
 800e07e:	1e4d      	subs	r5, r1, #1
 800e080:	408b      	lsls	r3, r1
 800e082:	4322      	orrs	r2, r4
 800e084:	1b41      	subs	r1, r0, r5
 800e086:	e788      	b.n	800df9a <__ieee754_sqrt+0x66>
 800e088:	4608      	mov	r0, r1
 800e08a:	e7f0      	b.n	800e06e <__ieee754_sqrt+0x13a>
 800e08c:	0052      	lsls	r2, r2, #1
 800e08e:	3101      	adds	r1, #1
 800e090:	e7ef      	b.n	800e072 <__ieee754_sqrt+0x13e>
 800e092:	46e0      	mov	r8, ip
 800e094:	e7be      	b.n	800e014 <__ieee754_sqrt+0xe0>
 800e096:	bf00      	nop
 800e098:	7ff00000 	.word	0x7ff00000
 800e09c:	00000000 	.word	0x00000000

0800e0a0 <__kernel_cos>:
 800e0a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0a4:	ec57 6b10 	vmov	r6, r7, d0
 800e0a8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e0ac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e0b0:	ed8d 1b00 	vstr	d1, [sp]
 800e0b4:	da07      	bge.n	800e0c6 <__kernel_cos+0x26>
 800e0b6:	ee10 0a10 	vmov	r0, s0
 800e0ba:	4639      	mov	r1, r7
 800e0bc:	f7f2 fd4c 	bl	8000b58 <__aeabi_d2iz>
 800e0c0:	2800      	cmp	r0, #0
 800e0c2:	f000 8088 	beq.w	800e1d6 <__kernel_cos+0x136>
 800e0c6:	4632      	mov	r2, r6
 800e0c8:	463b      	mov	r3, r7
 800e0ca:	4630      	mov	r0, r6
 800e0cc:	4639      	mov	r1, r7
 800e0ce:	f7f2 fa93 	bl	80005f8 <__aeabi_dmul>
 800e0d2:	4b51      	ldr	r3, [pc, #324]	; (800e218 <__kernel_cos+0x178>)
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	4604      	mov	r4, r0
 800e0d8:	460d      	mov	r5, r1
 800e0da:	f7f2 fa8d 	bl	80005f8 <__aeabi_dmul>
 800e0de:	a340      	add	r3, pc, #256	; (adr r3, 800e1e0 <__kernel_cos+0x140>)
 800e0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e4:	4682      	mov	sl, r0
 800e0e6:	468b      	mov	fp, r1
 800e0e8:	4620      	mov	r0, r4
 800e0ea:	4629      	mov	r1, r5
 800e0ec:	f7f2 fa84 	bl	80005f8 <__aeabi_dmul>
 800e0f0:	a33d      	add	r3, pc, #244	; (adr r3, 800e1e8 <__kernel_cos+0x148>)
 800e0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f6:	f7f2 f8c9 	bl	800028c <__adddf3>
 800e0fa:	4622      	mov	r2, r4
 800e0fc:	462b      	mov	r3, r5
 800e0fe:	f7f2 fa7b 	bl	80005f8 <__aeabi_dmul>
 800e102:	a33b      	add	r3, pc, #236	; (adr r3, 800e1f0 <__kernel_cos+0x150>)
 800e104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e108:	f7f2 f8be 	bl	8000288 <__aeabi_dsub>
 800e10c:	4622      	mov	r2, r4
 800e10e:	462b      	mov	r3, r5
 800e110:	f7f2 fa72 	bl	80005f8 <__aeabi_dmul>
 800e114:	a338      	add	r3, pc, #224	; (adr r3, 800e1f8 <__kernel_cos+0x158>)
 800e116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e11a:	f7f2 f8b7 	bl	800028c <__adddf3>
 800e11e:	4622      	mov	r2, r4
 800e120:	462b      	mov	r3, r5
 800e122:	f7f2 fa69 	bl	80005f8 <__aeabi_dmul>
 800e126:	a336      	add	r3, pc, #216	; (adr r3, 800e200 <__kernel_cos+0x160>)
 800e128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e12c:	f7f2 f8ac 	bl	8000288 <__aeabi_dsub>
 800e130:	4622      	mov	r2, r4
 800e132:	462b      	mov	r3, r5
 800e134:	f7f2 fa60 	bl	80005f8 <__aeabi_dmul>
 800e138:	a333      	add	r3, pc, #204	; (adr r3, 800e208 <__kernel_cos+0x168>)
 800e13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e13e:	f7f2 f8a5 	bl	800028c <__adddf3>
 800e142:	4622      	mov	r2, r4
 800e144:	462b      	mov	r3, r5
 800e146:	f7f2 fa57 	bl	80005f8 <__aeabi_dmul>
 800e14a:	4622      	mov	r2, r4
 800e14c:	462b      	mov	r3, r5
 800e14e:	f7f2 fa53 	bl	80005f8 <__aeabi_dmul>
 800e152:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e156:	4604      	mov	r4, r0
 800e158:	460d      	mov	r5, r1
 800e15a:	4630      	mov	r0, r6
 800e15c:	4639      	mov	r1, r7
 800e15e:	f7f2 fa4b 	bl	80005f8 <__aeabi_dmul>
 800e162:	460b      	mov	r3, r1
 800e164:	4602      	mov	r2, r0
 800e166:	4629      	mov	r1, r5
 800e168:	4620      	mov	r0, r4
 800e16a:	f7f2 f88d 	bl	8000288 <__aeabi_dsub>
 800e16e:	4b2b      	ldr	r3, [pc, #172]	; (800e21c <__kernel_cos+0x17c>)
 800e170:	4598      	cmp	r8, r3
 800e172:	4606      	mov	r6, r0
 800e174:	460f      	mov	r7, r1
 800e176:	dc10      	bgt.n	800e19a <__kernel_cos+0xfa>
 800e178:	4602      	mov	r2, r0
 800e17a:	460b      	mov	r3, r1
 800e17c:	4650      	mov	r0, sl
 800e17e:	4659      	mov	r1, fp
 800e180:	f7f2 f882 	bl	8000288 <__aeabi_dsub>
 800e184:	460b      	mov	r3, r1
 800e186:	4926      	ldr	r1, [pc, #152]	; (800e220 <__kernel_cos+0x180>)
 800e188:	4602      	mov	r2, r0
 800e18a:	2000      	movs	r0, #0
 800e18c:	f7f2 f87c 	bl	8000288 <__aeabi_dsub>
 800e190:	ec41 0b10 	vmov	d0, r0, r1
 800e194:	b003      	add	sp, #12
 800e196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e19a:	4b22      	ldr	r3, [pc, #136]	; (800e224 <__kernel_cos+0x184>)
 800e19c:	4920      	ldr	r1, [pc, #128]	; (800e220 <__kernel_cos+0x180>)
 800e19e:	4598      	cmp	r8, r3
 800e1a0:	bfcc      	ite	gt
 800e1a2:	4d21      	ldrgt	r5, [pc, #132]	; (800e228 <__kernel_cos+0x188>)
 800e1a4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800e1a8:	2400      	movs	r4, #0
 800e1aa:	4622      	mov	r2, r4
 800e1ac:	462b      	mov	r3, r5
 800e1ae:	2000      	movs	r0, #0
 800e1b0:	f7f2 f86a 	bl	8000288 <__aeabi_dsub>
 800e1b4:	4622      	mov	r2, r4
 800e1b6:	4680      	mov	r8, r0
 800e1b8:	4689      	mov	r9, r1
 800e1ba:	462b      	mov	r3, r5
 800e1bc:	4650      	mov	r0, sl
 800e1be:	4659      	mov	r1, fp
 800e1c0:	f7f2 f862 	bl	8000288 <__aeabi_dsub>
 800e1c4:	4632      	mov	r2, r6
 800e1c6:	463b      	mov	r3, r7
 800e1c8:	f7f2 f85e 	bl	8000288 <__aeabi_dsub>
 800e1cc:	4602      	mov	r2, r0
 800e1ce:	460b      	mov	r3, r1
 800e1d0:	4640      	mov	r0, r8
 800e1d2:	4649      	mov	r1, r9
 800e1d4:	e7da      	b.n	800e18c <__kernel_cos+0xec>
 800e1d6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e210 <__kernel_cos+0x170>
 800e1da:	e7db      	b.n	800e194 <__kernel_cos+0xf4>
 800e1dc:	f3af 8000 	nop.w
 800e1e0:	be8838d4 	.word	0xbe8838d4
 800e1e4:	bda8fae9 	.word	0xbda8fae9
 800e1e8:	bdb4b1c4 	.word	0xbdb4b1c4
 800e1ec:	3e21ee9e 	.word	0x3e21ee9e
 800e1f0:	809c52ad 	.word	0x809c52ad
 800e1f4:	3e927e4f 	.word	0x3e927e4f
 800e1f8:	19cb1590 	.word	0x19cb1590
 800e1fc:	3efa01a0 	.word	0x3efa01a0
 800e200:	16c15177 	.word	0x16c15177
 800e204:	3f56c16c 	.word	0x3f56c16c
 800e208:	5555554c 	.word	0x5555554c
 800e20c:	3fa55555 	.word	0x3fa55555
 800e210:	00000000 	.word	0x00000000
 800e214:	3ff00000 	.word	0x3ff00000
 800e218:	3fe00000 	.word	0x3fe00000
 800e21c:	3fd33332 	.word	0x3fd33332
 800e220:	3ff00000 	.word	0x3ff00000
 800e224:	3fe90000 	.word	0x3fe90000
 800e228:	3fd20000 	.word	0x3fd20000
 800e22c:	00000000 	.word	0x00000000

0800e230 <__kernel_rem_pio2>:
 800e230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e234:	ed2d 8b02 	vpush	{d8}
 800e238:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e23c:	f112 0f14 	cmn.w	r2, #20
 800e240:	9308      	str	r3, [sp, #32]
 800e242:	9101      	str	r1, [sp, #4]
 800e244:	4bc6      	ldr	r3, [pc, #792]	; (800e560 <__kernel_rem_pio2+0x330>)
 800e246:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e248:	9009      	str	r0, [sp, #36]	; 0x24
 800e24a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e24e:	9304      	str	r3, [sp, #16]
 800e250:	9b08      	ldr	r3, [sp, #32]
 800e252:	f103 33ff 	add.w	r3, r3, #4294967295
 800e256:	bfa8      	it	ge
 800e258:	1ed4      	subge	r4, r2, #3
 800e25a:	9306      	str	r3, [sp, #24]
 800e25c:	bfb2      	itee	lt
 800e25e:	2400      	movlt	r4, #0
 800e260:	2318      	movge	r3, #24
 800e262:	fb94 f4f3 	sdivge	r4, r4, r3
 800e266:	f06f 0317 	mvn.w	r3, #23
 800e26a:	fb04 3303 	mla	r3, r4, r3, r3
 800e26e:	eb03 0a02 	add.w	sl, r3, r2
 800e272:	9b04      	ldr	r3, [sp, #16]
 800e274:	9a06      	ldr	r2, [sp, #24]
 800e276:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800e550 <__kernel_rem_pio2+0x320>
 800e27a:	eb03 0802 	add.w	r8, r3, r2
 800e27e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e280:	1aa7      	subs	r7, r4, r2
 800e282:	ae20      	add	r6, sp, #128	; 0x80
 800e284:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e288:	2500      	movs	r5, #0
 800e28a:	4545      	cmp	r5, r8
 800e28c:	dd18      	ble.n	800e2c0 <__kernel_rem_pio2+0x90>
 800e28e:	9b08      	ldr	r3, [sp, #32]
 800e290:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800e294:	aa20      	add	r2, sp, #128	; 0x80
 800e296:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800e550 <__kernel_rem_pio2+0x320>
 800e29a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e29e:	f1c3 0301 	rsb	r3, r3, #1
 800e2a2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e2a6:	9307      	str	r3, [sp, #28]
 800e2a8:	9b07      	ldr	r3, [sp, #28]
 800e2aa:	9a04      	ldr	r2, [sp, #16]
 800e2ac:	4443      	add	r3, r8
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	db2f      	blt.n	800e312 <__kernel_rem_pio2+0xe2>
 800e2b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e2b6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e2ba:	462f      	mov	r7, r5
 800e2bc:	2600      	movs	r6, #0
 800e2be:	e01b      	b.n	800e2f8 <__kernel_rem_pio2+0xc8>
 800e2c0:	42ef      	cmn	r7, r5
 800e2c2:	d407      	bmi.n	800e2d4 <__kernel_rem_pio2+0xa4>
 800e2c4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e2c8:	f7f2 f92c 	bl	8000524 <__aeabi_i2d>
 800e2cc:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e2d0:	3501      	adds	r5, #1
 800e2d2:	e7da      	b.n	800e28a <__kernel_rem_pio2+0x5a>
 800e2d4:	ec51 0b18 	vmov	r0, r1, d8
 800e2d8:	e7f8      	b.n	800e2cc <__kernel_rem_pio2+0x9c>
 800e2da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2de:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e2e2:	f7f2 f989 	bl	80005f8 <__aeabi_dmul>
 800e2e6:	4602      	mov	r2, r0
 800e2e8:	460b      	mov	r3, r1
 800e2ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2ee:	f7f1 ffcd 	bl	800028c <__adddf3>
 800e2f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2f6:	3601      	adds	r6, #1
 800e2f8:	9b06      	ldr	r3, [sp, #24]
 800e2fa:	429e      	cmp	r6, r3
 800e2fc:	f1a7 0708 	sub.w	r7, r7, #8
 800e300:	ddeb      	ble.n	800e2da <__kernel_rem_pio2+0xaa>
 800e302:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e306:	3508      	adds	r5, #8
 800e308:	ecab 7b02 	vstmia	fp!, {d7}
 800e30c:	f108 0801 	add.w	r8, r8, #1
 800e310:	e7ca      	b.n	800e2a8 <__kernel_rem_pio2+0x78>
 800e312:	9b04      	ldr	r3, [sp, #16]
 800e314:	aa0c      	add	r2, sp, #48	; 0x30
 800e316:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e31a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e31c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e31e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e322:	9c04      	ldr	r4, [sp, #16]
 800e324:	930a      	str	r3, [sp, #40]	; 0x28
 800e326:	ab98      	add	r3, sp, #608	; 0x260
 800e328:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e32c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e330:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800e334:	f8cd b008 	str.w	fp, [sp, #8]
 800e338:	4625      	mov	r5, r4
 800e33a:	2d00      	cmp	r5, #0
 800e33c:	dc78      	bgt.n	800e430 <__kernel_rem_pio2+0x200>
 800e33e:	ec47 6b10 	vmov	d0, r6, r7
 800e342:	4650      	mov	r0, sl
 800e344:	f000 fc8c 	bl	800ec60 <scalbn>
 800e348:	ec57 6b10 	vmov	r6, r7, d0
 800e34c:	2200      	movs	r2, #0
 800e34e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e352:	ee10 0a10 	vmov	r0, s0
 800e356:	4639      	mov	r1, r7
 800e358:	f7f2 f94e 	bl	80005f8 <__aeabi_dmul>
 800e35c:	ec41 0b10 	vmov	d0, r0, r1
 800e360:	f000 fb72 	bl	800ea48 <floor>
 800e364:	4b7f      	ldr	r3, [pc, #508]	; (800e564 <__kernel_rem_pio2+0x334>)
 800e366:	ec51 0b10 	vmov	r0, r1, d0
 800e36a:	2200      	movs	r2, #0
 800e36c:	f7f2 f944 	bl	80005f8 <__aeabi_dmul>
 800e370:	4602      	mov	r2, r0
 800e372:	460b      	mov	r3, r1
 800e374:	4630      	mov	r0, r6
 800e376:	4639      	mov	r1, r7
 800e378:	f7f1 ff86 	bl	8000288 <__aeabi_dsub>
 800e37c:	460f      	mov	r7, r1
 800e37e:	4606      	mov	r6, r0
 800e380:	f7f2 fbea 	bl	8000b58 <__aeabi_d2iz>
 800e384:	9007      	str	r0, [sp, #28]
 800e386:	f7f2 f8cd 	bl	8000524 <__aeabi_i2d>
 800e38a:	4602      	mov	r2, r0
 800e38c:	460b      	mov	r3, r1
 800e38e:	4630      	mov	r0, r6
 800e390:	4639      	mov	r1, r7
 800e392:	f7f1 ff79 	bl	8000288 <__aeabi_dsub>
 800e396:	f1ba 0f00 	cmp.w	sl, #0
 800e39a:	4606      	mov	r6, r0
 800e39c:	460f      	mov	r7, r1
 800e39e:	dd70      	ble.n	800e482 <__kernel_rem_pio2+0x252>
 800e3a0:	1e62      	subs	r2, r4, #1
 800e3a2:	ab0c      	add	r3, sp, #48	; 0x30
 800e3a4:	9d07      	ldr	r5, [sp, #28]
 800e3a6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e3aa:	f1ca 0118 	rsb	r1, sl, #24
 800e3ae:	fa40 f301 	asr.w	r3, r0, r1
 800e3b2:	441d      	add	r5, r3
 800e3b4:	408b      	lsls	r3, r1
 800e3b6:	1ac0      	subs	r0, r0, r3
 800e3b8:	ab0c      	add	r3, sp, #48	; 0x30
 800e3ba:	9507      	str	r5, [sp, #28]
 800e3bc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e3c0:	f1ca 0317 	rsb	r3, sl, #23
 800e3c4:	fa40 f303 	asr.w	r3, r0, r3
 800e3c8:	9302      	str	r3, [sp, #8]
 800e3ca:	9b02      	ldr	r3, [sp, #8]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	dd66      	ble.n	800e49e <__kernel_rem_pio2+0x26e>
 800e3d0:	9b07      	ldr	r3, [sp, #28]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	9307      	str	r3, [sp, #28]
 800e3d8:	4615      	mov	r5, r2
 800e3da:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e3de:	4294      	cmp	r4, r2
 800e3e0:	f300 8099 	bgt.w	800e516 <__kernel_rem_pio2+0x2e6>
 800e3e4:	f1ba 0f00 	cmp.w	sl, #0
 800e3e8:	dd07      	ble.n	800e3fa <__kernel_rem_pio2+0x1ca>
 800e3ea:	f1ba 0f01 	cmp.w	sl, #1
 800e3ee:	f000 80a5 	beq.w	800e53c <__kernel_rem_pio2+0x30c>
 800e3f2:	f1ba 0f02 	cmp.w	sl, #2
 800e3f6:	f000 80c1 	beq.w	800e57c <__kernel_rem_pio2+0x34c>
 800e3fa:	9b02      	ldr	r3, [sp, #8]
 800e3fc:	2b02      	cmp	r3, #2
 800e3fe:	d14e      	bne.n	800e49e <__kernel_rem_pio2+0x26e>
 800e400:	4632      	mov	r2, r6
 800e402:	463b      	mov	r3, r7
 800e404:	4958      	ldr	r1, [pc, #352]	; (800e568 <__kernel_rem_pio2+0x338>)
 800e406:	2000      	movs	r0, #0
 800e408:	f7f1 ff3e 	bl	8000288 <__aeabi_dsub>
 800e40c:	4606      	mov	r6, r0
 800e40e:	460f      	mov	r7, r1
 800e410:	2d00      	cmp	r5, #0
 800e412:	d044      	beq.n	800e49e <__kernel_rem_pio2+0x26e>
 800e414:	4650      	mov	r0, sl
 800e416:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800e558 <__kernel_rem_pio2+0x328>
 800e41a:	f000 fc21 	bl	800ec60 <scalbn>
 800e41e:	4630      	mov	r0, r6
 800e420:	4639      	mov	r1, r7
 800e422:	ec53 2b10 	vmov	r2, r3, d0
 800e426:	f7f1 ff2f 	bl	8000288 <__aeabi_dsub>
 800e42a:	4606      	mov	r6, r0
 800e42c:	460f      	mov	r7, r1
 800e42e:	e036      	b.n	800e49e <__kernel_rem_pio2+0x26e>
 800e430:	4b4e      	ldr	r3, [pc, #312]	; (800e56c <__kernel_rem_pio2+0x33c>)
 800e432:	2200      	movs	r2, #0
 800e434:	4630      	mov	r0, r6
 800e436:	4639      	mov	r1, r7
 800e438:	f7f2 f8de 	bl	80005f8 <__aeabi_dmul>
 800e43c:	f7f2 fb8c 	bl	8000b58 <__aeabi_d2iz>
 800e440:	f7f2 f870 	bl	8000524 <__aeabi_i2d>
 800e444:	4b4a      	ldr	r3, [pc, #296]	; (800e570 <__kernel_rem_pio2+0x340>)
 800e446:	2200      	movs	r2, #0
 800e448:	4680      	mov	r8, r0
 800e44a:	4689      	mov	r9, r1
 800e44c:	f7f2 f8d4 	bl	80005f8 <__aeabi_dmul>
 800e450:	4602      	mov	r2, r0
 800e452:	460b      	mov	r3, r1
 800e454:	4630      	mov	r0, r6
 800e456:	4639      	mov	r1, r7
 800e458:	f7f1 ff16 	bl	8000288 <__aeabi_dsub>
 800e45c:	f7f2 fb7c 	bl	8000b58 <__aeabi_d2iz>
 800e460:	9b02      	ldr	r3, [sp, #8]
 800e462:	f843 0b04 	str.w	r0, [r3], #4
 800e466:	3d01      	subs	r5, #1
 800e468:	9302      	str	r3, [sp, #8]
 800e46a:	ab70      	add	r3, sp, #448	; 0x1c0
 800e46c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e474:	4640      	mov	r0, r8
 800e476:	4649      	mov	r1, r9
 800e478:	f7f1 ff08 	bl	800028c <__adddf3>
 800e47c:	4606      	mov	r6, r0
 800e47e:	460f      	mov	r7, r1
 800e480:	e75b      	b.n	800e33a <__kernel_rem_pio2+0x10a>
 800e482:	d105      	bne.n	800e490 <__kernel_rem_pio2+0x260>
 800e484:	1e63      	subs	r3, r4, #1
 800e486:	aa0c      	add	r2, sp, #48	; 0x30
 800e488:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e48c:	15c3      	asrs	r3, r0, #23
 800e48e:	e79b      	b.n	800e3c8 <__kernel_rem_pio2+0x198>
 800e490:	4b38      	ldr	r3, [pc, #224]	; (800e574 <__kernel_rem_pio2+0x344>)
 800e492:	2200      	movs	r2, #0
 800e494:	f7f2 fb36 	bl	8000b04 <__aeabi_dcmpge>
 800e498:	2800      	cmp	r0, #0
 800e49a:	d139      	bne.n	800e510 <__kernel_rem_pio2+0x2e0>
 800e49c:	9002      	str	r0, [sp, #8]
 800e49e:	2200      	movs	r2, #0
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	4630      	mov	r0, r6
 800e4a4:	4639      	mov	r1, r7
 800e4a6:	f7f2 fb0f 	bl	8000ac8 <__aeabi_dcmpeq>
 800e4aa:	2800      	cmp	r0, #0
 800e4ac:	f000 80b4 	beq.w	800e618 <__kernel_rem_pio2+0x3e8>
 800e4b0:	f104 3bff 	add.w	fp, r4, #4294967295
 800e4b4:	465b      	mov	r3, fp
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	9904      	ldr	r1, [sp, #16]
 800e4ba:	428b      	cmp	r3, r1
 800e4bc:	da65      	bge.n	800e58a <__kernel_rem_pio2+0x35a>
 800e4be:	2a00      	cmp	r2, #0
 800e4c0:	d07b      	beq.n	800e5ba <__kernel_rem_pio2+0x38a>
 800e4c2:	ab0c      	add	r3, sp, #48	; 0x30
 800e4c4:	f1aa 0a18 	sub.w	sl, sl, #24
 800e4c8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	f000 80a0 	beq.w	800e612 <__kernel_rem_pio2+0x3e2>
 800e4d2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800e558 <__kernel_rem_pio2+0x328>
 800e4d6:	4650      	mov	r0, sl
 800e4d8:	f000 fbc2 	bl	800ec60 <scalbn>
 800e4dc:	4f23      	ldr	r7, [pc, #140]	; (800e56c <__kernel_rem_pio2+0x33c>)
 800e4de:	ec55 4b10 	vmov	r4, r5, d0
 800e4e2:	46d8      	mov	r8, fp
 800e4e4:	2600      	movs	r6, #0
 800e4e6:	f1b8 0f00 	cmp.w	r8, #0
 800e4ea:	f280 80cf 	bge.w	800e68c <__kernel_rem_pio2+0x45c>
 800e4ee:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800e550 <__kernel_rem_pio2+0x320>
 800e4f2:	465f      	mov	r7, fp
 800e4f4:	f04f 0800 	mov.w	r8, #0
 800e4f8:	2f00      	cmp	r7, #0
 800e4fa:	f2c0 80fd 	blt.w	800e6f8 <__kernel_rem_pio2+0x4c8>
 800e4fe:	ab70      	add	r3, sp, #448	; 0x1c0
 800e500:	f8df a074 	ldr.w	sl, [pc, #116]	; 800e578 <__kernel_rem_pio2+0x348>
 800e504:	ec55 4b18 	vmov	r4, r5, d8
 800e508:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800e50c:	2600      	movs	r6, #0
 800e50e:	e0e5      	b.n	800e6dc <__kernel_rem_pio2+0x4ac>
 800e510:	2302      	movs	r3, #2
 800e512:	9302      	str	r3, [sp, #8]
 800e514:	e75c      	b.n	800e3d0 <__kernel_rem_pio2+0x1a0>
 800e516:	f8db 3000 	ldr.w	r3, [fp]
 800e51a:	b955      	cbnz	r5, 800e532 <__kernel_rem_pio2+0x302>
 800e51c:	b123      	cbz	r3, 800e528 <__kernel_rem_pio2+0x2f8>
 800e51e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e522:	f8cb 3000 	str.w	r3, [fp]
 800e526:	2301      	movs	r3, #1
 800e528:	3201      	adds	r2, #1
 800e52a:	f10b 0b04 	add.w	fp, fp, #4
 800e52e:	461d      	mov	r5, r3
 800e530:	e755      	b.n	800e3de <__kernel_rem_pio2+0x1ae>
 800e532:	1acb      	subs	r3, r1, r3
 800e534:	f8cb 3000 	str.w	r3, [fp]
 800e538:	462b      	mov	r3, r5
 800e53a:	e7f5      	b.n	800e528 <__kernel_rem_pio2+0x2f8>
 800e53c:	1e62      	subs	r2, r4, #1
 800e53e:	ab0c      	add	r3, sp, #48	; 0x30
 800e540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e544:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e548:	a90c      	add	r1, sp, #48	; 0x30
 800e54a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e54e:	e754      	b.n	800e3fa <__kernel_rem_pio2+0x1ca>
	...
 800e55c:	3ff00000 	.word	0x3ff00000
 800e560:	0800f4d0 	.word	0x0800f4d0
 800e564:	40200000 	.word	0x40200000
 800e568:	3ff00000 	.word	0x3ff00000
 800e56c:	3e700000 	.word	0x3e700000
 800e570:	41700000 	.word	0x41700000
 800e574:	3fe00000 	.word	0x3fe00000
 800e578:	0800f490 	.word	0x0800f490
 800e57c:	1e62      	subs	r2, r4, #1
 800e57e:	ab0c      	add	r3, sp, #48	; 0x30
 800e580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e584:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e588:	e7de      	b.n	800e548 <__kernel_rem_pio2+0x318>
 800e58a:	a90c      	add	r1, sp, #48	; 0x30
 800e58c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e590:	3b01      	subs	r3, #1
 800e592:	430a      	orrs	r2, r1
 800e594:	e790      	b.n	800e4b8 <__kernel_rem_pio2+0x288>
 800e596:	3301      	adds	r3, #1
 800e598:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e59c:	2900      	cmp	r1, #0
 800e59e:	d0fa      	beq.n	800e596 <__kernel_rem_pio2+0x366>
 800e5a0:	9a08      	ldr	r2, [sp, #32]
 800e5a2:	18e3      	adds	r3, r4, r3
 800e5a4:	18a6      	adds	r6, r4, r2
 800e5a6:	aa20      	add	r2, sp, #128	; 0x80
 800e5a8:	1c65      	adds	r5, r4, #1
 800e5aa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800e5ae:	9302      	str	r3, [sp, #8]
 800e5b0:	9b02      	ldr	r3, [sp, #8]
 800e5b2:	42ab      	cmp	r3, r5
 800e5b4:	da04      	bge.n	800e5c0 <__kernel_rem_pio2+0x390>
 800e5b6:	461c      	mov	r4, r3
 800e5b8:	e6b5      	b.n	800e326 <__kernel_rem_pio2+0xf6>
 800e5ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e5bc:	2301      	movs	r3, #1
 800e5be:	e7eb      	b.n	800e598 <__kernel_rem_pio2+0x368>
 800e5c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e5c6:	f7f1 ffad 	bl	8000524 <__aeabi_i2d>
 800e5ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e5ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5d0:	46b3      	mov	fp, r6
 800e5d2:	461c      	mov	r4, r3
 800e5d4:	2700      	movs	r7, #0
 800e5d6:	f04f 0800 	mov.w	r8, #0
 800e5da:	f04f 0900 	mov.w	r9, #0
 800e5de:	9b06      	ldr	r3, [sp, #24]
 800e5e0:	429f      	cmp	r7, r3
 800e5e2:	dd06      	ble.n	800e5f2 <__kernel_rem_pio2+0x3c2>
 800e5e4:	ab70      	add	r3, sp, #448	; 0x1c0
 800e5e6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e5ea:	e9c3 8900 	strd	r8, r9, [r3]
 800e5ee:	3501      	adds	r5, #1
 800e5f0:	e7de      	b.n	800e5b0 <__kernel_rem_pio2+0x380>
 800e5f2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e5f6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e5fa:	f7f1 fffd 	bl	80005f8 <__aeabi_dmul>
 800e5fe:	4602      	mov	r2, r0
 800e600:	460b      	mov	r3, r1
 800e602:	4640      	mov	r0, r8
 800e604:	4649      	mov	r1, r9
 800e606:	f7f1 fe41 	bl	800028c <__adddf3>
 800e60a:	3701      	adds	r7, #1
 800e60c:	4680      	mov	r8, r0
 800e60e:	4689      	mov	r9, r1
 800e610:	e7e5      	b.n	800e5de <__kernel_rem_pio2+0x3ae>
 800e612:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e616:	e754      	b.n	800e4c2 <__kernel_rem_pio2+0x292>
 800e618:	ec47 6b10 	vmov	d0, r6, r7
 800e61c:	f1ca 0000 	rsb	r0, sl, #0
 800e620:	f000 fb1e 	bl	800ec60 <scalbn>
 800e624:	ec57 6b10 	vmov	r6, r7, d0
 800e628:	4b9f      	ldr	r3, [pc, #636]	; (800e8a8 <__kernel_rem_pio2+0x678>)
 800e62a:	ee10 0a10 	vmov	r0, s0
 800e62e:	2200      	movs	r2, #0
 800e630:	4639      	mov	r1, r7
 800e632:	f7f2 fa67 	bl	8000b04 <__aeabi_dcmpge>
 800e636:	b300      	cbz	r0, 800e67a <__kernel_rem_pio2+0x44a>
 800e638:	4b9c      	ldr	r3, [pc, #624]	; (800e8ac <__kernel_rem_pio2+0x67c>)
 800e63a:	2200      	movs	r2, #0
 800e63c:	4630      	mov	r0, r6
 800e63e:	4639      	mov	r1, r7
 800e640:	f7f1 ffda 	bl	80005f8 <__aeabi_dmul>
 800e644:	f7f2 fa88 	bl	8000b58 <__aeabi_d2iz>
 800e648:	4605      	mov	r5, r0
 800e64a:	f7f1 ff6b 	bl	8000524 <__aeabi_i2d>
 800e64e:	4b96      	ldr	r3, [pc, #600]	; (800e8a8 <__kernel_rem_pio2+0x678>)
 800e650:	2200      	movs	r2, #0
 800e652:	f7f1 ffd1 	bl	80005f8 <__aeabi_dmul>
 800e656:	460b      	mov	r3, r1
 800e658:	4602      	mov	r2, r0
 800e65a:	4639      	mov	r1, r7
 800e65c:	4630      	mov	r0, r6
 800e65e:	f7f1 fe13 	bl	8000288 <__aeabi_dsub>
 800e662:	f7f2 fa79 	bl	8000b58 <__aeabi_d2iz>
 800e666:	f104 0b01 	add.w	fp, r4, #1
 800e66a:	ab0c      	add	r3, sp, #48	; 0x30
 800e66c:	f10a 0a18 	add.w	sl, sl, #24
 800e670:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e674:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800e678:	e72b      	b.n	800e4d2 <__kernel_rem_pio2+0x2a2>
 800e67a:	4630      	mov	r0, r6
 800e67c:	4639      	mov	r1, r7
 800e67e:	f7f2 fa6b 	bl	8000b58 <__aeabi_d2iz>
 800e682:	ab0c      	add	r3, sp, #48	; 0x30
 800e684:	46a3      	mov	fp, r4
 800e686:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e68a:	e722      	b.n	800e4d2 <__kernel_rem_pio2+0x2a2>
 800e68c:	ab70      	add	r3, sp, #448	; 0x1c0
 800e68e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800e692:	ab0c      	add	r3, sp, #48	; 0x30
 800e694:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e698:	f7f1 ff44 	bl	8000524 <__aeabi_i2d>
 800e69c:	4622      	mov	r2, r4
 800e69e:	462b      	mov	r3, r5
 800e6a0:	f7f1 ffaa 	bl	80005f8 <__aeabi_dmul>
 800e6a4:	4632      	mov	r2, r6
 800e6a6:	e9c9 0100 	strd	r0, r1, [r9]
 800e6aa:	463b      	mov	r3, r7
 800e6ac:	4620      	mov	r0, r4
 800e6ae:	4629      	mov	r1, r5
 800e6b0:	f7f1 ffa2 	bl	80005f8 <__aeabi_dmul>
 800e6b4:	f108 38ff 	add.w	r8, r8, #4294967295
 800e6b8:	4604      	mov	r4, r0
 800e6ba:	460d      	mov	r5, r1
 800e6bc:	e713      	b.n	800e4e6 <__kernel_rem_pio2+0x2b6>
 800e6be:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800e6c2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800e6c6:	f7f1 ff97 	bl	80005f8 <__aeabi_dmul>
 800e6ca:	4602      	mov	r2, r0
 800e6cc:	460b      	mov	r3, r1
 800e6ce:	4620      	mov	r0, r4
 800e6d0:	4629      	mov	r1, r5
 800e6d2:	f7f1 fddb 	bl	800028c <__adddf3>
 800e6d6:	3601      	adds	r6, #1
 800e6d8:	4604      	mov	r4, r0
 800e6da:	460d      	mov	r5, r1
 800e6dc:	9b04      	ldr	r3, [sp, #16]
 800e6de:	429e      	cmp	r6, r3
 800e6e0:	dc01      	bgt.n	800e6e6 <__kernel_rem_pio2+0x4b6>
 800e6e2:	45b0      	cmp	r8, r6
 800e6e4:	daeb      	bge.n	800e6be <__kernel_rem_pio2+0x48e>
 800e6e6:	ab48      	add	r3, sp, #288	; 0x120
 800e6e8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e6ec:	e9c3 4500 	strd	r4, r5, [r3]
 800e6f0:	3f01      	subs	r7, #1
 800e6f2:	f108 0801 	add.w	r8, r8, #1
 800e6f6:	e6ff      	b.n	800e4f8 <__kernel_rem_pio2+0x2c8>
 800e6f8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e6fa:	2b02      	cmp	r3, #2
 800e6fc:	dc0b      	bgt.n	800e716 <__kernel_rem_pio2+0x4e6>
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	dc6e      	bgt.n	800e7e0 <__kernel_rem_pio2+0x5b0>
 800e702:	d045      	beq.n	800e790 <__kernel_rem_pio2+0x560>
 800e704:	9b07      	ldr	r3, [sp, #28]
 800e706:	f003 0007 	and.w	r0, r3, #7
 800e70a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800e70e:	ecbd 8b02 	vpop	{d8}
 800e712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e716:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e718:	2b03      	cmp	r3, #3
 800e71a:	d1f3      	bne.n	800e704 <__kernel_rem_pio2+0x4d4>
 800e71c:	ab48      	add	r3, sp, #288	; 0x120
 800e71e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800e722:	46d0      	mov	r8, sl
 800e724:	46d9      	mov	r9, fp
 800e726:	f1b9 0f00 	cmp.w	r9, #0
 800e72a:	f1a8 0808 	sub.w	r8, r8, #8
 800e72e:	dc64      	bgt.n	800e7fa <__kernel_rem_pio2+0x5ca>
 800e730:	465c      	mov	r4, fp
 800e732:	2c01      	cmp	r4, #1
 800e734:	f1aa 0a08 	sub.w	sl, sl, #8
 800e738:	dc7e      	bgt.n	800e838 <__kernel_rem_pio2+0x608>
 800e73a:	2000      	movs	r0, #0
 800e73c:	2100      	movs	r1, #0
 800e73e:	f1bb 0f01 	cmp.w	fp, #1
 800e742:	f300 8097 	bgt.w	800e874 <__kernel_rem_pio2+0x644>
 800e746:	9b02      	ldr	r3, [sp, #8]
 800e748:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800e74c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800e750:	2b00      	cmp	r3, #0
 800e752:	f040 8099 	bne.w	800e888 <__kernel_rem_pio2+0x658>
 800e756:	9b01      	ldr	r3, [sp, #4]
 800e758:	e9c3 5600 	strd	r5, r6, [r3]
 800e75c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800e760:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e764:	e7ce      	b.n	800e704 <__kernel_rem_pio2+0x4d4>
 800e766:	ab48      	add	r3, sp, #288	; 0x120
 800e768:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e770:	f7f1 fd8c 	bl	800028c <__adddf3>
 800e774:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e778:	f1bb 0f00 	cmp.w	fp, #0
 800e77c:	daf3      	bge.n	800e766 <__kernel_rem_pio2+0x536>
 800e77e:	9b02      	ldr	r3, [sp, #8]
 800e780:	b113      	cbz	r3, 800e788 <__kernel_rem_pio2+0x558>
 800e782:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e786:	4619      	mov	r1, r3
 800e788:	9b01      	ldr	r3, [sp, #4]
 800e78a:	e9c3 0100 	strd	r0, r1, [r3]
 800e78e:	e7b9      	b.n	800e704 <__kernel_rem_pio2+0x4d4>
 800e790:	2000      	movs	r0, #0
 800e792:	2100      	movs	r1, #0
 800e794:	e7f0      	b.n	800e778 <__kernel_rem_pio2+0x548>
 800e796:	ab48      	add	r3, sp, #288	; 0x120
 800e798:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7a0:	f7f1 fd74 	bl	800028c <__adddf3>
 800e7a4:	3c01      	subs	r4, #1
 800e7a6:	2c00      	cmp	r4, #0
 800e7a8:	daf5      	bge.n	800e796 <__kernel_rem_pio2+0x566>
 800e7aa:	9b02      	ldr	r3, [sp, #8]
 800e7ac:	b1e3      	cbz	r3, 800e7e8 <__kernel_rem_pio2+0x5b8>
 800e7ae:	4602      	mov	r2, r0
 800e7b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e7b4:	9c01      	ldr	r4, [sp, #4]
 800e7b6:	e9c4 2300 	strd	r2, r3, [r4]
 800e7ba:	4602      	mov	r2, r0
 800e7bc:	460b      	mov	r3, r1
 800e7be:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800e7c2:	f7f1 fd61 	bl	8000288 <__aeabi_dsub>
 800e7c6:	ad4a      	add	r5, sp, #296	; 0x128
 800e7c8:	2401      	movs	r4, #1
 800e7ca:	45a3      	cmp	fp, r4
 800e7cc:	da0f      	bge.n	800e7ee <__kernel_rem_pio2+0x5be>
 800e7ce:	9b02      	ldr	r3, [sp, #8]
 800e7d0:	b113      	cbz	r3, 800e7d8 <__kernel_rem_pio2+0x5a8>
 800e7d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e7d6:	4619      	mov	r1, r3
 800e7d8:	9b01      	ldr	r3, [sp, #4]
 800e7da:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e7de:	e791      	b.n	800e704 <__kernel_rem_pio2+0x4d4>
 800e7e0:	465c      	mov	r4, fp
 800e7e2:	2000      	movs	r0, #0
 800e7e4:	2100      	movs	r1, #0
 800e7e6:	e7de      	b.n	800e7a6 <__kernel_rem_pio2+0x576>
 800e7e8:	4602      	mov	r2, r0
 800e7ea:	460b      	mov	r3, r1
 800e7ec:	e7e2      	b.n	800e7b4 <__kernel_rem_pio2+0x584>
 800e7ee:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800e7f2:	f7f1 fd4b 	bl	800028c <__adddf3>
 800e7f6:	3401      	adds	r4, #1
 800e7f8:	e7e7      	b.n	800e7ca <__kernel_rem_pio2+0x59a>
 800e7fa:	e9d8 4500 	ldrd	r4, r5, [r8]
 800e7fe:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800e802:	4620      	mov	r0, r4
 800e804:	4632      	mov	r2, r6
 800e806:	463b      	mov	r3, r7
 800e808:	4629      	mov	r1, r5
 800e80a:	f7f1 fd3f 	bl	800028c <__adddf3>
 800e80e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e812:	4602      	mov	r2, r0
 800e814:	460b      	mov	r3, r1
 800e816:	4620      	mov	r0, r4
 800e818:	4629      	mov	r1, r5
 800e81a:	f7f1 fd35 	bl	8000288 <__aeabi_dsub>
 800e81e:	4632      	mov	r2, r6
 800e820:	463b      	mov	r3, r7
 800e822:	f7f1 fd33 	bl	800028c <__adddf3>
 800e826:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e82a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800e82e:	ed88 7b00 	vstr	d7, [r8]
 800e832:	f109 39ff 	add.w	r9, r9, #4294967295
 800e836:	e776      	b.n	800e726 <__kernel_rem_pio2+0x4f6>
 800e838:	e9da 8900 	ldrd	r8, r9, [sl]
 800e83c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e840:	4640      	mov	r0, r8
 800e842:	4632      	mov	r2, r6
 800e844:	463b      	mov	r3, r7
 800e846:	4649      	mov	r1, r9
 800e848:	f7f1 fd20 	bl	800028c <__adddf3>
 800e84c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e850:	4602      	mov	r2, r0
 800e852:	460b      	mov	r3, r1
 800e854:	4640      	mov	r0, r8
 800e856:	4649      	mov	r1, r9
 800e858:	f7f1 fd16 	bl	8000288 <__aeabi_dsub>
 800e85c:	4632      	mov	r2, r6
 800e85e:	463b      	mov	r3, r7
 800e860:	f7f1 fd14 	bl	800028c <__adddf3>
 800e864:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e868:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e86c:	ed8a 7b00 	vstr	d7, [sl]
 800e870:	3c01      	subs	r4, #1
 800e872:	e75e      	b.n	800e732 <__kernel_rem_pio2+0x502>
 800e874:	ab48      	add	r3, sp, #288	; 0x120
 800e876:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e87e:	f7f1 fd05 	bl	800028c <__adddf3>
 800e882:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e886:	e75a      	b.n	800e73e <__kernel_rem_pio2+0x50e>
 800e888:	9b01      	ldr	r3, [sp, #4]
 800e88a:	9a01      	ldr	r2, [sp, #4]
 800e88c:	601d      	str	r5, [r3, #0]
 800e88e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800e892:	605c      	str	r4, [r3, #4]
 800e894:	609f      	str	r7, [r3, #8]
 800e896:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800e89a:	60d3      	str	r3, [r2, #12]
 800e89c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e8a0:	6110      	str	r0, [r2, #16]
 800e8a2:	6153      	str	r3, [r2, #20]
 800e8a4:	e72e      	b.n	800e704 <__kernel_rem_pio2+0x4d4>
 800e8a6:	bf00      	nop
 800e8a8:	41700000 	.word	0x41700000
 800e8ac:	3e700000 	.word	0x3e700000

0800e8b0 <__kernel_sin>:
 800e8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8b4:	ed2d 8b04 	vpush	{d8-d9}
 800e8b8:	eeb0 8a41 	vmov.f32	s16, s2
 800e8bc:	eef0 8a61 	vmov.f32	s17, s3
 800e8c0:	ec55 4b10 	vmov	r4, r5, d0
 800e8c4:	b083      	sub	sp, #12
 800e8c6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e8ca:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e8ce:	9001      	str	r0, [sp, #4]
 800e8d0:	da06      	bge.n	800e8e0 <__kernel_sin+0x30>
 800e8d2:	ee10 0a10 	vmov	r0, s0
 800e8d6:	4629      	mov	r1, r5
 800e8d8:	f7f2 f93e 	bl	8000b58 <__aeabi_d2iz>
 800e8dc:	2800      	cmp	r0, #0
 800e8de:	d051      	beq.n	800e984 <__kernel_sin+0xd4>
 800e8e0:	4622      	mov	r2, r4
 800e8e2:	462b      	mov	r3, r5
 800e8e4:	4620      	mov	r0, r4
 800e8e6:	4629      	mov	r1, r5
 800e8e8:	f7f1 fe86 	bl	80005f8 <__aeabi_dmul>
 800e8ec:	4682      	mov	sl, r0
 800e8ee:	468b      	mov	fp, r1
 800e8f0:	4602      	mov	r2, r0
 800e8f2:	460b      	mov	r3, r1
 800e8f4:	4620      	mov	r0, r4
 800e8f6:	4629      	mov	r1, r5
 800e8f8:	f7f1 fe7e 	bl	80005f8 <__aeabi_dmul>
 800e8fc:	a341      	add	r3, pc, #260	; (adr r3, 800ea04 <__kernel_sin+0x154>)
 800e8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e902:	4680      	mov	r8, r0
 800e904:	4689      	mov	r9, r1
 800e906:	4650      	mov	r0, sl
 800e908:	4659      	mov	r1, fp
 800e90a:	f7f1 fe75 	bl	80005f8 <__aeabi_dmul>
 800e90e:	a33f      	add	r3, pc, #252	; (adr r3, 800ea0c <__kernel_sin+0x15c>)
 800e910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e914:	f7f1 fcb8 	bl	8000288 <__aeabi_dsub>
 800e918:	4652      	mov	r2, sl
 800e91a:	465b      	mov	r3, fp
 800e91c:	f7f1 fe6c 	bl	80005f8 <__aeabi_dmul>
 800e920:	a33c      	add	r3, pc, #240	; (adr r3, 800ea14 <__kernel_sin+0x164>)
 800e922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e926:	f7f1 fcb1 	bl	800028c <__adddf3>
 800e92a:	4652      	mov	r2, sl
 800e92c:	465b      	mov	r3, fp
 800e92e:	f7f1 fe63 	bl	80005f8 <__aeabi_dmul>
 800e932:	a33a      	add	r3, pc, #232	; (adr r3, 800ea1c <__kernel_sin+0x16c>)
 800e934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e938:	f7f1 fca6 	bl	8000288 <__aeabi_dsub>
 800e93c:	4652      	mov	r2, sl
 800e93e:	465b      	mov	r3, fp
 800e940:	f7f1 fe5a 	bl	80005f8 <__aeabi_dmul>
 800e944:	a337      	add	r3, pc, #220	; (adr r3, 800ea24 <__kernel_sin+0x174>)
 800e946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e94a:	f7f1 fc9f 	bl	800028c <__adddf3>
 800e94e:	9b01      	ldr	r3, [sp, #4]
 800e950:	4606      	mov	r6, r0
 800e952:	460f      	mov	r7, r1
 800e954:	b9eb      	cbnz	r3, 800e992 <__kernel_sin+0xe2>
 800e956:	4602      	mov	r2, r0
 800e958:	460b      	mov	r3, r1
 800e95a:	4650      	mov	r0, sl
 800e95c:	4659      	mov	r1, fp
 800e95e:	f7f1 fe4b 	bl	80005f8 <__aeabi_dmul>
 800e962:	a325      	add	r3, pc, #148	; (adr r3, 800e9f8 <__kernel_sin+0x148>)
 800e964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e968:	f7f1 fc8e 	bl	8000288 <__aeabi_dsub>
 800e96c:	4642      	mov	r2, r8
 800e96e:	464b      	mov	r3, r9
 800e970:	f7f1 fe42 	bl	80005f8 <__aeabi_dmul>
 800e974:	4602      	mov	r2, r0
 800e976:	460b      	mov	r3, r1
 800e978:	4620      	mov	r0, r4
 800e97a:	4629      	mov	r1, r5
 800e97c:	f7f1 fc86 	bl	800028c <__adddf3>
 800e980:	4604      	mov	r4, r0
 800e982:	460d      	mov	r5, r1
 800e984:	ec45 4b10 	vmov	d0, r4, r5
 800e988:	b003      	add	sp, #12
 800e98a:	ecbd 8b04 	vpop	{d8-d9}
 800e98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e992:	4b1b      	ldr	r3, [pc, #108]	; (800ea00 <__kernel_sin+0x150>)
 800e994:	ec51 0b18 	vmov	r0, r1, d8
 800e998:	2200      	movs	r2, #0
 800e99a:	f7f1 fe2d 	bl	80005f8 <__aeabi_dmul>
 800e99e:	4632      	mov	r2, r6
 800e9a0:	ec41 0b19 	vmov	d9, r0, r1
 800e9a4:	463b      	mov	r3, r7
 800e9a6:	4640      	mov	r0, r8
 800e9a8:	4649      	mov	r1, r9
 800e9aa:	f7f1 fe25 	bl	80005f8 <__aeabi_dmul>
 800e9ae:	4602      	mov	r2, r0
 800e9b0:	460b      	mov	r3, r1
 800e9b2:	ec51 0b19 	vmov	r0, r1, d9
 800e9b6:	f7f1 fc67 	bl	8000288 <__aeabi_dsub>
 800e9ba:	4652      	mov	r2, sl
 800e9bc:	465b      	mov	r3, fp
 800e9be:	f7f1 fe1b 	bl	80005f8 <__aeabi_dmul>
 800e9c2:	ec53 2b18 	vmov	r2, r3, d8
 800e9c6:	f7f1 fc5f 	bl	8000288 <__aeabi_dsub>
 800e9ca:	a30b      	add	r3, pc, #44	; (adr r3, 800e9f8 <__kernel_sin+0x148>)
 800e9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d0:	4606      	mov	r6, r0
 800e9d2:	460f      	mov	r7, r1
 800e9d4:	4640      	mov	r0, r8
 800e9d6:	4649      	mov	r1, r9
 800e9d8:	f7f1 fe0e 	bl	80005f8 <__aeabi_dmul>
 800e9dc:	4602      	mov	r2, r0
 800e9de:	460b      	mov	r3, r1
 800e9e0:	4630      	mov	r0, r6
 800e9e2:	4639      	mov	r1, r7
 800e9e4:	f7f1 fc52 	bl	800028c <__adddf3>
 800e9e8:	4602      	mov	r2, r0
 800e9ea:	460b      	mov	r3, r1
 800e9ec:	4620      	mov	r0, r4
 800e9ee:	4629      	mov	r1, r5
 800e9f0:	f7f1 fc4a 	bl	8000288 <__aeabi_dsub>
 800e9f4:	e7c4      	b.n	800e980 <__kernel_sin+0xd0>
 800e9f6:	bf00      	nop
 800e9f8:	55555549 	.word	0x55555549
 800e9fc:	3fc55555 	.word	0x3fc55555
 800ea00:	3fe00000 	.word	0x3fe00000
 800ea04:	5acfd57c 	.word	0x5acfd57c
 800ea08:	3de5d93a 	.word	0x3de5d93a
 800ea0c:	8a2b9ceb 	.word	0x8a2b9ceb
 800ea10:	3e5ae5e6 	.word	0x3e5ae5e6
 800ea14:	57b1fe7d 	.word	0x57b1fe7d
 800ea18:	3ec71de3 	.word	0x3ec71de3
 800ea1c:	19c161d5 	.word	0x19c161d5
 800ea20:	3f2a01a0 	.word	0x3f2a01a0
 800ea24:	1110f8a6 	.word	0x1110f8a6
 800ea28:	3f811111 	.word	0x3f811111

0800ea2c <finite>:
 800ea2c:	b082      	sub	sp, #8
 800ea2e:	ed8d 0b00 	vstr	d0, [sp]
 800ea32:	9801      	ldr	r0, [sp, #4]
 800ea34:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ea38:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ea3c:	0fc0      	lsrs	r0, r0, #31
 800ea3e:	b002      	add	sp, #8
 800ea40:	4770      	bx	lr
 800ea42:	0000      	movs	r0, r0
 800ea44:	0000      	movs	r0, r0
	...

0800ea48 <floor>:
 800ea48:	ec51 0b10 	vmov	r0, r1, d0
 800ea4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea50:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ea54:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ea58:	2e13      	cmp	r6, #19
 800ea5a:	ee10 5a10 	vmov	r5, s0
 800ea5e:	ee10 8a10 	vmov	r8, s0
 800ea62:	460c      	mov	r4, r1
 800ea64:	dc32      	bgt.n	800eacc <floor+0x84>
 800ea66:	2e00      	cmp	r6, #0
 800ea68:	da14      	bge.n	800ea94 <floor+0x4c>
 800ea6a:	a333      	add	r3, pc, #204	; (adr r3, 800eb38 <floor+0xf0>)
 800ea6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea70:	f7f1 fc0c 	bl	800028c <__adddf3>
 800ea74:	2200      	movs	r2, #0
 800ea76:	2300      	movs	r3, #0
 800ea78:	f7f2 f84e 	bl	8000b18 <__aeabi_dcmpgt>
 800ea7c:	b138      	cbz	r0, 800ea8e <floor+0x46>
 800ea7e:	2c00      	cmp	r4, #0
 800ea80:	da57      	bge.n	800eb32 <floor+0xea>
 800ea82:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ea86:	431d      	orrs	r5, r3
 800ea88:	d001      	beq.n	800ea8e <floor+0x46>
 800ea8a:	4c2d      	ldr	r4, [pc, #180]	; (800eb40 <floor+0xf8>)
 800ea8c:	2500      	movs	r5, #0
 800ea8e:	4621      	mov	r1, r4
 800ea90:	4628      	mov	r0, r5
 800ea92:	e025      	b.n	800eae0 <floor+0x98>
 800ea94:	4f2b      	ldr	r7, [pc, #172]	; (800eb44 <floor+0xfc>)
 800ea96:	4137      	asrs	r7, r6
 800ea98:	ea01 0307 	and.w	r3, r1, r7
 800ea9c:	4303      	orrs	r3, r0
 800ea9e:	d01f      	beq.n	800eae0 <floor+0x98>
 800eaa0:	a325      	add	r3, pc, #148	; (adr r3, 800eb38 <floor+0xf0>)
 800eaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa6:	f7f1 fbf1 	bl	800028c <__adddf3>
 800eaaa:	2200      	movs	r2, #0
 800eaac:	2300      	movs	r3, #0
 800eaae:	f7f2 f833 	bl	8000b18 <__aeabi_dcmpgt>
 800eab2:	2800      	cmp	r0, #0
 800eab4:	d0eb      	beq.n	800ea8e <floor+0x46>
 800eab6:	2c00      	cmp	r4, #0
 800eab8:	bfbe      	ittt	lt
 800eaba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800eabe:	fa43 f606 	asrlt.w	r6, r3, r6
 800eac2:	19a4      	addlt	r4, r4, r6
 800eac4:	ea24 0407 	bic.w	r4, r4, r7
 800eac8:	2500      	movs	r5, #0
 800eaca:	e7e0      	b.n	800ea8e <floor+0x46>
 800eacc:	2e33      	cmp	r6, #51	; 0x33
 800eace:	dd0b      	ble.n	800eae8 <floor+0xa0>
 800ead0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ead4:	d104      	bne.n	800eae0 <floor+0x98>
 800ead6:	ee10 2a10 	vmov	r2, s0
 800eada:	460b      	mov	r3, r1
 800eadc:	f7f1 fbd6 	bl	800028c <__adddf3>
 800eae0:	ec41 0b10 	vmov	d0, r0, r1
 800eae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eae8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800eaec:	f04f 33ff 	mov.w	r3, #4294967295
 800eaf0:	fa23 f707 	lsr.w	r7, r3, r7
 800eaf4:	4207      	tst	r7, r0
 800eaf6:	d0f3      	beq.n	800eae0 <floor+0x98>
 800eaf8:	a30f      	add	r3, pc, #60	; (adr r3, 800eb38 <floor+0xf0>)
 800eafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eafe:	f7f1 fbc5 	bl	800028c <__adddf3>
 800eb02:	2200      	movs	r2, #0
 800eb04:	2300      	movs	r3, #0
 800eb06:	f7f2 f807 	bl	8000b18 <__aeabi_dcmpgt>
 800eb0a:	2800      	cmp	r0, #0
 800eb0c:	d0bf      	beq.n	800ea8e <floor+0x46>
 800eb0e:	2c00      	cmp	r4, #0
 800eb10:	da02      	bge.n	800eb18 <floor+0xd0>
 800eb12:	2e14      	cmp	r6, #20
 800eb14:	d103      	bne.n	800eb1e <floor+0xd6>
 800eb16:	3401      	adds	r4, #1
 800eb18:	ea25 0507 	bic.w	r5, r5, r7
 800eb1c:	e7b7      	b.n	800ea8e <floor+0x46>
 800eb1e:	2301      	movs	r3, #1
 800eb20:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800eb24:	fa03 f606 	lsl.w	r6, r3, r6
 800eb28:	4435      	add	r5, r6
 800eb2a:	4545      	cmp	r5, r8
 800eb2c:	bf38      	it	cc
 800eb2e:	18e4      	addcc	r4, r4, r3
 800eb30:	e7f2      	b.n	800eb18 <floor+0xd0>
 800eb32:	2500      	movs	r5, #0
 800eb34:	462c      	mov	r4, r5
 800eb36:	e7aa      	b.n	800ea8e <floor+0x46>
 800eb38:	8800759c 	.word	0x8800759c
 800eb3c:	7e37e43c 	.word	0x7e37e43c
 800eb40:	bff00000 	.word	0xbff00000
 800eb44:	000fffff 	.word	0x000fffff

0800eb48 <rint>:
 800eb48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb4a:	ec51 0b10 	vmov	r0, r1, d0
 800eb4e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800eb52:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800eb56:	2e13      	cmp	r6, #19
 800eb58:	ee10 4a10 	vmov	r4, s0
 800eb5c:	460b      	mov	r3, r1
 800eb5e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800eb62:	dc58      	bgt.n	800ec16 <rint+0xce>
 800eb64:	2e00      	cmp	r6, #0
 800eb66:	da2b      	bge.n	800ebc0 <rint+0x78>
 800eb68:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800eb6c:	4302      	orrs	r2, r0
 800eb6e:	d023      	beq.n	800ebb8 <rint+0x70>
 800eb70:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800eb74:	4302      	orrs	r2, r0
 800eb76:	4254      	negs	r4, r2
 800eb78:	4314      	orrs	r4, r2
 800eb7a:	0c4b      	lsrs	r3, r1, #17
 800eb7c:	0b24      	lsrs	r4, r4, #12
 800eb7e:	045b      	lsls	r3, r3, #17
 800eb80:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800eb84:	ea44 0103 	orr.w	r1, r4, r3
 800eb88:	4b32      	ldr	r3, [pc, #200]	; (800ec54 <rint+0x10c>)
 800eb8a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800eb8e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800eb92:	4602      	mov	r2, r0
 800eb94:	460b      	mov	r3, r1
 800eb96:	4630      	mov	r0, r6
 800eb98:	4639      	mov	r1, r7
 800eb9a:	f7f1 fb77 	bl	800028c <__adddf3>
 800eb9e:	e9cd 0100 	strd	r0, r1, [sp]
 800eba2:	463b      	mov	r3, r7
 800eba4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eba8:	4632      	mov	r2, r6
 800ebaa:	f7f1 fb6d 	bl	8000288 <__aeabi_dsub>
 800ebae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ebb2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800ebb6:	4639      	mov	r1, r7
 800ebb8:	ec41 0b10 	vmov	d0, r0, r1
 800ebbc:	b003      	add	sp, #12
 800ebbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebc0:	4a25      	ldr	r2, [pc, #148]	; (800ec58 <rint+0x110>)
 800ebc2:	4132      	asrs	r2, r6
 800ebc4:	ea01 0702 	and.w	r7, r1, r2
 800ebc8:	4307      	orrs	r7, r0
 800ebca:	d0f5      	beq.n	800ebb8 <rint+0x70>
 800ebcc:	0851      	lsrs	r1, r2, #1
 800ebce:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800ebd2:	4314      	orrs	r4, r2
 800ebd4:	d00c      	beq.n	800ebf0 <rint+0xa8>
 800ebd6:	ea23 0201 	bic.w	r2, r3, r1
 800ebda:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ebde:	2e13      	cmp	r6, #19
 800ebe0:	fa43 f606 	asr.w	r6, r3, r6
 800ebe4:	bf0c      	ite	eq
 800ebe6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800ebea:	2400      	movne	r4, #0
 800ebec:	ea42 0306 	orr.w	r3, r2, r6
 800ebf0:	4918      	ldr	r1, [pc, #96]	; (800ec54 <rint+0x10c>)
 800ebf2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800ebf6:	4622      	mov	r2, r4
 800ebf8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	4629      	mov	r1, r5
 800ec00:	f7f1 fb44 	bl	800028c <__adddf3>
 800ec04:	e9cd 0100 	strd	r0, r1, [sp]
 800ec08:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ec0c:	4622      	mov	r2, r4
 800ec0e:	462b      	mov	r3, r5
 800ec10:	f7f1 fb3a 	bl	8000288 <__aeabi_dsub>
 800ec14:	e7d0      	b.n	800ebb8 <rint+0x70>
 800ec16:	2e33      	cmp	r6, #51	; 0x33
 800ec18:	dd07      	ble.n	800ec2a <rint+0xe2>
 800ec1a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ec1e:	d1cb      	bne.n	800ebb8 <rint+0x70>
 800ec20:	ee10 2a10 	vmov	r2, s0
 800ec24:	f7f1 fb32 	bl	800028c <__adddf3>
 800ec28:	e7c6      	b.n	800ebb8 <rint+0x70>
 800ec2a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800ec2e:	f04f 36ff 	mov.w	r6, #4294967295
 800ec32:	40d6      	lsrs	r6, r2
 800ec34:	4230      	tst	r0, r6
 800ec36:	d0bf      	beq.n	800ebb8 <rint+0x70>
 800ec38:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800ec3c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800ec40:	bf1f      	itttt	ne
 800ec42:	ea24 0101 	bicne.w	r1, r4, r1
 800ec46:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800ec4a:	fa44 f202 	asrne.w	r2, r4, r2
 800ec4e:	ea41 0402 	orrne.w	r4, r1, r2
 800ec52:	e7cd      	b.n	800ebf0 <rint+0xa8>
 800ec54:	0800f4e0 	.word	0x0800f4e0
 800ec58:	000fffff 	.word	0x000fffff
 800ec5c:	00000000 	.word	0x00000000

0800ec60 <scalbn>:
 800ec60:	b570      	push	{r4, r5, r6, lr}
 800ec62:	ec55 4b10 	vmov	r4, r5, d0
 800ec66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ec6a:	4606      	mov	r6, r0
 800ec6c:	462b      	mov	r3, r5
 800ec6e:	b99a      	cbnz	r2, 800ec98 <scalbn+0x38>
 800ec70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ec74:	4323      	orrs	r3, r4
 800ec76:	d036      	beq.n	800ece6 <scalbn+0x86>
 800ec78:	4b39      	ldr	r3, [pc, #228]	; (800ed60 <scalbn+0x100>)
 800ec7a:	4629      	mov	r1, r5
 800ec7c:	ee10 0a10 	vmov	r0, s0
 800ec80:	2200      	movs	r2, #0
 800ec82:	f7f1 fcb9 	bl	80005f8 <__aeabi_dmul>
 800ec86:	4b37      	ldr	r3, [pc, #220]	; (800ed64 <scalbn+0x104>)
 800ec88:	429e      	cmp	r6, r3
 800ec8a:	4604      	mov	r4, r0
 800ec8c:	460d      	mov	r5, r1
 800ec8e:	da10      	bge.n	800ecb2 <scalbn+0x52>
 800ec90:	a32b      	add	r3, pc, #172	; (adr r3, 800ed40 <scalbn+0xe0>)
 800ec92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec96:	e03a      	b.n	800ed0e <scalbn+0xae>
 800ec98:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ec9c:	428a      	cmp	r2, r1
 800ec9e:	d10c      	bne.n	800ecba <scalbn+0x5a>
 800eca0:	ee10 2a10 	vmov	r2, s0
 800eca4:	4620      	mov	r0, r4
 800eca6:	4629      	mov	r1, r5
 800eca8:	f7f1 faf0 	bl	800028c <__adddf3>
 800ecac:	4604      	mov	r4, r0
 800ecae:	460d      	mov	r5, r1
 800ecb0:	e019      	b.n	800ece6 <scalbn+0x86>
 800ecb2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ecb6:	460b      	mov	r3, r1
 800ecb8:	3a36      	subs	r2, #54	; 0x36
 800ecba:	4432      	add	r2, r6
 800ecbc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ecc0:	428a      	cmp	r2, r1
 800ecc2:	dd08      	ble.n	800ecd6 <scalbn+0x76>
 800ecc4:	2d00      	cmp	r5, #0
 800ecc6:	a120      	add	r1, pc, #128	; (adr r1, 800ed48 <scalbn+0xe8>)
 800ecc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eccc:	da1c      	bge.n	800ed08 <scalbn+0xa8>
 800ecce:	a120      	add	r1, pc, #128	; (adr r1, 800ed50 <scalbn+0xf0>)
 800ecd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ecd4:	e018      	b.n	800ed08 <scalbn+0xa8>
 800ecd6:	2a00      	cmp	r2, #0
 800ecd8:	dd08      	ble.n	800ecec <scalbn+0x8c>
 800ecda:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ecde:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ece2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ece6:	ec45 4b10 	vmov	d0, r4, r5
 800ecea:	bd70      	pop	{r4, r5, r6, pc}
 800ecec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ecf0:	da19      	bge.n	800ed26 <scalbn+0xc6>
 800ecf2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ecf6:	429e      	cmp	r6, r3
 800ecf8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ecfc:	dd0a      	ble.n	800ed14 <scalbn+0xb4>
 800ecfe:	a112      	add	r1, pc, #72	; (adr r1, 800ed48 <scalbn+0xe8>)
 800ed00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d1e2      	bne.n	800ecce <scalbn+0x6e>
 800ed08:	a30f      	add	r3, pc, #60	; (adr r3, 800ed48 <scalbn+0xe8>)
 800ed0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed0e:	f7f1 fc73 	bl	80005f8 <__aeabi_dmul>
 800ed12:	e7cb      	b.n	800ecac <scalbn+0x4c>
 800ed14:	a10a      	add	r1, pc, #40	; (adr r1, 800ed40 <scalbn+0xe0>)
 800ed16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d0b8      	beq.n	800ec90 <scalbn+0x30>
 800ed1e:	a10e      	add	r1, pc, #56	; (adr r1, 800ed58 <scalbn+0xf8>)
 800ed20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed24:	e7b4      	b.n	800ec90 <scalbn+0x30>
 800ed26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ed2a:	3236      	adds	r2, #54	; 0x36
 800ed2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ed30:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ed34:	4620      	mov	r0, r4
 800ed36:	4b0c      	ldr	r3, [pc, #48]	; (800ed68 <scalbn+0x108>)
 800ed38:	2200      	movs	r2, #0
 800ed3a:	e7e8      	b.n	800ed0e <scalbn+0xae>
 800ed3c:	f3af 8000 	nop.w
 800ed40:	c2f8f359 	.word	0xc2f8f359
 800ed44:	01a56e1f 	.word	0x01a56e1f
 800ed48:	8800759c 	.word	0x8800759c
 800ed4c:	7e37e43c 	.word	0x7e37e43c
 800ed50:	8800759c 	.word	0x8800759c
 800ed54:	fe37e43c 	.word	0xfe37e43c
 800ed58:	c2f8f359 	.word	0xc2f8f359
 800ed5c:	81a56e1f 	.word	0x81a56e1f
 800ed60:	43500000 	.word	0x43500000
 800ed64:	ffff3cb0 	.word	0xffff3cb0
 800ed68:	3c900000 	.word	0x3c900000

0800ed6c <_init>:
 800ed6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed6e:	bf00      	nop
 800ed70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed72:	bc08      	pop	{r3}
 800ed74:	469e      	mov	lr, r3
 800ed76:	4770      	bx	lr

0800ed78 <_fini>:
 800ed78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed7a:	bf00      	nop
 800ed7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed7e:	bc08      	pop	{r3}
 800ed80:	469e      	mov	lr, r3
 800ed82:	4770      	bx	lr
