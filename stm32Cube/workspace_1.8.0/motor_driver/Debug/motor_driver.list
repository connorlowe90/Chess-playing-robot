
motor_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b144  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  0800b2d0  0800b2d0  0001b2d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b558  0800b558  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800b558  0800b558  0001b558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b560  0800b560  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b560  0800b560  0001b560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b564  0800b564  0001b564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800b568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00000824  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008b8  200008b8  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dcb4  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e29  00000000  00000000  0003dd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001348  00000000  00000000  00041ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011e0  00000000  00000000  00042ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024992  00000000  00000000  000440d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018192  00000000  00000000  00068a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1031  00000000  00000000  00080bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00151c25  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058d8  00000000  00000000  00151c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b2b4 	.word	0x0800b2b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	0800b2b4 	.word	0x0800b2b4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b96e 	b.w	8000e84 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468c      	mov	ip, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f040 8083 	bne.w	8000cd6 <__udivmoddi4+0x116>
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	d947      	bls.n	8000c66 <__udivmoddi4+0xa6>
 8000bd6:	fab2 f282 	clz	r2, r2
 8000bda:	b142      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bdc:	f1c2 0020 	rsb	r0, r2, #32
 8000be0:	fa24 f000 	lsr.w	r0, r4, r0
 8000be4:	4091      	lsls	r1, r2
 8000be6:	4097      	lsls	r7, r2
 8000be8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bec:	4094      	lsls	r4, r2
 8000bee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bf2:	0c23      	lsrs	r3, r4, #16
 8000bf4:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf8:	fa1f fe87 	uxth.w	lr, r7
 8000bfc:	fb08 c116 	mls	r1, r8, r6, ip
 8000c00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c04:	fb06 f10e 	mul.w	r1, r6, lr
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x60>
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c12:	f080 8119 	bcs.w	8000e48 <__udivmoddi4+0x288>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 8116 	bls.w	8000e48 <__udivmoddi4+0x288>
 8000c1c:	3e02      	subs	r6, #2
 8000c1e:	443b      	add	r3, r7
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c28:	fb08 3310 	mls	r3, r8, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x8c>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3e:	f080 8105 	bcs.w	8000e4c <__udivmoddi4+0x28c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8102 	bls.w	8000e4c <__udivmoddi4+0x28c>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c50:	eba4 040e 	sub.w	r4, r4, lr
 8000c54:	2600      	movs	r6, #0
 8000c56:	b11d      	cbz	r5, 8000c60 <__udivmoddi4+0xa0>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	b902      	cbnz	r2, 8000c6a <__udivmoddi4+0xaa>
 8000c68:	deff      	udf	#255	; 0xff
 8000c6a:	fab2 f282 	clz	r2, r2
 8000c6e:	2a00      	cmp	r2, #0
 8000c70:	d150      	bne.n	8000d14 <__udivmoddi4+0x154>
 8000c72:	1bcb      	subs	r3, r1, r7
 8000c74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c78:	fa1f f887 	uxth.w	r8, r7
 8000c7c:	2601      	movs	r6, #1
 8000c7e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c82:	0c21      	lsrs	r1, r4, #16
 8000c84:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d907      	bls.n	8000ca4 <__udivmoddi4+0xe4>
 8000c94:	1879      	adds	r1, r7, r1
 8000c96:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0xe2>
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	f200 80e9 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000ca2:	4684      	mov	ip, r0
 8000ca4:	1ac9      	subs	r1, r1, r3
 8000ca6:	b2a3      	uxth	r3, r4
 8000ca8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cac:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cb4:	fb08 f800 	mul.w	r8, r8, r0
 8000cb8:	45a0      	cmp	r8, r4
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x10c>
 8000cbc:	193c      	adds	r4, r7, r4
 8000cbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x10a>
 8000cc4:	45a0      	cmp	r8, r4
 8000cc6:	f200 80d9 	bhi.w	8000e7c <__udivmoddi4+0x2bc>
 8000cca:	4618      	mov	r0, r3
 8000ccc:	eba4 0408 	sub.w	r4, r4, r8
 8000cd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd4:	e7bf      	b.n	8000c56 <__udivmoddi4+0x96>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d909      	bls.n	8000cee <__udivmoddi4+0x12e>
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	f000 80b1 	beq.w	8000e42 <__udivmoddi4+0x282>
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce6:	4630      	mov	r0, r6
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	fab3 f683 	clz	r6, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d14a      	bne.n	8000d8c <__udivmoddi4+0x1cc>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0x140>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 80b8 	bhi.w	8000e70 <__udivmoddi4+0x2b0>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb61 0103 	sbc.w	r1, r1, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	468c      	mov	ip, r1
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d0a8      	beq.n	8000c60 <__udivmoddi4+0xa0>
 8000d0e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d12:	e7a5      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000d14:	f1c2 0320 	rsb	r3, r2, #32
 8000d18:	fa20 f603 	lsr.w	r6, r0, r3
 8000d1c:	4097      	lsls	r7, r2
 8000d1e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d22:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d26:	40d9      	lsrs	r1, r3
 8000d28:	4330      	orrs	r0, r6
 8000d2a:	0c03      	lsrs	r3, r0, #16
 8000d2c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb06 f108 	mul.w	r1, r6, r8
 8000d40:	4299      	cmp	r1, r3
 8000d42:	fa04 f402 	lsl.w	r4, r4, r2
 8000d46:	d909      	bls.n	8000d5c <__udivmoddi4+0x19c>
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d4e:	f080 808d 	bcs.w	8000e6c <__udivmoddi4+0x2ac>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 808a 	bls.w	8000e6c <__udivmoddi4+0x2ac>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	443b      	add	r3, r7
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b281      	uxth	r1, r0
 8000d60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb00 f308 	mul.w	r3, r0, r8
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x1c4>
 8000d74:	1879      	adds	r1, r7, r1
 8000d76:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d7a:	d273      	bcs.n	8000e64 <__udivmoddi4+0x2a4>
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d971      	bls.n	8000e64 <__udivmoddi4+0x2a4>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4439      	add	r1, r7
 8000d84:	1acb      	subs	r3, r1, r3
 8000d86:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d8a:	e778      	b.n	8000c7e <__udivmoddi4+0xbe>
 8000d8c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d90:	fa03 f406 	lsl.w	r4, r3, r6
 8000d94:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d98:	431c      	orrs	r4, r3
 8000d9a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000da2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000da6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000daa:	431f      	orrs	r7, r3
 8000dac:	0c3b      	lsrs	r3, r7, #16
 8000dae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db2:	fa1f f884 	uxth.w	r8, r4
 8000db6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dbe:	fb09 fa08 	mul.w	sl, r9, r8
 8000dc2:	458a      	cmp	sl, r1
 8000dc4:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x220>
 8000dce:	1861      	adds	r1, r4, r1
 8000dd0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dd4:	d248      	bcs.n	8000e68 <__udivmoddi4+0x2a8>
 8000dd6:	458a      	cmp	sl, r1
 8000dd8:	d946      	bls.n	8000e68 <__udivmoddi4+0x2a8>
 8000dda:	f1a9 0902 	sub.w	r9, r9, #2
 8000dde:	4421      	add	r1, r4
 8000de0:	eba1 010a 	sub.w	r1, r1, sl
 8000de4:	b2bf      	uxth	r7, r7
 8000de6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dea:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000df2:	fb00 f808 	mul.w	r8, r0, r8
 8000df6:	45b8      	cmp	r8, r7
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x24a>
 8000dfa:	19e7      	adds	r7, r4, r7
 8000dfc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e00:	d22e      	bcs.n	8000e60 <__udivmoddi4+0x2a0>
 8000e02:	45b8      	cmp	r8, r7
 8000e04:	d92c      	bls.n	8000e60 <__udivmoddi4+0x2a0>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4427      	add	r7, r4
 8000e0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0e:	eba7 0708 	sub.w	r7, r7, r8
 8000e12:	fba0 8902 	umull	r8, r9, r0, r2
 8000e16:	454f      	cmp	r7, r9
 8000e18:	46c6      	mov	lr, r8
 8000e1a:	4649      	mov	r1, r9
 8000e1c:	d31a      	bcc.n	8000e54 <__udivmoddi4+0x294>
 8000e1e:	d017      	beq.n	8000e50 <__udivmoddi4+0x290>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x27a>
 8000e22:	ebb3 020e 	subs.w	r2, r3, lr
 8000e26:	eb67 0701 	sbc.w	r7, r7, r1
 8000e2a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e2e:	40f2      	lsrs	r2, r6
 8000e30:	ea4c 0202 	orr.w	r2, ip, r2
 8000e34:	40f7      	lsrs	r7, r6
 8000e36:	e9c5 2700 	strd	r2, r7, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e70b      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e9      	b.n	8000c20 <__udivmoddi4+0x60>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6fd      	b.n	8000c4c <__udivmoddi4+0x8c>
 8000e50:	4543      	cmp	r3, r8
 8000e52:	d2e5      	bcs.n	8000e20 <__udivmoddi4+0x260>
 8000e54:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e58:	eb69 0104 	sbc.w	r1, r9, r4
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7df      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e60:	4608      	mov	r0, r1
 8000e62:	e7d2      	b.n	8000e0a <__udivmoddi4+0x24a>
 8000e64:	4660      	mov	r0, ip
 8000e66:	e78d      	b.n	8000d84 <__udivmoddi4+0x1c4>
 8000e68:	4681      	mov	r9, r0
 8000e6a:	e7b9      	b.n	8000de0 <__udivmoddi4+0x220>
 8000e6c:	4666      	mov	r6, ip
 8000e6e:	e775      	b.n	8000d5c <__udivmoddi4+0x19c>
 8000e70:	4630      	mov	r0, r6
 8000e72:	e74a      	b.n	8000d0a <__udivmoddi4+0x14a>
 8000e74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e78:	4439      	add	r1, r7
 8000e7a:	e713      	b.n	8000ca4 <__udivmoddi4+0xe4>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	443c      	add	r4, r7
 8000e80:	e724      	b.n	8000ccc <__udivmoddi4+0x10c>
 8000e82:	bf00      	nop

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <initPins>:
// Z_step_pin = PA3
// Z_dir0_pin = PA3

// Z endstop = PE4

void initPins(){
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  TIM6->PSC = 89;
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <initPins+0x28>)
 8000e8e:	2259      	movs	r2, #89	; 0x59
 8000e90:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 0xffff;
 8000e92:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <initPins+0x28>)
 8000e94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e98:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM6->CR1 |= (1 << 0);
 8000e9a:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <initPins+0x28>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <initPins+0x28>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6013      	str	r3, [r2, #0]
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	40001000 	.word	0x40001000

08000eb4 <pinWrite>:

void pinWrite(axis writeAxis, pin writePin, int state){
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	603a      	str	r2, [r7, #0]
 8000ebe:	71fb      	strb	r3, [r7, #7]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	71bb      	strb	r3, [r7, #6]
	int shift = state * 16;
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	60fb      	str	r3, [r7, #12]
  switch(writeAxis){
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d062      	beq.n	8000f96 <pinWrite+0xe2>
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	f300 8087 	bgt.w	8000fe4 <pinWrite+0x130>
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d002      	beq.n	8000ee0 <pinWrite+0x2c>
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d02f      	beq.n	8000f3e <pinWrite+0x8a>
		  case dir1:
			break;
		}
		break;
  }
}
 8000ede:	e081      	b.n	8000fe4 <pinWrite+0x130>
      switch(writePin){
 8000ee0:	79bb      	ldrb	r3, [r7, #6]
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d01e      	beq.n	8000f24 <pinWrite+0x70>
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	dc77      	bgt.n	8000fda <pinWrite+0x126>
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d002      	beq.n	8000ef4 <pinWrite+0x40>
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d00c      	beq.n	8000f0c <pinWrite+0x58>
      break;
 8000ef2:	e072      	b.n	8000fda <pinWrite+0x126>
        	GPIOC->BSRR |= (1<<14) << shift;
 8000ef4:	4b3e      	ldr	r3, [pc, #248]	; (8000ff0 <pinWrite+0x13c>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	fa01 f202 	lsl.w	r2, r1, r2
 8000f02:	4611      	mov	r1, r2
 8000f04:	4a3a      	ldr	r2, [pc, #232]	; (8000ff0 <pinWrite+0x13c>)
 8000f06:	430b      	orrs	r3, r1
 8000f08:	6193      	str	r3, [r2, #24]
          break;
 8000f0a:	e017      	b.n	8000f3c <pinWrite+0x88>
        	GPIOC->BSRR |= (1<<15) << shift;
 8000f0c:	4b38      	ldr	r3, [pc, #224]	; (8000ff0 <pinWrite+0x13c>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f14:	68fa      	ldr	r2, [r7, #12]
 8000f16:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4a34      	ldr	r2, [pc, #208]	; (8000ff0 <pinWrite+0x13c>)
 8000f1e:	430b      	orrs	r3, r1
 8000f20:	6193      	str	r3, [r2, #24]
          break;
 8000f22:	e00b      	b.n	8000f3c <pinWrite+0x88>
        	GPIOC->BSRR |= (1<<13) << shift;
 8000f24:	4b32      	ldr	r3, [pc, #200]	; (8000ff0 <pinWrite+0x13c>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f2c:	68fa      	ldr	r2, [r7, #12]
 8000f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f32:	4611      	mov	r1, r2
 8000f34:	4a2e      	ldr	r2, [pc, #184]	; (8000ff0 <pinWrite+0x13c>)
 8000f36:	430b      	orrs	r3, r1
 8000f38:	6193      	str	r3, [r2, #24]
          break;
 8000f3a:	bf00      	nop
      break;
 8000f3c:	e04d      	b.n	8000fda <pinWrite+0x126>
      switch(writePin){
 8000f3e:	79bb      	ldrb	r3, [r7, #6]
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d01c      	beq.n	8000f7e <pinWrite+0xca>
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	dc4a      	bgt.n	8000fde <pinWrite+0x12a>
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d002      	beq.n	8000f52 <pinWrite+0x9e>
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d00b      	beq.n	8000f68 <pinWrite+0xb4>
      break;
 8000f50:	e045      	b.n	8000fde <pinWrite+0x12a>
        	GPIOC->BSRR |= (1<<5) << shift;
 8000f52:	4b27      	ldr	r3, [pc, #156]	; (8000ff0 <pinWrite+0x13c>)
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	2120      	movs	r1, #32
 8000f58:	68fa      	ldr	r2, [r7, #12]
 8000f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f5e:	4611      	mov	r1, r2
 8000f60:	4a23      	ldr	r2, [pc, #140]	; (8000ff0 <pinWrite+0x13c>)
 8000f62:	430b      	orrs	r3, r1
 8000f64:	6193      	str	r3, [r2, #24]
          break;
 8000f66:	e015      	b.n	8000f94 <pinWrite+0xe0>
        	GPIOA->BSRR |= (1<<1) << shift;
 8000f68:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <pinWrite+0x140>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	fa01 f202 	lsl.w	r2, r1, r2
 8000f74:	4611      	mov	r1, r2
 8000f76:	4a1f      	ldr	r2, [pc, #124]	; (8000ff4 <pinWrite+0x140>)
 8000f78:	430b      	orrs	r3, r1
 8000f7a:	6193      	str	r3, [r2, #24]
          break;
 8000f7c:	e00a      	b.n	8000f94 <pinWrite+0xe0>
        	GPIOA->BSRR |= (1<<2) << shift;
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <pinWrite+0x140>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	2104      	movs	r1, #4
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	fa01 f202 	lsl.w	r2, r1, r2
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4a19      	ldr	r2, [pc, #100]	; (8000ff4 <pinWrite+0x140>)
 8000f8e:	430b      	orrs	r3, r1
 8000f90:	6193      	str	r3, [r2, #24]
          break;
 8000f92:	bf00      	nop
      break;
 8000f94:	e023      	b.n	8000fde <pinWrite+0x12a>
		switch(writePin){
 8000f96:	79bb      	ldrb	r3, [r7, #6]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d01c      	beq.n	8000fd6 <pinWrite+0x122>
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	dc20      	bgt.n	8000fe2 <pinWrite+0x12e>
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d002      	beq.n	8000faa <pinWrite+0xf6>
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d00b      	beq.n	8000fc0 <pinWrite+0x10c>
		break;
 8000fa8:	e01b      	b.n	8000fe2 <pinWrite+0x12e>
			GPIOA->BSRR |= (1<<5) << shift;
 8000faa:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <pinWrite+0x140>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	2120      	movs	r1, #32
 8000fb0:	68fa      	ldr	r2, [r7, #12]
 8000fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <pinWrite+0x140>)
 8000fba:	430b      	orrs	r3, r1
 8000fbc:	6193      	str	r3, [r2, #24]
			break;
 8000fbe:	e00b      	b.n	8000fd8 <pinWrite+0x124>
			GPIOA->BSRR |= (1<<3) << shift;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <pinWrite+0x140>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	2108      	movs	r1, #8
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fcc:	4611      	mov	r1, r2
 8000fce:	4a09      	ldr	r2, [pc, #36]	; (8000ff4 <pinWrite+0x140>)
 8000fd0:	430b      	orrs	r3, r1
 8000fd2:	6193      	str	r3, [r2, #24]
			break;
 8000fd4:	e000      	b.n	8000fd8 <pinWrite+0x124>
			break;
 8000fd6:	bf00      	nop
		break;
 8000fd8:	e003      	b.n	8000fe2 <pinWrite+0x12e>
      break;
 8000fda:	bf00      	nop
 8000fdc:	e002      	b.n	8000fe4 <pinWrite+0x130>
      break;
 8000fde:	bf00      	nop
 8000fe0:	e000      	b.n	8000fe4 <pinWrite+0x130>
		break;
 8000fe2:	bf00      	nop
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	40020800 	.word	0x40020800
 8000ff4:	40020000 	.word	0x40020000

08000ff8 <setMagnet>:

int checkEndstop(){
	return GPIOC->IDR & (1 << 8);
}

void setMagnet(int state){
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	int shift = state * 16;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	011b      	lsls	r3, r3, #4
 8001004:	60fb      	str	r3, [r7, #12]
	GPIOE->BSRR |= (1<<9) << shift;
 8001006:	4b08      	ldr	r3, [pc, #32]	; (8001028 <setMagnet+0x30>)
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	fa01 f202 	lsl.w	r2, r1, r2
 8001014:	4611      	mov	r1, r2
 8001016:	4a04      	ldr	r2, [pc, #16]	; (8001028 <setMagnet+0x30>)
 8001018:	430b      	orrs	r3, r1
 800101a:	6193      	str	r3, [r2, #24]
}
 800101c:	bf00      	nop
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	40021000 	.word	0x40021000

0800102c <delayMicro>:

void delayMicro(long time){
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	TIM6->CNT = 0;
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <delayMicro+0x28>)
 8001036:	2200      	movs	r2, #0
 8001038:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM6->CNT < time){}
 800103a:	bf00      	nop
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <delayMicro+0x28>)
 800103e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	429a      	cmp	r2, r3
 8001044:	d3fa      	bcc.n	800103c <delayMicro+0x10>
}
 8001046:	bf00      	nop
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	40001000 	.word	0x40001000

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105c:	f001 f938 	bl	80022d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001060:	f000 f886 	bl	8001170 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001064:	f000 f972 	bl	800134c <MX_GPIO_Init>
  MX_USB_HOST_Init();
 8001068:	f007 fb8c 	bl	8008784 <MX_USB_HOST_Init>
  MX_TIM6_Init();
 800106c:	f000 f8ee 	bl	800124c <MX_TIM6_Init>
  MX_DMA_Init();
 8001070:	f000 f94c 	bl	800130c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001074:	f000 f920 	bl	80012b8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	initPins();
 8001078:	f7ff ff06 	bl	8000e88 <initPins>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800107c:	f007 fba8 	bl	80087d0 <MX_USB_HOST_Process>
////    	moveAxisRelative(Z,50,120,500);
//    	char* message = "Endstop triggered\r\n";
//    	moveAxisRelative(Z,80,50,300);
//    	delayMicro(pow(2,15));
//    }
    setMagnet(0);
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff ffb9 	bl	8000ff8 <setMagnet>
    moveAxisRelative(Z,-80,40,300);
 8001086:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 800113c <main+0xe4>
 800108a:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8001140 <main+0xe8>
 800108e:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8001144 <main+0xec>
 8001092:	2002      	movs	r0, #2
 8001094:	f000 fdfa 	bl	8001c8c <moveAxisRelative>
    moveAxisRelative(Z,80,40,300);
 8001098:	ed9f 1a28 	vldr	s2, [pc, #160]	; 800113c <main+0xe4>
 800109c:	eddf 0a28 	vldr	s1, [pc, #160]	; 8001140 <main+0xe8>
 80010a0:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8001148 <main+0xf0>
 80010a4:	2002      	movs	r0, #2
 80010a6:	f000 fdf1 	bl	8001c8c <moveAxisRelative>
	moveXYAbsolute(78,180,80,300);
 80010aa:	eddf 1a24 	vldr	s3, [pc, #144]	; 800113c <main+0xe4>
 80010ae:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8001148 <main+0xf0>
 80010b2:	eddf 0a26 	vldr	s1, [pc, #152]	; 800114c <main+0xf4>
 80010b6:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8001150 <main+0xf8>
 80010ba:	f000 fdb5 	bl	8001c28 <moveXYAbsolute>
	moveAxisRelative(Z,-80,40,300);
 80010be:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 800113c <main+0xe4>
 80010c2:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8001140 <main+0xe8>
 80010c6:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8001144 <main+0xec>
 80010ca:	2002      	movs	r0, #2
 80010cc:	f000 fdde 	bl	8001c8c <moveAxisRelative>
	setMagnet(1);
 80010d0:	2001      	movs	r0, #1
 80010d2:	f7ff ff91 	bl	8000ff8 <setMagnet>

	moveAxisRelative(Z,80,40,300);
 80010d6:	ed9f 1a19 	vldr	s2, [pc, #100]	; 800113c <main+0xe4>
 80010da:	eddf 0a19 	vldr	s1, [pc, #100]	; 8001140 <main+0xe8>
 80010de:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8001148 <main+0xf0>
 80010e2:	2002      	movs	r0, #2
 80010e4:	f000 fdd2 	bl	8001c8c <moveAxisRelative>

	moveXYAbsolute(361,179,80,300);
 80010e8:	eddf 1a14 	vldr	s3, [pc, #80]	; 800113c <main+0xe4>
 80010ec:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8001148 <main+0xf0>
 80010f0:	eddf 0a18 	vldr	s1, [pc, #96]	; 8001154 <main+0xfc>
 80010f4:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8001158 <main+0x100>
 80010f8:	f000 fd96 	bl	8001c28 <moveXYAbsolute>
	moveXYAbsolute(77,466,80,300);
 80010fc:	eddf 1a0f 	vldr	s3, [pc, #60]	; 800113c <main+0xe4>
 8001100:	ed9f 1a11 	vldr	s2, [pc, #68]	; 8001148 <main+0xf0>
 8001104:	eddf 0a15 	vldr	s1, [pc, #84]	; 800115c <main+0x104>
 8001108:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8001160 <main+0x108>
 800110c:	f000 fd8c 	bl	8001c28 <moveXYAbsolute>
	moveXYAbsolute(400,500,80,300);
 8001110:	eddf 1a0a 	vldr	s3, [pc, #40]	; 800113c <main+0xe4>
 8001114:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8001148 <main+0xf0>
 8001118:	eddf 0a12 	vldr	s1, [pc, #72]	; 8001164 <main+0x10c>
 800111c:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8001168 <main+0x110>
 8001120:	f000 fd82 	bl	8001c28 <moveXYAbsolute>

	moveXYAbsolute(0,0,80,300);
 8001124:	eddf 1a05 	vldr	s3, [pc, #20]	; 800113c <main+0xe4>
 8001128:	ed9f 1a07 	vldr	s2, [pc, #28]	; 8001148 <main+0xf0>
 800112c:	eddf 0a0f 	vldr	s1, [pc, #60]	; 800116c <main+0x114>
 8001130:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800116c <main+0x114>
 8001134:	f000 fd78 	bl	8001c28 <moveXYAbsolute>
    MX_USB_HOST_Process();
 8001138:	e7a0      	b.n	800107c <main+0x24>
 800113a:	bf00      	nop
 800113c:	43960000 	.word	0x43960000
 8001140:	42200000 	.word	0x42200000
 8001144:	c2a00000 	.word	0xc2a00000
 8001148:	42a00000 	.word	0x42a00000
 800114c:	43340000 	.word	0x43340000
 8001150:	429c0000 	.word	0x429c0000
 8001154:	43330000 	.word	0x43330000
 8001158:	43b48000 	.word	0x43b48000
 800115c:	43e90000 	.word	0x43e90000
 8001160:	429a0000 	.word	0x429a0000
 8001164:	43fa0000 	.word	0x43fa0000
 8001168:	43c80000 	.word	0x43c80000
 800116c:	00000000 	.word	0x00000000

08001170 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b094      	sub	sp, #80	; 0x50
 8001174:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001176:	f107 0320 	add.w	r3, r7, #32
 800117a:	2230      	movs	r2, #48	; 0x30
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f007 fe42 	bl	8008e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001194:	2300      	movs	r3, #0
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	4b2a      	ldr	r3, [pc, #168]	; (8001244 <SystemClock_Config+0xd4>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	4a29      	ldr	r2, [pc, #164]	; (8001244 <SystemClock_Config+0xd4>)
 800119e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a2:	6413      	str	r3, [r2, #64]	; 0x40
 80011a4:	4b27      	ldr	r3, [pc, #156]	; (8001244 <SystemClock_Config+0xd4>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b0:	2300      	movs	r3, #0
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	4b24      	ldr	r3, [pc, #144]	; (8001248 <SystemClock_Config+0xd8>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a23      	ldr	r2, [pc, #140]	; (8001248 <SystemClock_Config+0xd8>)
 80011ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	4b21      	ldr	r3, [pc, #132]	; (8001248 <SystemClock_Config+0xd8>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80011cc:	2303      	movs	r3, #3
 80011ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d6:	2301      	movs	r3, #1
 80011d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011da:	2310      	movs	r3, #16
 80011dc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011de:	2302      	movs	r3, #2
 80011e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011e8:	2304      	movs	r3, #4
 80011ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011ec:	23a8      	movs	r3, #168	; 0xa8
 80011ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f0:	2302      	movs	r3, #2
 80011f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011f4:	2307      	movs	r3, #7
 80011f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f8:	f107 0320 	add.w	r3, r7, #32
 80011fc:	4618      	mov	r0, r3
 80011fe:	f003 fc1f 	bl	8004a40 <HAL_RCC_OscConfig>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001208:	f000 fa30 	bl	800166c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120c:	230f      	movs	r3, #15
 800120e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8001218:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800121c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800121e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001222:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f003 fe80 	bl	8004f30 <HAL_RCC_ClockConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001236:	f000 fa19 	bl	800166c <Error_Handler>
  }
}
 800123a:	bf00      	nop
 800123c:	3750      	adds	r7, #80	; 0x50
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800
 8001248:	40007000 	.word	0x40007000

0800124c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001252:	463b      	mov	r3, r7
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <MX_TIM6_Init+0x64>)
 800125c:	4a15      	ldr	r2, [pc, #84]	; (80012b4 <MX_TIM6_Init+0x68>)
 800125e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001260:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <MX_TIM6_Init+0x64>)
 8001262:	2200      	movs	r2, #0
 8001264:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <MX_TIM6_Init+0x64>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800126c:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <MX_TIM6_Init+0x64>)
 800126e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001272:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001274:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <MX_TIM6_Init+0x64>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800127a:	480d      	ldr	r0, [pc, #52]	; (80012b0 <MX_TIM6_Init+0x64>)
 800127c:	f004 f854 	bl	8005328 <HAL_TIM_Base_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001286:	f000 f9f1 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128a:	2300      	movs	r3, #0
 800128c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001292:	463b      	mov	r3, r7
 8001294:	4619      	mov	r1, r3
 8001296:	4806      	ldr	r0, [pc, #24]	; (80012b0 <MX_TIM6_Init+0x64>)
 8001298:	f004 f936 	bl	8005508 <HAL_TIMEx_MasterConfigSynchronization>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80012a2:	f000 f9e3 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	2000016c 	.word	0x2000016c
 80012b4:	40001000 	.word	0x40001000

080012b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <MX_USART3_UART_Init+0x4c>)
 80012be:	4a12      	ldr	r2, [pc, #72]	; (8001308 <MX_USART3_UART_Init+0x50>)
 80012c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <MX_USART3_UART_Init+0x4c>)
 80012c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <MX_USART3_UART_Init+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_USART3_UART_Init+0x4c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <MX_USART3_UART_Init+0x4c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_USART3_UART_Init+0x4c>)
 80012de:	220c      	movs	r2, #12
 80012e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <MX_USART3_UART_Init+0x4c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_USART3_UART_Init+0x4c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012ee:	4805      	ldr	r0, [pc, #20]	; (8001304 <MX_USART3_UART_Init+0x4c>)
 80012f0:	f004 f986 	bl	8005600 <HAL_UART_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80012fa:	f000 f9b7 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000128 	.word	0x20000128
 8001308:	40004800 	.word	0x40004800

0800130c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <MX_DMA_Init+0x3c>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a0b      	ldr	r2, [pc, #44]	; (8001348 <MX_DMA_Init+0x3c>)
 800131c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <MX_DMA_Init+0x3c>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	200c      	movs	r0, #12
 8001334:	f001 f93d 	bl	80025b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001338:	200c      	movs	r0, #12
 800133a:	f001 f956 	bl	80025ea <HAL_NVIC_EnableIRQ>

}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800

0800134c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08c      	sub	sp, #48	; 0x30
 8001350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	61bb      	str	r3, [r7, #24]
 8001366:	4bb6      	ldr	r3, [pc, #728]	; (8001640 <MX_GPIO_Init+0x2f4>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4ab5      	ldr	r2, [pc, #724]	; (8001640 <MX_GPIO_Init+0x2f4>)
 800136c:	f043 0310 	orr.w	r3, r3, #16
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4bb3      	ldr	r3, [pc, #716]	; (8001640 <MX_GPIO_Init+0x2f4>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	61bb      	str	r3, [r7, #24]
 800137c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
 8001382:	4baf      	ldr	r3, [pc, #700]	; (8001640 <MX_GPIO_Init+0x2f4>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4aae      	ldr	r2, [pc, #696]	; (8001640 <MX_GPIO_Init+0x2f4>)
 8001388:	f043 0304 	orr.w	r3, r3, #4
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4bac      	ldr	r3, [pc, #688]	; (8001640 <MX_GPIO_Init+0x2f4>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	4ba8      	ldr	r3, [pc, #672]	; (8001640 <MX_GPIO_Init+0x2f4>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4aa7      	ldr	r2, [pc, #668]	; (8001640 <MX_GPIO_Init+0x2f4>)
 80013a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4ba5      	ldr	r3, [pc, #660]	; (8001640 <MX_GPIO_Init+0x2f4>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4ba1      	ldr	r3, [pc, #644]	; (8001640 <MX_GPIO_Init+0x2f4>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4aa0      	ldr	r2, [pc, #640]	; (8001640 <MX_GPIO_Init+0x2f4>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b9e      	ldr	r3, [pc, #632]	; (8001640 <MX_GPIO_Init+0x2f4>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	4b9a      	ldr	r3, [pc, #616]	; (8001640 <MX_GPIO_Init+0x2f4>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a99      	ldr	r2, [pc, #612]	; (8001640 <MX_GPIO_Init+0x2f4>)
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b97      	ldr	r3, [pc, #604]	; (8001640 <MX_GPIO_Init+0x2f4>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	4b93      	ldr	r3, [pc, #588]	; (8001640 <MX_GPIO_Init+0x2f4>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a92      	ldr	r2, [pc, #584]	; (8001640 <MX_GPIO_Init+0x2f4>)
 80013f8:	f043 0308 	orr.w	r3, r3, #8
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b90      	ldr	r3, [pc, #576]	; (8001640 <MX_GPIO_Init+0x2f4>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	f44f 7142 	mov.w	r1, #776	; 0x308
 8001410:	488c      	ldr	r0, [pc, #560]	; (8001644 <MX_GPIO_Init+0x2f8>)
 8001412:	f001 fd8b 	bl	8002f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5
 8001416:	2200      	movs	r2, #0
 8001418:	f24e 01e0 	movw	r1, #57568	; 0xe0e0
 800141c:	488a      	ldr	r0, [pc, #552]	; (8001648 <MX_GPIO_Init+0x2fc>)
 800141e:	f001 fd85 	bl	8002f2c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001422:	2201      	movs	r2, #1
 8001424:	2101      	movs	r1, #1
 8001426:	4888      	ldr	r0, [pc, #544]	; (8001648 <MX_GPIO_Init+0x2fc>)
 8001428:	f001 fd80 	bl	8002f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 800142c:	2200      	movs	r2, #0
 800142e:	21ae      	movs	r1, #174	; 0xae
 8001430:	4886      	ldr	r0, [pc, #536]	; (800164c <MX_GPIO_Init+0x300>)
 8001432:	f001 fd7b 	bl	8002f2c <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	2102      	movs	r1, #2
 800143a:	4885      	ldr	r0, [pc, #532]	; (8001650 <MX_GPIO_Init+0x304>)
 800143c:	f001 fd76 	bl	8002f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001440:	2200      	movs	r2, #0
 8001442:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001446:	4883      	ldr	r0, [pc, #524]	; (8001654 <MX_GPIO_Init+0x308>)
 8001448:	f001 fd70 	bl	8002f2c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE8 PE9 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_8|GPIO_PIN_9;
 800144c:	f44f 7342 	mov.w	r3, #776	; 0x308
 8001450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001452:	2301      	movs	r3, #1
 8001454:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800145e:	f107 031c 	add.w	r3, r7, #28
 8001462:	4619      	mov	r1, r3
 8001464:	4877      	ldr	r0, [pc, #476]	; (8001644 <MX_GPIO_Init+0x2f8>)
 8001466:	f001 fbc5 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 OTG_FS_PowerSwitchOn_Pin
                           PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|OTG_FS_PowerSwitchOn_Pin
 800146a:	f24e 03e1 	movw	r3, #57569	; 0xe0e1
 800146e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001470:	2301      	movs	r3, #1
 8001472:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800147c:	f107 031c 	add.w	r3, r7, #28
 8001480:	4619      	mov	r1, r3
 8001482:	4871      	ldr	r0, [pc, #452]	; (8001648 <MX_GPIO_Init+0x2fc>)
 8001484:	f001 fbb6 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001488:	2308      	movs	r3, #8
 800148a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148c:	2302      	movs	r3, #2
 800148e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001498:	2305      	movs	r3, #5
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	4619      	mov	r1, r3
 80014a2:	4869      	ldr	r0, [pc, #420]	; (8001648 <MX_GPIO_Init+0x2fc>)
 80014a4:	f001 fba6 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014a8:	2301      	movs	r3, #1
 80014aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014ac:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80014b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014b6:	f107 031c 	add.w	r3, r7, #28
 80014ba:	4619      	mov	r1, r3
 80014bc:	4863      	ldr	r0, [pc, #396]	; (800164c <MX_GPIO_Init+0x300>)
 80014be:	f001 fb99 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA5
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 80014c2:	23ae      	movs	r3, #174	; 0xae
 80014c4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c6:	2301      	movs	r3, #1
 80014c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	4619      	mov	r1, r3
 80014d8:	485c      	ldr	r0, [pc, #368]	; (800164c <MX_GPIO_Init+0x300>)
 80014da:	f001 fb8b 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80014de:	2310      	movs	r3, #16
 80014e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014ee:	2306      	movs	r3, #6
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 031c 	add.w	r3, r7, #28
 80014f6:	4619      	mov	r1, r3
 80014f8:	4854      	ldr	r0, [pc, #336]	; (800164c <MX_GPIO_Init+0x300>)
 80014fa:	f001 fb7b 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_MISO_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 80014fe:	2340      	movs	r3, #64	; 0x40
 8001500:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800150e:	2305      	movs	r3, #5
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	4619      	mov	r1, r3
 8001518:	484c      	ldr	r0, [pc, #304]	; (800164c <MX_GPIO_Init+0x300>)
 800151a:	f001 fb6b 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800151e:	2302      	movs	r3, #2
 8001520:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001522:	2301      	movs	r3, #1
 8001524:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2300      	movs	r3, #0
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152e:	f107 031c 	add.w	r3, r7, #28
 8001532:	4619      	mov	r1, r3
 8001534:	4846      	ldr	r0, [pc, #280]	; (8001650 <MX_GPIO_Init+0x304>)
 8001536:	f001 fb5d 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800153a:	2304      	movs	r3, #4
 800153c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800153e:	2300      	movs	r3, #0
 8001540:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001546:	f107 031c 	add.w	r3, r7, #28
 800154a:	4619      	mov	r1, r3
 800154c:	4840      	ldr	r0, [pc, #256]	; (8001650 <MX_GPIO_Init+0x304>)
 800154e:	f001 fb51 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001556:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	2300      	movs	r3, #0
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001564:	2305      	movs	r3, #5
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	4619      	mov	r1, r3
 800156e:	4838      	ldr	r0, [pc, #224]	; (8001650 <MX_GPIO_Init+0x304>)
 8001570:	f001 fb40 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001574:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001578:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157a:	2301      	movs	r3, #1
 800157c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001586:	f107 031c 	add.w	r3, r7, #28
 800158a:	4619      	mov	r1, r3
 800158c:	4831      	ldr	r0, [pc, #196]	; (8001654 <MX_GPIO_Init+0x308>)
 800158e:	f001 fb31 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001592:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001598:	2300      	movs	r3, #0
 800159a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800159c:	2301      	movs	r3, #1
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a0:	f107 031c 	add.w	r3, r7, #28
 80015a4:	4619      	mov	r1, r3
 80015a6:	4828      	ldr	r0, [pc, #160]	; (8001648 <MX_GPIO_Init+0x2fc>)
 80015a8:	f001 fb24 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 80015ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015be:	2306      	movs	r3, #6
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	4619      	mov	r1, r3
 80015c8:	481f      	ldr	r0, [pc, #124]	; (8001648 <MX_GPIO_Init+0x2fc>)
 80015ca:	f001 fb13 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80015ce:	2320      	movs	r3, #32
 80015d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	4619      	mov	r1, r3
 80015e0:	481c      	ldr	r0, [pc, #112]	; (8001654 <MX_GPIO_Init+0x308>)
 80015e2:	f001 fb07 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015e6:	2340      	movs	r3, #64	; 0x40
 80015e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f2:	2303      	movs	r3, #3
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015f6:	2307      	movs	r3, #7
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	4619      	mov	r1, r3
 8001600:	4813      	ldr	r0, [pc, #76]	; (8001650 <MX_GPIO_Init+0x304>)
 8001602:	f001 faf7 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8001606:	f44f 7300 	mov.w	r3, #512	; 0x200
 800160a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800160c:	2312      	movs	r3, #18
 800160e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001610:	2301      	movs	r3, #1
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001618:	2304      	movs	r3, #4
 800161a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 031c 	add.w	r3, r7, #28
 8001620:	4619      	mov	r1, r3
 8001622:	480b      	ldr	r0, [pc, #44]	; (8001650 <MX_GPIO_Init+0x304>)
 8001624:	f001 fae6 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001628:	2302      	movs	r3, #2
 800162a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800162c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001630:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001636:	f107 031c 	add.w	r3, r7, #28
 800163a:	4619      	mov	r1, r3
 800163c:	e00c      	b.n	8001658 <MX_GPIO_Init+0x30c>
 800163e:	bf00      	nop
 8001640:	40023800 	.word	0x40023800
 8001644:	40021000 	.word	0x40021000
 8001648:	40020800 	.word	0x40020800
 800164c:	40020000 	.word	0x40020000
 8001650:	40020400 	.word	0x40020400
 8001654:	40020c00 	.word	0x40020c00
 8001658:	4803      	ldr	r0, [pc, #12]	; (8001668 <MX_GPIO_Init+0x31c>)
 800165a:	f001 facb 	bl	8002bf4 <HAL_GPIO_Init>

}
 800165e:	bf00      	nop
 8001660:	3730      	adds	r7, #48	; 0x30
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000

0800166c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001670:	b672      	cpsid	i
}
 8001672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001674:	e7fe      	b.n	8001674 <Error_Handler+0x8>
	...

08001678 <moveXYRelative>:
float currentX = 0.0;
float currentY = 0.0;
float currentZ = 0.0;

// Moves the X and Y axes in sync so the toolhead moves in a straight line. Moves relative to current position
void moveXYRelative(float x, float y, float speed, float acceleration){
 8001678:	b5b0      	push	{r4, r5, r7, lr}
 800167a:	b0a0      	sub	sp, #128	; 0x80
 800167c:	af00      	add	r7, sp, #0
 800167e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001682:	edc7 0a02 	vstr	s1, [r7, #8]
 8001686:	ed87 1a01 	vstr	s2, [r7, #4]
 800168a:	edc7 1a00 	vstr	s3, [r7]
	float XYmicrostepsPerMM = XY_STEPS_PER_MM * MICROSTEP_FACTOR;
 800168e:	4bc8      	ldr	r3, [pc, #800]	; (80019b0 <moveXYRelative+0x338>)
 8001690:	63fb      	str	r3, [r7, #60]	; 0x3c

	setDirection(x,y);
 8001692:	edd7 0a02 	vldr	s1, [r7, #8]
 8001696:	ed97 0a03 	vldr	s0, [r7, #12]
 800169a:	f000 fa83 	bl	8001ba4 <setDirection>
	float distanceX = fabs(x);
 800169e:	edd7 7a03 	vldr	s15, [r7, #12]
 80016a2:	eef0 7ae7 	vabs.f32	s15, s15
 80016a6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float distanceY = fabs(y);
 80016aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80016ae:	eef0 7ae7 	vabs.f32	s15, s15
 80016b2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	float angle;

	if(x == 0){
 80016b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80016ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c2:	d102      	bne.n	80016ca <moveXYRelative+0x52>
		angle = PI/2;
 80016c4:	4bbb      	ldr	r3, [pc, #748]	; (80019b4 <moveXYRelative+0x33c>)
 80016c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80016c8:	e017      	b.n	80016fa <moveXYRelative+0x82>
	} else {
		angle = atan(distanceY/distanceX);
 80016ca:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80016ce:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80016d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016d6:	ee16 0a90 	vmov	r0, s13
 80016da:	f7fe fed9 	bl	8000490 <__aeabi_f2d>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	ec43 2b10 	vmov	d0, r2, r3
 80016e6:	f007 fc5f 	bl	8008fa8 <atan>
 80016ea:	ec53 2b10 	vmov	r2, r3, d0
 80016ee:	4610      	mov	r0, r2
 80016f0:	4619      	mov	r1, r3
 80016f2:	f7ff f9fd 	bl	8000af0 <__aeabi_d2f>
 80016f6:	4603      	mov	r3, r0
 80016f8:	67fb      	str	r3, [r7, #124]	; 0x7c
	}


	// X vars
	float speedX = cos(angle) * speed;
 80016fa:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80016fc:	f7fe fec8 	bl	8000490 <__aeabi_f2d>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	ec43 2b10 	vmov	d0, r2, r3
 8001708:	f007 fdee 	bl	80092e8 <cos>
 800170c:	ec55 4b10 	vmov	r4, r5, d0
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7fe febd 	bl	8000490 <__aeabi_f2d>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4620      	mov	r0, r4
 800171c:	4629      	mov	r1, r5
 800171e:	f7fe ff0f 	bl	8000540 <__aeabi_dmul>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	f7ff f9e1 	bl	8000af0 <__aeabi_d2f>
 800172e:	4603      	mov	r3, r0
 8001730:	67bb      	str	r3, [r7, #120]	; 0x78
	float accelTimeX = speedX/acceleration;
 8001732:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8001736:	ed97 7a00 	vldr	s14, [r7]
 800173a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800173e:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	float accelDistanceX = calcDistance(accelTimeX, 0, acceleration);
 8001742:	ed97 1a00 	vldr	s2, [r7]
 8001746:	eddf 0a9c 	vldr	s1, [pc, #624]	; 80019b8 <moveXYRelative+0x340>
 800174a:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 800174e:	f000 fbdb 	bl	8001f08 <calcDistance>
 8001752:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
	float coastDistanceX = distanceX - (2*accelDistanceX);
 8001756:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800175a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800175e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001762:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001766:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float coastTimeX = coastDistanceX/speedX;
 800176a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800176e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001772:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001776:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

	if(coastTimeX < 0){
 800177a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800177e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001786:	d52f      	bpl.n	80017e8 <moveXYRelative+0x170>
		speedX = sqrt(distanceX/acceleration);
 8001788:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800178c:	edd7 7a00 	vldr	s15, [r7]
 8001790:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001794:	ee16 0a90 	vmov	r0, s13
 8001798:	f7fe fe7a 	bl	8000490 <__aeabi_f2d>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	ec43 2b10 	vmov	d0, r2, r3
 80017a4:	f007 fefe 	bl	80095a4 <sqrt>
 80017a8:	ec53 2b10 	vmov	r2, r3, d0
 80017ac:	4610      	mov	r0, r2
 80017ae:	4619      	mov	r1, r3
 80017b0:	f7ff f99e 	bl	8000af0 <__aeabi_d2f>
 80017b4:	4603      	mov	r3, r0
 80017b6:	67bb      	str	r3, [r7, #120]	; 0x78
		accelTimeX = speedX/acceleration;
 80017b8:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 80017bc:	ed97 7a00 	vldr	s14, [r7]
 80017c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017c4:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		accelDistanceX = calcDistance(accelTimeX, 0, acceleration);
 80017c8:	ed97 1a00 	vldr	s2, [r7]
 80017cc:	eddf 0a7a 	vldr	s1, [pc, #488]	; 80019b8 <moveXYRelative+0x340>
 80017d0:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 80017d4:	f000 fb98 	bl	8001f08 <calcDistance>
 80017d8:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
		coastTimeX = 0;
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	673b      	str	r3, [r7, #112]	; 0x70
		coastDistanceX = 0;
 80017e2:	f04f 0300 	mov.w	r3, #0
 80017e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned long accelTime_usX = accelTimeX * 1000000;
 80017e8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80017ec:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80019c0 <moveXYRelative+0x348>
 80017f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017f8:	ee17 3a90 	vmov	r3, s15
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned long coastTime_usX = coastTimeX * 1000000;
 80017fe:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001802:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80019c0 <moveXYRelative+0x348>
 8001806:	ee67 7a87 	vmul.f32	s15, s15, s14
 800180a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800180e:	ee17 3a90 	vmov	r3, s15
 8001812:	627b      	str	r3, [r7, #36]	; 0x24

	unsigned long stepsX = XYmicrostepsPerMM * distanceX;
 8001814:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001818:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800181c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001824:	ee17 3a90 	vmov	r3, s15
 8001828:	66fb      	str	r3, [r7, #108]	; 0x6c
	float currentSpeedX = 5;
 800182a:	4b64      	ldr	r3, [pc, #400]	; (80019bc <moveXYRelative+0x344>)
 800182c:	66bb      	str	r3, [r7, #104]	; 0x68
	unsigned long pulseLengthX = 1000000/(currentSpeedX * XYmicrostepsPerMM);
 800182e:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8001832:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001836:	ee27 7a27 	vmul.f32	s14, s14, s15
 800183a:	eddf 6a61 	vldr	s13, [pc, #388]	; 80019c0 <moveXYRelative+0x348>
 800183e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001846:	ee17 3a90 	vmov	r3, s15
 800184a:	667b      	str	r3, [r7, #100]	; 0x64

	// Y vars
	float speedY = sin(angle) * speed;
 800184c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800184e:	f7fe fe1f 	bl	8000490 <__aeabi_f2d>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	ec43 2b10 	vmov	d0, r2, r3
 800185a:	f007 fda1 	bl	80093a0 <sin>
 800185e:	ec55 4b10 	vmov	r4, r5, d0
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7fe fe14 	bl	8000490 <__aeabi_f2d>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4620      	mov	r0, r4
 800186e:	4629      	mov	r1, r5
 8001870:	f7fe fe66 	bl	8000540 <__aeabi_dmul>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	f7ff f938 	bl	8000af0 <__aeabi_d2f>
 8001880:	4603      	mov	r3, r0
 8001882:	663b      	str	r3, [r7, #96]	; 0x60
	float accelTimeY = speedY/acceleration;
 8001884:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8001888:	ed97 7a00 	vldr	s14, [r7]
 800188c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001890:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	float accelDistanceY = calcDistance(accelTimeY, 0, acceleration);
 8001894:	ed97 1a00 	vldr	s2, [r7]
 8001898:	eddf 0a47 	vldr	s1, [pc, #284]	; 80019b8 <moveXYRelative+0x340>
 800189c:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 80018a0:	f000 fb32 	bl	8001f08 <calcDistance>
 80018a4:	ed87 0a08 	vstr	s0, [r7, #32]
	float coastDistanceY = distanceY - (2*accelDistanceY);
 80018a8:	edd7 7a08 	vldr	s15, [r7, #32]
 80018ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018b0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80018b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018b8:	edc7 7a07 	vstr	s15, [r7, #28]
	float coastTimeY = coastDistanceY/speedY;
 80018bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80018c0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80018c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018c8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

	if(coastTimeY < 0){
 80018cc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80018d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d8:	d52f      	bpl.n	800193a <moveXYRelative+0x2c2>
		speedY = sqrt(distanceY/acceleration);
 80018da:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80018de:	edd7 7a00 	vldr	s15, [r7]
 80018e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80018e6:	ee16 0a90 	vmov	r0, s13
 80018ea:	f7fe fdd1 	bl	8000490 <__aeabi_f2d>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	ec43 2b10 	vmov	d0, r2, r3
 80018f6:	f007 fe55 	bl	80095a4 <sqrt>
 80018fa:	ec53 2b10 	vmov	r2, r3, d0
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	f7ff f8f5 	bl	8000af0 <__aeabi_d2f>
 8001906:	4603      	mov	r3, r0
 8001908:	663b      	str	r3, [r7, #96]	; 0x60
		accelTimeY = speedY/acceleration;
 800190a:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800190e:	ed97 7a00 	vldr	s14, [r7]
 8001912:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001916:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		accelDistanceY = calcDistance(accelTimeY, 0, acceleration);
 800191a:	ed97 1a00 	vldr	s2, [r7]
 800191e:	eddf 0a26 	vldr	s1, [pc, #152]	; 80019b8 <moveXYRelative+0x340>
 8001922:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 8001926:	f000 faef 	bl	8001f08 <calcDistance>
 800192a:	ed87 0a08 	vstr	s0, [r7, #32]
		coastTimeY = 0;
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	65bb      	str	r3, [r7, #88]	; 0x58
		coastDistanceY = 0;
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
	}

	unsigned long accelTime_usY = accelTimeY * 1000000;
 800193a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800193e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80019c0 <moveXYRelative+0x348>
 8001942:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001946:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800194a:	ee17 3a90 	vmov	r3, s15
 800194e:	61bb      	str	r3, [r7, #24]
	unsigned long coastTime_usY = coastTimeY * 1000000;
 8001950:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001954:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80019c0 <moveXYRelative+0x348>
 8001958:	ee67 7a87 	vmul.f32	s15, s15, s14
 800195c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001960:	ee17 3a90 	vmov	r3, s15
 8001964:	617b      	str	r3, [r7, #20]

	unsigned long stepsY = XYmicrostepsPerMM * distanceY;
 8001966:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800196a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800196e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001976:	ee17 3a90 	vmov	r3, s15
 800197a:	657b      	str	r3, [r7, #84]	; 0x54
	float currentSpeedY = 5;
 800197c:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <moveXYRelative+0x344>)
 800197e:	653b      	str	r3, [r7, #80]	; 0x50
	unsigned long pulseLengthY = 1000000/(currentSpeedY * XYmicrostepsPerMM);
 8001980:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001984:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001988:	ee27 7a27 	vmul.f32	s14, s14, s15
 800198c:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80019c0 <moveXYRelative+0x348>
 8001990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001998:	ee17 3a90 	vmov	r3, s15
 800199c:	64fb      	str	r3, [r7, #76]	; 0x4c

	// Time
	unsigned long time = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	64bb      	str	r3, [r7, #72]	; 0x48
	unsigned long pulseTimerX = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	647b      	str	r3, [r7, #68]	; 0x44
	unsigned long pulseTimerY = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	643b      	str	r3, [r7, #64]	; 0x40
	unsigned long timeStep = 10;
 80019aa:	230a      	movs	r3, #10
 80019ac:	613b      	str	r3, [r7, #16]

	while(stepsX > 0 || stepsY > 0){
 80019ae:	e0eb      	b.n	8001b88 <moveXYRelative+0x510>
 80019b0:	42480000 	.word	0x42480000
 80019b4:	3fc90fdb 	.word	0x3fc90fdb
 80019b8:	00000000 	.word	0x00000000
 80019bc:	40a00000 	.word	0x40a00000
 80019c0:	49742400 	.word	0x49742400
		delayMicro(timeStep);
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fb30 	bl	800102c <delayMicro>
		time += timeStep;
 80019cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	4413      	add	r3, r2
 80019d2:	64bb      	str	r3, [r7, #72]	; 0x48
		pulseTimerX += timeStep;
 80019d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	4413      	add	r3, r2
 80019da:	647b      	str	r3, [r7, #68]	; 0x44
		pulseTimerY += timeStep;
 80019dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	4413      	add	r3, r2
 80019e2:	643b      	str	r3, [r7, #64]	; 0x40

		// Update X
		if(stepsX > 0 && pulseTimerX >= pulseLengthX){
 80019e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d065      	beq.n	8001ab6 <moveXYRelative+0x43e>
 80019ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80019ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d361      	bcc.n	8001ab6 <moveXYRelative+0x43e>
			pulseTimerX = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	647b      	str	r3, [r7, #68]	; 0x44
			if(time <= accelTime_usX){
 80019f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80019f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d80f      	bhi.n	8001a1e <moveXYRelative+0x3a6>
				currentSpeedX = (acceleration * time)/1000000;
 80019fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a00:	ee07 3a90 	vmov	s15, r3
 8001a04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a08:	edd7 7a00 	vldr	s15, [r7]
 8001a0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a10:	ed5f 6a15 	vldr	s13, [pc, #-84]	; 80019c0 <moveXYRelative+0x348>
 8001a14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a18:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 8001a1c:	e023      	b.n	8001a66 <moveXYRelative+0x3ee>
			} else if(time > accelTime_usX && time <= (accelTime_usX + coastTime_usX)){
 8001a1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d908      	bls.n	8001a38 <moveXYRelative+0x3c0>
 8001a26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	4413      	add	r3, r2
 8001a2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d802      	bhi.n	8001a38 <moveXYRelative+0x3c0>
				currentSpeedX = speedX;
 8001a32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a34:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a36:	e016      	b.n	8001a66 <moveXYRelative+0x3ee>
			} else {
				currentSpeedX = speedX - (acceleration * (time-(accelTime_usX + coastTime_usX)))/1000000;
 8001a38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	4413      	add	r3, r2
 8001a3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	ee07 3a90 	vmov	s15, r3
 8001a46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a4a:	edd7 7a00 	vldr	s15, [r7]
 8001a4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a52:	ed5f 6a25 	vldr	s13, [pc, #-148]	; 80019c0 <moveXYRelative+0x348>
 8001a56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a5a:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001a5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a62:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
			}
			pulseLengthX = 1000000/(currentSpeedX * XYmicrostepsPerMM);
 8001a66:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8001a6a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001a6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a72:	ed5f 6a2d 	vldr	s13, [pc, #-180]	; 80019c0 <moveXYRelative+0x348>
 8001a76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a7e:	ee17 3a90 	vmov	r3, s15
 8001a82:	667b      	str	r3, [r7, #100]	; 0x64
			pinWrite(X, step,1);
 8001a84:	2201      	movs	r2, #1
 8001a86:	2100      	movs	r1, #0
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f7ff fa13 	bl	8000eb4 <pinWrite>
			delayMicro(10);
 8001a8e:	200a      	movs	r0, #10
 8001a90:	f7ff facc 	bl	800102c <delayMicro>
			pinWrite(X, step,0);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2100      	movs	r1, #0
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f7ff fa0b 	bl	8000eb4 <pinWrite>
			time += 10;
 8001a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001aa0:	330a      	adds	r3, #10
 8001aa2:	64bb      	str	r3, [r7, #72]	; 0x48
			pulseTimerX += 10;
 8001aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aa6:	330a      	adds	r3, #10
 8001aa8:	647b      	str	r3, [r7, #68]	; 0x44
			pulseTimerY += 10;
 8001aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aac:	330a      	adds	r3, #10
 8001aae:	643b      	str	r3, [r7, #64]	; 0x40
			stepsX--;
 8001ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	66fb      	str	r3, [r7, #108]	; 0x6c
		}

		// Update Y
		if(stepsY > 0 && pulseTimerY >= pulseLengthY){
 8001ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d065      	beq.n	8001b88 <moveXYRelative+0x510>
 8001abc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d361      	bcc.n	8001b88 <moveXYRelative+0x510>
			pulseTimerY = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	643b      	str	r3, [r7, #64]	; 0x40
			if(time <= accelTime_usY){
 8001ac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d80f      	bhi.n	8001af0 <moveXYRelative+0x478>
				currentSpeedY = (acceleration * time)/1000000;
 8001ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ad2:	ee07 3a90 	vmov	s15, r3
 8001ad6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ada:	edd7 7a00 	vldr	s15, [r7]
 8001ade:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ae2:	ed5f 6a49 	vldr	s13, [pc, #-292]	; 80019c0 <moveXYRelative+0x348>
 8001ae6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aea:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8001aee:	e023      	b.n	8001b38 <moveXYRelative+0x4c0>
			} else if(time > accelTime_usY && time <= (accelTime_usY + coastTime_usY)){
 8001af0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d908      	bls.n	8001b0a <moveXYRelative+0x492>
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	4413      	add	r3, r2
 8001afe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d802      	bhi.n	8001b0a <moveXYRelative+0x492>
				currentSpeedY = speedY;
 8001b04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b06:	653b      	str	r3, [r7, #80]	; 0x50
 8001b08:	e016      	b.n	8001b38 <moveXYRelative+0x4c0>
			} else {
				currentSpeedY = speedY - (acceleration * (time-(accelTime_usY + coastTime_usY)))/1000000;
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	4413      	add	r3, r2
 8001b10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	ee07 3a90 	vmov	s15, r3
 8001b18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b1c:	edd7 7a00 	vldr	s15, [r7]
 8001b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b24:	ed5f 6a5a 	vldr	s13, [pc, #-360]	; 80019c0 <moveXYRelative+0x348>
 8001b28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b2c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001b30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b34:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
			}
			pulseLengthY = 1000000/(currentSpeedY * XYmicrostepsPerMM);
 8001b38:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001b3c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001b40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b44:	ed5f 6a62 	vldr	s13, [pc, #-392]	; 80019c0 <moveXYRelative+0x348>
 8001b48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b50:	ee17 3a90 	vmov	r3, s15
 8001b54:	64fb      	str	r3, [r7, #76]	; 0x4c
			pinWrite(Y, step,1);
 8001b56:	2201      	movs	r2, #1
 8001b58:	2100      	movs	r1, #0
 8001b5a:	2001      	movs	r0, #1
 8001b5c:	f7ff f9aa 	bl	8000eb4 <pinWrite>
			delayMicro(10);
 8001b60:	200a      	movs	r0, #10
 8001b62:	f7ff fa63 	bl	800102c <delayMicro>
			pinWrite(Y, step,0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2100      	movs	r1, #0
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	f7ff f9a2 	bl	8000eb4 <pinWrite>
			time += 10;
 8001b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b72:	330a      	adds	r3, #10
 8001b74:	64bb      	str	r3, [r7, #72]	; 0x48
			pulseTimerX += 10;
 8001b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b78:	330a      	adds	r3, #10
 8001b7a:	647b      	str	r3, [r7, #68]	; 0x44
			pulseTimerY += 10;
 8001b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b7e:	330a      	adds	r3, #10
 8001b80:	643b      	str	r3, [r7, #64]	; 0x40
			stepsY--;
 8001b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b84:	3b01      	subs	r3, #1
 8001b86:	657b      	str	r3, [r7, #84]	; 0x54
	while(stepsX > 0 || stepsY > 0){
 8001b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f47f af1a 	bne.w	80019c4 <moveXYRelative+0x34c>
 8001b90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f47f af16 	bne.w	80019c4 <moveXYRelative+0x34c>
		}

	}

}
 8001b98:	bf00      	nop
 8001b9a:	bf00      	nop
 8001b9c:	3780      	adds	r7, #128	; 0x80
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ba2:	bf00      	nop

08001ba4 <setDirection>:

// Set the directions of the XY motors
void setDirection(float x, float y){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	ed87 0a01 	vstr	s0, [r7, #4]
 8001bae:	edc7 0a00 	vstr	s1, [r7]
  bool directionX = x >= 0;
 8001bb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbe:	bfac      	ite	ge
 8001bc0:	2301      	movge	r3, #1
 8001bc2:	2300      	movlt	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	60fb      	str	r3, [r7, #12]
  bool directionY = y >= 0;
 8001bc8:	edd7 7a00 	vldr	s15, [r7]
 8001bcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd4:	bfac      	ite	ge
 8001bd6:	2301      	movge	r3, #1
 8001bd8:	2300      	movlt	r3, #0
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	60bb      	str	r3, [r7, #8]
  pinWrite(X, dir0, directionX);
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	2101      	movs	r1, #1
 8001be2:	2000      	movs	r0, #0
 8001be4:	f7ff f966 	bl	8000eb4 <pinWrite>
  pinWrite(X, dir1, !directionX);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	bf0c      	ite	eq
 8001bee:	2301      	moveq	r3, #1
 8001bf0:	2300      	movne	r3, #0
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	2102      	movs	r1, #2
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f7ff f95b 	bl	8000eb4 <pinWrite>
  pinWrite(Y, dir0, directionY);
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	2101      	movs	r1, #1
 8001c02:	2001      	movs	r0, #1
 8001c04:	f7ff f956 	bl	8000eb4 <pinWrite>
  pinWrite(Y, dir1, !directionY);
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	bf0c      	ite	eq
 8001c0e:	2301      	moveq	r3, #1
 8001c10:	2300      	movne	r3, #0
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	461a      	mov	r2, r3
 8001c16:	2102      	movs	r1, #2
 8001c18:	2001      	movs	r0, #1
 8001c1a:	f7ff f94b 	bl	8000eb4 <pinWrite>
}
 8001c1e:	bf00      	nop
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <moveXYAbsolute>:
void setHome(){
  currentX = 0.0;
  currentY = 0.0;
}

void moveXYAbsolute(float x, float y, float speed, float accel){
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c32:	edc7 0a02 	vstr	s1, [r7, #8]
 8001c36:	ed87 1a01 	vstr	s2, [r7, #4]
 8001c3a:	edc7 1a00 	vstr	s3, [r7]
  moveXYRelative(x-currentX, y-currentY, speed, accel);
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <moveXYAbsolute+0x5c>)
 8001c40:	edd3 7a00 	vldr	s15, [r3]
 8001c44:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c48:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c4c:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <moveXYAbsolute+0x60>)
 8001c4e:	edd3 7a00 	vldr	s15, [r3]
 8001c52:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c5a:	edd7 1a00 	vldr	s3, [r7]
 8001c5e:	ed97 1a01 	vldr	s2, [r7, #4]
 8001c62:	eef0 0a67 	vmov.f32	s1, s15
 8001c66:	eeb0 0a66 	vmov.f32	s0, s13
 8001c6a:	f7ff fd05 	bl	8001678 <moveXYRelative>
  currentX = x;
 8001c6e:	4a05      	ldr	r2, [pc, #20]	; (8001c84 <moveXYAbsolute+0x5c>)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6013      	str	r3, [r2, #0]
  currentY = y;
 8001c74:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <moveXYAbsolute+0x60>)
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	6013      	str	r3, [r2, #0]
}
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200000b0 	.word	0x200000b0
 8001c88:	200000b4 	.word	0x200000b4

08001c8c <moveAxisRelative>:

void moveAxisRelative(axis moveAxis, float distance, float speed, float acceleration){
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b092      	sub	sp, #72	; 0x48
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c98:	edc7 0a01 	vstr	s1, [r7, #4]
 8001c9c:	ed87 1a00 	vstr	s2, [r7]
 8001ca0:	73fb      	strb	r3, [r7, #15]
	float ZmicrostepsPerMM = Z_STEPS_PER_MM * MICROSTEP_FACTOR;
 8001ca2:	4b94      	ldr	r3, [pc, #592]	; (8001ef4 <moveAxisRelative+0x268>)
 8001ca4:	62bb      	str	r3, [r7, #40]	; 0x28

	pinWrite(moveAxis,dir0, distance < 0);
 8001ca6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001caa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb2:	bf4c      	ite	mi
 8001cb4:	2301      	movmi	r3, #1
 8001cb6:	2300      	movpl	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	461a      	mov	r2, r3
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff f8f7 	bl	8000eb4 <pinWrite>

	float travelDistance = fabs(distance);
 8001cc6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cca:	eef0 7ae7 	vabs.f32	s15, s15
 8001cce:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	float accelTime = speed/acceleration;
 8001cd2:	edd7 6a01 	vldr	s13, [r7, #4]
 8001cd6:	ed97 7a00 	vldr	s14, [r7]
 8001cda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cde:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	float accelDistance = calcDistance(accelTime, 0, acceleration);
 8001ce2:	ed97 1a00 	vldr	s2, [r7]
 8001ce6:	eddf 0a84 	vldr	s1, [pc, #528]	; 8001ef8 <moveAxisRelative+0x26c>
 8001cea:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8001cee:	f000 f90b 	bl	8001f08 <calcDistance>
 8001cf2:	ed87 0a08 	vstr	s0, [r7, #32]
	float coastDistance = travelDistance - (2*accelDistance);
 8001cf6:	edd7 7a08 	vldr	s15, [r7, #32]
 8001cfa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cfe:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001d02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d06:	edc7 7a07 	vstr	s15, [r7, #28]
	float coastTime = coastDistance/speed;
 8001d0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8001d0e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d16:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

	if(coastTime < 0){
 8001d1a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001d1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d26:	d52f      	bpl.n	8001d88 <moveAxisRelative+0xfc>
		speed = sqrt(travelDistance/acceleration);
 8001d28:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001d2c:	edd7 7a00 	vldr	s15, [r7]
 8001d30:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d34:	ee16 0a90 	vmov	r0, s13
 8001d38:	f7fe fbaa 	bl	8000490 <__aeabi_f2d>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	ec43 2b10 	vmov	d0, r2, r3
 8001d44:	f007 fc2e 	bl	80095a4 <sqrt>
 8001d48:	ec53 2b10 	vmov	r2, r3, d0
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f7fe fece 	bl	8000af0 <__aeabi_d2f>
 8001d54:	4603      	mov	r3, r0
 8001d56:	607b      	str	r3, [r7, #4]
		accelTime = speed/acceleration;
 8001d58:	edd7 6a01 	vldr	s13, [r7, #4]
 8001d5c:	ed97 7a00 	vldr	s14, [r7]
 8001d60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d64:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		accelDistance = calcDistance(accelTime, 0, acceleration);
 8001d68:	ed97 1a00 	vldr	s2, [r7]
 8001d6c:	eddf 0a62 	vldr	s1, [pc, #392]	; 8001ef8 <moveAxisRelative+0x26c>
 8001d70:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8001d74:	f000 f8c8 	bl	8001f08 <calcDistance>
 8001d78:	ed87 0a08 	vstr	s0, [r7, #32]
		coastTime = 0;
 8001d7c:	f04f 0300 	mov.w	r3, #0
 8001d80:	643b      	str	r3, [r7, #64]	; 0x40
		coastDistance = 0;
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	61fb      	str	r3, [r7, #28]
	}

	unsigned long accelTime_us = accelTime * 1000000;
 8001d88:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d8c:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8001efc <moveAxisRelative+0x270>
 8001d90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d98:	ee17 3a90 	vmov	r3, s15
 8001d9c:	61bb      	str	r3, [r7, #24]
	unsigned long coastTime_us = coastTime * 1000000;
 8001d9e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001da2:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001efc <moveAxisRelative+0x270>
 8001da6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dae:	ee17 3a90 	vmov	r3, s15
 8001db2:	617b      	str	r3, [r7, #20]

	unsigned long steps = ZmicrostepsPerMM * travelDistance;
 8001db4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001db8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dc4:	ee17 3a90 	vmov	r3, s15
 8001dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
	float currentSpeed = 5;
 8001dca:	4b4d      	ldr	r3, [pc, #308]	; (8001f00 <moveAxisRelative+0x274>)
 8001dcc:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned long pulseLength = 1000000/(currentSpeed * ZmicrostepsPerMM);
 8001dce:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001dd2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001dd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dda:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001efc <moveAxisRelative+0x270>
 8001dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001de6:	ee17 3a90 	vmov	r3, s15
 8001dea:	637b      	str	r3, [r7, #52]	; 0x34

	// Time
	unsigned long time = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	633b      	str	r3, [r7, #48]	; 0x30
	unsigned long pulseTimer = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	62fb      	str	r3, [r7, #44]	; 0x2c
	unsigned long timeStep = 10;
 8001df4:	230a      	movs	r3, #10
 8001df6:	613b      	str	r3, [r7, #16]

	while(steps > 0){
 8001df8:	e073      	b.n	8001ee2 <moveAxisRelative+0x256>
		delayMicro(timeStep);
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff f915 	bl	800102c <delayMicro>
		time += timeStep;
 8001e02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	4413      	add	r3, r2
 8001e08:	633b      	str	r3, [r7, #48]	; 0x30
		pulseTimer += timeStep;
 8001e0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4413      	add	r3, r2
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c

		if(steps > 0 && pulseTimer >= pulseLength){
 8001e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d064      	beq.n	8001ee2 <moveAxisRelative+0x256>
 8001e18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d360      	bcc.n	8001ee2 <moveAxisRelative+0x256>
			pulseTimer = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(time <= accelTime_us){
 8001e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d80f      	bhi.n	8001e4c <moveAxisRelative+0x1c0>
				currentSpeed = (acceleration * time)/1000000;
 8001e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2e:	ee07 3a90 	vmov	s15, r3
 8001e32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e36:	edd7 7a00 	vldr	s15, [r7]
 8001e3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e3e:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001efc <moveAxisRelative+0x270>
 8001e42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e46:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8001e4a:	e023      	b.n	8001e94 <moveAxisRelative+0x208>
			} else if(time > accelTime_us && time <= (accelTime_us + coastTime_us)){
 8001e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d908      	bls.n	8001e66 <moveAxisRelative+0x1da>
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	4413      	add	r3, r2
 8001e5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d802      	bhi.n	8001e66 <moveAxisRelative+0x1da>
				currentSpeed = speed;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e64:	e016      	b.n	8001e94 <moveAxisRelative+0x208>
			} else {
				currentSpeed = speed - (acceleration * (time-(accelTime_us + coastTime_us)))/1000000;
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	ee07 3a90 	vmov	s15, r3
 8001e74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e78:	edd7 7a00 	vldr	s15, [r7]
 8001e7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e80:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8001efc <moveAxisRelative+0x270>
 8001e84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e88:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e90:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			}
			pulseLength = 1000000/(currentSpeed * ZmicrostepsPerMM);
 8001e94:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001e98:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001e9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ea0:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001efc <moveAxisRelative+0x270>
 8001ea4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ea8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eac:	ee17 3a90 	vmov	r3, s15
 8001eb0:	637b      	str	r3, [r7, #52]	; 0x34
			pinWrite(moveAxis, step,1);
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe fffb 	bl	8000eb4 <pinWrite>
			delayMicro(10);
 8001ebe:	200a      	movs	r0, #10
 8001ec0:	f7ff f8b4 	bl	800102c <delayMicro>
			pinWrite(moveAxis, step,0);
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7fe fff2 	bl	8000eb4 <pinWrite>
			time += 10;
 8001ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed2:	330a      	adds	r3, #10
 8001ed4:	633b      	str	r3, [r7, #48]	; 0x30
			pulseTimer += 10;
 8001ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed8:	330a      	adds	r3, #10
 8001eda:	62fb      	str	r3, [r7, #44]	; 0x2c
			steps--;
 8001edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(steps > 0){
 8001ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d188      	bne.n	8001dfa <moveAxisRelative+0x16e>
		}
	}
}
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	3748      	adds	r7, #72	; 0x48
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	443b8000 	.word	0x443b8000
 8001ef8:	00000000 	.word	0x00000000
 8001efc:	49742400 	.word	0x49742400
 8001f00:	40a00000 	.word	0x40a00000
 8001f04:	00000000 	.word	0x00000000

08001f08 <calcDistance>:
void moveZAbsolute(float z, float speed, float acceleration){
	moveAxisRelative(Z, z-currentZ, speed, acceleration);
	currentZ = z;
}

float calcDistance(float time, float speed, float acceleration){
 8001f08:	b5b0      	push	{r4, r5, r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001f12:	edc7 0a02 	vstr	s1, [r7, #8]
 8001f16:	ed87 1a01 	vstr	s2, [r7, #4]
	return (0.5 * acceleration * pow(time,2)) + (speed * time);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7fe fab8 	bl	8000490 <__aeabi_f2d>
 8001f20:	f04f 0200 	mov.w	r2, #0
 8001f24:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <calcDistance+0x98>)
 8001f26:	f7fe fb0b 	bl	8000540 <__aeabi_dmul>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	4614      	mov	r4, r2
 8001f30:	461d      	mov	r5, r3
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f7fe faac 	bl	8000490 <__aeabi_f2d>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8001f98 <calcDistance+0x90>
 8001f40:	ec43 2b10 	vmov	d0, r2, r3
 8001f44:	f007 fa80 	bl	8009448 <pow>
 8001f48:	ec53 2b10 	vmov	r2, r3, d0
 8001f4c:	4620      	mov	r0, r4
 8001f4e:	4629      	mov	r1, r5
 8001f50:	f7fe faf6 	bl	8000540 <__aeabi_dmul>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4614      	mov	r4, r2
 8001f5a:	461d      	mov	r5, r3
 8001f5c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f60:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f68:	ee17 0a90 	vmov	r0, s15
 8001f6c:	f7fe fa90 	bl	8000490 <__aeabi_f2d>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4620      	mov	r0, r4
 8001f76:	4629      	mov	r1, r5
 8001f78:	f7fe f92c 	bl	80001d4 <__adddf3>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4610      	mov	r0, r2
 8001f82:	4619      	mov	r1, r3
 8001f84:	f7fe fdb4 	bl	8000af0 <__aeabi_d2f>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	ee07 3a90 	vmov	s15, r3
}
 8001f8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bdb0      	pop	{r4, r5, r7, pc}
 8001f98:	00000000 	.word	0x00000000
 8001f9c:	40000000 	.word	0x40000000
 8001fa0:	3fe00000 	.word	0x3fe00000

08001fa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	607b      	str	r3, [r7, #4]
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <HAL_MspInit+0x4c>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	4a0f      	ldr	r2, [pc, #60]	; (8001ff0 <HAL_MspInit+0x4c>)
 8001fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fba:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <HAL_MspInit+0x4c>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc2:	607b      	str	r3, [r7, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	603b      	str	r3, [r7, #0]
 8001fca:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <HAL_MspInit+0x4c>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	4a08      	ldr	r2, [pc, #32]	; (8001ff0 <HAL_MspInit+0x4c>)
 8001fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <HAL_MspInit+0x4c>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fde:	603b      	str	r3, [r7, #0]
 8001fe0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001fe2:	2007      	movs	r0, #7
 8001fe4:	f000 fada 	bl	800259c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40023800 	.word	0x40023800

08001ff4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a0b      	ldr	r2, [pc, #44]	; (8002030 <HAL_TIM_Base_MspInit+0x3c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d10d      	bne.n	8002022 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <HAL_TIM_Base_MspInit+0x40>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	4a09      	ldr	r2, [pc, #36]	; (8002034 <HAL_TIM_Base_MspInit+0x40>)
 8002010:	f043 0310 	orr.w	r3, r3, #16
 8002014:	6413      	str	r3, [r2, #64]	; 0x40
 8002016:	4b07      	ldr	r3, [pc, #28]	; (8002034 <HAL_TIM_Base_MspInit+0x40>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f003 0310 	and.w	r3, r3, #16
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002022:	bf00      	nop
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	40001000 	.word	0x40001000
 8002034:	40023800 	.word	0x40023800

08002038 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08a      	sub	sp, #40	; 0x28
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a40      	ldr	r2, [pc, #256]	; (8002158 <HAL_UART_MspInit+0x120>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d17a      	bne.n	8002150 <HAL_UART_MspInit+0x118>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
 800205e:	4b3f      	ldr	r3, [pc, #252]	; (800215c <HAL_UART_MspInit+0x124>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	4a3e      	ldr	r2, [pc, #248]	; (800215c <HAL_UART_MspInit+0x124>)
 8002064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002068:	6413      	str	r3, [r2, #64]	; 0x40
 800206a:	4b3c      	ldr	r3, [pc, #240]	; (800215c <HAL_UART_MspInit+0x124>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	4b38      	ldr	r3, [pc, #224]	; (800215c <HAL_UART_MspInit+0x124>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	4a37      	ldr	r2, [pc, #220]	; (800215c <HAL_UART_MspInit+0x124>)
 8002080:	f043 0302 	orr.w	r3, r3, #2
 8002084:	6313      	str	r3, [r2, #48]	; 0x30
 8002086:	4b35      	ldr	r3, [pc, #212]	; (800215c <HAL_UART_MspInit+0x124>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	4b31      	ldr	r3, [pc, #196]	; (800215c <HAL_UART_MspInit+0x124>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	4a30      	ldr	r2, [pc, #192]	; (800215c <HAL_UART_MspInit+0x124>)
 800209c:	f043 0308 	orr.w	r3, r3, #8
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
 80020a2:	4b2e      	ldr	r3, [pc, #184]	; (800215c <HAL_UART_MspInit+0x124>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80020ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020bc:	2303      	movs	r3, #3
 80020be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020c0:	2307      	movs	r3, #7
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c4:	f107 0314 	add.w	r3, r7, #20
 80020c8:	4619      	mov	r1, r3
 80020ca:	4825      	ldr	r0, [pc, #148]	; (8002160 <HAL_UART_MspInit+0x128>)
 80020cc:	f000 fd92 	bl	8002bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d6:	2302      	movs	r3, #2
 80020d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020de:	2303      	movs	r3, #3
 80020e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020e2:	2307      	movs	r3, #7
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020e6:	f107 0314 	add.w	r3, r7, #20
 80020ea:	4619      	mov	r1, r3
 80020ec:	481d      	ldr	r0, [pc, #116]	; (8002164 <HAL_UART_MspInit+0x12c>)
 80020ee:	f000 fd81 	bl	8002bf4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80020f2:	4b1d      	ldr	r3, [pc, #116]	; (8002168 <HAL_UART_MspInit+0x130>)
 80020f4:	4a1d      	ldr	r2, [pc, #116]	; (800216c <HAL_UART_MspInit+0x134>)
 80020f6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80020f8:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <HAL_UART_MspInit+0x130>)
 80020fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020fe:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002100:	4b19      	ldr	r3, [pc, #100]	; (8002168 <HAL_UART_MspInit+0x130>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002106:	4b18      	ldr	r3, [pc, #96]	; (8002168 <HAL_UART_MspInit+0x130>)
 8002108:	2200      	movs	r2, #0
 800210a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800210c:	4b16      	ldr	r3, [pc, #88]	; (8002168 <HAL_UART_MspInit+0x130>)
 800210e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002112:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002114:	4b14      	ldr	r3, [pc, #80]	; (8002168 <HAL_UART_MspInit+0x130>)
 8002116:	2200      	movs	r2, #0
 8002118:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800211a:	4b13      	ldr	r3, [pc, #76]	; (8002168 <HAL_UART_MspInit+0x130>)
 800211c:	2200      	movs	r2, #0
 800211e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002120:	4b11      	ldr	r3, [pc, #68]	; (8002168 <HAL_UART_MspInit+0x130>)
 8002122:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002126:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002128:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <HAL_UART_MspInit+0x130>)
 800212a:	2200      	movs	r2, #0
 800212c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800212e:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <HAL_UART_MspInit+0x130>)
 8002130:	2200      	movs	r2, #0
 8002132:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002134:	480c      	ldr	r0, [pc, #48]	; (8002168 <HAL_UART_MspInit+0x130>)
 8002136:	f000 fa73 	bl	8002620 <HAL_DMA_Init>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8002140:	f7ff fa94 	bl	800166c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a08      	ldr	r2, [pc, #32]	; (8002168 <HAL_UART_MspInit+0x130>)
 8002148:	639a      	str	r2, [r3, #56]	; 0x38
 800214a:	4a07      	ldr	r2, [pc, #28]	; (8002168 <HAL_UART_MspInit+0x130>)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002150:	bf00      	nop
 8002152:	3728      	adds	r7, #40	; 0x28
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40004800 	.word	0x40004800
 800215c:	40023800 	.word	0x40023800
 8002160:	40020400 	.word	0x40020400
 8002164:	40020c00 	.word	0x40020c00
 8002168:	200000c8 	.word	0x200000c8
 800216c:	40026028 	.word	0x40026028

08002170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002174:	e7fe      	b.n	8002174 <NMI_Handler+0x4>

08002176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800217a:	e7fe      	b.n	800217a <HardFault_Handler+0x4>

0800217c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002180:	e7fe      	b.n	8002180 <MemManage_Handler+0x4>

08002182 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002186:	e7fe      	b.n	8002186 <BusFault_Handler+0x4>

08002188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800218c:	e7fe      	b.n	800218c <UsageFault_Handler+0x4>

0800218e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021bc:	f000 f8da 	bl	8002374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021c0:	bf00      	nop
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80021c8:	4802      	ldr	r0, [pc, #8]	; (80021d4 <DMA1_Stream1_IRQHandler+0x10>)
 80021ca:	f000 fad7 	bl	800277c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	200000c8 	.word	0x200000c8

080021d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80021dc:	4802      	ldr	r0, [pc, #8]	; (80021e8 <OTG_FS_IRQHandler+0x10>)
 80021de:	f001 f929 	bl	8003434 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	200005a4 	.word	0x200005a4

080021ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021f4:	4a14      	ldr	r2, [pc, #80]	; (8002248 <_sbrk+0x5c>)
 80021f6:	4b15      	ldr	r3, [pc, #84]	; (800224c <_sbrk+0x60>)
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002200:	4b13      	ldr	r3, [pc, #76]	; (8002250 <_sbrk+0x64>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d102      	bne.n	800220e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <_sbrk+0x64>)
 800220a:	4a12      	ldr	r2, [pc, #72]	; (8002254 <_sbrk+0x68>)
 800220c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800220e:	4b10      	ldr	r3, [pc, #64]	; (8002250 <_sbrk+0x64>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	429a      	cmp	r2, r3
 800221a:	d207      	bcs.n	800222c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800221c:	f006 fdba 	bl	8008d94 <__errno>
 8002220:	4603      	mov	r3, r0
 8002222:	220c      	movs	r2, #12
 8002224:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002226:	f04f 33ff 	mov.w	r3, #4294967295
 800222a:	e009      	b.n	8002240 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <_sbrk+0x64>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002232:	4b07      	ldr	r3, [pc, #28]	; (8002250 <_sbrk+0x64>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	4a05      	ldr	r2, [pc, #20]	; (8002250 <_sbrk+0x64>)
 800223c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800223e:	68fb      	ldr	r3, [r7, #12]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20020000 	.word	0x20020000
 800224c:	00000400 	.word	0x00000400
 8002250:	200000b8 	.word	0x200000b8
 8002254:	200008b8 	.word	0x200008b8

08002258 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <SystemInit+0x20>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002262:	4a05      	ldr	r2, [pc, #20]	; (8002278 <SystemInit+0x20>)
 8002264:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002268:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800227c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002280:	480d      	ldr	r0, [pc, #52]	; (80022b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002282:	490e      	ldr	r1, [pc, #56]	; (80022bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002284:	4a0e      	ldr	r2, [pc, #56]	; (80022c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002288:	e002      	b.n	8002290 <LoopCopyDataInit>

0800228a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800228a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800228c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800228e:	3304      	adds	r3, #4

08002290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002294:	d3f9      	bcc.n	800228a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002296:	4a0b      	ldr	r2, [pc, #44]	; (80022c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002298:	4c0b      	ldr	r4, [pc, #44]	; (80022c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800229a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800229c:	e001      	b.n	80022a2 <LoopFillZerobss>

0800229e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800229e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022a0:	3204      	adds	r2, #4

080022a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a4:	d3fb      	bcc.n	800229e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022a6:	f7ff ffd7 	bl	8002258 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022aa:	f006 fd79 	bl	8008da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ae:	f7fe fed3 	bl	8001058 <main>
  bx  lr    
 80022b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022bc:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80022c0:	0800b568 	.word	0x0800b568
  ldr r2, =_sbss
 80022c4:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80022c8:	200008b8 	.word	0x200008b8

080022cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022cc:	e7fe      	b.n	80022cc <ADC_IRQHandler>
	...

080022d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022d4:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <HAL_Init+0x40>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a0d      	ldr	r2, [pc, #52]	; (8002310 <HAL_Init+0x40>)
 80022da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022e0:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <HAL_Init+0x40>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <HAL_Init+0x40>)
 80022e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022ec:	4b08      	ldr	r3, [pc, #32]	; (8002310 <HAL_Init+0x40>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a07      	ldr	r2, [pc, #28]	; (8002310 <HAL_Init+0x40>)
 80022f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f8:	2003      	movs	r0, #3
 80022fa:	f000 f94f 	bl	800259c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022fe:	2000      	movs	r0, #0
 8002300:	f000 f808 	bl	8002314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002304:	f7ff fe4e 	bl	8001fa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40023c00 	.word	0x40023c00

08002314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800231c:	4b12      	ldr	r3, [pc, #72]	; (8002368 <HAL_InitTick+0x54>)
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	4b12      	ldr	r3, [pc, #72]	; (800236c <HAL_InitTick+0x58>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	4619      	mov	r1, r3
 8002326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800232a:	fbb3 f3f1 	udiv	r3, r3, r1
 800232e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002332:	4618      	mov	r0, r3
 8002334:	f000 f967 	bl	8002606 <HAL_SYSTICK_Config>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e00e      	b.n	8002360 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b0f      	cmp	r3, #15
 8002346:	d80a      	bhi.n	800235e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002348:	2200      	movs	r2, #0
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	f04f 30ff 	mov.w	r0, #4294967295
 8002350:	f000 f92f 	bl	80025b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002354:	4a06      	ldr	r2, [pc, #24]	; (8002370 <HAL_InitTick+0x5c>)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	e000      	b.n	8002360 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
}
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20000000 	.word	0x20000000
 800236c:	20000008 	.word	0x20000008
 8002370:	20000004 	.word	0x20000004

08002374 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_IncTick+0x20>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	461a      	mov	r2, r3
 800237e:	4b06      	ldr	r3, [pc, #24]	; (8002398 <HAL_IncTick+0x24>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4413      	add	r3, r2
 8002384:	4a04      	ldr	r2, [pc, #16]	; (8002398 <HAL_IncTick+0x24>)
 8002386:	6013      	str	r3, [r2, #0]
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	20000008 	.word	0x20000008
 8002398:	200001c8 	.word	0x200001c8

0800239c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return uwTick;
 80023a0:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <HAL_GetTick+0x14>)
 80023a2:	681b      	ldr	r3, [r3, #0]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	200001c8 	.word	0x200001c8

080023b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023bc:	f7ff ffee 	bl	800239c <HAL_GetTick>
 80023c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023cc:	d005      	beq.n	80023da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ce:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <HAL_Delay+0x44>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4413      	add	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023da:	bf00      	nop
 80023dc:	f7ff ffde 	bl	800239c <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d8f7      	bhi.n	80023dc <HAL_Delay+0x28>
  {
  }
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000008 	.word	0x20000008

080023fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800240c:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <__NVIC_SetPriorityGrouping+0x44>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002418:	4013      	ands	r3, r2
 800241a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800242c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800242e:	4a04      	ldr	r2, [pc, #16]	; (8002440 <__NVIC_SetPriorityGrouping+0x44>)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	60d3      	str	r3, [r2, #12]
}
 8002434:	bf00      	nop
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <__NVIC_GetPriorityGrouping+0x18>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	0a1b      	lsrs	r3, r3, #8
 800244e:	f003 0307 	and.w	r3, r3, #7
}
 8002452:	4618      	mov	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	2b00      	cmp	r3, #0
 8002470:	db0b      	blt.n	800248a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	f003 021f 	and.w	r2, r3, #31
 8002478:	4907      	ldr	r1, [pc, #28]	; (8002498 <__NVIC_EnableIRQ+0x38>)
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	095b      	lsrs	r3, r3, #5
 8002480:	2001      	movs	r0, #1
 8002482:	fa00 f202 	lsl.w	r2, r0, r2
 8002486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000e100 	.word	0xe000e100

0800249c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	6039      	str	r1, [r7, #0]
 80024a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	db0a      	blt.n	80024c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	490c      	ldr	r1, [pc, #48]	; (80024e8 <__NVIC_SetPriority+0x4c>)
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	0112      	lsls	r2, r2, #4
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	440b      	add	r3, r1
 80024c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024c4:	e00a      	b.n	80024dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	4908      	ldr	r1, [pc, #32]	; (80024ec <__NVIC_SetPriority+0x50>)
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	3b04      	subs	r3, #4
 80024d4:	0112      	lsls	r2, r2, #4
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	440b      	add	r3, r1
 80024da:	761a      	strb	r2, [r3, #24]
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000e100 	.word	0xe000e100
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b089      	sub	sp, #36	; 0x24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f1c3 0307 	rsb	r3, r3, #7
 800250a:	2b04      	cmp	r3, #4
 800250c:	bf28      	it	cs
 800250e:	2304      	movcs	r3, #4
 8002510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3304      	adds	r3, #4
 8002516:	2b06      	cmp	r3, #6
 8002518:	d902      	bls.n	8002520 <NVIC_EncodePriority+0x30>
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3b03      	subs	r3, #3
 800251e:	e000      	b.n	8002522 <NVIC_EncodePriority+0x32>
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002524:	f04f 32ff 	mov.w	r2, #4294967295
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43da      	mvns	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	401a      	ands	r2, r3
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002538:	f04f 31ff 	mov.w	r1, #4294967295
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	fa01 f303 	lsl.w	r3, r1, r3
 8002542:	43d9      	mvns	r1, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002548:	4313      	orrs	r3, r2
         );
}
 800254a:	4618      	mov	r0, r3
 800254c:	3724      	adds	r7, #36	; 0x24
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
	...

08002558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3b01      	subs	r3, #1
 8002564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002568:	d301      	bcc.n	800256e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800256a:	2301      	movs	r3, #1
 800256c:	e00f      	b.n	800258e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800256e:	4a0a      	ldr	r2, [pc, #40]	; (8002598 <SysTick_Config+0x40>)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3b01      	subs	r3, #1
 8002574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002576:	210f      	movs	r1, #15
 8002578:	f04f 30ff 	mov.w	r0, #4294967295
 800257c:	f7ff ff8e 	bl	800249c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <SysTick_Config+0x40>)
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002586:	4b04      	ldr	r3, [pc, #16]	; (8002598 <SysTick_Config+0x40>)
 8002588:	2207      	movs	r2, #7
 800258a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	e000e010 	.word	0xe000e010

0800259c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff ff29 	bl	80023fc <__NVIC_SetPriorityGrouping>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b086      	sub	sp, #24
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	4603      	mov	r3, r0
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025c4:	f7ff ff3e 	bl	8002444 <__NVIC_GetPriorityGrouping>
 80025c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	6978      	ldr	r0, [r7, #20]
 80025d0:	f7ff ff8e 	bl	80024f0 <NVIC_EncodePriority>
 80025d4:	4602      	mov	r2, r0
 80025d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025da:	4611      	mov	r1, r2
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff5d 	bl	800249c <__NVIC_SetPriority>
}
 80025e2:	bf00      	nop
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	4603      	mov	r3, r0
 80025f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff ff31 	bl	8002460 <__NVIC_EnableIRQ>
}
 80025fe:	bf00      	nop
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7ff ffa2 	bl	8002558 <SysTick_Config>
 8002614:	4603      	mov	r3, r0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800262c:	f7ff feb6 	bl	800239c <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e099      	b.n	8002770 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2202      	movs	r2, #2
 8002640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0201 	bic.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800265c:	e00f      	b.n	800267e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800265e:	f7ff fe9d 	bl	800239c <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b05      	cmp	r3, #5
 800266a:	d908      	bls.n	800267e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2220      	movs	r2, #32
 8002670:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2203      	movs	r2, #3
 8002676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e078      	b.n	8002770 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1e8      	bne.n	800265e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	4b38      	ldr	r3, [pc, #224]	; (8002778 <HAL_DMA_Init+0x158>)
 8002698:	4013      	ands	r3, r2
 800269a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d107      	bne.n	80026e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	4313      	orrs	r3, r2
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f023 0307 	bic.w	r3, r3, #7
 80026fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	4313      	orrs	r3, r2
 8002708:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	2b04      	cmp	r3, #4
 8002710:	d117      	bne.n	8002742 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	4313      	orrs	r3, r2
 800271a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00e      	beq.n	8002742 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f9e9 	bl	8002afc <DMA_CheckFifoParam>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2240      	movs	r2, #64	; 0x40
 8002734:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800273e:	2301      	movs	r3, #1
 8002740:	e016      	b.n	8002770 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f9a0 	bl	8002a90 <DMA_CalcBaseAndBitshift>
 8002750:	4603      	mov	r3, r0
 8002752:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002758:	223f      	movs	r2, #63	; 0x3f
 800275a:	409a      	lsls	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	f010803f 	.word	0xf010803f

0800277c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002788:	4b92      	ldr	r3, [pc, #584]	; (80029d4 <HAL_DMA_IRQHandler+0x258>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a92      	ldr	r2, [pc, #584]	; (80029d8 <HAL_DMA_IRQHandler+0x25c>)
 800278e:	fba2 2303 	umull	r2, r3, r2, r3
 8002792:	0a9b      	lsrs	r3, r3, #10
 8002794:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a6:	2208      	movs	r2, #8
 80027a8:	409a      	lsls	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	4013      	ands	r3, r2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d01a      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d013      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0204 	bic.w	r2, r2, #4
 80027ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d4:	2208      	movs	r2, #8
 80027d6:	409a      	lsls	r2, r3
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e0:	f043 0201 	orr.w	r2, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ec:	2201      	movs	r2, #1
 80027ee:	409a      	lsls	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d012      	beq.n	800281e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00b      	beq.n	800281e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280a:	2201      	movs	r2, #1
 800280c:	409a      	lsls	r2, r3
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002816:	f043 0202 	orr.w	r2, r3, #2
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002822:	2204      	movs	r2, #4
 8002824:	409a      	lsls	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4013      	ands	r3, r2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d012      	beq.n	8002854 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00b      	beq.n	8002854 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002840:	2204      	movs	r2, #4
 8002842:	409a      	lsls	r2, r3
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284c:	f043 0204 	orr.w	r2, r3, #4
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002858:	2210      	movs	r2, #16
 800285a:	409a      	lsls	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d043      	beq.n	80028ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b00      	cmp	r3, #0
 8002870:	d03c      	beq.n	80028ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002876:	2210      	movs	r2, #16
 8002878:	409a      	lsls	r2, r3
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d018      	beq.n	80028be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d108      	bne.n	80028ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d024      	beq.n	80028ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	4798      	blx	r3
 80028aa:	e01f      	b.n	80028ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d01b      	beq.n	80028ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	4798      	blx	r3
 80028bc:	e016      	b.n	80028ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d107      	bne.n	80028dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0208 	bic.w	r2, r2, #8
 80028da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f0:	2220      	movs	r2, #32
 80028f2:	409a      	lsls	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 808e 	beq.w	8002a1a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0310 	and.w	r3, r3, #16
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 8086 	beq.w	8002a1a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002912:	2220      	movs	r2, #32
 8002914:	409a      	lsls	r2, r3
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b05      	cmp	r3, #5
 8002924:	d136      	bne.n	8002994 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0216 	bic.w	r2, r2, #22
 8002934:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695a      	ldr	r2, [r3, #20]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002944:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	2b00      	cmp	r3, #0
 800294c:	d103      	bne.n	8002956 <HAL_DMA_IRQHandler+0x1da>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002952:	2b00      	cmp	r3, #0
 8002954:	d007      	beq.n	8002966 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0208 	bic.w	r2, r2, #8
 8002964:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296a:	223f      	movs	r2, #63	; 0x3f
 800296c:	409a      	lsls	r2, r3
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002986:	2b00      	cmp	r3, #0
 8002988:	d07d      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	4798      	blx	r3
        }
        return;
 8002992:	e078      	b.n	8002a86 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d01c      	beq.n	80029dc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d108      	bne.n	80029c2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d030      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	4798      	blx	r3
 80029c0:	e02b      	b.n	8002a1a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d027      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	4798      	blx	r3
 80029d2:	e022      	b.n	8002a1a <HAL_DMA_IRQHandler+0x29e>
 80029d4:	20000000 	.word	0x20000000
 80029d8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10f      	bne.n	8002a0a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0210 	bic.w	r2, r2, #16
 80029f8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d032      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d022      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2205      	movs	r2, #5
 8002a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0201 	bic.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d307      	bcc.n	8002a62 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f2      	bne.n	8002a46 <HAL_DMA_IRQHandler+0x2ca>
 8002a60:	e000      	b.n	8002a64 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002a62:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	4798      	blx	r3
 8002a84:	e000      	b.n	8002a88 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002a86:	bf00      	nop
    }
  }
}
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop

08002a90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	3b10      	subs	r3, #16
 8002aa0:	4a14      	ldr	r2, [pc, #80]	; (8002af4 <DMA_CalcBaseAndBitshift+0x64>)
 8002aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa6:	091b      	lsrs	r3, r3, #4
 8002aa8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002aaa:	4a13      	ldr	r2, [pc, #76]	; (8002af8 <DMA_CalcBaseAndBitshift+0x68>)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4413      	add	r3, r2
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b03      	cmp	r3, #3
 8002abc:	d909      	bls.n	8002ad2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ac6:	f023 0303 	bic.w	r3, r3, #3
 8002aca:	1d1a      	adds	r2, r3, #4
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	659a      	str	r2, [r3, #88]	; 0x58
 8002ad0:	e007      	b.n	8002ae2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ada:	f023 0303 	bic.w	r3, r3, #3
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	aaaaaaab 	.word	0xaaaaaaab
 8002af8:	0800b2ec 	.word	0x0800b2ec

08002afc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b04:	2300      	movs	r3, #0
 8002b06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d11f      	bne.n	8002b56 <DMA_CheckFifoParam+0x5a>
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d856      	bhi.n	8002bca <DMA_CheckFifoParam+0xce>
 8002b1c:	a201      	add	r2, pc, #4	; (adr r2, 8002b24 <DMA_CheckFifoParam+0x28>)
 8002b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b22:	bf00      	nop
 8002b24:	08002b35 	.word	0x08002b35
 8002b28:	08002b47 	.word	0x08002b47
 8002b2c:	08002b35 	.word	0x08002b35
 8002b30:	08002bcb 	.word	0x08002bcb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d046      	beq.n	8002bce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b44:	e043      	b.n	8002bce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b4e:	d140      	bne.n	8002bd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b54:	e03d      	b.n	8002bd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b5e:	d121      	bne.n	8002ba4 <DMA_CheckFifoParam+0xa8>
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d837      	bhi.n	8002bd6 <DMA_CheckFifoParam+0xda>
 8002b66:	a201      	add	r2, pc, #4	; (adr r2, 8002b6c <DMA_CheckFifoParam+0x70>)
 8002b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6c:	08002b7d 	.word	0x08002b7d
 8002b70:	08002b83 	.word	0x08002b83
 8002b74:	08002b7d 	.word	0x08002b7d
 8002b78:	08002b95 	.word	0x08002b95
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b80:	e030      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d025      	beq.n	8002bda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b92:	e022      	b.n	8002bda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b9c:	d11f      	bne.n	8002bde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ba2:	e01c      	b.n	8002bde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d903      	bls.n	8002bb2 <DMA_CheckFifoParam+0xb6>
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b03      	cmp	r3, #3
 8002bae:	d003      	beq.n	8002bb8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bb0:	e018      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8002bb6:	e015      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00e      	beq.n	8002be2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc8:	e00b      	b.n	8002be2 <DMA_CheckFifoParam+0xe6>
      break;
 8002bca:	bf00      	nop
 8002bcc:	e00a      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      break;
 8002bce:	bf00      	nop
 8002bd0:	e008      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      break;
 8002bd2:	bf00      	nop
 8002bd4:	e006      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      break;
 8002bd6:	bf00      	nop
 8002bd8:	e004      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      break;
 8002bda:	bf00      	nop
 8002bdc:	e002      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002bde:	bf00      	nop
 8002be0:	e000      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      break;
 8002be2:	bf00      	nop
    }
  } 
  
  return status; 
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop

08002bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b089      	sub	sp, #36	; 0x24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61fb      	str	r3, [r7, #28]
 8002c0e:	e16b      	b.n	8002ee8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c10:	2201      	movs	r2, #1
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	4013      	ands	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	f040 815a 	bne.w	8002ee2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d005      	beq.n	8002c46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d130      	bne.n	8002ca8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	2203      	movs	r2, #3
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43db      	mvns	r3, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	f003 0201 	and.w	r2, r3, #1
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d017      	beq.n	8002ce4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d123      	bne.n	8002d38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	08da      	lsrs	r2, r3, #3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3208      	adds	r2, #8
 8002cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	220f      	movs	r2, #15
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	08da      	lsrs	r2, r3, #3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3208      	adds	r2, #8
 8002d32:	69b9      	ldr	r1, [r7, #24]
 8002d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	2203      	movs	r2, #3
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 0203 	and.w	r2, r3, #3
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 80b4 	beq.w	8002ee2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	4b60      	ldr	r3, [pc, #384]	; (8002f00 <HAL_GPIO_Init+0x30c>)
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	4a5f      	ldr	r2, [pc, #380]	; (8002f00 <HAL_GPIO_Init+0x30c>)
 8002d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d88:	6453      	str	r3, [r2, #68]	; 0x44
 8002d8a:	4b5d      	ldr	r3, [pc, #372]	; (8002f00 <HAL_GPIO_Init+0x30c>)
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d96:	4a5b      	ldr	r2, [pc, #364]	; (8002f04 <HAL_GPIO_Init+0x310>)
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	089b      	lsrs	r3, r3, #2
 8002d9c:	3302      	adds	r3, #2
 8002d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	220f      	movs	r2, #15
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4013      	ands	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a52      	ldr	r2, [pc, #328]	; (8002f08 <HAL_GPIO_Init+0x314>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d02b      	beq.n	8002e1a <HAL_GPIO_Init+0x226>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a51      	ldr	r2, [pc, #324]	; (8002f0c <HAL_GPIO_Init+0x318>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d025      	beq.n	8002e16 <HAL_GPIO_Init+0x222>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a50      	ldr	r2, [pc, #320]	; (8002f10 <HAL_GPIO_Init+0x31c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d01f      	beq.n	8002e12 <HAL_GPIO_Init+0x21e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a4f      	ldr	r2, [pc, #316]	; (8002f14 <HAL_GPIO_Init+0x320>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d019      	beq.n	8002e0e <HAL_GPIO_Init+0x21a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a4e      	ldr	r2, [pc, #312]	; (8002f18 <HAL_GPIO_Init+0x324>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d013      	beq.n	8002e0a <HAL_GPIO_Init+0x216>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a4d      	ldr	r2, [pc, #308]	; (8002f1c <HAL_GPIO_Init+0x328>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d00d      	beq.n	8002e06 <HAL_GPIO_Init+0x212>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a4c      	ldr	r2, [pc, #304]	; (8002f20 <HAL_GPIO_Init+0x32c>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d007      	beq.n	8002e02 <HAL_GPIO_Init+0x20e>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a4b      	ldr	r2, [pc, #300]	; (8002f24 <HAL_GPIO_Init+0x330>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d101      	bne.n	8002dfe <HAL_GPIO_Init+0x20a>
 8002dfa:	2307      	movs	r3, #7
 8002dfc:	e00e      	b.n	8002e1c <HAL_GPIO_Init+0x228>
 8002dfe:	2308      	movs	r3, #8
 8002e00:	e00c      	b.n	8002e1c <HAL_GPIO_Init+0x228>
 8002e02:	2306      	movs	r3, #6
 8002e04:	e00a      	b.n	8002e1c <HAL_GPIO_Init+0x228>
 8002e06:	2305      	movs	r3, #5
 8002e08:	e008      	b.n	8002e1c <HAL_GPIO_Init+0x228>
 8002e0a:	2304      	movs	r3, #4
 8002e0c:	e006      	b.n	8002e1c <HAL_GPIO_Init+0x228>
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e004      	b.n	8002e1c <HAL_GPIO_Init+0x228>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e002      	b.n	8002e1c <HAL_GPIO_Init+0x228>
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <HAL_GPIO_Init+0x228>
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	69fa      	ldr	r2, [r7, #28]
 8002e1e:	f002 0203 	and.w	r2, r2, #3
 8002e22:	0092      	lsls	r2, r2, #2
 8002e24:	4093      	lsls	r3, r2
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e2c:	4935      	ldr	r1, [pc, #212]	; (8002f04 <HAL_GPIO_Init+0x310>)
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	089b      	lsrs	r3, r3, #2
 8002e32:	3302      	adds	r3, #2
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e3a:	4b3b      	ldr	r3, [pc, #236]	; (8002f28 <HAL_GPIO_Init+0x334>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	43db      	mvns	r3, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4013      	ands	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e5e:	4a32      	ldr	r2, [pc, #200]	; (8002f28 <HAL_GPIO_Init+0x334>)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e64:	4b30      	ldr	r3, [pc, #192]	; (8002f28 <HAL_GPIO_Init+0x334>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e88:	4a27      	ldr	r2, [pc, #156]	; (8002f28 <HAL_GPIO_Init+0x334>)
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e8e:	4b26      	ldr	r3, [pc, #152]	; (8002f28 <HAL_GPIO_Init+0x334>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	43db      	mvns	r3, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eb2:	4a1d      	ldr	r2, [pc, #116]	; (8002f28 <HAL_GPIO_Init+0x334>)
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002eb8:	4b1b      	ldr	r3, [pc, #108]	; (8002f28 <HAL_GPIO_Init+0x334>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002edc:	4a12      	ldr	r2, [pc, #72]	; (8002f28 <HAL_GPIO_Init+0x334>)
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	61fb      	str	r3, [r7, #28]
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	2b0f      	cmp	r3, #15
 8002eec:	f67f ae90 	bls.w	8002c10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ef0:	bf00      	nop
 8002ef2:	bf00      	nop
 8002ef4:	3724      	adds	r7, #36	; 0x24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40023800 	.word	0x40023800
 8002f04:	40013800 	.word	0x40013800
 8002f08:	40020000 	.word	0x40020000
 8002f0c:	40020400 	.word	0x40020400
 8002f10:	40020800 	.word	0x40020800
 8002f14:	40020c00 	.word	0x40020c00
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	40021400 	.word	0x40021400
 8002f20:	40021800 	.word	0x40021800
 8002f24:	40021c00 	.word	0x40021c00
 8002f28:	40013c00 	.word	0x40013c00

08002f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	807b      	strh	r3, [r7, #2]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f3c:	787b      	ldrb	r3, [r7, #1]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f42:	887a      	ldrh	r2, [r7, #2]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f48:	e003      	b.n	8002f52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f4a:	887b      	ldrh	r3, [r7, #2]
 8002f4c:	041a      	lsls	r2, r3, #16
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	619a      	str	r2, [r3, #24]
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002f5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f60:	b08f      	sub	sp, #60	; 0x3c
 8002f62:	af0a      	add	r7, sp, #40	; 0x28
 8002f64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e054      	b.n	800301a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d106      	bne.n	8002f90 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f005 fc58 	bl	8008840 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2203      	movs	r2, #3
 8002f94:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d102      	bne.n	8002faa <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f002 fdae 	bl	8005b10 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	603b      	str	r3, [r7, #0]
 8002fba:	687e      	ldr	r6, [r7, #4]
 8002fbc:	466d      	mov	r5, sp
 8002fbe:	f106 0410 	add.w	r4, r6, #16
 8002fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fce:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fd2:	1d33      	adds	r3, r6, #4
 8002fd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fd6:	6838      	ldr	r0, [r7, #0]
 8002fd8:	f002 fd28 	bl	8005a2c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f002 fda5 	bl	8005b32 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	603b      	str	r3, [r7, #0]
 8002fee:	687e      	ldr	r6, [r7, #4]
 8002ff0:	466d      	mov	r5, sp
 8002ff2:	f106 0410 	add.w	r4, r6, #16
 8002ff6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ff8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ffa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ffc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ffe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003002:	e885 0003 	stmia.w	r5, {r0, r1}
 8003006:	1d33      	adds	r3, r6, #4
 8003008:	cb0e      	ldmia	r3, {r1, r2, r3}
 800300a:	6838      	ldr	r0, [r7, #0]
 800300c:	f002 ff0c 	bl	8005e28 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003022 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003022:	b590      	push	{r4, r7, lr}
 8003024:	b089      	sub	sp, #36	; 0x24
 8003026:	af04      	add	r7, sp, #16
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	4608      	mov	r0, r1
 800302c:	4611      	mov	r1, r2
 800302e:	461a      	mov	r2, r3
 8003030:	4603      	mov	r3, r0
 8003032:	70fb      	strb	r3, [r7, #3]
 8003034:	460b      	mov	r3, r1
 8003036:	70bb      	strb	r3, [r7, #2]
 8003038:	4613      	mov	r3, r2
 800303a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_HCD_HC_Init+0x28>
 8003046:	2302      	movs	r3, #2
 8003048:	e076      	b.n	8003138 <HAL_HCD_HC_Init+0x116>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003052:	78fb      	ldrb	r3, [r7, #3]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	212c      	movs	r1, #44	; 0x2c
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	4413      	add	r3, r2
 800305e:	333d      	adds	r3, #61	; 0x3d
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	212c      	movs	r1, #44	; 0x2c
 800306a:	fb01 f303 	mul.w	r3, r1, r3
 800306e:	4413      	add	r3, r2
 8003070:	3338      	adds	r3, #56	; 0x38
 8003072:	787a      	ldrb	r2, [r7, #1]
 8003074:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003076:	78fb      	ldrb	r3, [r7, #3]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	212c      	movs	r1, #44	; 0x2c
 800307c:	fb01 f303 	mul.w	r3, r1, r3
 8003080:	4413      	add	r3, r2
 8003082:	3340      	adds	r3, #64	; 0x40
 8003084:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003086:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	212c      	movs	r1, #44	; 0x2c
 800308e:	fb01 f303 	mul.w	r3, r1, r3
 8003092:	4413      	add	r3, r2
 8003094:	3339      	adds	r3, #57	; 0x39
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	212c      	movs	r1, #44	; 0x2c
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	4413      	add	r3, r2
 80030a6:	333f      	adds	r3, #63	; 0x3f
 80030a8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80030ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80030ae:	78fb      	ldrb	r3, [r7, #3]
 80030b0:	78ba      	ldrb	r2, [r7, #2]
 80030b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80030b6:	b2d0      	uxtb	r0, r2
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	212c      	movs	r1, #44	; 0x2c
 80030bc:	fb01 f303 	mul.w	r3, r1, r3
 80030c0:	4413      	add	r3, r2
 80030c2:	333a      	adds	r3, #58	; 0x3a
 80030c4:	4602      	mov	r2, r0
 80030c6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80030c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	da09      	bge.n	80030e4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	212c      	movs	r1, #44	; 0x2c
 80030d6:	fb01 f303 	mul.w	r3, r1, r3
 80030da:	4413      	add	r3, r2
 80030dc:	333b      	adds	r3, #59	; 0x3b
 80030de:	2201      	movs	r2, #1
 80030e0:	701a      	strb	r2, [r3, #0]
 80030e2:	e008      	b.n	80030f6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80030e4:	78fb      	ldrb	r3, [r7, #3]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	212c      	movs	r1, #44	; 0x2c
 80030ea:	fb01 f303 	mul.w	r3, r1, r3
 80030ee:	4413      	add	r3, r2
 80030f0:	333b      	adds	r3, #59	; 0x3b
 80030f2:	2200      	movs	r2, #0
 80030f4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80030f6:	78fb      	ldrb	r3, [r7, #3]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	212c      	movs	r1, #44	; 0x2c
 80030fc:	fb01 f303 	mul.w	r3, r1, r3
 8003100:	4413      	add	r3, r2
 8003102:	333c      	adds	r3, #60	; 0x3c
 8003104:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003108:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	787c      	ldrb	r4, [r7, #1]
 8003110:	78ba      	ldrb	r2, [r7, #2]
 8003112:	78f9      	ldrb	r1, [r7, #3]
 8003114:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003116:	9302      	str	r3, [sp, #8]
 8003118:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800311c:	9301      	str	r3, [sp, #4]
 800311e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	4623      	mov	r3, r4
 8003126:	f002 fff9 	bl	800611c <USB_HC_Init>
 800312a:	4603      	mov	r3, r0
 800312c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003136:	7bfb      	ldrb	r3, [r7, #15]
}
 8003138:	4618      	mov	r0, r3
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	bd90      	pop	{r4, r7, pc}

08003140 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003156:	2b01      	cmp	r3, #1
 8003158:	d101      	bne.n	800315e <HAL_HCD_HC_Halt+0x1e>
 800315a:	2302      	movs	r3, #2
 800315c:	e00f      	b.n	800317e <HAL_HCD_HC_Halt+0x3e>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	4611      	mov	r1, r2
 800316e:	4618      	mov	r0, r3
 8003170:	f003 fa35 	bl	80065de <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800317c:	7bfb      	ldrb	r3, [r7, #15]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
	...

08003188 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	4608      	mov	r0, r1
 8003192:	4611      	mov	r1, r2
 8003194:	461a      	mov	r2, r3
 8003196:	4603      	mov	r3, r0
 8003198:	70fb      	strb	r3, [r7, #3]
 800319a:	460b      	mov	r3, r1
 800319c:	70bb      	strb	r3, [r7, #2]
 800319e:	4613      	mov	r3, r2
 80031a0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80031a2:	78fb      	ldrb	r3, [r7, #3]
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	212c      	movs	r1, #44	; 0x2c
 80031a8:	fb01 f303 	mul.w	r3, r1, r3
 80031ac:	4413      	add	r3, r2
 80031ae:	333b      	adds	r3, #59	; 0x3b
 80031b0:	78ba      	ldrb	r2, [r7, #2]
 80031b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	212c      	movs	r1, #44	; 0x2c
 80031ba:	fb01 f303 	mul.w	r3, r1, r3
 80031be:	4413      	add	r3, r2
 80031c0:	333f      	adds	r3, #63	; 0x3f
 80031c2:	787a      	ldrb	r2, [r7, #1]
 80031c4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80031c6:	7c3b      	ldrb	r3, [r7, #16]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d112      	bne.n	80031f2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	212c      	movs	r1, #44	; 0x2c
 80031d2:	fb01 f303 	mul.w	r3, r1, r3
 80031d6:	4413      	add	r3, r2
 80031d8:	3342      	adds	r3, #66	; 0x42
 80031da:	2203      	movs	r2, #3
 80031dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80031de:	78fb      	ldrb	r3, [r7, #3]
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	212c      	movs	r1, #44	; 0x2c
 80031e4:	fb01 f303 	mul.w	r3, r1, r3
 80031e8:	4413      	add	r3, r2
 80031ea:	333d      	adds	r3, #61	; 0x3d
 80031ec:	7f3a      	ldrb	r2, [r7, #28]
 80031ee:	701a      	strb	r2, [r3, #0]
 80031f0:	e008      	b.n	8003204 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	212c      	movs	r1, #44	; 0x2c
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	4413      	add	r3, r2
 80031fe:	3342      	adds	r3, #66	; 0x42
 8003200:	2202      	movs	r2, #2
 8003202:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003204:	787b      	ldrb	r3, [r7, #1]
 8003206:	2b03      	cmp	r3, #3
 8003208:	f200 80c6 	bhi.w	8003398 <HAL_HCD_HC_SubmitRequest+0x210>
 800320c:	a201      	add	r2, pc, #4	; (adr r2, 8003214 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800320e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003212:	bf00      	nop
 8003214:	08003225 	.word	0x08003225
 8003218:	08003385 	.word	0x08003385
 800321c:	08003289 	.word	0x08003289
 8003220:	08003307 	.word	0x08003307
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003224:	7c3b      	ldrb	r3, [r7, #16]
 8003226:	2b01      	cmp	r3, #1
 8003228:	f040 80b8 	bne.w	800339c <HAL_HCD_HC_SubmitRequest+0x214>
 800322c:	78bb      	ldrb	r3, [r7, #2]
 800322e:	2b00      	cmp	r3, #0
 8003230:	f040 80b4 	bne.w	800339c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003234:	8b3b      	ldrh	r3, [r7, #24]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d108      	bne.n	800324c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800323a:	78fb      	ldrb	r3, [r7, #3]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	212c      	movs	r1, #44	; 0x2c
 8003240:	fb01 f303 	mul.w	r3, r1, r3
 8003244:	4413      	add	r3, r2
 8003246:	3355      	adds	r3, #85	; 0x55
 8003248:	2201      	movs	r2, #1
 800324a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	212c      	movs	r1, #44	; 0x2c
 8003252:	fb01 f303 	mul.w	r3, r1, r3
 8003256:	4413      	add	r3, r2
 8003258:	3355      	adds	r3, #85	; 0x55
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d109      	bne.n	8003274 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	212c      	movs	r1, #44	; 0x2c
 8003266:	fb01 f303 	mul.w	r3, r1, r3
 800326a:	4413      	add	r3, r2
 800326c:	3342      	adds	r3, #66	; 0x42
 800326e:	2200      	movs	r2, #0
 8003270:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003272:	e093      	b.n	800339c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003274:	78fb      	ldrb	r3, [r7, #3]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	212c      	movs	r1, #44	; 0x2c
 800327a:	fb01 f303 	mul.w	r3, r1, r3
 800327e:	4413      	add	r3, r2
 8003280:	3342      	adds	r3, #66	; 0x42
 8003282:	2202      	movs	r2, #2
 8003284:	701a      	strb	r2, [r3, #0]
      break;
 8003286:	e089      	b.n	800339c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003288:	78bb      	ldrb	r3, [r7, #2]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d11d      	bne.n	80032ca <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800328e:	78fb      	ldrb	r3, [r7, #3]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	212c      	movs	r1, #44	; 0x2c
 8003294:	fb01 f303 	mul.w	r3, r1, r3
 8003298:	4413      	add	r3, r2
 800329a:	3355      	adds	r3, #85	; 0x55
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032a2:	78fb      	ldrb	r3, [r7, #3]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	212c      	movs	r1, #44	; 0x2c
 80032a8:	fb01 f303 	mul.w	r3, r1, r3
 80032ac:	4413      	add	r3, r2
 80032ae:	3342      	adds	r3, #66	; 0x42
 80032b0:	2200      	movs	r2, #0
 80032b2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80032b4:	e073      	b.n	800339e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032b6:	78fb      	ldrb	r3, [r7, #3]
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	212c      	movs	r1, #44	; 0x2c
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	4413      	add	r3, r2
 80032c2:	3342      	adds	r3, #66	; 0x42
 80032c4:	2202      	movs	r2, #2
 80032c6:	701a      	strb	r2, [r3, #0]
      break;
 80032c8:	e069      	b.n	800339e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80032ca:	78fb      	ldrb	r3, [r7, #3]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	212c      	movs	r1, #44	; 0x2c
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	4413      	add	r3, r2
 80032d6:	3354      	adds	r3, #84	; 0x54
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d109      	bne.n	80032f2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032de:	78fb      	ldrb	r3, [r7, #3]
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	212c      	movs	r1, #44	; 0x2c
 80032e4:	fb01 f303 	mul.w	r3, r1, r3
 80032e8:	4413      	add	r3, r2
 80032ea:	3342      	adds	r3, #66	; 0x42
 80032ec:	2200      	movs	r2, #0
 80032ee:	701a      	strb	r2, [r3, #0]
      break;
 80032f0:	e055      	b.n	800339e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032f2:	78fb      	ldrb	r3, [r7, #3]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	212c      	movs	r1, #44	; 0x2c
 80032f8:	fb01 f303 	mul.w	r3, r1, r3
 80032fc:	4413      	add	r3, r2
 80032fe:	3342      	adds	r3, #66	; 0x42
 8003300:	2202      	movs	r2, #2
 8003302:	701a      	strb	r2, [r3, #0]
      break;
 8003304:	e04b      	b.n	800339e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003306:	78bb      	ldrb	r3, [r7, #2]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d11d      	bne.n	8003348 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800330c:	78fb      	ldrb	r3, [r7, #3]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	212c      	movs	r1, #44	; 0x2c
 8003312:	fb01 f303 	mul.w	r3, r1, r3
 8003316:	4413      	add	r3, r2
 8003318:	3355      	adds	r3, #85	; 0x55
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d109      	bne.n	8003334 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003320:	78fb      	ldrb	r3, [r7, #3]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	212c      	movs	r1, #44	; 0x2c
 8003326:	fb01 f303 	mul.w	r3, r1, r3
 800332a:	4413      	add	r3, r2
 800332c:	3342      	adds	r3, #66	; 0x42
 800332e:	2200      	movs	r2, #0
 8003330:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003332:	e034      	b.n	800339e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003334:	78fb      	ldrb	r3, [r7, #3]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	212c      	movs	r1, #44	; 0x2c
 800333a:	fb01 f303 	mul.w	r3, r1, r3
 800333e:	4413      	add	r3, r2
 8003340:	3342      	adds	r3, #66	; 0x42
 8003342:	2202      	movs	r2, #2
 8003344:	701a      	strb	r2, [r3, #0]
      break;
 8003346:	e02a      	b.n	800339e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	212c      	movs	r1, #44	; 0x2c
 800334e:	fb01 f303 	mul.w	r3, r1, r3
 8003352:	4413      	add	r3, r2
 8003354:	3354      	adds	r3, #84	; 0x54
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d109      	bne.n	8003370 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800335c:	78fb      	ldrb	r3, [r7, #3]
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	212c      	movs	r1, #44	; 0x2c
 8003362:	fb01 f303 	mul.w	r3, r1, r3
 8003366:	4413      	add	r3, r2
 8003368:	3342      	adds	r3, #66	; 0x42
 800336a:	2200      	movs	r2, #0
 800336c:	701a      	strb	r2, [r3, #0]
      break;
 800336e:	e016      	b.n	800339e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	212c      	movs	r1, #44	; 0x2c
 8003376:	fb01 f303 	mul.w	r3, r1, r3
 800337a:	4413      	add	r3, r2
 800337c:	3342      	adds	r3, #66	; 0x42
 800337e:	2202      	movs	r2, #2
 8003380:	701a      	strb	r2, [r3, #0]
      break;
 8003382:	e00c      	b.n	800339e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	212c      	movs	r1, #44	; 0x2c
 800338a:	fb01 f303 	mul.w	r3, r1, r3
 800338e:	4413      	add	r3, r2
 8003390:	3342      	adds	r3, #66	; 0x42
 8003392:	2200      	movs	r2, #0
 8003394:	701a      	strb	r2, [r3, #0]
      break;
 8003396:	e002      	b.n	800339e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003398:	bf00      	nop
 800339a:	e000      	b.n	800339e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800339c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800339e:	78fb      	ldrb	r3, [r7, #3]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	212c      	movs	r1, #44	; 0x2c
 80033a4:	fb01 f303 	mul.w	r3, r1, r3
 80033a8:	4413      	add	r3, r2
 80033aa:	3344      	adds	r3, #68	; 0x44
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	8b3a      	ldrh	r2, [r7, #24]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	202c      	movs	r0, #44	; 0x2c
 80033b8:	fb00 f303 	mul.w	r3, r0, r3
 80033bc:	440b      	add	r3, r1
 80033be:	334c      	adds	r3, #76	; 0x4c
 80033c0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	212c      	movs	r1, #44	; 0x2c
 80033c8:	fb01 f303 	mul.w	r3, r1, r3
 80033cc:	4413      	add	r3, r2
 80033ce:	3360      	adds	r3, #96	; 0x60
 80033d0:	2200      	movs	r2, #0
 80033d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80033d4:	78fb      	ldrb	r3, [r7, #3]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	212c      	movs	r1, #44	; 0x2c
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	4413      	add	r3, r2
 80033e0:	3350      	adds	r3, #80	; 0x50
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	212c      	movs	r1, #44	; 0x2c
 80033ec:	fb01 f303 	mul.w	r3, r1, r3
 80033f0:	4413      	add	r3, r2
 80033f2:	3339      	adds	r3, #57	; 0x39
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80033f8:	78fb      	ldrb	r3, [r7, #3]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	212c      	movs	r1, #44	; 0x2c
 80033fe:	fb01 f303 	mul.w	r3, r1, r3
 8003402:	4413      	add	r3, r2
 8003404:	3361      	adds	r3, #97	; 0x61
 8003406:	2200      	movs	r2, #0
 8003408:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6818      	ldr	r0, [r3, #0]
 800340e:	78fb      	ldrb	r3, [r7, #3]
 8003410:	222c      	movs	r2, #44	; 0x2c
 8003412:	fb02 f303 	mul.w	r3, r2, r3
 8003416:	3338      	adds	r3, #56	; 0x38
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	18d1      	adds	r1, r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	461a      	mov	r2, r3
 8003424:	f002 ff88 	bl	8006338 <USB_HC_StartXfer>
 8003428:	4603      	mov	r3, r0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop

08003434 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f002 fcab 	bl	8005da6 <USB_GetMode>
 8003450:	4603      	mov	r3, r0
 8003452:	2b01      	cmp	r3, #1
 8003454:	f040 80f6 	bne.w	8003644 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f002 fc8f 	bl	8005d80 <USB_ReadInterrupts>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 80ec 	beq.w	8003642 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f002 fc86 	bl	8005d80 <USB_ReadInterrupts>
 8003474:	4603      	mov	r3, r0
 8003476:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800347a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800347e:	d104      	bne.n	800348a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003488:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f002 fc76 	bl	8005d80 <USB_ReadInterrupts>
 8003494:	4603      	mov	r3, r0
 8003496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800349a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800349e:	d104      	bne.n	80034aa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80034a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f002 fc66 	bl	8005d80 <USB_ReadInterrupts>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034be:	d104      	bne.n	80034ca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80034c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f002 fc56 	bl	8005d80 <USB_ReadInterrupts>
 80034d4:	4603      	mov	r3, r0
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d103      	bne.n	80034e6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2202      	movs	r2, #2
 80034e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f002 fc48 	bl	8005d80 <USB_ReadInterrupts>
 80034f0:	4603      	mov	r3, r0
 80034f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034fa:	d11c      	bne.n	8003536 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003504:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10f      	bne.n	8003536 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003516:	2110      	movs	r1, #16
 8003518:	6938      	ldr	r0, [r7, #16]
 800351a:	f002 fb57 	bl	8005bcc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800351e:	6938      	ldr	r0, [r7, #16]
 8003520:	f002 fb78 	bl	8005c14 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2101      	movs	r1, #1
 800352a:	4618      	mov	r0, r3
 800352c:	f002 fd30 	bl	8005f90 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f005 fa03 	bl	800893c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f002 fc20 	bl	8005d80 <USB_ReadInterrupts>
 8003540:	4603      	mov	r3, r0
 8003542:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003546:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800354a:	d102      	bne.n	8003552 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f001 fa03 	bl	8004958 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f002 fc12 	bl	8005d80 <USB_ReadInterrupts>
 800355c:	4603      	mov	r3, r0
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b08      	cmp	r3, #8
 8003564:	d106      	bne.n	8003574 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f005 f9cc 	bl	8008904 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2208      	movs	r2, #8
 8003572:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f002 fc01 	bl	8005d80 <USB_ReadInterrupts>
 800357e:	4603      	mov	r3, r0
 8003580:	f003 0310 	and.w	r3, r3, #16
 8003584:	2b10      	cmp	r3, #16
 8003586:	d101      	bne.n	800358c <HAL_HCD_IRQHandler+0x158>
 8003588:	2301      	movs	r3, #1
 800358a:	e000      	b.n	800358e <HAL_HCD_IRQHandler+0x15a>
 800358c:	2300      	movs	r3, #0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d012      	beq.n	80035b8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699a      	ldr	r2, [r3, #24]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0210 	bic.w	r2, r2, #16
 80035a0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f001 f906 	bl	80047b4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699a      	ldr	r2, [r3, #24]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0210 	orr.w	r2, r2, #16
 80035b6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f002 fbdf 	bl	8005d80 <USB_ReadInterrupts>
 80035c2:	4603      	mov	r3, r0
 80035c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035cc:	d13a      	bne.n	8003644 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f002 fff2 	bl	80065bc <USB_HC_ReadInterrupt>
 80035d8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80035da:	2300      	movs	r3, #0
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	e025      	b.n	800362c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d018      	beq.n	8003626 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	015a      	lsls	r2, r3, #5
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4413      	add	r3, r2
 80035fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003606:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800360a:	d106      	bne.n	800361a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	b2db      	uxtb	r3, r3
 8003610:	4619      	mov	r1, r3
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f8ab 	bl	800376e <HCD_HC_IN_IRQHandler>
 8003618:	e005      	b.n	8003626 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	b2db      	uxtb	r3, r3
 800361e:	4619      	mov	r1, r3
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 fcc6 	bl	8003fb2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	3301      	adds	r3, #1
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	429a      	cmp	r2, r3
 8003634:	d3d4      	bcc.n	80035e0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800363e:	615a      	str	r2, [r3, #20]
 8003640:	e000      	b.n	8003644 <HAL_HCD_IRQHandler+0x210>
      return;
 8003642:	bf00      	nop
    }
  }
}
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b082      	sub	sp, #8
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <HAL_HCD_Start+0x16>
 800365c:	2302      	movs	r3, #2
 800365e:	e013      	b.n	8003688 <HAL_HCD_Start+0x3e>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2101      	movs	r1, #1
 800366e:	4618      	mov	r0, r3
 8003670:	f002 fcf2 	bl	8006058 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f002 fa38 	bl	8005aee <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d101      	bne.n	80036a6 <HAL_HCD_Stop+0x16>
 80036a2:	2302      	movs	r3, #2
 80036a4:	e00d      	b.n	80036c2 <HAL_HCD_Stop+0x32>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f003 f8ec 	bl	8006890 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b082      	sub	sp, #8
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f002 fc94 	bl	8006004 <USB_ResetPort>
 80036dc:	4603      	mov	r3, r0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	460b      	mov	r3, r1
 80036f0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80036f2:	78fb      	ldrb	r3, [r7, #3]
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	212c      	movs	r1, #44	; 0x2c
 80036f8:	fb01 f303 	mul.w	r3, r1, r3
 80036fc:	4413      	add	r3, r2
 80036fe:	3360      	adds	r3, #96	; 0x60
 8003700:	781b      	ldrb	r3, [r3, #0]
}
 8003702:	4618      	mov	r0, r3
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	460b      	mov	r3, r1
 8003718:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800371a:	78fb      	ldrb	r3, [r7, #3]
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	212c      	movs	r1, #44	; 0x2c
 8003720:	fb01 f303 	mul.w	r3, r1, r3
 8003724:	4413      	add	r3, r2
 8003726:	3350      	adds	r3, #80	; 0x50
 8003728:	681b      	ldr	r3, [r3, #0]
}
 800372a:	4618      	mov	r0, r3
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b082      	sub	sp, #8
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f002 fcd8 	bl	80060f8 <USB_GetCurrentFrame>
 8003748:	4603      	mov	r3, r0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b082      	sub	sp, #8
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f002 fcb3 	bl	80060ca <USB_GetHostSpeed>
 8003764:	4603      	mov	r3, r0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b086      	sub	sp, #24
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	460b      	mov	r3, r1
 8003778:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003784:	78fb      	ldrb	r3, [r7, #3]
 8003786:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4413      	add	r3, r2
 8003790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	2b04      	cmp	r3, #4
 800379c:	d119      	bne.n	80037d2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	015a      	lsls	r2, r3, #5
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	4413      	add	r3, r2
 80037a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037aa:	461a      	mov	r2, r3
 80037ac:	2304      	movs	r3, #4
 80037ae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	0151      	lsls	r1, r2, #5
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	440a      	add	r2, r1
 80037c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037ca:	f043 0302 	orr.w	r3, r3, #2
 80037ce:	60d3      	str	r3, [r2, #12]
 80037d0:	e101      	b.n	80039d6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	015a      	lsls	r2, r3, #5
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	4413      	add	r3, r2
 80037da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037e8:	d12b      	bne.n	8003842 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f6:	461a      	mov	r2, r3
 80037f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	212c      	movs	r1, #44	; 0x2c
 8003804:	fb01 f303 	mul.w	r3, r1, r3
 8003808:	4413      	add	r3, r2
 800380a:	3361      	adds	r3, #97	; 0x61
 800380c:	2207      	movs	r2, #7
 800380e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	4413      	add	r3, r2
 8003818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	0151      	lsls	r1, r2, #5
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	440a      	add	r2, r1
 8003826:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800382a:	f043 0302 	orr.w	r3, r3, #2
 800382e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	4611      	mov	r1, r2
 800383a:	4618      	mov	r0, r3
 800383c:	f002 fecf 	bl	80065de <USB_HC_Halt>
 8003840:	e0c9      	b.n	80039d6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	015a      	lsls	r2, r3, #5
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	4413      	add	r3, r2
 800384a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 0320 	and.w	r3, r3, #32
 8003854:	2b20      	cmp	r3, #32
 8003856:	d109      	bne.n	800386c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	4413      	add	r3, r2
 8003860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003864:	461a      	mov	r2, r3
 8003866:	2320      	movs	r3, #32
 8003868:	6093      	str	r3, [r2, #8]
 800386a:	e0b4      	b.n	80039d6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	4413      	add	r3, r2
 8003874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b08      	cmp	r3, #8
 8003880:	d133      	bne.n	80038ea <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	4413      	add	r3, r2
 800388a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	0151      	lsls	r1, r2, #5
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	440a      	add	r2, r1
 8003898:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800389c:	f043 0302 	orr.w	r3, r3, #2
 80038a0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	212c      	movs	r1, #44	; 0x2c
 80038a8:	fb01 f303 	mul.w	r3, r1, r3
 80038ac:	4413      	add	r3, r2
 80038ae:	3361      	adds	r3, #97	; 0x61
 80038b0:	2205      	movs	r2, #5
 80038b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	015a      	lsls	r2, r3, #5
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c0:	461a      	mov	r2, r3
 80038c2:	2310      	movs	r3, #16
 80038c4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d2:	461a      	mov	r2, r3
 80038d4:	2308      	movs	r3, #8
 80038d6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	4611      	mov	r1, r2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f002 fe7b 	bl	80065de <USB_HC_Halt>
 80038e8:	e075      	b.n	80039d6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	015a      	lsls	r2, r3, #5
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	4413      	add	r3, r2
 80038f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003900:	d134      	bne.n	800396c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	015a      	lsls	r2, r3, #5
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	4413      	add	r3, r2
 800390a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	0151      	lsls	r1, r2, #5
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	440a      	add	r2, r1
 8003918:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800391c:	f043 0302 	orr.w	r3, r3, #2
 8003920:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	212c      	movs	r1, #44	; 0x2c
 8003928:	fb01 f303 	mul.w	r3, r1, r3
 800392c:	4413      	add	r3, r2
 800392e:	3361      	adds	r3, #97	; 0x61
 8003930:	2208      	movs	r2, #8
 8003932:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	4413      	add	r3, r2
 800393c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003940:	461a      	mov	r2, r3
 8003942:	2310      	movs	r3, #16
 8003944:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	4413      	add	r3, r2
 800394e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003952:	461a      	mov	r2, r3
 8003954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003958:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	4611      	mov	r1, r2
 8003964:	4618      	mov	r0, r3
 8003966:	f002 fe3a 	bl	80065de <USB_HC_Halt>
 800396a:	e034      	b.n	80039d6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	4413      	add	r3, r2
 8003974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397e:	2b80      	cmp	r3, #128	; 0x80
 8003980:	d129      	bne.n	80039d6 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	015a      	lsls	r2, r3, #5
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	4413      	add	r3, r2
 800398a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	0151      	lsls	r1, r2, #5
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	440a      	add	r2, r1
 8003998:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800399c:	f043 0302 	orr.w	r3, r3, #2
 80039a0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	212c      	movs	r1, #44	; 0x2c
 80039a8:	fb01 f303 	mul.w	r3, r1, r3
 80039ac:	4413      	add	r3, r2
 80039ae:	3361      	adds	r3, #97	; 0x61
 80039b0:	2206      	movs	r2, #6
 80039b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	4611      	mov	r1, r2
 80039be:	4618      	mov	r0, r3
 80039c0:	f002 fe0d 	bl	80065de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	015a      	lsls	r2, r3, #5
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d0:	461a      	mov	r2, r3
 80039d2:	2380      	movs	r3, #128	; 0x80
 80039d4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	015a      	lsls	r2, r3, #5
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	4413      	add	r3, r2
 80039de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ec:	d122      	bne.n	8003a34 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	0151      	lsls	r1, r2, #5
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	440a      	add	r2, r1
 8003a04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a08:	f043 0302 	orr.w	r3, r3, #2
 8003a0c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	4611      	mov	r1, r2
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f002 fde0 	bl	80065de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a30:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003a32:	e2ba      	b.n	8003faa <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	f040 811b 	bne.w	8003c82 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d019      	beq.n	8003a88 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	212c      	movs	r1, #44	; 0x2c
 8003a5a:	fb01 f303 	mul.w	r3, r1, r3
 8003a5e:	4413      	add	r3, r2
 8003a60:	3348      	adds	r3, #72	; 0x48
 8003a62:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	0159      	lsls	r1, r3, #5
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	440b      	add	r3, r1
 8003a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003a76:	1ad2      	subs	r2, r2, r3
 8003a78:	6879      	ldr	r1, [r7, #4]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	202c      	movs	r0, #44	; 0x2c
 8003a7e:	fb00 f303 	mul.w	r3, r0, r3
 8003a82:	440b      	add	r3, r1
 8003a84:	3350      	adds	r3, #80	; 0x50
 8003a86:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	212c      	movs	r1, #44	; 0x2c
 8003a8e:	fb01 f303 	mul.w	r3, r1, r3
 8003a92:	4413      	add	r3, r2
 8003a94:	3361      	adds	r3, #97	; 0x61
 8003a96:	2201      	movs	r2, #1
 8003a98:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	212c      	movs	r1, #44	; 0x2c
 8003aa0:	fb01 f303 	mul.w	r3, r1, r3
 8003aa4:	4413      	add	r3, r2
 8003aa6:	335c      	adds	r3, #92	; 0x5c
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab8:	461a      	mov	r2, r3
 8003aba:	2301      	movs	r3, #1
 8003abc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	212c      	movs	r1, #44	; 0x2c
 8003ac4:	fb01 f303 	mul.w	r3, r1, r3
 8003ac8:	4413      	add	r3, r2
 8003aca:	333f      	adds	r3, #63	; 0x3f
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d009      	beq.n	8003ae6 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	212c      	movs	r1, #44	; 0x2c
 8003ad8:	fb01 f303 	mul.w	r3, r1, r3
 8003adc:	4413      	add	r3, r2
 8003ade:	333f      	adds	r3, #63	; 0x3f
 8003ae0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d121      	bne.n	8003b2a <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	0151      	lsls	r1, r2, #5
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	440a      	add	r2, r1
 8003afc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b00:	f043 0302 	orr.w	r3, r3, #2
 8003b04:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	4611      	mov	r1, r2
 8003b10:	4618      	mov	r0, r3
 8003b12:	f002 fd64 	bl	80065de <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	015a      	lsls	r2, r3, #5
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b22:	461a      	mov	r2, r3
 8003b24:	2310      	movs	r3, #16
 8003b26:	6093      	str	r3, [r2, #8]
 8003b28:	e066      	b.n	8003bf8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	212c      	movs	r1, #44	; 0x2c
 8003b30:	fb01 f303 	mul.w	r3, r1, r3
 8003b34:	4413      	add	r3, r2
 8003b36:	333f      	adds	r3, #63	; 0x3f
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	2b03      	cmp	r3, #3
 8003b3c:	d127      	bne.n	8003b8e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	015a      	lsls	r2, r3, #5
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	4413      	add	r3, r2
 8003b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	0151      	lsls	r1, r2, #5
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	440a      	add	r2, r1
 8003b54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b5c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	212c      	movs	r1, #44	; 0x2c
 8003b64:	fb01 f303 	mul.w	r3, r1, r3
 8003b68:	4413      	add	r3, r2
 8003b6a:	3360      	adds	r3, #96	; 0x60
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	b2d9      	uxtb	r1, r3
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	202c      	movs	r0, #44	; 0x2c
 8003b7a:	fb00 f303 	mul.w	r3, r0, r3
 8003b7e:	4413      	add	r3, r2
 8003b80:	3360      	adds	r3, #96	; 0x60
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	461a      	mov	r2, r3
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f004 fee6 	bl	8008958 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003b8c:	e034      	b.n	8003bf8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	212c      	movs	r1, #44	; 0x2c
 8003b94:	fb01 f303 	mul.w	r3, r1, r3
 8003b98:	4413      	add	r3, r2
 8003b9a:	333f      	adds	r3, #63	; 0x3f
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d12a      	bne.n	8003bf8 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	212c      	movs	r1, #44	; 0x2c
 8003ba8:	fb01 f303 	mul.w	r3, r1, r3
 8003bac:	4413      	add	r3, r2
 8003bae:	3360      	adds	r3, #96	; 0x60
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	212c      	movs	r1, #44	; 0x2c
 8003bba:	fb01 f303 	mul.w	r3, r1, r3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	3354      	adds	r3, #84	; 0x54
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	f083 0301 	eor.w	r3, r3, #1
 8003bc8:	b2d8      	uxtb	r0, r3
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	212c      	movs	r1, #44	; 0x2c
 8003bd0:	fb01 f303 	mul.w	r3, r1, r3
 8003bd4:	4413      	add	r3, r2
 8003bd6:	3354      	adds	r3, #84	; 0x54
 8003bd8:	4602      	mov	r2, r0
 8003bda:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	b2d9      	uxtb	r1, r3
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	202c      	movs	r0, #44	; 0x2c
 8003be6:	fb00 f303 	mul.w	r3, r0, r3
 8003bea:	4413      	add	r3, r2
 8003bec:	3360      	adds	r3, #96	; 0x60
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f004 feb0 	bl	8008958 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d12b      	bne.n	8003c58 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	212c      	movs	r1, #44	; 0x2c
 8003c06:	fb01 f303 	mul.w	r3, r1, r3
 8003c0a:	4413      	add	r3, r2
 8003c0c:	3348      	adds	r3, #72	; 0x48
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	202c      	movs	r0, #44	; 0x2c
 8003c16:	fb00 f202 	mul.w	r2, r0, r2
 8003c1a:	440a      	add	r2, r1
 8003c1c:	3240      	adds	r2, #64	; 0x40
 8003c1e:	8812      	ldrh	r2, [r2, #0]
 8003c20:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 81be 	beq.w	8003faa <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	212c      	movs	r1, #44	; 0x2c
 8003c34:	fb01 f303 	mul.w	r3, r1, r3
 8003c38:	4413      	add	r3, r2
 8003c3a:	3354      	adds	r3, #84	; 0x54
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	f083 0301 	eor.w	r3, r3, #1
 8003c42:	b2d8      	uxtb	r0, r3
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	212c      	movs	r1, #44	; 0x2c
 8003c4a:	fb01 f303 	mul.w	r3, r1, r3
 8003c4e:	4413      	add	r3, r2
 8003c50:	3354      	adds	r3, #84	; 0x54
 8003c52:	4602      	mov	r2, r0
 8003c54:	701a      	strb	r2, [r3, #0]
}
 8003c56:	e1a8      	b.n	8003faa <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	212c      	movs	r1, #44	; 0x2c
 8003c5e:	fb01 f303 	mul.w	r3, r1, r3
 8003c62:	4413      	add	r3, r2
 8003c64:	3354      	adds	r3, #84	; 0x54
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	f083 0301 	eor.w	r3, r3, #1
 8003c6c:	b2d8      	uxtb	r0, r3
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	212c      	movs	r1, #44	; 0x2c
 8003c74:	fb01 f303 	mul.w	r3, r1, r3
 8003c78:	4413      	add	r3, r2
 8003c7a:	3354      	adds	r3, #84	; 0x54
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	701a      	strb	r2, [r3, #0]
}
 8003c80:	e193      	b.n	8003faa <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	015a      	lsls	r2, r3, #5
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	f040 8106 	bne.w	8003ea6 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	0151      	lsls	r1, r2, #5
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	440a      	add	r2, r1
 8003cb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cb4:	f023 0302 	bic.w	r3, r3, #2
 8003cb8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	212c      	movs	r1, #44	; 0x2c
 8003cc0:	fb01 f303 	mul.w	r3, r1, r3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	3361      	adds	r3, #97	; 0x61
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d109      	bne.n	8003ce2 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	212c      	movs	r1, #44	; 0x2c
 8003cd4:	fb01 f303 	mul.w	r3, r1, r3
 8003cd8:	4413      	add	r3, r2
 8003cda:	3360      	adds	r3, #96	; 0x60
 8003cdc:	2201      	movs	r2, #1
 8003cde:	701a      	strb	r2, [r3, #0]
 8003ce0:	e0c9      	b.n	8003e76 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	212c      	movs	r1, #44	; 0x2c
 8003ce8:	fb01 f303 	mul.w	r3, r1, r3
 8003cec:	4413      	add	r3, r2
 8003cee:	3361      	adds	r3, #97	; 0x61
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	2b05      	cmp	r3, #5
 8003cf4:	d109      	bne.n	8003d0a <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	212c      	movs	r1, #44	; 0x2c
 8003cfc:	fb01 f303 	mul.w	r3, r1, r3
 8003d00:	4413      	add	r3, r2
 8003d02:	3360      	adds	r3, #96	; 0x60
 8003d04:	2205      	movs	r2, #5
 8003d06:	701a      	strb	r2, [r3, #0]
 8003d08:	e0b5      	b.n	8003e76 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	212c      	movs	r1, #44	; 0x2c
 8003d10:	fb01 f303 	mul.w	r3, r1, r3
 8003d14:	4413      	add	r3, r2
 8003d16:	3361      	adds	r3, #97	; 0x61
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	2b06      	cmp	r3, #6
 8003d1c:	d009      	beq.n	8003d32 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	212c      	movs	r1, #44	; 0x2c
 8003d24:	fb01 f303 	mul.w	r3, r1, r3
 8003d28:	4413      	add	r3, r2
 8003d2a:	3361      	adds	r3, #97	; 0x61
 8003d2c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d2e:	2b08      	cmp	r3, #8
 8003d30:	d150      	bne.n	8003dd4 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	212c      	movs	r1, #44	; 0x2c
 8003d38:	fb01 f303 	mul.w	r3, r1, r3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	335c      	adds	r3, #92	; 0x5c
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	202c      	movs	r0, #44	; 0x2c
 8003d4a:	fb00 f303 	mul.w	r3, r0, r3
 8003d4e:	440b      	add	r3, r1
 8003d50:	335c      	adds	r3, #92	; 0x5c
 8003d52:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	212c      	movs	r1, #44	; 0x2c
 8003d5a:	fb01 f303 	mul.w	r3, r1, r3
 8003d5e:	4413      	add	r3, r2
 8003d60:	335c      	adds	r3, #92	; 0x5c
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d912      	bls.n	8003d8e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	212c      	movs	r1, #44	; 0x2c
 8003d6e:	fb01 f303 	mul.w	r3, r1, r3
 8003d72:	4413      	add	r3, r2
 8003d74:	335c      	adds	r3, #92	; 0x5c
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	212c      	movs	r1, #44	; 0x2c
 8003d80:	fb01 f303 	mul.w	r3, r1, r3
 8003d84:	4413      	add	r3, r2
 8003d86:	3360      	adds	r3, #96	; 0x60
 8003d88:	2204      	movs	r2, #4
 8003d8a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d8c:	e073      	b.n	8003e76 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	212c      	movs	r1, #44	; 0x2c
 8003d94:	fb01 f303 	mul.w	r3, r1, r3
 8003d98:	4413      	add	r3, r2
 8003d9a:	3360      	adds	r3, #96	; 0x60
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003db6:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003dbe:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dcc:	461a      	mov	r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003dd2:	e050      	b.n	8003e76 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	212c      	movs	r1, #44	; 0x2c
 8003dda:	fb01 f303 	mul.w	r3, r1, r3
 8003dde:	4413      	add	r3, r2
 8003de0:	3361      	adds	r3, #97	; 0x61
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	2b03      	cmp	r3, #3
 8003de6:	d122      	bne.n	8003e2e <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	212c      	movs	r1, #44	; 0x2c
 8003dee:	fb01 f303 	mul.w	r3, r1, r3
 8003df2:	4413      	add	r3, r2
 8003df4:	3360      	adds	r3, #96	; 0x60
 8003df6:	2202      	movs	r2, #2
 8003df8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	015a      	lsls	r2, r3, #5
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	4413      	add	r3, r2
 8003e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e10:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e18:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	015a      	lsls	r2, r3, #5
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e26:	461a      	mov	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	6013      	str	r3, [r2, #0]
 8003e2c:	e023      	b.n	8003e76 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	212c      	movs	r1, #44	; 0x2c
 8003e34:	fb01 f303 	mul.w	r3, r1, r3
 8003e38:	4413      	add	r3, r2
 8003e3a:	3361      	adds	r3, #97	; 0x61
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	2b07      	cmp	r3, #7
 8003e40:	d119      	bne.n	8003e76 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	212c      	movs	r1, #44	; 0x2c
 8003e48:	fb01 f303 	mul.w	r3, r1, r3
 8003e4c:	4413      	add	r3, r2
 8003e4e:	335c      	adds	r3, #92	; 0x5c
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	1c5a      	adds	r2, r3, #1
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	202c      	movs	r0, #44	; 0x2c
 8003e5a:	fb00 f303 	mul.w	r3, r0, r3
 8003e5e:	440b      	add	r3, r1
 8003e60:	335c      	adds	r3, #92	; 0x5c
 8003e62:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	212c      	movs	r1, #44	; 0x2c
 8003e6a:	fb01 f303 	mul.w	r3, r1, r3
 8003e6e:	4413      	add	r3, r2
 8003e70:	3360      	adds	r3, #96	; 0x60
 8003e72:	2204      	movs	r2, #4
 8003e74:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e82:	461a      	mov	r2, r3
 8003e84:	2302      	movs	r3, #2
 8003e86:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	b2d9      	uxtb	r1, r3
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	202c      	movs	r0, #44	; 0x2c
 8003e92:	fb00 f303 	mul.w	r3, r0, r3
 8003e96:	4413      	add	r3, r2
 8003e98:	3360      	adds	r3, #96	; 0x60
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f004 fd5a 	bl	8008958 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003ea4:	e081      	b.n	8003faa <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 0310 	and.w	r3, r3, #16
 8003eb8:	2b10      	cmp	r3, #16
 8003eba:	d176      	bne.n	8003faa <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	212c      	movs	r1, #44	; 0x2c
 8003ec2:	fb01 f303 	mul.w	r3, r1, r3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	333f      	adds	r3, #63	; 0x3f
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	d121      	bne.n	8003f14 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	212c      	movs	r1, #44	; 0x2c
 8003ed6:	fb01 f303 	mul.w	r3, r1, r3
 8003eda:	4413      	add	r3, r2
 8003edc:	335c      	adds	r3, #92	; 0x5c
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	0151      	lsls	r1, r2, #5
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	440a      	add	r2, r1
 8003ef8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003efc:	f043 0302 	orr.w	r3, r3, #2
 8003f00:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f002 fb66 	bl	80065de <USB_HC_Halt>
 8003f12:	e041      	b.n	8003f98 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	212c      	movs	r1, #44	; 0x2c
 8003f1a:	fb01 f303 	mul.w	r3, r1, r3
 8003f1e:	4413      	add	r3, r2
 8003f20:	333f      	adds	r3, #63	; 0x3f
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d009      	beq.n	8003f3c <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	212c      	movs	r1, #44	; 0x2c
 8003f2e:	fb01 f303 	mul.w	r3, r1, r3
 8003f32:	4413      	add	r3, r2
 8003f34:	333f      	adds	r3, #63	; 0x3f
 8003f36:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d12d      	bne.n	8003f98 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	212c      	movs	r1, #44	; 0x2c
 8003f42:	fb01 f303 	mul.w	r3, r1, r3
 8003f46:	4413      	add	r3, r2
 8003f48:	335c      	adds	r3, #92	; 0x5c
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d120      	bne.n	8003f98 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	212c      	movs	r1, #44	; 0x2c
 8003f5c:	fb01 f303 	mul.w	r3, r1, r3
 8003f60:	4413      	add	r3, r2
 8003f62:	3361      	adds	r3, #97	; 0x61
 8003f64:	2203      	movs	r2, #3
 8003f66:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	015a      	lsls	r2, r3, #5
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	4413      	add	r3, r2
 8003f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	0151      	lsls	r1, r2, #5
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	440a      	add	r2, r1
 8003f7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f82:	f043 0302 	orr.w	r3, r3, #2
 8003f86:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	4611      	mov	r1, r2
 8003f92:	4618      	mov	r0, r3
 8003f94:	f002 fb23 	bl	80065de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	2310      	movs	r3, #16
 8003fa8:	6093      	str	r3, [r2, #8]
}
 8003faa:	bf00      	nop
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b088      	sub	sp, #32
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	460b      	mov	r3, r1
 8003fbc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003fc8:	78fb      	ldrb	r3, [r7, #3]
 8003fca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	015a      	lsls	r2, r3, #5
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 0304 	and.w	r3, r3, #4
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d119      	bne.n	8004016 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	015a      	lsls	r2, r3, #5
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fee:	461a      	mov	r2, r3
 8003ff0:	2304      	movs	r3, #4
 8003ff2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	0151      	lsls	r1, r2, #5
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	440a      	add	r2, r1
 800400a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800400e:	f043 0302 	orr.w	r3, r3, #2
 8004012:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004014:	e3ca      	b.n	80047ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	4413      	add	r3, r2
 800401e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f003 0320 	and.w	r3, r3, #32
 8004028:	2b20      	cmp	r3, #32
 800402a:	d13e      	bne.n	80040aa <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	015a      	lsls	r2, r3, #5
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	4413      	add	r3, r2
 8004034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004038:	461a      	mov	r2, r3
 800403a:	2320      	movs	r3, #32
 800403c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	212c      	movs	r1, #44	; 0x2c
 8004044:	fb01 f303 	mul.w	r3, r1, r3
 8004048:	4413      	add	r3, r2
 800404a:	333d      	adds	r3, #61	; 0x3d
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	2b01      	cmp	r3, #1
 8004050:	f040 83ac 	bne.w	80047ac <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	212c      	movs	r1, #44	; 0x2c
 800405a:	fb01 f303 	mul.w	r3, r1, r3
 800405e:	4413      	add	r3, r2
 8004060:	333d      	adds	r3, #61	; 0x3d
 8004062:	2200      	movs	r2, #0
 8004064:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	212c      	movs	r1, #44	; 0x2c
 800406c:	fb01 f303 	mul.w	r3, r1, r3
 8004070:	4413      	add	r3, r2
 8004072:	3360      	adds	r3, #96	; 0x60
 8004074:	2202      	movs	r2, #2
 8004076:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	4413      	add	r3, r2
 8004080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	0151      	lsls	r1, r2, #5
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	440a      	add	r2, r1
 800408e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004092:	f043 0302 	orr.w	r3, r3, #2
 8004096:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	4611      	mov	r1, r2
 80040a2:	4618      	mov	r0, r3
 80040a4:	f002 fa9b 	bl	80065de <USB_HC_Halt>
}
 80040a8:	e380      	b.n	80047ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040c0:	d122      	bne.n	8004108 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	015a      	lsls	r2, r3, #5
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	0151      	lsls	r1, r2, #5
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	440a      	add	r2, r1
 80040d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040dc:	f043 0302 	orr.w	r3, r3, #2
 80040e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	b2d2      	uxtb	r2, r2
 80040ea:	4611      	mov	r1, r2
 80040ec:	4618      	mov	r0, r3
 80040ee:	f002 fa76 	bl	80065de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	015a      	lsls	r2, r3, #5
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	4413      	add	r3, r2
 80040fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040fe:	461a      	mov	r2, r3
 8004100:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004104:	6093      	str	r3, [r2, #8]
}
 8004106:	e351      	b.n	80047ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	4413      	add	r3, r2
 8004110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b01      	cmp	r3, #1
 800411c:	d150      	bne.n	80041c0 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	212c      	movs	r1, #44	; 0x2c
 8004124:	fb01 f303 	mul.w	r3, r1, r3
 8004128:	4413      	add	r3, r2
 800412a:	335c      	adds	r3, #92	; 0x5c
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	4413      	add	r3, r2
 8004138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004142:	2b40      	cmp	r3, #64	; 0x40
 8004144:	d111      	bne.n	800416a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	212c      	movs	r1, #44	; 0x2c
 800414c:	fb01 f303 	mul.w	r3, r1, r3
 8004150:	4413      	add	r3, r2
 8004152:	333d      	adds	r3, #61	; 0x3d
 8004154:	2201      	movs	r2, #1
 8004156:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	4413      	add	r3, r2
 8004160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004164:	461a      	mov	r2, r3
 8004166:	2340      	movs	r3, #64	; 0x40
 8004168:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	4413      	add	r3, r2
 8004172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	0151      	lsls	r1, r2, #5
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	440a      	add	r2, r1
 8004180:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004184:	f043 0302 	orr.w	r3, r3, #2
 8004188:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	4611      	mov	r1, r2
 8004194:	4618      	mov	r0, r3
 8004196:	f002 fa22 	bl	80065de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a6:	461a      	mov	r2, r3
 80041a8:	2301      	movs	r3, #1
 80041aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	212c      	movs	r1, #44	; 0x2c
 80041b2:	fb01 f303 	mul.w	r3, r1, r3
 80041b6:	4413      	add	r3, r2
 80041b8:	3361      	adds	r3, #97	; 0x61
 80041ba:	2201      	movs	r2, #1
 80041bc:	701a      	strb	r2, [r3, #0]
}
 80041be:	e2f5      	b.n	80047ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d2:	2b40      	cmp	r3, #64	; 0x40
 80041d4:	d13c      	bne.n	8004250 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	212c      	movs	r1, #44	; 0x2c
 80041dc:	fb01 f303 	mul.w	r3, r1, r3
 80041e0:	4413      	add	r3, r2
 80041e2:	3361      	adds	r3, #97	; 0x61
 80041e4:	2204      	movs	r2, #4
 80041e6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	212c      	movs	r1, #44	; 0x2c
 80041ee:	fb01 f303 	mul.w	r3, r1, r3
 80041f2:	4413      	add	r3, r2
 80041f4:	333d      	adds	r3, #61	; 0x3d
 80041f6:	2201      	movs	r2, #1
 80041f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	212c      	movs	r1, #44	; 0x2c
 8004200:	fb01 f303 	mul.w	r3, r1, r3
 8004204:	4413      	add	r3, r2
 8004206:	335c      	adds	r3, #92	; 0x5c
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	4413      	add	r3, r2
 8004214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	0151      	lsls	r1, r2, #5
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	440a      	add	r2, r1
 8004222:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004226:	f043 0302 	orr.w	r3, r3, #2
 800422a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	4611      	mov	r1, r2
 8004236:	4618      	mov	r0, r3
 8004238:	f002 f9d1 	bl	80065de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	4413      	add	r3, r2
 8004244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004248:	461a      	mov	r2, r3
 800424a:	2340      	movs	r3, #64	; 0x40
 800424c:	6093      	str	r3, [r2, #8]
}
 800424e:	e2ad      	b.n	80047ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	015a      	lsls	r2, r3, #5
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	4413      	add	r3, r2
 8004258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b08      	cmp	r3, #8
 8004264:	d12a      	bne.n	80042bc <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	4413      	add	r3, r2
 800426e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004272:	461a      	mov	r2, r3
 8004274:	2308      	movs	r3, #8
 8004276:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	4413      	add	r3, r2
 8004280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	0151      	lsls	r1, r2, #5
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	440a      	add	r2, r1
 800428e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004292:	f043 0302 	orr.w	r3, r3, #2
 8004296:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	4611      	mov	r1, r2
 80042a2:	4618      	mov	r0, r3
 80042a4:	f002 f99b 	bl	80065de <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	212c      	movs	r1, #44	; 0x2c
 80042ae:	fb01 f303 	mul.w	r3, r1, r3
 80042b2:	4413      	add	r3, r2
 80042b4:	3361      	adds	r3, #97	; 0x61
 80042b6:	2205      	movs	r2, #5
 80042b8:	701a      	strb	r2, [r3, #0]
}
 80042ba:	e277      	b.n	80047ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 0310 	and.w	r3, r3, #16
 80042ce:	2b10      	cmp	r3, #16
 80042d0:	d150      	bne.n	8004374 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	212c      	movs	r1, #44	; 0x2c
 80042d8:	fb01 f303 	mul.w	r3, r1, r3
 80042dc:	4413      	add	r3, r2
 80042de:	335c      	adds	r3, #92	; 0x5c
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	212c      	movs	r1, #44	; 0x2c
 80042ea:	fb01 f303 	mul.w	r3, r1, r3
 80042ee:	4413      	add	r3, r2
 80042f0:	3361      	adds	r3, #97	; 0x61
 80042f2:	2203      	movs	r2, #3
 80042f4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	212c      	movs	r1, #44	; 0x2c
 80042fc:	fb01 f303 	mul.w	r3, r1, r3
 8004300:	4413      	add	r3, r2
 8004302:	333d      	adds	r3, #61	; 0x3d
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d112      	bne.n	8004330 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	212c      	movs	r1, #44	; 0x2c
 8004310:	fb01 f303 	mul.w	r3, r1, r3
 8004314:	4413      	add	r3, r2
 8004316:	333c      	adds	r3, #60	; 0x3c
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d108      	bne.n	8004330 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	212c      	movs	r1, #44	; 0x2c
 8004324:	fb01 f303 	mul.w	r3, r1, r3
 8004328:	4413      	add	r3, r2
 800432a:	333d      	adds	r3, #61	; 0x3d
 800432c:	2201      	movs	r2, #1
 800432e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	4413      	add	r3, r2
 8004338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	0151      	lsls	r1, r2, #5
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	440a      	add	r2, r1
 8004346:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800434a:	f043 0302 	orr.w	r3, r3, #2
 800434e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	4611      	mov	r1, r2
 800435a:	4618      	mov	r0, r3
 800435c:	f002 f93f 	bl	80065de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	4413      	add	r3, r2
 8004368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800436c:	461a      	mov	r2, r3
 800436e:	2310      	movs	r3, #16
 8004370:	6093      	str	r3, [r2, #8]
}
 8004372:	e21b      	b.n	80047ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	4413      	add	r3, r2
 800437c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004386:	2b80      	cmp	r3, #128	; 0x80
 8004388:	d174      	bne.n	8004474 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d121      	bne.n	80043d6 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	212c      	movs	r1, #44	; 0x2c
 8004398:	fb01 f303 	mul.w	r3, r1, r3
 800439c:	4413      	add	r3, r2
 800439e:	3361      	adds	r3, #97	; 0x61
 80043a0:	2206      	movs	r2, #6
 80043a2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	0151      	lsls	r1, r2, #5
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	440a      	add	r2, r1
 80043ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043be:	f043 0302 	orr.w	r3, r3, #2
 80043c2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	4611      	mov	r1, r2
 80043ce:	4618      	mov	r0, r3
 80043d0:	f002 f905 	bl	80065de <USB_HC_Halt>
 80043d4:	e044      	b.n	8004460 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	212c      	movs	r1, #44	; 0x2c
 80043dc:	fb01 f303 	mul.w	r3, r1, r3
 80043e0:	4413      	add	r3, r2
 80043e2:	335c      	adds	r3, #92	; 0x5c
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	6879      	ldr	r1, [r7, #4]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	202c      	movs	r0, #44	; 0x2c
 80043ee:	fb00 f303 	mul.w	r3, r0, r3
 80043f2:	440b      	add	r3, r1
 80043f4:	335c      	adds	r3, #92	; 0x5c
 80043f6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	212c      	movs	r1, #44	; 0x2c
 80043fe:	fb01 f303 	mul.w	r3, r1, r3
 8004402:	4413      	add	r3, r2
 8004404:	335c      	adds	r3, #92	; 0x5c
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b02      	cmp	r3, #2
 800440a:	d920      	bls.n	800444e <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	212c      	movs	r1, #44	; 0x2c
 8004412:	fb01 f303 	mul.w	r3, r1, r3
 8004416:	4413      	add	r3, r2
 8004418:	335c      	adds	r3, #92	; 0x5c
 800441a:	2200      	movs	r2, #0
 800441c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	212c      	movs	r1, #44	; 0x2c
 8004424:	fb01 f303 	mul.w	r3, r1, r3
 8004428:	4413      	add	r3, r2
 800442a:	3360      	adds	r3, #96	; 0x60
 800442c:	2204      	movs	r2, #4
 800442e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	b2d9      	uxtb	r1, r3
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	202c      	movs	r0, #44	; 0x2c
 800443a:	fb00 f303 	mul.w	r3, r0, r3
 800443e:	4413      	add	r3, r2
 8004440:	3360      	adds	r3, #96	; 0x60
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	461a      	mov	r2, r3
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f004 fa86 	bl	8008958 <HAL_HCD_HC_NotifyURBChange_Callback>
 800444c:	e008      	b.n	8004460 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	212c      	movs	r1, #44	; 0x2c
 8004454:	fb01 f303 	mul.w	r3, r1, r3
 8004458:	4413      	add	r3, r2
 800445a:	3360      	adds	r3, #96	; 0x60
 800445c:	2202      	movs	r2, #2
 800445e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	4413      	add	r3, r2
 8004468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800446c:	461a      	mov	r2, r3
 800446e:	2380      	movs	r3, #128	; 0x80
 8004470:	6093      	str	r3, [r2, #8]
}
 8004472:	e19b      	b.n	80047ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	4413      	add	r3, r2
 800447c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800448a:	d134      	bne.n	80044f6 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	4413      	add	r3, r2
 8004494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	0151      	lsls	r1, r2, #5
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	440a      	add	r2, r1
 80044a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044a6:	f043 0302 	orr.w	r3, r3, #2
 80044aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	b2d2      	uxtb	r2, r2
 80044b4:	4611      	mov	r1, r2
 80044b6:	4618      	mov	r0, r3
 80044b8:	f002 f891 	bl	80065de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c8:	461a      	mov	r2, r3
 80044ca:	2310      	movs	r3, #16
 80044cc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	015a      	lsls	r2, r3, #5
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044da:	461a      	mov	r2, r3
 80044dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	212c      	movs	r1, #44	; 0x2c
 80044e8:	fb01 f303 	mul.w	r3, r1, r3
 80044ec:	4413      	add	r3, r2
 80044ee:	3361      	adds	r3, #97	; 0x61
 80044f0:	2208      	movs	r2, #8
 80044f2:	701a      	strb	r2, [r3, #0]
}
 80044f4:	e15a      	b.n	80047ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	015a      	lsls	r2, r3, #5
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	4413      	add	r3, r2
 80044fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b02      	cmp	r3, #2
 800450a:	f040 814f 	bne.w	80047ac <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	4413      	add	r3, r2
 8004516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	0151      	lsls	r1, r2, #5
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	440a      	add	r2, r1
 8004524:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004528:	f023 0302 	bic.w	r3, r3, #2
 800452c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	212c      	movs	r1, #44	; 0x2c
 8004534:	fb01 f303 	mul.w	r3, r1, r3
 8004538:	4413      	add	r3, r2
 800453a:	3361      	adds	r3, #97	; 0x61
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d17d      	bne.n	800463e <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	212c      	movs	r1, #44	; 0x2c
 8004548:	fb01 f303 	mul.w	r3, r1, r3
 800454c:	4413      	add	r3, r2
 800454e:	3360      	adds	r3, #96	; 0x60
 8004550:	2201      	movs	r2, #1
 8004552:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	212c      	movs	r1, #44	; 0x2c
 800455a:	fb01 f303 	mul.w	r3, r1, r3
 800455e:	4413      	add	r3, r2
 8004560:	333f      	adds	r3, #63	; 0x3f
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b02      	cmp	r3, #2
 8004566:	d00a      	beq.n	800457e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	212c      	movs	r1, #44	; 0x2c
 800456e:	fb01 f303 	mul.w	r3, r1, r3
 8004572:	4413      	add	r3, r2
 8004574:	333f      	adds	r3, #63	; 0x3f
 8004576:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004578:	2b03      	cmp	r3, #3
 800457a:	f040 8100 	bne.w	800477e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d113      	bne.n	80045ae <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	212c      	movs	r1, #44	; 0x2c
 800458c:	fb01 f303 	mul.w	r3, r1, r3
 8004590:	4413      	add	r3, r2
 8004592:	3355      	adds	r3, #85	; 0x55
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	f083 0301 	eor.w	r3, r3, #1
 800459a:	b2d8      	uxtb	r0, r3
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	212c      	movs	r1, #44	; 0x2c
 80045a2:	fb01 f303 	mul.w	r3, r1, r3
 80045a6:	4413      	add	r3, r2
 80045a8:	3355      	adds	r3, #85	; 0x55
 80045aa:	4602      	mov	r2, r0
 80045ac:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	f040 80e3 	bne.w	800477e <HCD_HC_OUT_IRQHandler+0x7cc>
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	212c      	movs	r1, #44	; 0x2c
 80045be:	fb01 f303 	mul.w	r3, r1, r3
 80045c2:	4413      	add	r3, r2
 80045c4:	334c      	adds	r3, #76	; 0x4c
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 80d8 	beq.w	800477e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	212c      	movs	r1, #44	; 0x2c
 80045d4:	fb01 f303 	mul.w	r3, r1, r3
 80045d8:	4413      	add	r3, r2
 80045da:	334c      	adds	r3, #76	; 0x4c
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	202c      	movs	r0, #44	; 0x2c
 80045e4:	fb00 f202 	mul.w	r2, r0, r2
 80045e8:	440a      	add	r2, r1
 80045ea:	3240      	adds	r2, #64	; 0x40
 80045ec:	8812      	ldrh	r2, [r2, #0]
 80045ee:	4413      	add	r3, r2
 80045f0:	3b01      	subs	r3, #1
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	202c      	movs	r0, #44	; 0x2c
 80045f8:	fb00 f202 	mul.w	r2, r0, r2
 80045fc:	440a      	add	r2, r1
 80045fe:	3240      	adds	r2, #64	; 0x40
 8004600:	8812      	ldrh	r2, [r2, #0]
 8004602:	fbb3 f3f2 	udiv	r3, r3, r2
 8004606:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 80b5 	beq.w	800477e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	212c      	movs	r1, #44	; 0x2c
 800461a:	fb01 f303 	mul.w	r3, r1, r3
 800461e:	4413      	add	r3, r2
 8004620:	3355      	adds	r3, #85	; 0x55
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	f083 0301 	eor.w	r3, r3, #1
 8004628:	b2d8      	uxtb	r0, r3
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	212c      	movs	r1, #44	; 0x2c
 8004630:	fb01 f303 	mul.w	r3, r1, r3
 8004634:	4413      	add	r3, r2
 8004636:	3355      	adds	r3, #85	; 0x55
 8004638:	4602      	mov	r2, r0
 800463a:	701a      	strb	r2, [r3, #0]
 800463c:	e09f      	b.n	800477e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	212c      	movs	r1, #44	; 0x2c
 8004644:	fb01 f303 	mul.w	r3, r1, r3
 8004648:	4413      	add	r3, r2
 800464a:	3361      	adds	r3, #97	; 0x61
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	2b03      	cmp	r3, #3
 8004650:	d109      	bne.n	8004666 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	212c      	movs	r1, #44	; 0x2c
 8004658:	fb01 f303 	mul.w	r3, r1, r3
 800465c:	4413      	add	r3, r2
 800465e:	3360      	adds	r3, #96	; 0x60
 8004660:	2202      	movs	r2, #2
 8004662:	701a      	strb	r2, [r3, #0]
 8004664:	e08b      	b.n	800477e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	212c      	movs	r1, #44	; 0x2c
 800466c:	fb01 f303 	mul.w	r3, r1, r3
 8004670:	4413      	add	r3, r2
 8004672:	3361      	adds	r3, #97	; 0x61
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	2b04      	cmp	r3, #4
 8004678:	d109      	bne.n	800468e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	212c      	movs	r1, #44	; 0x2c
 8004680:	fb01 f303 	mul.w	r3, r1, r3
 8004684:	4413      	add	r3, r2
 8004686:	3360      	adds	r3, #96	; 0x60
 8004688:	2202      	movs	r2, #2
 800468a:	701a      	strb	r2, [r3, #0]
 800468c:	e077      	b.n	800477e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	212c      	movs	r1, #44	; 0x2c
 8004694:	fb01 f303 	mul.w	r3, r1, r3
 8004698:	4413      	add	r3, r2
 800469a:	3361      	adds	r3, #97	; 0x61
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	2b05      	cmp	r3, #5
 80046a0:	d109      	bne.n	80046b6 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	212c      	movs	r1, #44	; 0x2c
 80046a8:	fb01 f303 	mul.w	r3, r1, r3
 80046ac:	4413      	add	r3, r2
 80046ae:	3360      	adds	r3, #96	; 0x60
 80046b0:	2205      	movs	r2, #5
 80046b2:	701a      	strb	r2, [r3, #0]
 80046b4:	e063      	b.n	800477e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	212c      	movs	r1, #44	; 0x2c
 80046bc:	fb01 f303 	mul.w	r3, r1, r3
 80046c0:	4413      	add	r3, r2
 80046c2:	3361      	adds	r3, #97	; 0x61
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	2b06      	cmp	r3, #6
 80046c8:	d009      	beq.n	80046de <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	212c      	movs	r1, #44	; 0x2c
 80046d0:	fb01 f303 	mul.w	r3, r1, r3
 80046d4:	4413      	add	r3, r2
 80046d6:	3361      	adds	r3, #97	; 0x61
 80046d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80046da:	2b08      	cmp	r3, #8
 80046dc:	d14f      	bne.n	800477e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	212c      	movs	r1, #44	; 0x2c
 80046e4:	fb01 f303 	mul.w	r3, r1, r3
 80046e8:	4413      	add	r3, r2
 80046ea:	335c      	adds	r3, #92	; 0x5c
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	6879      	ldr	r1, [r7, #4]
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	202c      	movs	r0, #44	; 0x2c
 80046f6:	fb00 f303 	mul.w	r3, r0, r3
 80046fa:	440b      	add	r3, r1
 80046fc:	335c      	adds	r3, #92	; 0x5c
 80046fe:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	212c      	movs	r1, #44	; 0x2c
 8004706:	fb01 f303 	mul.w	r3, r1, r3
 800470a:	4413      	add	r3, r2
 800470c:	335c      	adds	r3, #92	; 0x5c
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b02      	cmp	r3, #2
 8004712:	d912      	bls.n	800473a <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	212c      	movs	r1, #44	; 0x2c
 800471a:	fb01 f303 	mul.w	r3, r1, r3
 800471e:	4413      	add	r3, r2
 8004720:	335c      	adds	r3, #92	; 0x5c
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	212c      	movs	r1, #44	; 0x2c
 800472c:	fb01 f303 	mul.w	r3, r1, r3
 8004730:	4413      	add	r3, r2
 8004732:	3360      	adds	r3, #96	; 0x60
 8004734:	2204      	movs	r2, #4
 8004736:	701a      	strb	r2, [r3, #0]
 8004738:	e021      	b.n	800477e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	212c      	movs	r1, #44	; 0x2c
 8004740:	fb01 f303 	mul.w	r3, r1, r3
 8004744:	4413      	add	r3, r2
 8004746:	3360      	adds	r3, #96	; 0x60
 8004748:	2202      	movs	r2, #2
 800474a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	4413      	add	r3, r2
 8004754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004762:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800476a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	4413      	add	r3, r2
 8004774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004778:	461a      	mov	r2, r3
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	4413      	add	r3, r2
 8004786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800478a:	461a      	mov	r2, r3
 800478c:	2302      	movs	r3, #2
 800478e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	b2d9      	uxtb	r1, r3
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	202c      	movs	r0, #44	; 0x2c
 800479a:	fb00 f303 	mul.w	r3, r0, r3
 800479e:	4413      	add	r3, r2
 80047a0:	3360      	adds	r3, #96	; 0x60
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	461a      	mov	r2, r3
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f004 f8d6 	bl	8008958 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80047ac:	bf00      	nop
 80047ae:	3720      	adds	r7, #32
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b08a      	sub	sp, #40	; 0x28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	f003 030f 	and.w	r3, r3, #15
 80047d4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	0c5b      	lsrs	r3, r3, #17
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	091b      	lsrs	r3, r3, #4
 80047e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047e8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d004      	beq.n	80047fa <HCD_RXQLVL_IRQHandler+0x46>
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	2b05      	cmp	r3, #5
 80047f4:	f000 80a9 	beq.w	800494a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80047f8:	e0aa      	b.n	8004950 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 80a6 	beq.w	800494e <HCD_RXQLVL_IRQHandler+0x19a>
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	212c      	movs	r1, #44	; 0x2c
 8004808:	fb01 f303 	mul.w	r3, r1, r3
 800480c:	4413      	add	r3, r2
 800480e:	3344      	adds	r3, #68	; 0x44
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 809b 	beq.w	800494e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	212c      	movs	r1, #44	; 0x2c
 800481e:	fb01 f303 	mul.w	r3, r1, r3
 8004822:	4413      	add	r3, r2
 8004824:	3350      	adds	r3, #80	; 0x50
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	441a      	add	r2, r3
 800482c:	6879      	ldr	r1, [r7, #4]
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	202c      	movs	r0, #44	; 0x2c
 8004832:	fb00 f303 	mul.w	r3, r0, r3
 8004836:	440b      	add	r3, r1
 8004838:	334c      	adds	r3, #76	; 0x4c
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	429a      	cmp	r2, r3
 800483e:	d87a      	bhi.n	8004936 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6818      	ldr	r0, [r3, #0]
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	212c      	movs	r1, #44	; 0x2c
 800484a:	fb01 f303 	mul.w	r3, r1, r3
 800484e:	4413      	add	r3, r2
 8004850:	3344      	adds	r3, #68	; 0x44
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	b292      	uxth	r2, r2
 8004858:	4619      	mov	r1, r3
 800485a:	f001 fa39 	bl	8005cd0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	212c      	movs	r1, #44	; 0x2c
 8004864:	fb01 f303 	mul.w	r3, r1, r3
 8004868:	4413      	add	r3, r2
 800486a:	3344      	adds	r3, #68	; 0x44
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	441a      	add	r2, r3
 8004872:	6879      	ldr	r1, [r7, #4]
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	202c      	movs	r0, #44	; 0x2c
 8004878:	fb00 f303 	mul.w	r3, r0, r3
 800487c:	440b      	add	r3, r1
 800487e:	3344      	adds	r3, #68	; 0x44
 8004880:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	212c      	movs	r1, #44	; 0x2c
 8004888:	fb01 f303 	mul.w	r3, r1, r3
 800488c:	4413      	add	r3, r2
 800488e:	3350      	adds	r3, #80	; 0x50
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	441a      	add	r2, r3
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	202c      	movs	r0, #44	; 0x2c
 800489c:	fb00 f303 	mul.w	r3, r0, r3
 80048a0:	440b      	add	r3, r1
 80048a2:	3350      	adds	r3, #80	; 0x50
 80048a4:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	015a      	lsls	r2, r3, #5
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	4413      	add	r3, r2
 80048ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	0cdb      	lsrs	r3, r3, #19
 80048b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048ba:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	212c      	movs	r1, #44	; 0x2c
 80048c2:	fb01 f303 	mul.w	r3, r1, r3
 80048c6:	4413      	add	r3, r2
 80048c8:	3340      	adds	r3, #64	; 0x40
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	461a      	mov	r2, r3
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d13c      	bne.n	800494e <HCD_RXQLVL_IRQHandler+0x19a>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d039      	beq.n	800494e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048f0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048f8:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	6a3b      	ldr	r3, [r7, #32]
 8004900:	4413      	add	r3, r2
 8004902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004906:	461a      	mov	r2, r3
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	212c      	movs	r1, #44	; 0x2c
 8004912:	fb01 f303 	mul.w	r3, r1, r3
 8004916:	4413      	add	r3, r2
 8004918:	3354      	adds	r3, #84	; 0x54
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	f083 0301 	eor.w	r3, r3, #1
 8004920:	b2d8      	uxtb	r0, r3
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	212c      	movs	r1, #44	; 0x2c
 8004928:	fb01 f303 	mul.w	r3, r1, r3
 800492c:	4413      	add	r3, r2
 800492e:	3354      	adds	r3, #84	; 0x54
 8004930:	4602      	mov	r2, r0
 8004932:	701a      	strb	r2, [r3, #0]
      break;
 8004934:	e00b      	b.n	800494e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	212c      	movs	r1, #44	; 0x2c
 800493c:	fb01 f303 	mul.w	r3, r1, r3
 8004940:	4413      	add	r3, r2
 8004942:	3360      	adds	r3, #96	; 0x60
 8004944:	2204      	movs	r2, #4
 8004946:	701a      	strb	r2, [r3, #0]
      break;
 8004948:	e001      	b.n	800494e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800494a:	bf00      	nop
 800494c:	e000      	b.n	8004950 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800494e:	bf00      	nop
  }
}
 8004950:	bf00      	nop
 8004952:	3728      	adds	r7, #40	; 0x28
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004984:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b02      	cmp	r3, #2
 800498e:	d10b      	bne.n	80049a8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b01      	cmp	r3, #1
 8004998:	d102      	bne.n	80049a0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f003 ffc0 	bl	8008920 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f043 0302 	orr.w	r3, r3, #2
 80049a6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	2b08      	cmp	r3, #8
 80049b0:	d132      	bne.n	8004a18 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f043 0308 	orr.w	r3, r3, #8
 80049b8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b04      	cmp	r3, #4
 80049c2:	d126      	bne.n	8004a12 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d113      	bne.n	80049f4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80049d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049d6:	d106      	bne.n	80049e6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2102      	movs	r1, #2
 80049de:	4618      	mov	r0, r3
 80049e0:	f001 fad6 	bl	8005f90 <USB_InitFSLSPClkSel>
 80049e4:	e011      	b.n	8004a0a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2101      	movs	r1, #1
 80049ec:	4618      	mov	r0, r3
 80049ee:	f001 facf 	bl	8005f90 <USB_InitFSLSPClkSel>
 80049f2:	e00a      	b.n	8004a0a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d106      	bne.n	8004a0a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a02:	461a      	mov	r2, r3
 8004a04:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004a08:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f003 ffb2 	bl	8008974 <HAL_HCD_PortEnabled_Callback>
 8004a10:	e002      	b.n	8004a18 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f003 ffbc 	bl	8008990 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b20      	cmp	r3, #32
 8004a20:	d103      	bne.n	8004a2a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f043 0320 	orr.w	r3, r3, #32
 8004a28:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a30:	461a      	mov	r2, r3
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	6013      	str	r3, [r2, #0]
}
 8004a36:	bf00      	nop
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e264      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d075      	beq.n	8004b4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a5e:	4ba3      	ldr	r3, [pc, #652]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 030c 	and.w	r3, r3, #12
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d00c      	beq.n	8004a84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a6a:	4ba0      	ldr	r3, [pc, #640]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a72:	2b08      	cmp	r3, #8
 8004a74:	d112      	bne.n	8004a9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a76:	4b9d      	ldr	r3, [pc, #628]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a82:	d10b      	bne.n	8004a9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a84:	4b99      	ldr	r3, [pc, #612]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d05b      	beq.n	8004b48 <HAL_RCC_OscConfig+0x108>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d157      	bne.n	8004b48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e23f      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa4:	d106      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x74>
 8004aa6:	4b91      	ldr	r3, [pc, #580]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a90      	ldr	r2, [pc, #576]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab0:	6013      	str	r3, [r2, #0]
 8004ab2:	e01d      	b.n	8004af0 <HAL_RCC_OscConfig+0xb0>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004abc:	d10c      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x98>
 8004abe:	4b8b      	ldr	r3, [pc, #556]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a8a      	ldr	r2, [pc, #552]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004ac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ac8:	6013      	str	r3, [r2, #0]
 8004aca:	4b88      	ldr	r3, [pc, #544]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a87      	ldr	r2, [pc, #540]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	e00b      	b.n	8004af0 <HAL_RCC_OscConfig+0xb0>
 8004ad8:	4b84      	ldr	r3, [pc, #528]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a83      	ldr	r2, [pc, #524]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	4b81      	ldr	r3, [pc, #516]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a80      	ldr	r2, [pc, #512]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d013      	beq.n	8004b20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af8:	f7fd fc50 	bl	800239c <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b00:	f7fd fc4c 	bl	800239c <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b64      	cmp	r3, #100	; 0x64
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e204      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b12:	4b76      	ldr	r3, [pc, #472]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0f0      	beq.n	8004b00 <HAL_RCC_OscConfig+0xc0>
 8004b1e:	e014      	b.n	8004b4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b20:	f7fd fc3c 	bl	800239c <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b28:	f7fd fc38 	bl	800239c <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b64      	cmp	r3, #100	; 0x64
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e1f0      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b3a:	4b6c      	ldr	r3, [pc, #432]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1f0      	bne.n	8004b28 <HAL_RCC_OscConfig+0xe8>
 8004b46:	e000      	b.n	8004b4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d063      	beq.n	8004c1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b56:	4b65      	ldr	r3, [pc, #404]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 030c 	and.w	r3, r3, #12
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00b      	beq.n	8004b7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b62:	4b62      	ldr	r3, [pc, #392]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b6a:	2b08      	cmp	r3, #8
 8004b6c:	d11c      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b6e:	4b5f      	ldr	r3, [pc, #380]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d116      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b7a:	4b5c      	ldr	r3, [pc, #368]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d005      	beq.n	8004b92 <HAL_RCC_OscConfig+0x152>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d001      	beq.n	8004b92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e1c4      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b92:	4b56      	ldr	r3, [pc, #344]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	4952      	ldr	r1, [pc, #328]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ba6:	e03a      	b.n	8004c1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d020      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bb0:	4b4f      	ldr	r3, [pc, #316]	; (8004cf0 <HAL_RCC_OscConfig+0x2b0>)
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb6:	f7fd fbf1 	bl	800239c <HAL_GetTick>
 8004bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bbc:	e008      	b.n	8004bd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bbe:	f7fd fbed 	bl	800239c <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e1a5      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd0:	4b46      	ldr	r3, [pc, #280]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0f0      	beq.n	8004bbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bdc:	4b43      	ldr	r3, [pc, #268]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	4940      	ldr	r1, [pc, #256]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	600b      	str	r3, [r1, #0]
 8004bf0:	e015      	b.n	8004c1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bf2:	4b3f      	ldr	r3, [pc, #252]	; (8004cf0 <HAL_RCC_OscConfig+0x2b0>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf8:	f7fd fbd0 	bl	800239c <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c00:	f7fd fbcc 	bl	800239c <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e184      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c12:	4b36      	ldr	r3, [pc, #216]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1f0      	bne.n	8004c00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0308 	and.w	r3, r3, #8
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d030      	beq.n	8004c8c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d016      	beq.n	8004c60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c32:	4b30      	ldr	r3, [pc, #192]	; (8004cf4 <HAL_RCC_OscConfig+0x2b4>)
 8004c34:	2201      	movs	r2, #1
 8004c36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c38:	f7fd fbb0 	bl	800239c <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c40:	f7fd fbac 	bl	800239c <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e164      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c52:	4b26      	ldr	r3, [pc, #152]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0f0      	beq.n	8004c40 <HAL_RCC_OscConfig+0x200>
 8004c5e:	e015      	b.n	8004c8c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c60:	4b24      	ldr	r3, [pc, #144]	; (8004cf4 <HAL_RCC_OscConfig+0x2b4>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c66:	f7fd fb99 	bl	800239c <HAL_GetTick>
 8004c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c6c:	e008      	b.n	8004c80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c6e:	f7fd fb95 	bl	800239c <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e14d      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c80:	4b1a      	ldr	r3, [pc, #104]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1f0      	bne.n	8004c6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 80a0 	beq.w	8004dda <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c9e:	4b13      	ldr	r3, [pc, #76]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10f      	bne.n	8004cca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004caa:	2300      	movs	r3, #0
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	4b0f      	ldr	r3, [pc, #60]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	4a0e      	ldr	r2, [pc, #56]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8004cba:	4b0c      	ldr	r3, [pc, #48]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc2:	60bb      	str	r3, [r7, #8]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cca:	4b0b      	ldr	r3, [pc, #44]	; (8004cf8 <HAL_RCC_OscConfig+0x2b8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d121      	bne.n	8004d1a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cd6:	4b08      	ldr	r3, [pc, #32]	; (8004cf8 <HAL_RCC_OscConfig+0x2b8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a07      	ldr	r2, [pc, #28]	; (8004cf8 <HAL_RCC_OscConfig+0x2b8>)
 8004cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ce2:	f7fd fb5b 	bl	800239c <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce8:	e011      	b.n	8004d0e <HAL_RCC_OscConfig+0x2ce>
 8004cea:	bf00      	nop
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	42470000 	.word	0x42470000
 8004cf4:	42470e80 	.word	0x42470e80
 8004cf8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cfc:	f7fd fb4e 	bl	800239c <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e106      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d0e:	4b85      	ldr	r3, [pc, #532]	; (8004f24 <HAL_RCC_OscConfig+0x4e4>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0f0      	beq.n	8004cfc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d106      	bne.n	8004d30 <HAL_RCC_OscConfig+0x2f0>
 8004d22:	4b81      	ldr	r3, [pc, #516]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d26:	4a80      	ldr	r2, [pc, #512]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004d28:	f043 0301 	orr.w	r3, r3, #1
 8004d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d2e:	e01c      	b.n	8004d6a <HAL_RCC_OscConfig+0x32a>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	2b05      	cmp	r3, #5
 8004d36:	d10c      	bne.n	8004d52 <HAL_RCC_OscConfig+0x312>
 8004d38:	4b7b      	ldr	r3, [pc, #492]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3c:	4a7a      	ldr	r2, [pc, #488]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004d3e:	f043 0304 	orr.w	r3, r3, #4
 8004d42:	6713      	str	r3, [r2, #112]	; 0x70
 8004d44:	4b78      	ldr	r3, [pc, #480]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d48:	4a77      	ldr	r2, [pc, #476]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004d4a:	f043 0301 	orr.w	r3, r3, #1
 8004d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d50:	e00b      	b.n	8004d6a <HAL_RCC_OscConfig+0x32a>
 8004d52:	4b75      	ldr	r3, [pc, #468]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d56:	4a74      	ldr	r2, [pc, #464]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004d58:	f023 0301 	bic.w	r3, r3, #1
 8004d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d5e:	4b72      	ldr	r3, [pc, #456]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d62:	4a71      	ldr	r2, [pc, #452]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004d64:	f023 0304 	bic.w	r3, r3, #4
 8004d68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d015      	beq.n	8004d9e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d72:	f7fd fb13 	bl	800239c <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d78:	e00a      	b.n	8004d90 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d7a:	f7fd fb0f 	bl	800239c <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e0c5      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d90:	4b65      	ldr	r3, [pc, #404]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0ee      	beq.n	8004d7a <HAL_RCC_OscConfig+0x33a>
 8004d9c:	e014      	b.n	8004dc8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d9e:	f7fd fafd 	bl	800239c <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004da4:	e00a      	b.n	8004dbc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004da6:	f7fd faf9 	bl	800239c <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e0af      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dbc:	4b5a      	ldr	r3, [pc, #360]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1ee      	bne.n	8004da6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dc8:	7dfb      	ldrb	r3, [r7, #23]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d105      	bne.n	8004dda <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dce:	4b56      	ldr	r3, [pc, #344]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	4a55      	ldr	r2, [pc, #340]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004dd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dd8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 809b 	beq.w	8004f1a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004de4:	4b50      	ldr	r3, [pc, #320]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f003 030c 	and.w	r3, r3, #12
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d05c      	beq.n	8004eaa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d141      	bne.n	8004e7c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004df8:	4b4c      	ldr	r3, [pc, #304]	; (8004f2c <HAL_RCC_OscConfig+0x4ec>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dfe:	f7fd facd 	bl	800239c <HAL_GetTick>
 8004e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e06:	f7fd fac9 	bl	800239c <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e081      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e18:	4b43      	ldr	r3, [pc, #268]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1f0      	bne.n	8004e06 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	69da      	ldr	r2, [r3, #28]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	019b      	lsls	r3, r3, #6
 8004e34:	431a      	orrs	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3a:	085b      	lsrs	r3, r3, #1
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	041b      	lsls	r3, r3, #16
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e46:	061b      	lsls	r3, r3, #24
 8004e48:	4937      	ldr	r1, [pc, #220]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e4e:	4b37      	ldr	r3, [pc, #220]	; (8004f2c <HAL_RCC_OscConfig+0x4ec>)
 8004e50:	2201      	movs	r2, #1
 8004e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e54:	f7fd faa2 	bl	800239c <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e5c:	f7fd fa9e 	bl	800239c <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e056      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e6e:	4b2e      	ldr	r3, [pc, #184]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0f0      	beq.n	8004e5c <HAL_RCC_OscConfig+0x41c>
 8004e7a:	e04e      	b.n	8004f1a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e7c:	4b2b      	ldr	r3, [pc, #172]	; (8004f2c <HAL_RCC_OscConfig+0x4ec>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e82:	f7fd fa8b 	bl	800239c <HAL_GetTick>
 8004e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e88:	e008      	b.n	8004e9c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e8a:	f7fd fa87 	bl	800239c <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e03f      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9c:	4b22      	ldr	r3, [pc, #136]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1f0      	bne.n	8004e8a <HAL_RCC_OscConfig+0x44a>
 8004ea8:	e037      	b.n	8004f1a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d101      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e032      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004eb6:	4b1c      	ldr	r3, [pc, #112]	; (8004f28 <HAL_RCC_OscConfig+0x4e8>)
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d028      	beq.n	8004f16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d121      	bne.n	8004f16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d11a      	bne.n	8004f16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004eec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d111      	bne.n	8004f16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efc:	085b      	lsrs	r3, r3, #1
 8004efe:	3b01      	subs	r3, #1
 8004f00:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d107      	bne.n	8004f16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f10:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d001      	beq.n	8004f1a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e000      	b.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3718      	adds	r7, #24
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40007000 	.word	0x40007000
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	42470060 	.word	0x42470060

08004f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e0cc      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f44:	4b68      	ldr	r3, [pc, #416]	; (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d90c      	bls.n	8004f6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f52:	4b65      	ldr	r3, [pc, #404]	; (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f5a:	4b63      	ldr	r3, [pc, #396]	; (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d001      	beq.n	8004f6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e0b8      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d020      	beq.n	8004fba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d005      	beq.n	8004f90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f84:	4b59      	ldr	r3, [pc, #356]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	4a58      	ldr	r2, [pc, #352]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004f8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0308 	and.w	r3, r3, #8
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d005      	beq.n	8004fa8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f9c:	4b53      	ldr	r3, [pc, #332]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	4a52      	ldr	r2, [pc, #328]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004fa2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fa6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fa8:	4b50      	ldr	r3, [pc, #320]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	494d      	ldr	r1, [pc, #308]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d044      	beq.n	8005050 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d107      	bne.n	8004fde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fce:	4b47      	ldr	r3, [pc, #284]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d119      	bne.n	800500e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e07f      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d003      	beq.n	8004fee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fea:	2b03      	cmp	r3, #3
 8004fec:	d107      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fee:	4b3f      	ldr	r3, [pc, #252]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d109      	bne.n	800500e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e06f      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ffe:	4b3b      	ldr	r3, [pc, #236]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e067      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800500e:	4b37      	ldr	r3, [pc, #220]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f023 0203 	bic.w	r2, r3, #3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	4934      	ldr	r1, [pc, #208]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 800501c:	4313      	orrs	r3, r2
 800501e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005020:	f7fd f9bc 	bl	800239c <HAL_GetTick>
 8005024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005026:	e00a      	b.n	800503e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005028:	f7fd f9b8 	bl	800239c <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	f241 3288 	movw	r2, #5000	; 0x1388
 8005036:	4293      	cmp	r3, r2
 8005038:	d901      	bls.n	800503e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e04f      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800503e:	4b2b      	ldr	r3, [pc, #172]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 020c 	and.w	r2, r3, #12
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	429a      	cmp	r2, r3
 800504e:	d1eb      	bne.n	8005028 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005050:	4b25      	ldr	r3, [pc, #148]	; (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	429a      	cmp	r2, r3
 800505c:	d20c      	bcs.n	8005078 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800505e:	4b22      	ldr	r3, [pc, #136]	; (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005066:	4b20      	ldr	r3, [pc, #128]	; (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0307 	and.w	r3, r3, #7
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	429a      	cmp	r2, r3
 8005072:	d001      	beq.n	8005078 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e032      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	d008      	beq.n	8005096 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005084:	4b19      	ldr	r3, [pc, #100]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	4916      	ldr	r1, [pc, #88]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8005092:	4313      	orrs	r3, r2
 8005094:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0308 	and.w	r3, r3, #8
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d009      	beq.n	80050b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050a2:	4b12      	ldr	r3, [pc, #72]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	490e      	ldr	r1, [pc, #56]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050b6:	f000 f821 	bl	80050fc <HAL_RCC_GetSysClockFreq>
 80050ba:	4602      	mov	r2, r0
 80050bc:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	091b      	lsrs	r3, r3, #4
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	490a      	ldr	r1, [pc, #40]	; (80050f0 <HAL_RCC_ClockConfig+0x1c0>)
 80050c8:	5ccb      	ldrb	r3, [r1, r3]
 80050ca:	fa22 f303 	lsr.w	r3, r2, r3
 80050ce:	4a09      	ldr	r2, [pc, #36]	; (80050f4 <HAL_RCC_ClockConfig+0x1c4>)
 80050d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050d2:	4b09      	ldr	r3, [pc, #36]	; (80050f8 <HAL_RCC_ClockConfig+0x1c8>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fd f91c 	bl	8002314 <HAL_InitTick>

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	40023c00 	.word	0x40023c00
 80050ec:	40023800 	.word	0x40023800
 80050f0:	0800b2d4 	.word	0x0800b2d4
 80050f4:	20000000 	.word	0x20000000
 80050f8:	20000004 	.word	0x20000004

080050fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005100:	b084      	sub	sp, #16
 8005102:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	607b      	str	r3, [r7, #4]
 8005108:	2300      	movs	r3, #0
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	2300      	movs	r3, #0
 800510e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005114:	4b67      	ldr	r3, [pc, #412]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f003 030c 	and.w	r3, r3, #12
 800511c:	2b08      	cmp	r3, #8
 800511e:	d00d      	beq.n	800513c <HAL_RCC_GetSysClockFreq+0x40>
 8005120:	2b08      	cmp	r3, #8
 8005122:	f200 80bd 	bhi.w	80052a0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005126:	2b00      	cmp	r3, #0
 8005128:	d002      	beq.n	8005130 <HAL_RCC_GetSysClockFreq+0x34>
 800512a:	2b04      	cmp	r3, #4
 800512c:	d003      	beq.n	8005136 <HAL_RCC_GetSysClockFreq+0x3a>
 800512e:	e0b7      	b.n	80052a0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005130:	4b61      	ldr	r3, [pc, #388]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005132:	60bb      	str	r3, [r7, #8]
       break;
 8005134:	e0b7      	b.n	80052a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005136:	4b61      	ldr	r3, [pc, #388]	; (80052bc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005138:	60bb      	str	r3, [r7, #8]
      break;
 800513a:	e0b4      	b.n	80052a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800513c:	4b5d      	ldr	r3, [pc, #372]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005144:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005146:	4b5b      	ldr	r3, [pc, #364]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d04d      	beq.n	80051ee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005152:	4b58      	ldr	r3, [pc, #352]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	099b      	lsrs	r3, r3, #6
 8005158:	461a      	mov	r2, r3
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005162:	f04f 0100 	mov.w	r1, #0
 8005166:	ea02 0800 	and.w	r8, r2, r0
 800516a:	ea03 0901 	and.w	r9, r3, r1
 800516e:	4640      	mov	r0, r8
 8005170:	4649      	mov	r1, r9
 8005172:	f04f 0200 	mov.w	r2, #0
 8005176:	f04f 0300 	mov.w	r3, #0
 800517a:	014b      	lsls	r3, r1, #5
 800517c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005180:	0142      	lsls	r2, r0, #5
 8005182:	4610      	mov	r0, r2
 8005184:	4619      	mov	r1, r3
 8005186:	ebb0 0008 	subs.w	r0, r0, r8
 800518a:	eb61 0109 	sbc.w	r1, r1, r9
 800518e:	f04f 0200 	mov.w	r2, #0
 8005192:	f04f 0300 	mov.w	r3, #0
 8005196:	018b      	lsls	r3, r1, #6
 8005198:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800519c:	0182      	lsls	r2, r0, #6
 800519e:	1a12      	subs	r2, r2, r0
 80051a0:	eb63 0301 	sbc.w	r3, r3, r1
 80051a4:	f04f 0000 	mov.w	r0, #0
 80051a8:	f04f 0100 	mov.w	r1, #0
 80051ac:	00d9      	lsls	r1, r3, #3
 80051ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051b2:	00d0      	lsls	r0, r2, #3
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	eb12 0208 	adds.w	r2, r2, r8
 80051bc:	eb43 0309 	adc.w	r3, r3, r9
 80051c0:	f04f 0000 	mov.w	r0, #0
 80051c4:	f04f 0100 	mov.w	r1, #0
 80051c8:	0259      	lsls	r1, r3, #9
 80051ca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80051ce:	0250      	lsls	r0, r2, #9
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	4610      	mov	r0, r2
 80051d6:	4619      	mov	r1, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	461a      	mov	r2, r3
 80051dc:	f04f 0300 	mov.w	r3, #0
 80051e0:	f7fb fcd6 	bl	8000b90 <__aeabi_uldivmod>
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	4613      	mov	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]
 80051ec:	e04a      	b.n	8005284 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051ee:	4b31      	ldr	r3, [pc, #196]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	099b      	lsrs	r3, r3, #6
 80051f4:	461a      	mov	r2, r3
 80051f6:	f04f 0300 	mov.w	r3, #0
 80051fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80051fe:	f04f 0100 	mov.w	r1, #0
 8005202:	ea02 0400 	and.w	r4, r2, r0
 8005206:	ea03 0501 	and.w	r5, r3, r1
 800520a:	4620      	mov	r0, r4
 800520c:	4629      	mov	r1, r5
 800520e:	f04f 0200 	mov.w	r2, #0
 8005212:	f04f 0300 	mov.w	r3, #0
 8005216:	014b      	lsls	r3, r1, #5
 8005218:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800521c:	0142      	lsls	r2, r0, #5
 800521e:	4610      	mov	r0, r2
 8005220:	4619      	mov	r1, r3
 8005222:	1b00      	subs	r0, r0, r4
 8005224:	eb61 0105 	sbc.w	r1, r1, r5
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	f04f 0300 	mov.w	r3, #0
 8005230:	018b      	lsls	r3, r1, #6
 8005232:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005236:	0182      	lsls	r2, r0, #6
 8005238:	1a12      	subs	r2, r2, r0
 800523a:	eb63 0301 	sbc.w	r3, r3, r1
 800523e:	f04f 0000 	mov.w	r0, #0
 8005242:	f04f 0100 	mov.w	r1, #0
 8005246:	00d9      	lsls	r1, r3, #3
 8005248:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800524c:	00d0      	lsls	r0, r2, #3
 800524e:	4602      	mov	r2, r0
 8005250:	460b      	mov	r3, r1
 8005252:	1912      	adds	r2, r2, r4
 8005254:	eb45 0303 	adc.w	r3, r5, r3
 8005258:	f04f 0000 	mov.w	r0, #0
 800525c:	f04f 0100 	mov.w	r1, #0
 8005260:	0299      	lsls	r1, r3, #10
 8005262:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005266:	0290      	lsls	r0, r2, #10
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4610      	mov	r0, r2
 800526e:	4619      	mov	r1, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	461a      	mov	r2, r3
 8005274:	f04f 0300 	mov.w	r3, #0
 8005278:	f7fb fc8a 	bl	8000b90 <__aeabi_uldivmod>
 800527c:	4602      	mov	r2, r0
 800527e:	460b      	mov	r3, r1
 8005280:	4613      	mov	r3, r2
 8005282:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005284:	4b0b      	ldr	r3, [pc, #44]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	0c1b      	lsrs	r3, r3, #16
 800528a:	f003 0303 	and.w	r3, r3, #3
 800528e:	3301      	adds	r3, #1
 8005290:	005b      	lsls	r3, r3, #1
 8005292:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	fbb2 f3f3 	udiv	r3, r2, r3
 800529c:	60bb      	str	r3, [r7, #8]
      break;
 800529e:	e002      	b.n	80052a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052a0:	4b05      	ldr	r3, [pc, #20]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80052a2:	60bb      	str	r3, [r7, #8]
      break;
 80052a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052a6:	68bb      	ldr	r3, [r7, #8]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80052b2:	bf00      	nop
 80052b4:	40023800 	.word	0x40023800
 80052b8:	00f42400 	.word	0x00f42400
 80052bc:	007a1200 	.word	0x007a1200

080052c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052c0:	b480      	push	{r7}
 80052c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052c4:	4b03      	ldr	r3, [pc, #12]	; (80052d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80052c6:	681b      	ldr	r3, [r3, #0]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	20000000 	.word	0x20000000

080052d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052dc:	f7ff fff0 	bl	80052c0 <HAL_RCC_GetHCLKFreq>
 80052e0:	4602      	mov	r2, r0
 80052e2:	4b05      	ldr	r3, [pc, #20]	; (80052f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	0a9b      	lsrs	r3, r3, #10
 80052e8:	f003 0307 	and.w	r3, r3, #7
 80052ec:	4903      	ldr	r1, [pc, #12]	; (80052fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80052ee:	5ccb      	ldrb	r3, [r1, r3]
 80052f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	40023800 	.word	0x40023800
 80052fc:	0800b2e4 	.word	0x0800b2e4

08005300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005304:	f7ff ffdc 	bl	80052c0 <HAL_RCC_GetHCLKFreq>
 8005308:	4602      	mov	r2, r0
 800530a:	4b05      	ldr	r3, [pc, #20]	; (8005320 <HAL_RCC_GetPCLK2Freq+0x20>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	0b5b      	lsrs	r3, r3, #13
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	4903      	ldr	r1, [pc, #12]	; (8005324 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005316:	5ccb      	ldrb	r3, [r1, r3]
 8005318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800531c:	4618      	mov	r0, r3
 800531e:	bd80      	pop	{r7, pc}
 8005320:	40023800 	.word	0x40023800
 8005324:	0800b2e4 	.word	0x0800b2e4

08005328 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e041      	b.n	80053be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d106      	bne.n	8005354 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7fc fe50 	bl	8001ff4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	3304      	adds	r3, #4
 8005364:	4619      	mov	r1, r3
 8005366:	4610      	mov	r0, r2
 8005368:	f000 f82e 	bl	80053c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
	...

080053c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a40      	ldr	r2, [pc, #256]	; (80054dc <TIM_Base_SetConfig+0x114>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d013      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e6:	d00f      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a3d      	ldr	r2, [pc, #244]	; (80054e0 <TIM_Base_SetConfig+0x118>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d00b      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a3c      	ldr	r2, [pc, #240]	; (80054e4 <TIM_Base_SetConfig+0x11c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d007      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a3b      	ldr	r2, [pc, #236]	; (80054e8 <TIM_Base_SetConfig+0x120>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d003      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a3a      	ldr	r2, [pc, #232]	; (80054ec <TIM_Base_SetConfig+0x124>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d108      	bne.n	800541a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a2f      	ldr	r2, [pc, #188]	; (80054dc <TIM_Base_SetConfig+0x114>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d02b      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005428:	d027      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a2c      	ldr	r2, [pc, #176]	; (80054e0 <TIM_Base_SetConfig+0x118>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d023      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a2b      	ldr	r2, [pc, #172]	; (80054e4 <TIM_Base_SetConfig+0x11c>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d01f      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a2a      	ldr	r2, [pc, #168]	; (80054e8 <TIM_Base_SetConfig+0x120>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d01b      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a29      	ldr	r2, [pc, #164]	; (80054ec <TIM_Base_SetConfig+0x124>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d017      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a28      	ldr	r2, [pc, #160]	; (80054f0 <TIM_Base_SetConfig+0x128>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d013      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a27      	ldr	r2, [pc, #156]	; (80054f4 <TIM_Base_SetConfig+0x12c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d00f      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a26      	ldr	r2, [pc, #152]	; (80054f8 <TIM_Base_SetConfig+0x130>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d00b      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a25      	ldr	r2, [pc, #148]	; (80054fc <TIM_Base_SetConfig+0x134>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d007      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a24      	ldr	r2, [pc, #144]	; (8005500 <TIM_Base_SetConfig+0x138>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d003      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a23      	ldr	r2, [pc, #140]	; (8005504 <TIM_Base_SetConfig+0x13c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d108      	bne.n	800548c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	4313      	orrs	r3, r2
 800548a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a0a      	ldr	r2, [pc, #40]	; (80054dc <TIM_Base_SetConfig+0x114>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d003      	beq.n	80054c0 <TIM_Base_SetConfig+0xf8>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a0c      	ldr	r2, [pc, #48]	; (80054ec <TIM_Base_SetConfig+0x124>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d103      	bne.n	80054c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	691a      	ldr	r2, [r3, #16]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	615a      	str	r2, [r3, #20]
}
 80054ce:	bf00      	nop
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	40010000 	.word	0x40010000
 80054e0:	40000400 	.word	0x40000400
 80054e4:	40000800 	.word	0x40000800
 80054e8:	40000c00 	.word	0x40000c00
 80054ec:	40010400 	.word	0x40010400
 80054f0:	40014000 	.word	0x40014000
 80054f4:	40014400 	.word	0x40014400
 80054f8:	40014800 	.word	0x40014800
 80054fc:	40001800 	.word	0x40001800
 8005500:	40001c00 	.word	0x40001c00
 8005504:	40002000 	.word	0x40002000

08005508 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005518:	2b01      	cmp	r3, #1
 800551a:	d101      	bne.n	8005520 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800551c:	2302      	movs	r3, #2
 800551e:	e05a      	b.n	80055d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005546:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4313      	orrs	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a21      	ldr	r2, [pc, #132]	; (80055e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d022      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800556c:	d01d      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a1d      	ldr	r2, [pc, #116]	; (80055e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d018      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a1b      	ldr	r2, [pc, #108]	; (80055ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d013      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a1a      	ldr	r2, [pc, #104]	; (80055f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d00e      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a18      	ldr	r2, [pc, #96]	; (80055f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d009      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a17      	ldr	r2, [pc, #92]	; (80055f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d004      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a15      	ldr	r2, [pc, #84]	; (80055fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d10c      	bne.n	80055c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	40010000 	.word	0x40010000
 80055e8:	40000400 	.word	0x40000400
 80055ec:	40000800 	.word	0x40000800
 80055f0:	40000c00 	.word	0x40000c00
 80055f4:	40010400 	.word	0x40010400
 80055f8:	40014000 	.word	0x40014000
 80055fc:	40001800 	.word	0x40001800

08005600 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e03f      	b.n	8005692 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d106      	bne.n	800562c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7fc fd06 	bl	8002038 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2224      	movs	r2, #36	; 0x24
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005642:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f829 	bl	800569c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	691a      	ldr	r2, [r3, #16]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005658:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	695a      	ldr	r2, [r3, #20]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005668:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68da      	ldr	r2, [r3, #12]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005678:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2220      	movs	r2, #32
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2220      	movs	r2, #32
 800568c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
	...

0800569c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800569c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a0:	b09f      	sub	sp, #124	; 0x7c
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80056b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b2:	68d9      	ldr	r1, [r3, #12]
 80056b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	ea40 0301 	orr.w	r3, r0, r1
 80056bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056c0:	689a      	ldr	r2, [r3, #8]
 80056c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	431a      	orrs	r2, r3
 80056c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	431a      	orrs	r2, r3
 80056ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80056d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80056e0:	f021 010c 	bic.w	r1, r1, #12
 80056e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056ea:	430b      	orrs	r3, r1
 80056ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80056f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056fa:	6999      	ldr	r1, [r3, #24]
 80056fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	ea40 0301 	orr.w	r3, r0, r1
 8005704:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	4bc5      	ldr	r3, [pc, #788]	; (8005a20 <UART_SetConfig+0x384>)
 800570c:	429a      	cmp	r2, r3
 800570e:	d004      	beq.n	800571a <UART_SetConfig+0x7e>
 8005710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	4bc3      	ldr	r3, [pc, #780]	; (8005a24 <UART_SetConfig+0x388>)
 8005716:	429a      	cmp	r2, r3
 8005718:	d103      	bne.n	8005722 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800571a:	f7ff fdf1 	bl	8005300 <HAL_RCC_GetPCLK2Freq>
 800571e:	6778      	str	r0, [r7, #116]	; 0x74
 8005720:	e002      	b.n	8005728 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005722:	f7ff fdd9 	bl	80052d8 <HAL_RCC_GetPCLK1Freq>
 8005726:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572a:	69db      	ldr	r3, [r3, #28]
 800572c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005730:	f040 80b6 	bne.w	80058a0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005734:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005736:	461c      	mov	r4, r3
 8005738:	f04f 0500 	mov.w	r5, #0
 800573c:	4622      	mov	r2, r4
 800573e:	462b      	mov	r3, r5
 8005740:	1891      	adds	r1, r2, r2
 8005742:	6439      	str	r1, [r7, #64]	; 0x40
 8005744:	415b      	adcs	r3, r3
 8005746:	647b      	str	r3, [r7, #68]	; 0x44
 8005748:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800574c:	1912      	adds	r2, r2, r4
 800574e:	eb45 0303 	adc.w	r3, r5, r3
 8005752:	f04f 0000 	mov.w	r0, #0
 8005756:	f04f 0100 	mov.w	r1, #0
 800575a:	00d9      	lsls	r1, r3, #3
 800575c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005760:	00d0      	lsls	r0, r2, #3
 8005762:	4602      	mov	r2, r0
 8005764:	460b      	mov	r3, r1
 8005766:	1911      	adds	r1, r2, r4
 8005768:	6639      	str	r1, [r7, #96]	; 0x60
 800576a:	416b      	adcs	r3, r5
 800576c:	667b      	str	r3, [r7, #100]	; 0x64
 800576e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	461a      	mov	r2, r3
 8005774:	f04f 0300 	mov.w	r3, #0
 8005778:	1891      	adds	r1, r2, r2
 800577a:	63b9      	str	r1, [r7, #56]	; 0x38
 800577c:	415b      	adcs	r3, r3
 800577e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005780:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005784:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005788:	f7fb fa02 	bl	8000b90 <__aeabi_uldivmod>
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	4ba5      	ldr	r3, [pc, #660]	; (8005a28 <UART_SetConfig+0x38c>)
 8005792:	fba3 2302 	umull	r2, r3, r3, r2
 8005796:	095b      	lsrs	r3, r3, #5
 8005798:	011e      	lsls	r6, r3, #4
 800579a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800579c:	461c      	mov	r4, r3
 800579e:	f04f 0500 	mov.w	r5, #0
 80057a2:	4622      	mov	r2, r4
 80057a4:	462b      	mov	r3, r5
 80057a6:	1891      	adds	r1, r2, r2
 80057a8:	6339      	str	r1, [r7, #48]	; 0x30
 80057aa:	415b      	adcs	r3, r3
 80057ac:	637b      	str	r3, [r7, #52]	; 0x34
 80057ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80057b2:	1912      	adds	r2, r2, r4
 80057b4:	eb45 0303 	adc.w	r3, r5, r3
 80057b8:	f04f 0000 	mov.w	r0, #0
 80057bc:	f04f 0100 	mov.w	r1, #0
 80057c0:	00d9      	lsls	r1, r3, #3
 80057c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057c6:	00d0      	lsls	r0, r2, #3
 80057c8:	4602      	mov	r2, r0
 80057ca:	460b      	mov	r3, r1
 80057cc:	1911      	adds	r1, r2, r4
 80057ce:	65b9      	str	r1, [r7, #88]	; 0x58
 80057d0:	416b      	adcs	r3, r5
 80057d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	461a      	mov	r2, r3
 80057da:	f04f 0300 	mov.w	r3, #0
 80057de:	1891      	adds	r1, r2, r2
 80057e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80057e2:	415b      	adcs	r3, r3
 80057e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80057ee:	f7fb f9cf 	bl	8000b90 <__aeabi_uldivmod>
 80057f2:	4602      	mov	r2, r0
 80057f4:	460b      	mov	r3, r1
 80057f6:	4b8c      	ldr	r3, [pc, #560]	; (8005a28 <UART_SetConfig+0x38c>)
 80057f8:	fba3 1302 	umull	r1, r3, r3, r2
 80057fc:	095b      	lsrs	r3, r3, #5
 80057fe:	2164      	movs	r1, #100	; 0x64
 8005800:	fb01 f303 	mul.w	r3, r1, r3
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	3332      	adds	r3, #50	; 0x32
 800580a:	4a87      	ldr	r2, [pc, #540]	; (8005a28 <UART_SetConfig+0x38c>)
 800580c:	fba2 2303 	umull	r2, r3, r2, r3
 8005810:	095b      	lsrs	r3, r3, #5
 8005812:	005b      	lsls	r3, r3, #1
 8005814:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005818:	441e      	add	r6, r3
 800581a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800581c:	4618      	mov	r0, r3
 800581e:	f04f 0100 	mov.w	r1, #0
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	1894      	adds	r4, r2, r2
 8005828:	623c      	str	r4, [r7, #32]
 800582a:	415b      	adcs	r3, r3
 800582c:	627b      	str	r3, [r7, #36]	; 0x24
 800582e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005832:	1812      	adds	r2, r2, r0
 8005834:	eb41 0303 	adc.w	r3, r1, r3
 8005838:	f04f 0400 	mov.w	r4, #0
 800583c:	f04f 0500 	mov.w	r5, #0
 8005840:	00dd      	lsls	r5, r3, #3
 8005842:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005846:	00d4      	lsls	r4, r2, #3
 8005848:	4622      	mov	r2, r4
 800584a:	462b      	mov	r3, r5
 800584c:	1814      	adds	r4, r2, r0
 800584e:	653c      	str	r4, [r7, #80]	; 0x50
 8005850:	414b      	adcs	r3, r1
 8005852:	657b      	str	r3, [r7, #84]	; 0x54
 8005854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	461a      	mov	r2, r3
 800585a:	f04f 0300 	mov.w	r3, #0
 800585e:	1891      	adds	r1, r2, r2
 8005860:	61b9      	str	r1, [r7, #24]
 8005862:	415b      	adcs	r3, r3
 8005864:	61fb      	str	r3, [r7, #28]
 8005866:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800586a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800586e:	f7fb f98f 	bl	8000b90 <__aeabi_uldivmod>
 8005872:	4602      	mov	r2, r0
 8005874:	460b      	mov	r3, r1
 8005876:	4b6c      	ldr	r3, [pc, #432]	; (8005a28 <UART_SetConfig+0x38c>)
 8005878:	fba3 1302 	umull	r1, r3, r3, r2
 800587c:	095b      	lsrs	r3, r3, #5
 800587e:	2164      	movs	r1, #100	; 0x64
 8005880:	fb01 f303 	mul.w	r3, r1, r3
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	3332      	adds	r3, #50	; 0x32
 800588a:	4a67      	ldr	r2, [pc, #412]	; (8005a28 <UART_SetConfig+0x38c>)
 800588c:	fba2 2303 	umull	r2, r3, r2, r3
 8005890:	095b      	lsrs	r3, r3, #5
 8005892:	f003 0207 	and.w	r2, r3, #7
 8005896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4432      	add	r2, r6
 800589c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800589e:	e0b9      	b.n	8005a14 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058a2:	461c      	mov	r4, r3
 80058a4:	f04f 0500 	mov.w	r5, #0
 80058a8:	4622      	mov	r2, r4
 80058aa:	462b      	mov	r3, r5
 80058ac:	1891      	adds	r1, r2, r2
 80058ae:	6139      	str	r1, [r7, #16]
 80058b0:	415b      	adcs	r3, r3
 80058b2:	617b      	str	r3, [r7, #20]
 80058b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80058b8:	1912      	adds	r2, r2, r4
 80058ba:	eb45 0303 	adc.w	r3, r5, r3
 80058be:	f04f 0000 	mov.w	r0, #0
 80058c2:	f04f 0100 	mov.w	r1, #0
 80058c6:	00d9      	lsls	r1, r3, #3
 80058c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058cc:	00d0      	lsls	r0, r2, #3
 80058ce:	4602      	mov	r2, r0
 80058d0:	460b      	mov	r3, r1
 80058d2:	eb12 0804 	adds.w	r8, r2, r4
 80058d6:	eb43 0905 	adc.w	r9, r3, r5
 80058da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	4618      	mov	r0, r3
 80058e0:	f04f 0100 	mov.w	r1, #0
 80058e4:	f04f 0200 	mov.w	r2, #0
 80058e8:	f04f 0300 	mov.w	r3, #0
 80058ec:	008b      	lsls	r3, r1, #2
 80058ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80058f2:	0082      	lsls	r2, r0, #2
 80058f4:	4640      	mov	r0, r8
 80058f6:	4649      	mov	r1, r9
 80058f8:	f7fb f94a 	bl	8000b90 <__aeabi_uldivmod>
 80058fc:	4602      	mov	r2, r0
 80058fe:	460b      	mov	r3, r1
 8005900:	4b49      	ldr	r3, [pc, #292]	; (8005a28 <UART_SetConfig+0x38c>)
 8005902:	fba3 2302 	umull	r2, r3, r3, r2
 8005906:	095b      	lsrs	r3, r3, #5
 8005908:	011e      	lsls	r6, r3, #4
 800590a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800590c:	4618      	mov	r0, r3
 800590e:	f04f 0100 	mov.w	r1, #0
 8005912:	4602      	mov	r2, r0
 8005914:	460b      	mov	r3, r1
 8005916:	1894      	adds	r4, r2, r2
 8005918:	60bc      	str	r4, [r7, #8]
 800591a:	415b      	adcs	r3, r3
 800591c:	60fb      	str	r3, [r7, #12]
 800591e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005922:	1812      	adds	r2, r2, r0
 8005924:	eb41 0303 	adc.w	r3, r1, r3
 8005928:	f04f 0400 	mov.w	r4, #0
 800592c:	f04f 0500 	mov.w	r5, #0
 8005930:	00dd      	lsls	r5, r3, #3
 8005932:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005936:	00d4      	lsls	r4, r2, #3
 8005938:	4622      	mov	r2, r4
 800593a:	462b      	mov	r3, r5
 800593c:	1814      	adds	r4, r2, r0
 800593e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005940:	414b      	adcs	r3, r1
 8005942:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	4618      	mov	r0, r3
 800594a:	f04f 0100 	mov.w	r1, #0
 800594e:	f04f 0200 	mov.w	r2, #0
 8005952:	f04f 0300 	mov.w	r3, #0
 8005956:	008b      	lsls	r3, r1, #2
 8005958:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800595c:	0082      	lsls	r2, r0, #2
 800595e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005962:	f7fb f915 	bl	8000b90 <__aeabi_uldivmod>
 8005966:	4602      	mov	r2, r0
 8005968:	460b      	mov	r3, r1
 800596a:	4b2f      	ldr	r3, [pc, #188]	; (8005a28 <UART_SetConfig+0x38c>)
 800596c:	fba3 1302 	umull	r1, r3, r3, r2
 8005970:	095b      	lsrs	r3, r3, #5
 8005972:	2164      	movs	r1, #100	; 0x64
 8005974:	fb01 f303 	mul.w	r3, r1, r3
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	011b      	lsls	r3, r3, #4
 800597c:	3332      	adds	r3, #50	; 0x32
 800597e:	4a2a      	ldr	r2, [pc, #168]	; (8005a28 <UART_SetConfig+0x38c>)
 8005980:	fba2 2303 	umull	r2, r3, r2, r3
 8005984:	095b      	lsrs	r3, r3, #5
 8005986:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800598a:	441e      	add	r6, r3
 800598c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800598e:	4618      	mov	r0, r3
 8005990:	f04f 0100 	mov.w	r1, #0
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	1894      	adds	r4, r2, r2
 800599a:	603c      	str	r4, [r7, #0]
 800599c:	415b      	adcs	r3, r3
 800599e:	607b      	str	r3, [r7, #4]
 80059a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059a4:	1812      	adds	r2, r2, r0
 80059a6:	eb41 0303 	adc.w	r3, r1, r3
 80059aa:	f04f 0400 	mov.w	r4, #0
 80059ae:	f04f 0500 	mov.w	r5, #0
 80059b2:	00dd      	lsls	r5, r3, #3
 80059b4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059b8:	00d4      	lsls	r4, r2, #3
 80059ba:	4622      	mov	r2, r4
 80059bc:	462b      	mov	r3, r5
 80059be:	eb12 0a00 	adds.w	sl, r2, r0
 80059c2:	eb43 0b01 	adc.w	fp, r3, r1
 80059c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f04f 0100 	mov.w	r1, #0
 80059d0:	f04f 0200 	mov.w	r2, #0
 80059d4:	f04f 0300 	mov.w	r3, #0
 80059d8:	008b      	lsls	r3, r1, #2
 80059da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80059de:	0082      	lsls	r2, r0, #2
 80059e0:	4650      	mov	r0, sl
 80059e2:	4659      	mov	r1, fp
 80059e4:	f7fb f8d4 	bl	8000b90 <__aeabi_uldivmod>
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	4b0e      	ldr	r3, [pc, #56]	; (8005a28 <UART_SetConfig+0x38c>)
 80059ee:	fba3 1302 	umull	r1, r3, r3, r2
 80059f2:	095b      	lsrs	r3, r3, #5
 80059f4:	2164      	movs	r1, #100	; 0x64
 80059f6:	fb01 f303 	mul.w	r3, r1, r3
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	011b      	lsls	r3, r3, #4
 80059fe:	3332      	adds	r3, #50	; 0x32
 8005a00:	4a09      	ldr	r2, [pc, #36]	; (8005a28 <UART_SetConfig+0x38c>)
 8005a02:	fba2 2303 	umull	r2, r3, r2, r3
 8005a06:	095b      	lsrs	r3, r3, #5
 8005a08:	f003 020f 	and.w	r2, r3, #15
 8005a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4432      	add	r2, r6
 8005a12:	609a      	str	r2, [r3, #8]
}
 8005a14:	bf00      	nop
 8005a16:	377c      	adds	r7, #124	; 0x7c
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a1e:	bf00      	nop
 8005a20:	40011000 	.word	0x40011000
 8005a24:	40011400 	.word	0x40011400
 8005a28:	51eb851f 	.word	0x51eb851f

08005a2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a2c:	b084      	sub	sp, #16
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b084      	sub	sp, #16
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	f107 001c 	add.w	r0, r7, #28
 8005a3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d122      	bne.n	8005a8a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d105      	bne.n	8005a7e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f9a0 	bl	8005dc4 <USB_CoreReset>
 8005a84:	4603      	mov	r3, r0
 8005a86:	73fb      	strb	r3, [r7, #15]
 8005a88:	e01a      	b.n	8005ac0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f994 	bl	8005dc4 <USB_CoreReset>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d106      	bne.n	8005ab4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aaa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	639a      	str	r2, [r3, #56]	; 0x38
 8005ab2:	e005      	b.n	8005ac0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d10b      	bne.n	8005ade <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f043 0206 	orr.w	r2, r3, #6
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f043 0220 	orr.w	r2, r3, #32
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005aea:	b004      	add	sp, #16
 8005aec:	4770      	bx	lr

08005aee <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f043 0201 	orr.w	r2, r3, #1
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f023 0201 	bic.w	r2, r3, #1
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b084      	sub	sp, #16
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b4e:	78fb      	ldrb	r3, [r7, #3]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d115      	bne.n	8005b80 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b60:	2001      	movs	r0, #1
 8005b62:	f7fc fc27 	bl	80023b4 <HAL_Delay>
      ms++;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f91a 	bl	8005da6 <USB_GetMode>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d01e      	beq.n	8005bb6 <USB_SetCurrentMode+0x84>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b31      	cmp	r3, #49	; 0x31
 8005b7c:	d9f0      	bls.n	8005b60 <USB_SetCurrentMode+0x2e>
 8005b7e:	e01a      	b.n	8005bb6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b80:	78fb      	ldrb	r3, [r7, #3]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d115      	bne.n	8005bb2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b92:	2001      	movs	r0, #1
 8005b94:	f7fc fc0e 	bl	80023b4 <HAL_Delay>
      ms++;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f901 	bl	8005da6 <USB_GetMode>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d005      	beq.n	8005bb6 <USB_SetCurrentMode+0x84>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2b31      	cmp	r3, #49	; 0x31
 8005bae:	d9f0      	bls.n	8005b92 <USB_SetCurrentMode+0x60>
 8005bb0:	e001      	b.n	8005bb6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e005      	b.n	8005bc2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2b32      	cmp	r3, #50	; 0x32
 8005bba:	d101      	bne.n	8005bc0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e000      	b.n	8005bc2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
	...

08005bcc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	019b      	lsls	r3, r3, #6
 8005bde:	f043 0220 	orr.w	r2, r3, #32
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	3301      	adds	r3, #1
 8005bea:	60fb      	str	r3, [r7, #12]
 8005bec:	4a08      	ldr	r2, [pc, #32]	; (8005c10 <USB_FlushTxFifo+0x44>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d901      	bls.n	8005bf6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e006      	b.n	8005c04 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	f003 0320 	and.w	r3, r3, #32
 8005bfe:	2b20      	cmp	r3, #32
 8005c00:	d0f1      	beq.n	8005be6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	00030d40 	.word	0x00030d40

08005c14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2210      	movs	r2, #16
 8005c24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	4a08      	ldr	r2, [pc, #32]	; (8005c50 <USB_FlushRxFifo+0x3c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d901      	bls.n	8005c36 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e006      	b.n	8005c44 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	f003 0310 	and.w	r3, r3, #16
 8005c3e:	2b10      	cmp	r3, #16
 8005c40:	d0f1      	beq.n	8005c26 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	00030d40 	.word	0x00030d40

08005c54 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b089      	sub	sp, #36	; 0x24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	4611      	mov	r1, r2
 8005c60:	461a      	mov	r2, r3
 8005c62:	460b      	mov	r3, r1
 8005c64:	71fb      	strb	r3, [r7, #7]
 8005c66:	4613      	mov	r3, r2
 8005c68:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005c72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d123      	bne.n	8005cc2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005c7a:	88bb      	ldrh	r3, [r7, #4]
 8005c7c:	3303      	adds	r3, #3
 8005c7e:	089b      	lsrs	r3, r3, #2
 8005c80:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005c82:	2300      	movs	r3, #0
 8005c84:	61bb      	str	r3, [r7, #24]
 8005c86:	e018      	b.n	8005cba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c88:	79fb      	ldrb	r3, [r7, #7]
 8005c8a:	031a      	lsls	r2, r3, #12
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c94:	461a      	mov	r2, r3
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	3301      	adds	r3, #1
 8005cac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	61bb      	str	r3, [r7, #24]
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d3e2      	bcc.n	8005c88 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3724      	adds	r7, #36	; 0x24
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b08b      	sub	sp, #44	; 0x2c
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005ce6:	88fb      	ldrh	r3, [r7, #6]
 8005ce8:	089b      	lsrs	r3, r3, #2
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005cee:	88fb      	ldrh	r3, [r7, #6]
 8005cf0:	f003 0303 	and.w	r3, r3, #3
 8005cf4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	623b      	str	r3, [r7, #32]
 8005cfa:	e014      	b.n	8005d26 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	601a      	str	r2, [r3, #0]
    pDest++;
 8005d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d10:	3301      	adds	r3, #1
 8005d12:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	3301      	adds	r3, #1
 8005d18:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005d20:	6a3b      	ldr	r3, [r7, #32]
 8005d22:	3301      	adds	r3, #1
 8005d24:	623b      	str	r3, [r7, #32]
 8005d26:	6a3a      	ldr	r2, [r7, #32]
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d3e6      	bcc.n	8005cfc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005d2e:	8bfb      	ldrh	r3, [r7, #30]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d01e      	beq.n	8005d72 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f107 0310 	add.w	r3, r7, #16
 8005d44:	6812      	ldr	r2, [r2, #0]
 8005d46:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	6a3b      	ldr	r3, [r7, #32]
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	fa22 f303 	lsr.w	r3, r2, r3
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d58:	701a      	strb	r2, [r3, #0]
      i++;
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d62:	3301      	adds	r3, #1
 8005d64:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005d66:	8bfb      	ldrh	r3, [r7, #30]
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005d6c:	8bfb      	ldrh	r3, [r7, #30]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1ea      	bne.n	8005d48 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	372c      	adds	r7, #44	; 0x2c
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	695b      	ldr	r3, [r3, #20]
 8005d8c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	4013      	ands	r3, r2
 8005d96:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005d98:	68fb      	ldr	r3, [r7, #12]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b083      	sub	sp, #12
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	f003 0301 	and.w	r3, r3, #1
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
	...

08005dc4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	4a13      	ldr	r2, [pc, #76]	; (8005e24 <USB_CoreReset+0x60>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d901      	bls.n	8005de0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e01a      	b.n	8005e16 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	daf3      	bge.n	8005dd0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005de8:	2300      	movs	r3, #0
 8005dea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	f043 0201 	orr.w	r2, r3, #1
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	60fb      	str	r3, [r7, #12]
 8005dfe:	4a09      	ldr	r2, [pc, #36]	; (8005e24 <USB_CoreReset+0x60>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d901      	bls.n	8005e08 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e006      	b.n	8005e16 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d0f1      	beq.n	8005df8 <USB_CoreReset+0x34>

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	00030d40 	.word	0x00030d40

08005e28 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e28:	b084      	sub	sp, #16
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b084      	sub	sp, #16
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	f107 001c 	add.w	r0, r7, #28
 8005e36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e44:	461a      	mov	r2, r3
 8005e46:	2300      	movs	r3, #0
 8005e48:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e66:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d018      	beq.n	8005eac <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d10a      	bne.n	8005e96 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e8e:	f043 0304 	orr.w	r3, r3, #4
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	e014      	b.n	8005ec0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ea4:	f023 0304 	bic.w	r3, r3, #4
 8005ea8:	6013      	str	r3, [r2, #0]
 8005eaa:	e009      	b.n	8005ec0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005eba:	f023 0304 	bic.w	r3, r3, #4
 8005ebe:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005ec0:	2110      	movs	r1, #16
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7ff fe82 	bl	8005bcc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7ff fea3 	bl	8005c14 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60fb      	str	r3, [r7, #12]
 8005ed2:	e015      	b.n	8005f00 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ee6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	3301      	adds	r3, #1
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d3e5      	bcc.n	8005ed4 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f04f 32ff 	mov.w	r2, #4294967295
 8005f14:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00b      	beq.n	8005f3a <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f28:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a13      	ldr	r2, [pc, #76]	; (8005f7c <USB_HostInit+0x154>)
 8005f2e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a13      	ldr	r2, [pc, #76]	; (8005f80 <USB_HostInit+0x158>)
 8005f34:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005f38:	e009      	b.n	8005f4e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2280      	movs	r2, #128	; 0x80
 8005f3e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a10      	ldr	r2, [pc, #64]	; (8005f84 <USB_HostInit+0x15c>)
 8005f44:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a0f      	ldr	r2, [pc, #60]	; (8005f88 <USB_HostInit+0x160>)
 8005f4a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d105      	bne.n	8005f60 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	f043 0210 	orr.w	r2, r3, #16
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	699a      	ldr	r2, [r3, #24]
 8005f64:	4b09      	ldr	r3, [pc, #36]	; (8005f8c <USB_HostInit+0x164>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f78:	b004      	add	sp, #16
 8005f7a:	4770      	bx	lr
 8005f7c:	01000200 	.word	0x01000200
 8005f80:	00e00300 	.word	0x00e00300
 8005f84:	00600080 	.word	0x00600080
 8005f88:	004000e0 	.word	0x004000e0
 8005f8c:	a3200008 	.word	0xa3200008

08005f90 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	460b      	mov	r3, r1
 8005f9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fae:	f023 0303 	bic.w	r3, r3, #3
 8005fb2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	78fb      	ldrb	r3, [r7, #3]
 8005fbe:	f003 0303 	and.w	r3, r3, #3
 8005fc2:	68f9      	ldr	r1, [r7, #12]
 8005fc4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005fcc:	78fb      	ldrb	r3, [r7, #3]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d107      	bne.n	8005fe2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fd8:	461a      	mov	r2, r3
 8005fda:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005fde:	6053      	str	r3, [r2, #4]
 8005fe0:	e009      	b.n	8005ff6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005fe2:	78fb      	ldrb	r3, [r7, #3]
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d106      	bne.n	8005ff6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fee:	461a      	mov	r2, r3
 8005ff0:	f241 7370 	movw	r3, #6000	; 0x1770
 8005ff4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3714      	adds	r7, #20
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006024:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800602e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006032:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006034:	2064      	movs	r0, #100	; 0x64
 8006036:	f7fc f9bd 	bl	80023b4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006042:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006046:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006048:	200a      	movs	r0, #10
 800604a:	f7fc f9b3 	bl	80023b4 <HAL_Delay>

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	460b      	mov	r3, r1
 8006062:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006068:	2300      	movs	r3, #0
 800606a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800607c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d109      	bne.n	800609c <USB_DriveVbus+0x44>
 8006088:	78fb      	ldrb	r3, [r7, #3]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d106      	bne.n	800609c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006096:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800609a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a6:	d109      	bne.n	80060bc <USB_DriveVbus+0x64>
 80060a8:	78fb      	ldrb	r3, [r7, #3]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d106      	bne.n	80060bc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80060b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060ba:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b085      	sub	sp, #20
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80060d6:	2300      	movs	r3, #0
 80060d8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	0c5b      	lsrs	r3, r3, #17
 80060e8:	f003 0303 	and.w	r3, r3, #3
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	b29b      	uxth	r3, r3
}
 800610e:	4618      	mov	r0, r3
 8006110:	3714      	adds	r7, #20
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
	...

0800611c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b088      	sub	sp, #32
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	4608      	mov	r0, r1
 8006126:	4611      	mov	r1, r2
 8006128:	461a      	mov	r2, r3
 800612a:	4603      	mov	r3, r0
 800612c:	70fb      	strb	r3, [r7, #3]
 800612e:	460b      	mov	r3, r1
 8006130:	70bb      	strb	r3, [r7, #2]
 8006132:	4613      	mov	r3, r2
 8006134:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800613e:	78fb      	ldrb	r3, [r7, #3]
 8006140:	015a      	lsls	r2, r3, #5
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	4413      	add	r3, r2
 8006146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800614a:	461a      	mov	r2, r3
 800614c:	f04f 33ff 	mov.w	r3, #4294967295
 8006150:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006152:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006156:	2b03      	cmp	r3, #3
 8006158:	d87e      	bhi.n	8006258 <USB_HC_Init+0x13c>
 800615a:	a201      	add	r2, pc, #4	; (adr r2, 8006160 <USB_HC_Init+0x44>)
 800615c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006160:	08006171 	.word	0x08006171
 8006164:	0800621b 	.word	0x0800621b
 8006168:	08006171 	.word	0x08006171
 800616c:	080061dd 	.word	0x080061dd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006170:	78fb      	ldrb	r3, [r7, #3]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	4413      	add	r3, r2
 8006178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800617c:	461a      	mov	r2, r3
 800617e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006182:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006184:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006188:	2b00      	cmp	r3, #0
 800618a:	da10      	bge.n	80061ae <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800618c:	78fb      	ldrb	r3, [r7, #3]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	4413      	add	r3, r2
 8006194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	78fa      	ldrb	r2, [r7, #3]
 800619c:	0151      	lsls	r1, r2, #5
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	440a      	add	r2, r1
 80061a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061aa:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80061ac:	e057      	b.n	800625e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d051      	beq.n	800625e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80061ba:	78fb      	ldrb	r3, [r7, #3]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	78fa      	ldrb	r2, [r7, #3]
 80061ca:	0151      	lsls	r1, r2, #5
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	440a      	add	r2, r1
 80061d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80061d8:	60d3      	str	r3, [r2, #12]
      break;
 80061da:	e040      	b.n	800625e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80061dc:	78fb      	ldrb	r3, [r7, #3]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e8:	461a      	mov	r2, r3
 80061ea:	f240 639d 	movw	r3, #1693	; 0x69d
 80061ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80061f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	da34      	bge.n	8006262 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80061f8:	78fb      	ldrb	r3, [r7, #3]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	78fa      	ldrb	r2, [r7, #3]
 8006208:	0151      	lsls	r1, r2, #5
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	440a      	add	r2, r1
 800620e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006216:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006218:	e023      	b.n	8006262 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800621a:	78fb      	ldrb	r3, [r7, #3]
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	4413      	add	r3, r2
 8006222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006226:	461a      	mov	r2, r3
 8006228:	f240 2325 	movw	r3, #549	; 0x225
 800622c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800622e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006232:	2b00      	cmp	r3, #0
 8006234:	da17      	bge.n	8006266 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006236:	78fb      	ldrb	r3, [r7, #3]
 8006238:	015a      	lsls	r2, r3, #5
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	4413      	add	r3, r2
 800623e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	78fa      	ldrb	r2, [r7, #3]
 8006246:	0151      	lsls	r1, r2, #5
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	440a      	add	r2, r1
 800624c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006250:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006254:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006256:	e006      	b.n	8006266 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	77fb      	strb	r3, [r7, #31]
      break;
 800625c:	e004      	b.n	8006268 <USB_HC_Init+0x14c>
      break;
 800625e:	bf00      	nop
 8006260:	e002      	b.n	8006268 <USB_HC_Init+0x14c>
      break;
 8006262:	bf00      	nop
 8006264:	e000      	b.n	8006268 <USB_HC_Init+0x14c>
      break;
 8006266:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800626e:	699a      	ldr	r2, [r3, #24]
 8006270:	78fb      	ldrb	r3, [r7, #3]
 8006272:	f003 030f 	and.w	r3, r3, #15
 8006276:	2101      	movs	r1, #1
 8006278:	fa01 f303 	lsl.w	r3, r1, r3
 800627c:	6939      	ldr	r1, [r7, #16]
 800627e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006282:	4313      	orrs	r3, r2
 8006284:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006292:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006296:	2b00      	cmp	r3, #0
 8006298:	da03      	bge.n	80062a2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800629a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800629e:	61bb      	str	r3, [r7, #24]
 80062a0:	e001      	b.n	80062a6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7ff ff0f 	bl	80060ca <USB_GetHostSpeed>
 80062ac:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80062ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d106      	bne.n	80062c4 <USB_HC_Init+0x1a8>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d003      	beq.n	80062c4 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80062bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	e001      	b.n	80062c8 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80062c4:	2300      	movs	r3, #0
 80062c6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062c8:	787b      	ldrb	r3, [r7, #1]
 80062ca:	059b      	lsls	r3, r3, #22
 80062cc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80062d0:	78bb      	ldrb	r3, [r7, #2]
 80062d2:	02db      	lsls	r3, r3, #11
 80062d4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062d8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80062da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80062de:	049b      	lsls	r3, r3, #18
 80062e0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80062e4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80062e6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80062e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80062ec:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062f2:	78fb      	ldrb	r3, [r7, #3]
 80062f4:	0159      	lsls	r1, r3, #5
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	440b      	add	r3, r1
 80062fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062fe:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006304:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006306:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800630a:	2b03      	cmp	r3, #3
 800630c:	d10f      	bne.n	800632e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800630e:	78fb      	ldrb	r3, [r7, #3]
 8006310:	015a      	lsls	r2, r3, #5
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	4413      	add	r3, r2
 8006316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	78fa      	ldrb	r2, [r7, #3]
 800631e:	0151      	lsls	r1, r2, #5
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	440a      	add	r2, r1
 8006324:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006328:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800632c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800632e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3720      	adds	r7, #32
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b08c      	sub	sp, #48	; 0x30
 800633c:	af02      	add	r7, sp, #8
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	4613      	mov	r3, r2
 8006344:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	785b      	ldrb	r3, [r3, #1]
 800634e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006350:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006354:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800635a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800635e:	2b00      	cmp	r3, #0
 8006360:	d02d      	beq.n	80063be <USB_HC_StartXfer+0x86>
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	791b      	ldrb	r3, [r3, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d129      	bne.n	80063be <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800636a:	79fb      	ldrb	r3, [r7, #7]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d117      	bne.n	80063a0 <USB_HC_StartXfer+0x68>
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	79db      	ldrb	r3, [r3, #7]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d003      	beq.n	8006380 <USB_HC_StartXfer+0x48>
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	79db      	ldrb	r3, [r3, #7]
 800637c:	2b02      	cmp	r3, #2
 800637e:	d10f      	bne.n	80063a0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	6a3b      	ldr	r3, [r7, #32]
 8006386:	4413      	add	r3, r2
 8006388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	69fa      	ldr	r2, [r7, #28]
 8006390:	0151      	lsls	r1, r2, #5
 8006392:	6a3a      	ldr	r2, [r7, #32]
 8006394:	440a      	add	r2, r1
 8006396:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800639a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800639e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80063a0:	79fb      	ldrb	r3, [r7, #7]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10b      	bne.n	80063be <USB_HC_StartXfer+0x86>
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	795b      	ldrb	r3, [r3, #5]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d107      	bne.n	80063be <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	785b      	ldrb	r3, [r3, #1]
 80063b2:	4619      	mov	r1, r3
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f000 fa2f 	bl	8006818 <USB_DoPing>
      return HAL_OK;
 80063ba:	2300      	movs	r3, #0
 80063bc:	e0f8      	b.n	80065b0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d018      	beq.n	80063f8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	8912      	ldrh	r2, [r2, #8]
 80063ce:	4413      	add	r3, r2
 80063d0:	3b01      	subs	r3, #1
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	8912      	ldrh	r2, [r2, #8]
 80063d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80063da:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80063dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80063de:	8b7b      	ldrh	r3, [r7, #26]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d90b      	bls.n	80063fc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80063e4:	8b7b      	ldrh	r3, [r7, #26]
 80063e6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80063e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	8912      	ldrh	r2, [r2, #8]
 80063ee:	fb02 f203 	mul.w	r2, r2, r3
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	611a      	str	r2, [r3, #16]
 80063f6:	e001      	b.n	80063fc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80063f8:	2301      	movs	r3, #1
 80063fa:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	78db      	ldrb	r3, [r3, #3]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d007      	beq.n	8006414 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006404:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	8912      	ldrh	r2, [r2, #8]
 800640a:	fb02 f203 	mul.w	r2, r2, r3
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	611a      	str	r2, [r3, #16]
 8006412:	e003      	b.n	800641c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	695a      	ldr	r2, [r3, #20]
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006424:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006426:	04d9      	lsls	r1, r3, #19
 8006428:	4b63      	ldr	r3, [pc, #396]	; (80065b8 <USB_HC_StartXfer+0x280>)
 800642a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800642c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	7a9b      	ldrb	r3, [r3, #10]
 8006432:	075b      	lsls	r3, r3, #29
 8006434:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006438:	69f9      	ldr	r1, [r7, #28]
 800643a:	0148      	lsls	r0, r1, #5
 800643c:	6a39      	ldr	r1, [r7, #32]
 800643e:	4401      	add	r1, r0
 8006440:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006444:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006446:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006448:	79fb      	ldrb	r3, [r7, #7]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d009      	beq.n	8006462 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	68d9      	ldr	r1, [r3, #12]
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	4413      	add	r3, r2
 800645a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645e:	460a      	mov	r2, r1
 8006460:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006462:	6a3b      	ldr	r3, [r7, #32]
 8006464:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b00      	cmp	r3, #0
 8006470:	bf0c      	ite	eq
 8006472:	2301      	moveq	r3, #1
 8006474:	2300      	movne	r3, #0
 8006476:	b2db      	uxtb	r3, r3
 8006478:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	4413      	add	r3, r2
 8006482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	69fa      	ldr	r2, [r7, #28]
 800648a:	0151      	lsls	r1, r2, #5
 800648c:	6a3a      	ldr	r2, [r7, #32]
 800648e:	440a      	add	r2, r1
 8006490:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006494:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006498:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	7e7b      	ldrb	r3, [r7, #25]
 80064aa:	075b      	lsls	r3, r3, #29
 80064ac:	69f9      	ldr	r1, [r7, #28]
 80064ae:	0148      	lsls	r0, r1, #5
 80064b0:	6a39      	ldr	r1, [r7, #32]
 80064b2:	4401      	add	r1, r0
 80064b4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80064b8:	4313      	orrs	r3, r2
 80064ba:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064d2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	78db      	ldrb	r3, [r3, #3]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d004      	beq.n	80064e6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064e2:	613b      	str	r3, [r7, #16]
 80064e4:	e003      	b.n	80064ee <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064ec:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064f4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	6a3b      	ldr	r3, [r7, #32]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006502:	461a      	mov	r2, r3
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006508:	79fb      	ldrb	r3, [r7, #7]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	e04e      	b.n	80065b0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	78db      	ldrb	r3, [r3, #3]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d149      	bne.n	80065ae <USB_HC_StartXfer+0x276>
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d045      	beq.n	80065ae <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	79db      	ldrb	r3, [r3, #7]
 8006526:	2b03      	cmp	r3, #3
 8006528:	d830      	bhi.n	800658c <USB_HC_StartXfer+0x254>
 800652a:	a201      	add	r2, pc, #4	; (adr r2, 8006530 <USB_HC_StartXfer+0x1f8>)
 800652c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006530:	08006541 	.word	0x08006541
 8006534:	08006565 	.word	0x08006565
 8006538:	08006541 	.word	0x08006541
 800653c:	08006565 	.word	0x08006565
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	3303      	adds	r3, #3
 8006546:	089b      	lsrs	r3, r3, #2
 8006548:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800654a:	8afa      	ldrh	r2, [r7, #22]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006550:	b29b      	uxth	r3, r3
 8006552:	429a      	cmp	r2, r3
 8006554:	d91c      	bls.n	8006590 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	f043 0220 	orr.w	r2, r3, #32
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	619a      	str	r2, [r3, #24]
        }
        break;
 8006562:	e015      	b.n	8006590 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	3303      	adds	r3, #3
 800656a:	089b      	lsrs	r3, r3, #2
 800656c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800656e:	8afa      	ldrh	r2, [r7, #22]
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	b29b      	uxth	r3, r3
 800657a:	429a      	cmp	r2, r3
 800657c:	d90a      	bls.n	8006594 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	619a      	str	r2, [r3, #24]
        }
        break;
 800658a:	e003      	b.n	8006594 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800658c:	bf00      	nop
 800658e:	e002      	b.n	8006596 <USB_HC_StartXfer+0x25e>
        break;
 8006590:	bf00      	nop
 8006592:	e000      	b.n	8006596 <USB_HC_StartXfer+0x25e>
        break;
 8006594:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	68d9      	ldr	r1, [r3, #12]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	785a      	ldrb	r2, [r3, #1]
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	2000      	movs	r0, #0
 80065a6:	9000      	str	r0, [sp, #0]
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f7ff fb53 	bl	8005c54 <USB_WritePacket>
  }

  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3728      	adds	r7, #40	; 0x28
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	1ff80000 	.word	0x1ff80000

080065bc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065ce:	695b      	ldr	r3, [r3, #20]
 80065d0:	b29b      	uxth	r3, r3
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3714      	adds	r7, #20
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80065de:	b480      	push	{r7}
 80065e0:	b089      	sub	sp, #36	; 0x24
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
 80065e6:	460b      	mov	r3, r1
 80065e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80065ee:	78fb      	ldrb	r3, [r7, #3]
 80065f0:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80065f2:	2300      	movs	r3, #0
 80065f4:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	0c9b      	lsrs	r3, r3, #18
 8006606:	f003 0303 	and.w	r3, r3, #3
 800660a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	015a      	lsls	r2, r3, #5
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	4413      	add	r3, r2
 8006614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	0fdb      	lsrs	r3, r3, #31
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f003 0320 	and.w	r3, r3, #32
 800662a:	2b20      	cmp	r3, #32
 800662c:	d104      	bne.n	8006638 <USB_HC_Halt+0x5a>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006634:	2300      	movs	r3, #0
 8006636:	e0e8      	b.n	800680a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d002      	beq.n	8006644 <USB_HC_Halt+0x66>
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	2b02      	cmp	r3, #2
 8006642:	d173      	bne.n	800672c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	4413      	add	r3, r2
 800664c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	0151      	lsls	r1, r2, #5
 8006656:	69ba      	ldr	r2, [r7, #24]
 8006658:	440a      	add	r2, r1
 800665a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800665e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006662:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f003 0320 	and.w	r3, r3, #32
 800666c:	2b00      	cmp	r3, #0
 800666e:	f040 80cb 	bne.w	8006808 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006676:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d143      	bne.n	8006706 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	4413      	add	r3, r2
 8006686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	0151      	lsls	r1, r2, #5
 8006690:	69ba      	ldr	r2, [r7, #24]
 8006692:	440a      	add	r2, r1
 8006694:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006698:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800669c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	0151      	lsls	r1, r2, #5
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	440a      	add	r2, r1
 80066b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066bc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	0151      	lsls	r1, r2, #5
 80066d0:	69ba      	ldr	r2, [r7, #24]
 80066d2:	440a      	add	r2, r1
 80066d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066dc:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	3301      	adds	r3, #1
 80066e2:	61fb      	str	r3, [r7, #28]
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066ea:	d81d      	bhi.n	8006728 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006702:	d0ec      	beq.n	80066de <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006704:	e080      	b.n	8006808 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	4413      	add	r3, r2
 800670e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	0151      	lsls	r1, r2, #5
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	440a      	add	r2, r1
 800671c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006720:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006724:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006726:	e06f      	b.n	8006808 <USB_HC_Halt+0x22a>
            break;
 8006728:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800672a:	e06d      	b.n	8006808 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	4413      	add	r3, r2
 8006734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	0151      	lsls	r1, r2, #5
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	440a      	add	r2, r1
 8006742:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006746:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800674a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d143      	bne.n	80067e4 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	015a      	lsls	r2, r3, #5
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	4413      	add	r3, r2
 8006764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	0151      	lsls	r1, r2, #5
 800676e:	69ba      	ldr	r2, [r7, #24]
 8006770:	440a      	add	r2, r1
 8006772:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006776:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800677a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	4413      	add	r3, r2
 8006784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	0151      	lsls	r1, r2, #5
 800678e:	69ba      	ldr	r2, [r7, #24]
 8006790:	440a      	add	r2, r1
 8006792:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006796:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800679a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	0151      	lsls	r1, r2, #5
 80067ae:	69ba      	ldr	r2, [r7, #24]
 80067b0:	440a      	add	r2, r1
 80067b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067ba:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	3301      	adds	r3, #1
 80067c0:	61fb      	str	r3, [r7, #28]
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067c8:	d81d      	bhi.n	8006806 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067e0:	d0ec      	beq.n	80067bc <USB_HC_Halt+0x1de>
 80067e2:	e011      	b.n	8006808 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	015a      	lsls	r2, r3, #5
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	0151      	lsls	r1, r2, #5
 80067f6:	69ba      	ldr	r2, [r7, #24]
 80067f8:	440a      	add	r2, r1
 80067fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006802:	6013      	str	r3, [r2, #0]
 8006804:	e000      	b.n	8006808 <USB_HC_Halt+0x22a>
          break;
 8006806:	bf00      	nop
    }
  }

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3724      	adds	r7, #36	; 0x24
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
	...

08006818 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006818:	b480      	push	{r7}
 800681a:	b087      	sub	sp, #28
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	460b      	mov	r3, r1
 8006822:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006828:	78fb      	ldrb	r3, [r7, #3]
 800682a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800682c:	2301      	movs	r3, #1
 800682e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	04da      	lsls	r2, r3, #19
 8006834:	4b15      	ldr	r3, [pc, #84]	; (800688c <USB_DoPing+0x74>)
 8006836:	4013      	ands	r3, r2
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	0151      	lsls	r1, r2, #5
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	440a      	add	r2, r1
 8006840:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006844:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006848:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	4413      	add	r3, r2
 8006852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006860:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006868:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	015a      	lsls	r2, r3, #5
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	4413      	add	r3, r2
 8006872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006876:	461a      	mov	r2, r3
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	371c      	adds	r7, #28
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	1ff80000 	.word	0x1ff80000

08006890 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800689c:	2300      	movs	r3, #0
 800689e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f7ff f935 	bl	8005b10 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80068a6:	2110      	movs	r1, #16
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f7ff f98f 	bl	8005bcc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f7ff f9b0 	bl	8005c14 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80068b4:	2300      	movs	r3, #0
 80068b6:	613b      	str	r3, [r7, #16]
 80068b8:	e01f      	b.n	80068fa <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	015a      	lsls	r2, r3, #5
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068d0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068d8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068e0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ee:	461a      	mov	r2, r3
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	3301      	adds	r3, #1
 80068f8:	613b      	str	r3, [r7, #16]
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	2b0f      	cmp	r3, #15
 80068fe:	d9dc      	bls.n	80068ba <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006900:	2300      	movs	r3, #0
 8006902:	613b      	str	r3, [r7, #16]
 8006904:	e034      	b.n	8006970 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	015a      	lsls	r2, r3, #5
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	4413      	add	r3, r2
 800690e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800691c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006924:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800692c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	4413      	add	r3, r2
 8006936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800693a:	461a      	mov	r2, r3
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	3301      	adds	r3, #1
 8006944:	617b      	str	r3, [r7, #20]
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800694c:	d80c      	bhi.n	8006968 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	015a      	lsls	r2, r3, #5
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	4413      	add	r3, r2
 8006956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006960:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006964:	d0ec      	beq.n	8006940 <USB_StopHost+0xb0>
 8006966:	e000      	b.n	800696a <USB_StopHost+0xda>
        break;
 8006968:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	3301      	adds	r3, #1
 800696e:	613b      	str	r3, [r7, #16]
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	2b0f      	cmp	r3, #15
 8006974:	d9c7      	bls.n	8006906 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800697c:	461a      	mov	r2, r3
 800697e:	f04f 33ff 	mov.w	r3, #4294967295
 8006982:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f04f 32ff 	mov.w	r2, #4294967295
 800698a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7ff f8ae 	bl	8005aee <USB_EnableGlobalInt>

  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3718      	adds	r7, #24
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800699c:	b590      	push	{r4, r7, lr}
 800699e:	b089      	sub	sp, #36	; 0x24
 80069a0:	af04      	add	r7, sp, #16
 80069a2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80069a4:	2301      	movs	r3, #1
 80069a6:	2202      	movs	r2, #2
 80069a8:	2102      	movs	r1, #2
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fc66 	bl	800727c <USBH_FindInterface>
 80069b0:	4603      	mov	r3, r0
 80069b2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
 80069b6:	2bff      	cmp	r3, #255	; 0xff
 80069b8:	d002      	beq.n	80069c0 <USBH_CDC_InterfaceInit+0x24>
 80069ba:	7bfb      	ldrb	r3, [r7, #15]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d901      	bls.n	80069c4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80069c0:	2302      	movs	r3, #2
 80069c2:	e13d      	b.n	8006c40 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
 80069c6:	4619      	mov	r1, r3
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fc3b 	bl	8007244 <USBH_SelectInterface>
 80069ce:	4603      	mov	r3, r0
 80069d0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80069d2:	7bbb      	ldrb	r3, [r7, #14]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d001      	beq.n	80069dc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80069d8:	2302      	movs	r3, #2
 80069da:	e131      	b.n	8006c40 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80069e2:	2050      	movs	r0, #80	; 0x50
 80069e4:	f002 fa00 	bl	8008de8 <malloc>
 80069e8:	4603      	mov	r3, r0
 80069ea:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069f2:	69db      	ldr	r3, [r3, #28]
 80069f4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d101      	bne.n	8006a00 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80069fc:	2302      	movs	r3, #2
 80069fe:	e11f      	b.n	8006c40 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006a00:	2250      	movs	r2, #80	; 0x50
 8006a02:	2100      	movs	r1, #0
 8006a04:	68b8      	ldr	r0, [r7, #8]
 8006a06:	f002 f9ff 	bl	8008e08 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006a0a:	7bfb      	ldrb	r3, [r7, #15]
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	211a      	movs	r1, #26
 8006a10:	fb01 f303 	mul.w	r3, r1, r3
 8006a14:	4413      	add	r3, r2
 8006a16:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	b25b      	sxtb	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	da15      	bge.n	8006a4e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006a22:	7bfb      	ldrb	r3, [r7, #15]
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	211a      	movs	r1, #26
 8006a28:	fb01 f303 	mul.w	r3, r1, r3
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006a32:	781a      	ldrb	r2, [r3, #0]
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006a38:	7bfb      	ldrb	r3, [r7, #15]
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	211a      	movs	r1, #26
 8006a3e:	fb01 f303 	mul.w	r3, r1, r3
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006a48:	881a      	ldrh	r2, [r3, #0]
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	785b      	ldrb	r3, [r3, #1]
 8006a52:	4619      	mov	r1, r3
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f001 fe32 	bl	80086be <USBH_AllocPipe>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	7819      	ldrb	r1, [r3, #0]
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	7858      	ldrb	r0, [r3, #1]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	8952      	ldrh	r2, [r2, #10]
 8006a7a:	9202      	str	r2, [sp, #8]
 8006a7c:	2203      	movs	r2, #3
 8006a7e:	9201      	str	r2, [sp, #4]
 8006a80:	9300      	str	r3, [sp, #0]
 8006a82:	4623      	mov	r3, r4
 8006a84:	4602      	mov	r2, r0
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f001 fdea 	bl	8008660 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	2200      	movs	r2, #0
 8006a92:	4619      	mov	r1, r3
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f002 f8f9 	bl	8008c8c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	210a      	movs	r1, #10
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 fbeb 	bl	800727c <USBH_FindInterface>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006aaa:	7bfb      	ldrb	r3, [r7, #15]
 8006aac:	2bff      	cmp	r3, #255	; 0xff
 8006aae:	d002      	beq.n	8006ab6 <USBH_CDC_InterfaceInit+0x11a>
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d901      	bls.n	8006aba <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	e0c2      	b.n	8006c40 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006aba:	7bfb      	ldrb	r3, [r7, #15]
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	211a      	movs	r1, #26
 8006ac0:	fb01 f303 	mul.w	r3, r1, r3
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	b25b      	sxtb	r3, r3
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	da16      	bge.n	8006b00 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ad2:	7bfb      	ldrb	r3, [r7, #15]
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	211a      	movs	r1, #26
 8006ad8:	fb01 f303 	mul.w	r3, r1, r3
 8006adc:	4413      	add	r3, r2
 8006ade:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ae2:	781a      	ldrb	r2, [r3, #0]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ae8:	7bfb      	ldrb	r3, [r7, #15]
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	211a      	movs	r1, #26
 8006aee:	fb01 f303 	mul.w	r3, r1, r3
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006af8:	881a      	ldrh	r2, [r3, #0]
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	835a      	strh	r2, [r3, #26]
 8006afe:	e015      	b.n	8006b2c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	211a      	movs	r1, #26
 8006b06:	fb01 f303 	mul.w	r3, r1, r3
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b10:	781a      	ldrb	r2, [r3, #0]
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b16:	7bfb      	ldrb	r3, [r7, #15]
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	211a      	movs	r1, #26
 8006b1c:	fb01 f303 	mul.w	r3, r1, r3
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006b26:	881a      	ldrh	r2, [r3, #0]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	211a      	movs	r1, #26
 8006b32:	fb01 f303 	mul.w	r3, r1, r3
 8006b36:	4413      	add	r3, r2
 8006b38:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	b25b      	sxtb	r3, r3
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	da16      	bge.n	8006b72 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	211a      	movs	r1, #26
 8006b4a:	fb01 f303 	mul.w	r3, r1, r3
 8006b4e:	4413      	add	r3, r2
 8006b50:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006b54:	781a      	ldrb	r2, [r3, #0]
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b5a:	7bfb      	ldrb	r3, [r7, #15]
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	211a      	movs	r1, #26
 8006b60:	fb01 f303 	mul.w	r3, r1, r3
 8006b64:	4413      	add	r3, r2
 8006b66:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006b6a:	881a      	ldrh	r2, [r3, #0]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	835a      	strh	r2, [r3, #26]
 8006b70:	e015      	b.n	8006b9e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b72:	7bfb      	ldrb	r3, [r7, #15]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	211a      	movs	r1, #26
 8006b78:	fb01 f303 	mul.w	r3, r1, r3
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006b82:	781a      	ldrb	r2, [r3, #0]
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	211a      	movs	r1, #26
 8006b8e:	fb01 f303 	mul.w	r3, r1, r3
 8006b92:	4413      	add	r3, r2
 8006b94:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006b98:	881a      	ldrh	r2, [r3, #0]
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	7b9b      	ldrb	r3, [r3, #14]
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f001 fd8a 	bl	80086be <USBH_AllocPipe>
 8006baa:	4603      	mov	r3, r0
 8006bac:	461a      	mov	r2, r3
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	7bdb      	ldrb	r3, [r3, #15]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f001 fd80 	bl	80086be <USBH_AllocPipe>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	7b59      	ldrb	r1, [r3, #13]
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	7b98      	ldrb	r0, [r3, #14]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	8b12      	ldrh	r2, [r2, #24]
 8006bde:	9202      	str	r2, [sp, #8]
 8006be0:	2202      	movs	r2, #2
 8006be2:	9201      	str	r2, [sp, #4]
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	4623      	mov	r3, r4
 8006be8:	4602      	mov	r2, r0
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f001 fd38 	bl	8008660 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	7b19      	ldrb	r1, [r3, #12]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	7bd8      	ldrb	r0, [r3, #15]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	8b52      	ldrh	r2, [r2, #26]
 8006c08:	9202      	str	r2, [sp, #8]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	9201      	str	r2, [sp, #4]
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	4623      	mov	r3, r4
 8006c12:	4602      	mov	r2, r0
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f001 fd23 	bl	8008660 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	7b5b      	ldrb	r3, [r3, #13]
 8006c26:	2200      	movs	r2, #0
 8006c28:	4619      	mov	r1, r3
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f002 f82e 	bl	8008c8c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	7b1b      	ldrb	r3, [r3, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	4619      	mov	r1, r3
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f002 f827 	bl	8008c8c <USBH_LL_SetToggle>

  return USBH_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd90      	pop	{r4, r7, pc}

08006c48 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c56:	69db      	ldr	r3, [r3, #28]
 8006c58:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00e      	beq.n	8006c80 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f001 fd18 	bl	800869e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	4619      	mov	r1, r3
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 fd43 	bl	8008700 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	7b1b      	ldrb	r3, [r3, #12]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00e      	beq.n	8006ca6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	7b1b      	ldrb	r3, [r3, #12]
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f001 fd05 	bl	800869e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	7b1b      	ldrb	r3, [r3, #12]
 8006c98:	4619      	mov	r1, r3
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f001 fd30 	bl	8008700 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	7b5b      	ldrb	r3, [r3, #13]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00e      	beq.n	8006ccc <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	7b5b      	ldrb	r3, [r3, #13]
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f001 fcf2 	bl	800869e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	7b5b      	ldrb	r3, [r3, #13]
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f001 fd1d 	bl	8008700 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cd2:	69db      	ldr	r3, [r3, #28]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00b      	beq.n	8006cf0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cde:	69db      	ldr	r3, [r3, #28]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f002 f889 	bl	8008df8 <free>
    phost->pActiveClass->pData = 0U;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cec:	2200      	movs	r2, #0
 8006cee:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b084      	sub	sp, #16
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d08:	69db      	ldr	r3, [r3, #28]
 8006d0a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	3340      	adds	r3, #64	; 0x40
 8006d10:	4619      	mov	r1, r3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f8b1 	bl	8006e7a <GetLineCoding>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006d1c:	7afb      	ldrb	r3, [r7, #11]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d105      	bne.n	8006d2e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d28:	2102      	movs	r1, #2
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006d2e:	7afb      	ldrb	r3, [r7, #11]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006d40:	2301      	movs	r3, #1
 8006d42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006d44:	2300      	movs	r3, #0
 8006d46:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d4e:	69db      	ldr	r3, [r3, #28]
 8006d50:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006d58:	2b04      	cmp	r3, #4
 8006d5a:	d877      	bhi.n	8006e4c <USBH_CDC_Process+0x114>
 8006d5c:	a201      	add	r2, pc, #4	; (adr r2, 8006d64 <USBH_CDC_Process+0x2c>)
 8006d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d62:	bf00      	nop
 8006d64:	08006d79 	.word	0x08006d79
 8006d68:	08006d7f 	.word	0x08006d7f
 8006d6c:	08006daf 	.word	0x08006daf
 8006d70:	08006e23 	.word	0x08006e23
 8006d74:	08006e31 	.word	0x08006e31
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d7c:	e06d      	b.n	8006e5a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d82:	4619      	mov	r1, r3
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f897 	bl	8006eb8 <SetLineCoding>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d8e:	7bbb      	ldrb	r3, [r7, #14]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d104      	bne.n	8006d9e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	2202      	movs	r2, #2
 8006d98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006d9c:	e058      	b.n	8006e50 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006d9e:	7bbb      	ldrb	r3, [r7, #14]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d055      	beq.n	8006e50 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	2204      	movs	r2, #4
 8006da8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006dac:	e050      	b.n	8006e50 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	3340      	adds	r3, #64	; 0x40
 8006db2:	4619      	mov	r1, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f860 	bl	8006e7a <GetLineCoding>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006dbe:	7bbb      	ldrb	r3, [r7, #14]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d126      	bne.n	8006e12 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dd6:	791b      	ldrb	r3, [r3, #4]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d13b      	bne.n	8006e54 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006de6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d133      	bne.n	8006e54 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006df6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d12b      	bne.n	8006e54 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e04:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d124      	bne.n	8006e54 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f958 	bl	80070c0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006e10:	e020      	b.n	8006e54 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006e12:	7bbb      	ldrb	r3, [r7, #14]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d01d      	beq.n	8006e54 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2204      	movs	r2, #4
 8006e1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006e20:	e018      	b.n	8006e54 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f867 	bl	8006ef6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f8da 	bl	8006fe2 <CDC_ProcessReception>
      break;
 8006e2e:	e014      	b.n	8006e5a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006e30:	2100      	movs	r1, #0
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 ffe3 	bl	8007dfe <USBH_ClrFeature>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e3c:	7bbb      	ldrb	r3, [r7, #14]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10a      	bne.n	8006e58 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006e4a:	e005      	b.n	8006e58 <USBH_CDC_Process+0x120>

    default:
      break;
 8006e4c:	bf00      	nop
 8006e4e:	e004      	b.n	8006e5a <USBH_CDC_Process+0x122>
      break;
 8006e50:	bf00      	nop
 8006e52:	e002      	b.n	8006e5a <USBH_CDC_Process+0x122>
      break;
 8006e54:	bf00      	nop
 8006e56:	e000      	b.n	8006e5a <USBH_CDC_Process+0x122>
      break;
 8006e58:	bf00      	nop

  }

  return status;
 8006e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b082      	sub	sp, #8
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
 8006e82:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	22a1      	movs	r2, #161	; 0xa1
 8006e88:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2221      	movs	r2, #33	; 0x21
 8006e8e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2207      	movs	r2, #7
 8006ea0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2207      	movs	r2, #7
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f001 f988 	bl	80081be <USBH_CtlReq>
 8006eae:	4603      	mov	r3, r0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3708      	adds	r7, #8
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2221      	movs	r2, #33	; 0x21
 8006ec6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2207      	movs	r2, #7
 8006ede:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	2207      	movs	r2, #7
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f001 f969 	bl	80081be <USBH_CtlReq>
 8006eec:	4603      	mov	r3, r0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b086      	sub	sp, #24
 8006efa:	af02      	add	r7, sp, #8
 8006efc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f04:	69db      	ldr	r3, [r3, #28]
 8006f06:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d002      	beq.n	8006f1c <CDC_ProcessTransmission+0x26>
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d023      	beq.n	8006f62 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006f1a:	e05e      	b.n	8006fda <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	8b12      	ldrh	r2, [r2, #24]
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d90b      	bls.n	8006f40 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	69d9      	ldr	r1, [r3, #28]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	8b1a      	ldrh	r2, [r3, #24]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	7b5b      	ldrb	r3, [r3, #13]
 8006f34:	2001      	movs	r0, #1
 8006f36:	9000      	str	r0, [sp, #0]
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f001 fb4e 	bl	80085da <USBH_BulkSendData>
 8006f3e:	e00b      	b.n	8006f58 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	7b5b      	ldrb	r3, [r3, #13]
 8006f4e:	2001      	movs	r0, #1
 8006f50:	9000      	str	r0, [sp, #0]
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f001 fb41 	bl	80085da <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006f60:	e03b      	b.n	8006fda <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	7b5b      	ldrb	r3, [r3, #13]
 8006f66:	4619      	mov	r1, r3
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f001 fe65 	bl	8008c38 <USBH_LL_GetURBState>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006f72:	7afb      	ldrb	r3, [r7, #11]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d128      	bne.n	8006fca <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	8b12      	ldrh	r2, [r2, #24]
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d90e      	bls.n	8006fa2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	8b12      	ldrh	r2, [r2, #24]
 8006f8c:	1a9a      	subs	r2, r3, r2
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	8b12      	ldrh	r2, [r2, #24]
 8006f9a:	441a      	add	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	61da      	str	r2, [r3, #28]
 8006fa0:	e002      	b.n	8006fa8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d004      	beq.n	8006fba <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006fb8:	e00e      	b.n	8006fd8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 f868 	bl	8007098 <USBH_CDC_TransmitCallback>
      break;
 8006fc8:	e006      	b.n	8006fd8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006fca:	7afb      	ldrb	r3, [r7, #11]
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d103      	bne.n	8006fd8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006fd8:	bf00      	nop
  }
}
 8006fda:	bf00      	nop
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b086      	sub	sp, #24
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d002      	beq.n	8007008 <CDC_ProcessReception+0x26>
 8007002:	2b04      	cmp	r3, #4
 8007004:	d00e      	beq.n	8007024 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007006:	e043      	b.n	8007090 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	6a19      	ldr	r1, [r3, #32]
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	8b5a      	ldrh	r2, [r3, #26]
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	7b1b      	ldrb	r3, [r3, #12]
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f001 fb05 	bl	8008624 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	2204      	movs	r2, #4
 800701e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007022:	e035      	b.n	8007090 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	7b1b      	ldrb	r3, [r3, #12]
 8007028:	4619      	mov	r1, r3
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f001 fe04 	bl	8008c38 <USBH_LL_GetURBState>
 8007030:	4603      	mov	r3, r0
 8007032:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007034:	7cfb      	ldrb	r3, [r7, #19]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d129      	bne.n	800708e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	7b1b      	ldrb	r3, [r3, #12]
 800703e:	4619      	mov	r1, r3
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f001 fd67 	bl	8008b14 <USBH_LL_GetLastXferSize>
 8007046:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	429a      	cmp	r2, r3
 8007050:	d016      	beq.n	8007080 <CDC_ProcessReception+0x9e>
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	8b5b      	ldrh	r3, [r3, #26]
 8007056:	461a      	mov	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4293      	cmp	r3, r2
 800705c:	d910      	bls.n	8007080 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	1ad2      	subs	r2, r2, r3
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	6a1a      	ldr	r2, [r3, #32]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	441a      	add	r2, r3
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	2203      	movs	r2, #3
 800707a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800707e:	e006      	b.n	800708e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f80f 	bl	80070ac <USBH_CDC_ReceiveCallback>
      break;
 800708e:	bf00      	nop
  }
}
 8007090:	bf00      	nop
 8007092:	3718      	adds	r7, #24
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	4613      	mov	r3, r2
 80070e0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d101      	bne.n	80070ec <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80070e8:	2302      	movs	r3, #2
 80070ea:	e029      	b.n	8007140 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	79fa      	ldrb	r2, [r7, #7]
 80070f0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	f000 f81f 	bl	8007148 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d003      	beq.n	8007138 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f001 fc37 	bl	80089ac <USBH_LL_Init>

  return USBH_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007150:	2300      	movs	r3, #0
 8007152:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007154:	2300      	movs	r3, #0
 8007156:	60fb      	str	r3, [r7, #12]
 8007158:	e009      	b.n	800716e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	33e0      	adds	r3, #224	; 0xe0
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	4413      	add	r3, r2
 8007164:	2200      	movs	r2, #0
 8007166:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	3301      	adds	r3, #1
 800716c:	60fb      	str	r3, [r7, #12]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2b0e      	cmp	r3, #14
 8007172:	d9f2      	bls.n	800715a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007174:	2300      	movs	r3, #0
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	e009      	b.n	800718e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	4413      	add	r3, r2
 8007180:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007184:	2200      	movs	r2, #0
 8007186:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	3301      	adds	r3, #1
 800718c:	60fb      	str	r3, [r7, #12]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007194:	d3f1      	bcc.n	800717a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2201      	movs	r2, #1
 80071a6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2240      	movs	r2, #64	; 0x40
 80071ba:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80071fa:	2300      	movs	r3, #0
 80071fc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d016      	beq.n	8007232 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10e      	bne.n	800722c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007214:	1c59      	adds	r1, r3, #1
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	33de      	adds	r3, #222	; 0xde
 8007220:	6839      	ldr	r1, [r7, #0]
 8007222:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007226:	2300      	movs	r3, #0
 8007228:	73fb      	strb	r3, [r7, #15]
 800722a:	e004      	b.n	8007236 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800722c:	2302      	movs	r3, #2
 800722e:	73fb      	strb	r3, [r7, #15]
 8007230:	e001      	b.n	8007236 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007232:	2302      	movs	r3, #2
 8007234:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007236:	7bfb      	ldrb	r3, [r7, #15]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	460b      	mov	r3, r1
 800724e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007250:	2300      	movs	r3, #0
 8007252:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800725a:	78fa      	ldrb	r2, [r7, #3]
 800725c:	429a      	cmp	r2, r3
 800725e:	d204      	bcs.n	800726a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	78fa      	ldrb	r2, [r7, #3]
 8007264:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007268:	e001      	b.n	800726e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800726a:	2302      	movs	r3, #2
 800726c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800726e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3714      	adds	r7, #20
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800727c:	b480      	push	{r7}
 800727e:	b087      	sub	sp, #28
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	4608      	mov	r0, r1
 8007286:	4611      	mov	r1, r2
 8007288:	461a      	mov	r2, r3
 800728a:	4603      	mov	r3, r0
 800728c:	70fb      	strb	r3, [r7, #3]
 800728e:	460b      	mov	r3, r1
 8007290:	70bb      	strb	r3, [r7, #2]
 8007292:	4613      	mov	r3, r2
 8007294:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007296:	2300      	movs	r3, #0
 8007298:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800729a:	2300      	movs	r3, #0
 800729c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80072a4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80072a6:	e025      	b.n	80072f4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80072a8:	7dfb      	ldrb	r3, [r7, #23]
 80072aa:	221a      	movs	r2, #26
 80072ac:	fb02 f303 	mul.w	r3, r2, r3
 80072b0:	3308      	adds	r3, #8
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	4413      	add	r3, r2
 80072b6:	3302      	adds	r3, #2
 80072b8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	795b      	ldrb	r3, [r3, #5]
 80072be:	78fa      	ldrb	r2, [r7, #3]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d002      	beq.n	80072ca <USBH_FindInterface+0x4e>
 80072c4:	78fb      	ldrb	r3, [r7, #3]
 80072c6:	2bff      	cmp	r3, #255	; 0xff
 80072c8:	d111      	bne.n	80072ee <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80072ce:	78ba      	ldrb	r2, [r7, #2]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d002      	beq.n	80072da <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80072d4:	78bb      	ldrb	r3, [r7, #2]
 80072d6:	2bff      	cmp	r3, #255	; 0xff
 80072d8:	d109      	bne.n	80072ee <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80072de:	787a      	ldrb	r2, [r7, #1]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d002      	beq.n	80072ea <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80072e4:	787b      	ldrb	r3, [r7, #1]
 80072e6:	2bff      	cmp	r3, #255	; 0xff
 80072e8:	d101      	bne.n	80072ee <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80072ea:	7dfb      	ldrb	r3, [r7, #23]
 80072ec:	e006      	b.n	80072fc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80072ee:	7dfb      	ldrb	r3, [r7, #23]
 80072f0:	3301      	adds	r3, #1
 80072f2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80072f4:	7dfb      	ldrb	r3, [r7, #23]
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d9d6      	bls.n	80072a8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80072fa:	23ff      	movs	r3, #255	; 0xff
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	371c      	adds	r7, #28
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f001 fb87 	bl	8008a24 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007316:	2101      	movs	r1, #1
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f001 fca0 	bl	8008c5e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b088      	sub	sp, #32
 800732c:	af04      	add	r7, sp, #16
 800732e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007330:	2302      	movs	r3, #2
 8007332:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007334:	2300      	movs	r3, #0
 8007336:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800733e:	b2db      	uxtb	r3, r3
 8007340:	2b01      	cmp	r3, #1
 8007342:	d102      	bne.n	800734a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2203      	movs	r2, #3
 8007348:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	b2db      	uxtb	r3, r3
 8007350:	2b0b      	cmp	r3, #11
 8007352:	f200 81b3 	bhi.w	80076bc <USBH_Process+0x394>
 8007356:	a201      	add	r2, pc, #4	; (adr r2, 800735c <USBH_Process+0x34>)
 8007358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735c:	0800738d 	.word	0x0800738d
 8007360:	080073bf 	.word	0x080073bf
 8007364:	08007427 	.word	0x08007427
 8007368:	08007657 	.word	0x08007657
 800736c:	080076bd 	.word	0x080076bd
 8007370:	080074cb 	.word	0x080074cb
 8007374:	080075fd 	.word	0x080075fd
 8007378:	08007501 	.word	0x08007501
 800737c:	08007521 	.word	0x08007521
 8007380:	08007541 	.word	0x08007541
 8007384:	0800756f 	.word	0x0800756f
 8007388:	0800763f 	.word	0x0800763f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007392:	b2db      	uxtb	r3, r3
 8007394:	2b00      	cmp	r3, #0
 8007396:	f000 8193 	beq.w	80076c0 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2201      	movs	r2, #1
 800739e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80073a0:	20c8      	movs	r0, #200	; 0xc8
 80073a2:	f001 fca3 	bl	8008cec <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f001 fb99 	bl	8008ade <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80073bc:	e180      	b.n	80076c0 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d107      	bne.n	80073d8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2202      	movs	r2, #2
 80073d4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80073d6:	e182      	b.n	80076de <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80073de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073e2:	d914      	bls.n	800740e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80073ea:	3301      	adds	r3, #1
 80073ec:	b2da      	uxtb	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80073fa:	2b03      	cmp	r3, #3
 80073fc:	d903      	bls.n	8007406 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	220d      	movs	r2, #13
 8007402:	701a      	strb	r2, [r3, #0]
      break;
 8007404:	e16b      	b.n	80076de <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	701a      	strb	r2, [r3, #0]
      break;
 800740c:	e167      	b.n	80076de <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007414:	f103 020a 	add.w	r2, r3, #10
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800741e:	200a      	movs	r0, #10
 8007420:	f001 fc64 	bl	8008cec <USBH_Delay>
      break;
 8007424:	e15b      	b.n	80076de <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800742c:	2b00      	cmp	r3, #0
 800742e:	d005      	beq.n	800743c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007436:	2104      	movs	r1, #4
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800743c:	2064      	movs	r0, #100	; 0x64
 800743e:	f001 fc55 	bl	8008cec <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f001 fb24 	bl	8008a90 <USBH_LL_GetSpeed>
 8007448:	4603      	mov	r3, r0
 800744a:	461a      	mov	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2205      	movs	r2, #5
 8007456:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007458:	2100      	movs	r1, #0
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f001 f92f 	bl	80086be <USBH_AllocPipe>
 8007460:	4603      	mov	r3, r0
 8007462:	461a      	mov	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007468:	2180      	movs	r1, #128	; 0x80
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f001 f927 	bl	80086be <USBH_AllocPipe>
 8007470:	4603      	mov	r3, r0
 8007472:	461a      	mov	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	7919      	ldrb	r1, [r3, #4]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800748c:	b292      	uxth	r2, r2
 800748e:	9202      	str	r2, [sp, #8]
 8007490:	2200      	movs	r2, #0
 8007492:	9201      	str	r2, [sp, #4]
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	4603      	mov	r3, r0
 8007498:	2280      	movs	r2, #128	; 0x80
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f001 f8e0 	bl	8008660 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	7959      	ldrb	r1, [r3, #5]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80074b4:	b292      	uxth	r2, r2
 80074b6:	9202      	str	r2, [sp, #8]
 80074b8:	2200      	movs	r2, #0
 80074ba:	9201      	str	r2, [sp, #4]
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	4603      	mov	r3, r0
 80074c0:	2200      	movs	r2, #0
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f001 f8cc 	bl	8008660 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80074c8:	e109      	b.n	80076de <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f90c 	bl	80076e8 <USBH_HandleEnum>
 80074d0:	4603      	mov	r3, r0
 80074d2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80074d4:	7bbb      	ldrb	r3, [r7, #14]
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f040 80f3 	bne.w	80076c4 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d103      	bne.n	80074f8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2208      	movs	r2, #8
 80074f4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80074f6:	e0e5      	b.n	80076c4 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2207      	movs	r2, #7
 80074fc:	701a      	strb	r2, [r3, #0]
      break;
 80074fe:	e0e1      	b.n	80076c4 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007506:	2b00      	cmp	r3, #0
 8007508:	f000 80de 	beq.w	80076c8 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007512:	2101      	movs	r1, #1
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2208      	movs	r2, #8
 800751c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800751e:	e0d3      	b.n	80076c8 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007526:	b29b      	uxth	r3, r3
 8007528:	4619      	mov	r1, r3
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fc20 	bl	8007d70 <USBH_SetCfg>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	f040 80ca 	bne.w	80076cc <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2209      	movs	r2, #9
 800753c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800753e:	e0c5      	b.n	80076cc <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007546:	f003 0320 	and.w	r3, r3, #32
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00b      	beq.n	8007566 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800754e:	2101      	movs	r1, #1
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fc30 	bl	8007db6 <USBH_SetFeature>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	f040 80b9 	bne.w	80076d0 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	220a      	movs	r2, #10
 8007562:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007564:	e0b4      	b.n	80076d0 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	220a      	movs	r2, #10
 800756a:	701a      	strb	r2, [r3, #0]
      break;
 800756c:	e0b0      	b.n	80076d0 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 80ad 	beq.w	80076d4 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007582:	2300      	movs	r3, #0
 8007584:	73fb      	strb	r3, [r7, #15]
 8007586:	e016      	b.n	80075b6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007588:	7bfa      	ldrb	r2, [r7, #15]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	32de      	adds	r2, #222	; 0xde
 800758e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007592:	791a      	ldrb	r2, [r3, #4]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800759a:	429a      	cmp	r2, r3
 800759c:	d108      	bne.n	80075b0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800759e:	7bfa      	ldrb	r2, [r7, #15]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	32de      	adds	r2, #222	; 0xde
 80075a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80075ae:	e005      	b.n	80075bc <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
 80075b2:	3301      	adds	r3, #1
 80075b4:	73fb      	strb	r3, [r7, #15]
 80075b6:	7bfb      	ldrb	r3, [r7, #15]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d0e5      	beq.n	8007588 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d016      	beq.n	80075f4 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	4798      	blx	r3
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d109      	bne.n	80075ec <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2206      	movs	r2, #6
 80075dc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075e4:	2103      	movs	r1, #3
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80075ea:	e073      	b.n	80076d4 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	220d      	movs	r2, #13
 80075f0:	701a      	strb	r2, [r3, #0]
      break;
 80075f2:	e06f      	b.n	80076d4 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	220d      	movs	r2, #13
 80075f8:	701a      	strb	r2, [r3, #0]
      break;
 80075fa:	e06b      	b.n	80076d4 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007602:	2b00      	cmp	r3, #0
 8007604:	d017      	beq.n	8007636 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	4798      	blx	r3
 8007612:	4603      	mov	r3, r0
 8007614:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007616:	7bbb      	ldrb	r3, [r7, #14]
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d103      	bne.n	8007626 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	220b      	movs	r2, #11
 8007622:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007624:	e058      	b.n	80076d8 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007626:	7bbb      	ldrb	r3, [r7, #14]
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b02      	cmp	r3, #2
 800762c:	d154      	bne.n	80076d8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	220d      	movs	r2, #13
 8007632:	701a      	strb	r2, [r3, #0]
      break;
 8007634:	e050      	b.n	80076d8 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	220d      	movs	r2, #13
 800763a:	701a      	strb	r2, [r3, #0]
      break;
 800763c:	e04c      	b.n	80076d8 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007644:	2b00      	cmp	r3, #0
 8007646:	d049      	beq.n	80076dc <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800764e:	695b      	ldr	r3, [r3, #20]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	4798      	blx	r3
      }
      break;
 8007654:	e042      	b.n	80076dc <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f7ff fd72 	bl	8007148 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800766a:	2b00      	cmp	r3, #0
 800766c:	d009      	beq.n	8007682 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007688:	2b00      	cmp	r3, #0
 800768a:	d005      	beq.n	8007698 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007692:	2105      	movs	r1, #5
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d107      	bne.n	80076b4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f7ff fe2b 	bl	8007308 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80076b2:	e014      	b.n	80076de <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f001 f9b5 	bl	8008a24 <USBH_LL_Start>
      break;
 80076ba:	e010      	b.n	80076de <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80076bc:	bf00      	nop
 80076be:	e00e      	b.n	80076de <USBH_Process+0x3b6>
      break;
 80076c0:	bf00      	nop
 80076c2:	e00c      	b.n	80076de <USBH_Process+0x3b6>
      break;
 80076c4:	bf00      	nop
 80076c6:	e00a      	b.n	80076de <USBH_Process+0x3b6>
    break;
 80076c8:	bf00      	nop
 80076ca:	e008      	b.n	80076de <USBH_Process+0x3b6>
      break;
 80076cc:	bf00      	nop
 80076ce:	e006      	b.n	80076de <USBH_Process+0x3b6>
      break;
 80076d0:	bf00      	nop
 80076d2:	e004      	b.n	80076de <USBH_Process+0x3b6>
      break;
 80076d4:	bf00      	nop
 80076d6:	e002      	b.n	80076de <USBH_Process+0x3b6>
      break;
 80076d8:	bf00      	nop
 80076da:	e000      	b.n	80076de <USBH_Process+0x3b6>
      break;
 80076dc:	bf00      	nop
  }
  return USBH_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b088      	sub	sp, #32
 80076ec:	af04      	add	r7, sp, #16
 80076ee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80076f0:	2301      	movs	r3, #1
 80076f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80076f4:	2301      	movs	r3, #1
 80076f6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	785b      	ldrb	r3, [r3, #1]
 80076fc:	2b07      	cmp	r3, #7
 80076fe:	f200 81c1 	bhi.w	8007a84 <USBH_HandleEnum+0x39c>
 8007702:	a201      	add	r2, pc, #4	; (adr r2, 8007708 <USBH_HandleEnum+0x20>)
 8007704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007708:	08007729 	.word	0x08007729
 800770c:	080077e7 	.word	0x080077e7
 8007710:	08007851 	.word	0x08007851
 8007714:	080078df 	.word	0x080078df
 8007718:	08007949 	.word	0x08007949
 800771c:	080079b9 	.word	0x080079b9
 8007720:	080079ff 	.word	0x080079ff
 8007724:	08007a45 	.word	0x08007a45
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007728:	2108      	movs	r1, #8
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fa50 	bl	8007bd0 <USBH_Get_DevDesc>
 8007730:	4603      	mov	r3, r0
 8007732:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007734:	7bbb      	ldrb	r3, [r7, #14]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d130      	bne.n	800779c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	7919      	ldrb	r1, [r3, #4]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800775e:	b292      	uxth	r2, r2
 8007760:	9202      	str	r2, [sp, #8]
 8007762:	2200      	movs	r2, #0
 8007764:	9201      	str	r2, [sp, #4]
 8007766:	9300      	str	r3, [sp, #0]
 8007768:	4603      	mov	r3, r0
 800776a:	2280      	movs	r2, #128	; 0x80
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 ff77 	bl	8008660 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	7959      	ldrb	r1, [r3, #5]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007786:	b292      	uxth	r2, r2
 8007788:	9202      	str	r2, [sp, #8]
 800778a:	2200      	movs	r2, #0
 800778c:	9201      	str	r2, [sp, #4]
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	4603      	mov	r3, r0
 8007792:	2200      	movs	r2, #0
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 ff63 	bl	8008660 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800779a:	e175      	b.n	8007a88 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800779c:	7bbb      	ldrb	r3, [r7, #14]
 800779e:	2b03      	cmp	r3, #3
 80077a0:	f040 8172 	bne.w	8007a88 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077aa:	3301      	adds	r3, #1
 80077ac:	b2da      	uxtb	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077ba:	2b03      	cmp	r3, #3
 80077bc:	d903      	bls.n	80077c6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	220d      	movs	r2, #13
 80077c2:	701a      	strb	r2, [r3, #0]
      break;
 80077c4:	e160      	b.n	8007a88 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	795b      	ldrb	r3, [r3, #5]
 80077ca:	4619      	mov	r1, r3
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 ff97 	bl	8008700 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	791b      	ldrb	r3, [r3, #4]
 80077d6:	4619      	mov	r1, r3
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 ff91 	bl	8008700 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	701a      	strb	r2, [r3, #0]
      break;
 80077e4:	e150      	b.n	8007a88 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80077e6:	2112      	movs	r1, #18
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f9f1 	bl	8007bd0 <USBH_Get_DevDesc>
 80077ee:	4603      	mov	r3, r0
 80077f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077f2:	7bbb      	ldrb	r3, [r7, #14]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d103      	bne.n	8007800 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2202      	movs	r2, #2
 80077fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077fe:	e145      	b.n	8007a8c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007800:	7bbb      	ldrb	r3, [r7, #14]
 8007802:	2b03      	cmp	r3, #3
 8007804:	f040 8142 	bne.w	8007a8c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800780e:	3301      	adds	r3, #1
 8007810:	b2da      	uxtb	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800781e:	2b03      	cmp	r3, #3
 8007820:	d903      	bls.n	800782a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	220d      	movs	r2, #13
 8007826:	701a      	strb	r2, [r3, #0]
      break;
 8007828:	e130      	b.n	8007a8c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	795b      	ldrb	r3, [r3, #5]
 800782e:	4619      	mov	r1, r3
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 ff65 	bl	8008700 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	791b      	ldrb	r3, [r3, #4]
 800783a:	4619      	mov	r1, r3
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 ff5f 	bl	8008700 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	701a      	strb	r2, [r3, #0]
      break;
 800784e:	e11d      	b.n	8007a8c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007850:	2101      	movs	r1, #1
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fa68 	bl	8007d28 <USBH_SetAddress>
 8007858:	4603      	mov	r3, r0
 800785a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800785c:	7bbb      	ldrb	r3, [r7, #14]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d132      	bne.n	80078c8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007862:	2002      	movs	r0, #2
 8007864:	f001 fa42 	bl	8008cec <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2203      	movs	r2, #3
 8007874:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	7919      	ldrb	r1, [r3, #4]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800788a:	b292      	uxth	r2, r2
 800788c:	9202      	str	r2, [sp, #8]
 800788e:	2200      	movs	r2, #0
 8007890:	9201      	str	r2, [sp, #4]
 8007892:	9300      	str	r3, [sp, #0]
 8007894:	4603      	mov	r3, r0
 8007896:	2280      	movs	r2, #128	; 0x80
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fee1 	bl	8008660 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	7959      	ldrb	r1, [r3, #5]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80078b2:	b292      	uxth	r2, r2
 80078b4:	9202      	str	r2, [sp, #8]
 80078b6:	2200      	movs	r2, #0
 80078b8:	9201      	str	r2, [sp, #4]
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	4603      	mov	r3, r0
 80078be:	2200      	movs	r2, #0
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 fecd 	bl	8008660 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80078c6:	e0e3      	b.n	8007a90 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
 80078ca:	2b03      	cmp	r3, #3
 80078cc:	f040 80e0 	bne.w	8007a90 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	220d      	movs	r2, #13
 80078d4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	705a      	strb	r2, [r3, #1]
      break;
 80078dc:	e0d8      	b.n	8007a90 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80078de:	2109      	movs	r1, #9
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f99d 	bl	8007c20 <USBH_Get_CfgDesc>
 80078e6:	4603      	mov	r3, r0
 80078e8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078ea:	7bbb      	ldrb	r3, [r7, #14]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d103      	bne.n	80078f8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2204      	movs	r2, #4
 80078f4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80078f6:	e0cd      	b.n	8007a94 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078f8:	7bbb      	ldrb	r3, [r7, #14]
 80078fa:	2b03      	cmp	r3, #3
 80078fc:	f040 80ca 	bne.w	8007a94 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007906:	3301      	adds	r3, #1
 8007908:	b2da      	uxtb	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007916:	2b03      	cmp	r3, #3
 8007918:	d903      	bls.n	8007922 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	220d      	movs	r2, #13
 800791e:	701a      	strb	r2, [r3, #0]
      break;
 8007920:	e0b8      	b.n	8007a94 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	795b      	ldrb	r3, [r3, #5]
 8007926:	4619      	mov	r1, r3
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fee9 	bl	8008700 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	791b      	ldrb	r3, [r3, #4]
 8007932:	4619      	mov	r1, r3
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fee3 	bl	8008700 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	701a      	strb	r2, [r3, #0]
      break;
 8007946:	e0a5      	b.n	8007a94 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800794e:	4619      	mov	r1, r3
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 f965 	bl	8007c20 <USBH_Get_CfgDesc>
 8007956:	4603      	mov	r3, r0
 8007958:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800795a:	7bbb      	ldrb	r3, [r7, #14]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d103      	bne.n	8007968 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2205      	movs	r2, #5
 8007964:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007966:	e097      	b.n	8007a98 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007968:	7bbb      	ldrb	r3, [r7, #14]
 800796a:	2b03      	cmp	r3, #3
 800796c:	f040 8094 	bne.w	8007a98 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007976:	3301      	adds	r3, #1
 8007978:	b2da      	uxtb	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007986:	2b03      	cmp	r3, #3
 8007988:	d903      	bls.n	8007992 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	220d      	movs	r2, #13
 800798e:	701a      	strb	r2, [r3, #0]
      break;
 8007990:	e082      	b.n	8007a98 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	795b      	ldrb	r3, [r3, #5]
 8007996:	4619      	mov	r1, r3
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 feb1 	bl	8008700 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	791b      	ldrb	r3, [r3, #4]
 80079a2:	4619      	mov	r1, r3
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 feab 	bl	8008700 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	701a      	strb	r2, [r3, #0]
      break;
 80079b6:	e06f      	b.n	8007a98 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d019      	beq.n	80079f6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80079ce:	23ff      	movs	r3, #255	; 0xff
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 f949 	bl	8007c68 <USBH_Get_StringDesc>
 80079d6:	4603      	mov	r3, r0
 80079d8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80079da:	7bbb      	ldrb	r3, [r7, #14]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d103      	bne.n	80079e8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2206      	movs	r2, #6
 80079e4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80079e6:	e059      	b.n	8007a9c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079e8:	7bbb      	ldrb	r3, [r7, #14]
 80079ea:	2b03      	cmp	r3, #3
 80079ec:	d156      	bne.n	8007a9c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2206      	movs	r2, #6
 80079f2:	705a      	strb	r2, [r3, #1]
      break;
 80079f4:	e052      	b.n	8007a9c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2206      	movs	r2, #6
 80079fa:	705a      	strb	r2, [r3, #1]
      break;
 80079fc:	e04e      	b.n	8007a9c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d019      	beq.n	8007a3c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007a14:	23ff      	movs	r3, #255	; 0xff
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f926 	bl	8007c68 <USBH_Get_StringDesc>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a20:	7bbb      	ldrb	r3, [r7, #14]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d103      	bne.n	8007a2e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2207      	movs	r2, #7
 8007a2a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007a2c:	e038      	b.n	8007aa0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a2e:	7bbb      	ldrb	r3, [r7, #14]
 8007a30:	2b03      	cmp	r3, #3
 8007a32:	d135      	bne.n	8007aa0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2207      	movs	r2, #7
 8007a38:	705a      	strb	r2, [r3, #1]
      break;
 8007a3a:	e031      	b.n	8007aa0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2207      	movs	r2, #7
 8007a40:	705a      	strb	r2, [r3, #1]
      break;
 8007a42:	e02d      	b.n	8007aa0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d017      	beq.n	8007a7e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007a5a:	23ff      	movs	r3, #255	; 0xff
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 f903 	bl	8007c68 <USBH_Get_StringDesc>
 8007a62:	4603      	mov	r3, r0
 8007a64:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d102      	bne.n	8007a72 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007a70:	e018      	b.n	8007aa4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a72:	7bbb      	ldrb	r3, [r7, #14]
 8007a74:	2b03      	cmp	r3, #3
 8007a76:	d115      	bne.n	8007aa4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a7c:	e012      	b.n	8007aa4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	73fb      	strb	r3, [r7, #15]
      break;
 8007a82:	e00f      	b.n	8007aa4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007a84:	bf00      	nop
 8007a86:	e00e      	b.n	8007aa6 <USBH_HandleEnum+0x3be>
      break;
 8007a88:	bf00      	nop
 8007a8a:	e00c      	b.n	8007aa6 <USBH_HandleEnum+0x3be>
      break;
 8007a8c:	bf00      	nop
 8007a8e:	e00a      	b.n	8007aa6 <USBH_HandleEnum+0x3be>
      break;
 8007a90:	bf00      	nop
 8007a92:	e008      	b.n	8007aa6 <USBH_HandleEnum+0x3be>
      break;
 8007a94:	bf00      	nop
 8007a96:	e006      	b.n	8007aa6 <USBH_HandleEnum+0x3be>
      break;
 8007a98:	bf00      	nop
 8007a9a:	e004      	b.n	8007aa6 <USBH_HandleEnum+0x3be>
      break;
 8007a9c:	bf00      	nop
 8007a9e:	e002      	b.n	8007aa6 <USBH_HandleEnum+0x3be>
      break;
 8007aa0:	bf00      	nop
 8007aa2:	e000      	b.n	8007aa6 <USBH_HandleEnum+0x3be>
      break;
 8007aa4:	bf00      	nop
  }
  return Status;
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	683a      	ldr	r2, [r7, #0]
 8007abe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007ac2:	bf00      	nop
 8007ac4:	370c      	adds	r7, #12
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr

08007ace <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b082      	sub	sp, #8
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007adc:	1c5a      	adds	r2, r3, #1
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f804 	bl	8007af2 <USBH_HandleSof>
}
 8007aea:	bf00      	nop
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b082      	sub	sp, #8
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b0b      	cmp	r3, #11
 8007b02:	d10a      	bne.n	8007b1a <USBH_HandleSof+0x28>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d005      	beq.n	8007b1a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	4798      	blx	r3
  }
}
 8007b1a:	bf00      	nop
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007b22:	b480      	push	{r7}
 8007b24:	b083      	sub	sp, #12
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007b32:	bf00      	nop
}
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b083      	sub	sp, #12
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007b4e:	bf00      	nop
}
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b083      	sub	sp, #12
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2201      	movs	r2, #1
 8007b66:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 ff56 	bl	8008a5a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	791b      	ldrb	r3, [r3, #4]
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fda3 	bl	8008700 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	795b      	ldrb	r3, [r3, #5]
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 fd9d 	bl	8008700 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af02      	add	r7, sp, #8
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007be2:	78fb      	ldrb	r3, [r7, #3]
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	4613      	mov	r3, r2
 8007bea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bee:	2100      	movs	r1, #0
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 f864 	bl	8007cbe <USBH_GetDescriptor>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	73fb      	strb	r3, [r7, #15]
 8007bfa:	7bfb      	ldrb	r3, [r7, #15]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10a      	bne.n	8007c16 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007c0c:	78fa      	ldrb	r2, [r7, #3]
 8007c0e:	b292      	uxth	r2, r2
 8007c10:	4619      	mov	r1, r3
 8007c12:	f000 f918 	bl	8007e46 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af02      	add	r7, sp, #8
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	460b      	mov	r3, r1
 8007c2a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	331c      	adds	r3, #28
 8007c30:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007c32:	887b      	ldrh	r3, [r7, #2]
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f83d 	bl	8007cbe <USBH_GetDescriptor>
 8007c44:	4603      	mov	r3, r0
 8007c46:	72fb      	strb	r3, [r7, #11]
 8007c48:	7afb      	ldrb	r3, [r7, #11]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d107      	bne.n	8007c5e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007c54:	887a      	ldrh	r2, [r7, #2]
 8007c56:	68f9      	ldr	r1, [r7, #12]
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f000 f964 	bl	8007f26 <USBH_ParseCfgDesc>
  }

  return status;
 8007c5e:	7afb      	ldrb	r3, [r7, #11]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b088      	sub	sp, #32
 8007c6c:	af02      	add	r7, sp, #8
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	607a      	str	r2, [r7, #4]
 8007c72:	461a      	mov	r2, r3
 8007c74:	460b      	mov	r3, r1
 8007c76:	72fb      	strb	r3, [r7, #11]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007c7c:	7afb      	ldrb	r3, [r7, #11]
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007c84:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007c8c:	893b      	ldrh	r3, [r7, #8]
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	460b      	mov	r3, r1
 8007c92:	2100      	movs	r1, #0
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f000 f812 	bl	8007cbe <USBH_GetDescriptor>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	75fb      	strb	r3, [r7, #23]
 8007c9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d107      	bne.n	8007cb4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007caa:	893a      	ldrh	r2, [r7, #8]
 8007cac:	6879      	ldr	r1, [r7, #4]
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f000 fa37 	bl	8008122 <USBH_ParseStringDesc>
  }

  return status;
 8007cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3718      	adds	r7, #24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b084      	sub	sp, #16
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	60f8      	str	r0, [r7, #12]
 8007cc6:	607b      	str	r3, [r7, #4]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	72fb      	strb	r3, [r7, #11]
 8007ccc:	4613      	mov	r3, r2
 8007cce:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	789b      	ldrb	r3, [r3, #2]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d11c      	bne.n	8007d12 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007cd8:	7afb      	ldrb	r3, [r7, #11]
 8007cda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007cde:	b2da      	uxtb	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2206      	movs	r2, #6
 8007ce8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	893a      	ldrh	r2, [r7, #8]
 8007cee:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007cf0:	893b      	ldrh	r3, [r7, #8]
 8007cf2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007cf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cfa:	d104      	bne.n	8007d06 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f240 4209 	movw	r2, #1033	; 0x409
 8007d02:	829a      	strh	r2, [r3, #20]
 8007d04:	e002      	b.n	8007d0c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	8b3a      	ldrh	r2, [r7, #24]
 8007d10:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007d12:	8b3b      	ldrh	r3, [r7, #24]
 8007d14:	461a      	mov	r2, r3
 8007d16:	6879      	ldr	r1, [r7, #4]
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f000 fa50 	bl	80081be <USBH_CtlReq>
 8007d1e:	4603      	mov	r3, r0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	460b      	mov	r3, r1
 8007d32:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	789b      	ldrb	r3, [r3, #2]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d10f      	bne.n	8007d5c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2205      	movs	r2, #5
 8007d46:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007d48:	78fb      	ldrb	r3, [r7, #3]
 8007d4a:	b29a      	uxth	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	2100      	movs	r1, #0
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fa2c 	bl	80081be <USBH_CtlReq>
 8007d66:	4603      	mov	r3, r0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	460b      	mov	r3, r1
 8007d7a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	789b      	ldrb	r3, [r3, #2]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d10e      	bne.n	8007da2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2209      	movs	r2, #9
 8007d8e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	887a      	ldrh	r2, [r7, #2]
 8007d94:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007da2:	2200      	movs	r2, #0
 8007da4:	2100      	movs	r1, #0
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fa09 	bl	80081be <USBH_CtlReq>
 8007dac:	4603      	mov	r3, r0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b082      	sub	sp, #8
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	789b      	ldrb	r3, [r3, #2]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d10f      	bne.n	8007dea <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2203      	movs	r2, #3
 8007dd4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007dd6:	78fb      	ldrb	r3, [r7, #3]
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007dea:	2200      	movs	r2, #0
 8007dec:	2100      	movs	r1, #0
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 f9e5 	bl	80081be <USBH_CtlReq>
 8007df4:	4603      	mov	r3, r0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3708      	adds	r7, #8
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b082      	sub	sp, #8
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	460b      	mov	r3, r1
 8007e08:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	789b      	ldrb	r3, [r3, #2]
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d10f      	bne.n	8007e32 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2202      	movs	r2, #2
 8007e16:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007e24:	78fb      	ldrb	r3, [r7, #3]
 8007e26:	b29a      	uxth	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007e32:	2200      	movs	r2, #0
 8007e34:	2100      	movs	r1, #0
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f9c1 	bl	80081be <USBH_CtlReq>
 8007e3c:	4603      	mov	r3, r0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b085      	sub	sp, #20
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	60f8      	str	r0, [r7, #12]
 8007e4e:	60b9      	str	r1, [r7, #8]
 8007e50:	4613      	mov	r3, r2
 8007e52:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	781a      	ldrb	r2, [r3, #0]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	785a      	ldrb	r2, [r3, #1]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	3302      	adds	r3, #2
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	3303      	adds	r3, #3
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	021b      	lsls	r3, r3, #8
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	791a      	ldrb	r2, [r3, #4]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	795a      	ldrb	r2, [r3, #5]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	799a      	ldrb	r2, [r3, #6]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	79da      	ldrb	r2, [r3, #7]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007ea0:	88fb      	ldrh	r3, [r7, #6]
 8007ea2:	2b08      	cmp	r3, #8
 8007ea4:	d939      	bls.n	8007f1a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	3308      	adds	r3, #8
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	3309      	adds	r3, #9
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	021b      	lsls	r3, r3, #8
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	330a      	adds	r3, #10
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	330b      	adds	r3, #11
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	021b      	lsls	r3, r3, #8
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	330c      	adds	r3, #12
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	330d      	adds	r3, #13
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	021b      	lsls	r3, r3, #8
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	7b9a      	ldrb	r2, [r3, #14]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	7bda      	ldrb	r2, [r3, #15]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	7c1a      	ldrb	r2, [r3, #16]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	7c5a      	ldrb	r2, [r3, #17]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	745a      	strb	r2, [r3, #17]
  }
}
 8007f1a:	bf00      	nop
 8007f1c:	3714      	adds	r7, #20
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr

08007f26 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b08a      	sub	sp, #40	; 0x28
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	60f8      	str	r0, [r7, #12]
 8007f2e:	60b9      	str	r1, [r7, #8]
 8007f30:	4613      	mov	r3, r2
 8007f32:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	781a      	ldrb	r2, [r3, #0]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	785a      	ldrb	r2, [r3, #1]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	3302      	adds	r3, #2
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	3303      	adds	r3, #3
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	021b      	lsls	r3, r3, #8
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	791a      	ldrb	r2, [r3, #4]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	795a      	ldrb	r2, [r3, #5]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	799a      	ldrb	r2, [r3, #6]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	79da      	ldrb	r2, [r3, #7]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	7a1a      	ldrb	r2, [r3, #8]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007f9c:	88fb      	ldrh	r3, [r7, #6]
 8007f9e:	2b09      	cmp	r3, #9
 8007fa0:	d95f      	bls.n	8008062 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007fa2:	2309      	movs	r3, #9
 8007fa4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007faa:	e051      	b.n	8008050 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007fac:	f107 0316 	add.w	r3, r7, #22
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fb4:	f000 f8e8 	bl	8008188 <USBH_GetNextDesc>
 8007fb8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbc:	785b      	ldrb	r3, [r3, #1]
 8007fbe:	2b04      	cmp	r3, #4
 8007fc0:	d146      	bne.n	8008050 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007fc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007fc6:	221a      	movs	r2, #26
 8007fc8:	fb02 f303 	mul.w	r3, r2, r3
 8007fcc:	3308      	adds	r3, #8
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	3302      	adds	r3, #2
 8007fd4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007fd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fd8:	69f8      	ldr	r0, [r7, #28]
 8007fda:	f000 f846 	bl	800806a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007fe8:	e022      	b.n	8008030 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007fea:	f107 0316 	add.w	r3, r7, #22
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ff2:	f000 f8c9 	bl	8008188 <USBH_GetNextDesc>
 8007ff6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffa:	785b      	ldrb	r3, [r3, #1]
 8007ffc:	2b05      	cmp	r3, #5
 8007ffe:	d117      	bne.n	8008030 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008000:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008004:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008008:	3201      	adds	r2, #1
 800800a:	00d2      	lsls	r2, r2, #3
 800800c:	211a      	movs	r1, #26
 800800e:	fb01 f303 	mul.w	r3, r1, r3
 8008012:	4413      	add	r3, r2
 8008014:	3308      	adds	r3, #8
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	4413      	add	r3, r2
 800801a:	3304      	adds	r3, #4
 800801c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800801e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008020:	69b8      	ldr	r0, [r7, #24]
 8008022:	f000 f851 	bl	80080c8 <USBH_ParseEPDesc>
            ep_ix++;
 8008026:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800802a:	3301      	adds	r3, #1
 800802c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	791b      	ldrb	r3, [r3, #4]
 8008034:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008038:	429a      	cmp	r2, r3
 800803a:	d204      	bcs.n	8008046 <USBH_ParseCfgDesc+0x120>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	885a      	ldrh	r2, [r3, #2]
 8008040:	8afb      	ldrh	r3, [r7, #22]
 8008042:	429a      	cmp	r2, r3
 8008044:	d8d1      	bhi.n	8007fea <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008046:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800804a:	3301      	adds	r3, #1
 800804c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008050:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008054:	2b01      	cmp	r3, #1
 8008056:	d804      	bhi.n	8008062 <USBH_ParseCfgDesc+0x13c>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	885a      	ldrh	r2, [r3, #2]
 800805c:	8afb      	ldrh	r3, [r7, #22]
 800805e:	429a      	cmp	r2, r3
 8008060:	d8a4      	bhi.n	8007fac <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008062:	bf00      	nop
 8008064:	3728      	adds	r7, #40	; 0x28
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800806a:	b480      	push	{r7}
 800806c:	b083      	sub	sp, #12
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
 8008072:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	781a      	ldrb	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	785a      	ldrb	r2, [r3, #1]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	789a      	ldrb	r2, [r3, #2]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	78da      	ldrb	r2, [r3, #3]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	791a      	ldrb	r2, [r3, #4]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	795a      	ldrb	r2, [r3, #5]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	799a      	ldrb	r2, [r3, #6]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	79da      	ldrb	r2, [r3, #7]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	7a1a      	ldrb	r2, [r3, #8]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	721a      	strb	r2, [r3, #8]
}
 80080bc:	bf00      	nop
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	781a      	ldrb	r2, [r3, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	785a      	ldrb	r2, [r3, #1]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	789a      	ldrb	r2, [r3, #2]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	78da      	ldrb	r2, [r3, #3]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	3304      	adds	r3, #4
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	3305      	adds	r3, #5
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	b29b      	uxth	r3, r3
 8008102:	021b      	lsls	r3, r3, #8
 8008104:	b29b      	uxth	r3, r3
 8008106:	4313      	orrs	r3, r2
 8008108:	b29a      	uxth	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	799a      	ldrb	r2, [r3, #6]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	719a      	strb	r2, [r3, #6]
}
 8008116:	bf00      	nop
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr

08008122 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008122:	b480      	push	{r7}
 8008124:	b087      	sub	sp, #28
 8008126:	af00      	add	r7, sp, #0
 8008128:	60f8      	str	r0, [r7, #12]
 800812a:	60b9      	str	r1, [r7, #8]
 800812c:	4613      	mov	r3, r2
 800812e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	3301      	adds	r3, #1
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	2b03      	cmp	r3, #3
 8008138:	d120      	bne.n	800817c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	1e9a      	subs	r2, r3, #2
 8008140:	88fb      	ldrh	r3, [r7, #6]
 8008142:	4293      	cmp	r3, r2
 8008144:	bf28      	it	cs
 8008146:	4613      	movcs	r3, r2
 8008148:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	3302      	adds	r3, #2
 800814e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008150:	2300      	movs	r3, #0
 8008152:	82fb      	strh	r3, [r7, #22]
 8008154:	e00b      	b.n	800816e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008156:	8afb      	ldrh	r3, [r7, #22]
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	4413      	add	r3, r2
 800815c:	781a      	ldrb	r2, [r3, #0]
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	3301      	adds	r3, #1
 8008166:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008168:	8afb      	ldrh	r3, [r7, #22]
 800816a:	3302      	adds	r3, #2
 800816c:	82fb      	strh	r3, [r7, #22]
 800816e:	8afa      	ldrh	r2, [r7, #22]
 8008170:	8abb      	ldrh	r3, [r7, #20]
 8008172:	429a      	cmp	r2, r3
 8008174:	d3ef      	bcc.n	8008156 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	2200      	movs	r2, #0
 800817a:	701a      	strb	r2, [r3, #0]
  }
}
 800817c:	bf00      	nop
 800817e:	371c      	adds	r7, #28
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	881a      	ldrh	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	b29b      	uxth	r3, r3
 800819c:	4413      	add	r3, r2
 800819e:	b29a      	uxth	r2, r3
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4413      	add	r3, r2
 80081ae:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80081b0:	68fb      	ldr	r3, [r7, #12]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3714      	adds	r7, #20
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b086      	sub	sp, #24
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	60f8      	str	r0, [r7, #12]
 80081c6:	60b9      	str	r1, [r7, #8]
 80081c8:	4613      	mov	r3, r2
 80081ca:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80081cc:	2301      	movs	r3, #1
 80081ce:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	789b      	ldrb	r3, [r3, #2]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d002      	beq.n	80081de <USBH_CtlReq+0x20>
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d00f      	beq.n	80081fc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80081dc:	e027      	b.n	800822e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	88fa      	ldrh	r2, [r7, #6]
 80081e8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2201      	movs	r2, #1
 80081ee:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2202      	movs	r2, #2
 80081f4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80081f6:	2301      	movs	r3, #1
 80081f8:	75fb      	strb	r3, [r7, #23]
      break;
 80081fa:	e018      	b.n	800822e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f000 f81b 	bl	8008238 <USBH_HandleControl>
 8008202:	4603      	mov	r3, r0
 8008204:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008206:	7dfb      	ldrb	r3, [r7, #23]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d002      	beq.n	8008212 <USBH_CtlReq+0x54>
 800820c:	7dfb      	ldrb	r3, [r7, #23]
 800820e:	2b03      	cmp	r3, #3
 8008210:	d106      	bne.n	8008220 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2201      	movs	r2, #1
 8008216:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	761a      	strb	r2, [r3, #24]
      break;
 800821e:	e005      	b.n	800822c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008220:	7dfb      	ldrb	r3, [r7, #23]
 8008222:	2b02      	cmp	r3, #2
 8008224:	d102      	bne.n	800822c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2201      	movs	r2, #1
 800822a:	709a      	strb	r2, [r3, #2]
      break;
 800822c:	bf00      	nop
  }
  return status;
 800822e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3718      	adds	r7, #24
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b086      	sub	sp, #24
 800823c:	af02      	add	r7, sp, #8
 800823e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008240:	2301      	movs	r3, #1
 8008242:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008244:	2300      	movs	r3, #0
 8008246:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	7e1b      	ldrb	r3, [r3, #24]
 800824c:	3b01      	subs	r3, #1
 800824e:	2b0a      	cmp	r3, #10
 8008250:	f200 8156 	bhi.w	8008500 <USBH_HandleControl+0x2c8>
 8008254:	a201      	add	r2, pc, #4	; (adr r2, 800825c <USBH_HandleControl+0x24>)
 8008256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800825a:	bf00      	nop
 800825c:	08008289 	.word	0x08008289
 8008260:	080082a3 	.word	0x080082a3
 8008264:	0800830d 	.word	0x0800830d
 8008268:	08008333 	.word	0x08008333
 800826c:	0800836b 	.word	0x0800836b
 8008270:	08008395 	.word	0x08008395
 8008274:	080083e7 	.word	0x080083e7
 8008278:	08008409 	.word	0x08008409
 800827c:	08008445 	.word	0x08008445
 8008280:	0800846b 	.word	0x0800846b
 8008284:	080084a9 	.word	0x080084a9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f103 0110 	add.w	r1, r3, #16
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	795b      	ldrb	r3, [r3, #5]
 8008292:	461a      	mov	r2, r3
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f943 	bl	8008520 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2202      	movs	r2, #2
 800829e:	761a      	strb	r2, [r3, #24]
      break;
 80082a0:	e139      	b.n	8008516 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	795b      	ldrb	r3, [r3, #5]
 80082a6:	4619      	mov	r1, r3
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fcc5 	bl	8008c38 <USBH_LL_GetURBState>
 80082ae:	4603      	mov	r3, r0
 80082b0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80082b2:	7bbb      	ldrb	r3, [r7, #14]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d11e      	bne.n	80082f6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	7c1b      	ldrb	r3, [r3, #16]
 80082bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80082c0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	8adb      	ldrh	r3, [r3, #22]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00a      	beq.n	80082e0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80082ca:	7b7b      	ldrb	r3, [r7, #13]
 80082cc:	2b80      	cmp	r3, #128	; 0x80
 80082ce:	d103      	bne.n	80082d8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2203      	movs	r2, #3
 80082d4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80082d6:	e115      	b.n	8008504 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2205      	movs	r2, #5
 80082dc:	761a      	strb	r2, [r3, #24]
      break;
 80082de:	e111      	b.n	8008504 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80082e0:	7b7b      	ldrb	r3, [r7, #13]
 80082e2:	2b80      	cmp	r3, #128	; 0x80
 80082e4:	d103      	bne.n	80082ee <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2209      	movs	r2, #9
 80082ea:	761a      	strb	r2, [r3, #24]
      break;
 80082ec:	e10a      	b.n	8008504 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2207      	movs	r2, #7
 80082f2:	761a      	strb	r2, [r3, #24]
      break;
 80082f4:	e106      	b.n	8008504 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80082f6:	7bbb      	ldrb	r3, [r7, #14]
 80082f8:	2b04      	cmp	r3, #4
 80082fa:	d003      	beq.n	8008304 <USBH_HandleControl+0xcc>
 80082fc:	7bbb      	ldrb	r3, [r7, #14]
 80082fe:	2b02      	cmp	r3, #2
 8008300:	f040 8100 	bne.w	8008504 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	220b      	movs	r2, #11
 8008308:	761a      	strb	r2, [r3, #24]
      break;
 800830a:	e0fb      	b.n	8008504 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008312:	b29a      	uxth	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6899      	ldr	r1, [r3, #8]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	899a      	ldrh	r2, [r3, #12]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	791b      	ldrb	r3, [r3, #4]
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 f93a 	bl	800859e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2204      	movs	r2, #4
 800832e:	761a      	strb	r2, [r3, #24]
      break;
 8008330:	e0f1      	b.n	8008516 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	791b      	ldrb	r3, [r3, #4]
 8008336:	4619      	mov	r1, r3
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 fc7d 	bl	8008c38 <USBH_LL_GetURBState>
 800833e:	4603      	mov	r3, r0
 8008340:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008342:	7bbb      	ldrb	r3, [r7, #14]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d102      	bne.n	800834e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2209      	movs	r2, #9
 800834c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800834e:	7bbb      	ldrb	r3, [r7, #14]
 8008350:	2b05      	cmp	r3, #5
 8008352:	d102      	bne.n	800835a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008354:	2303      	movs	r3, #3
 8008356:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008358:	e0d6      	b.n	8008508 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800835a:	7bbb      	ldrb	r3, [r7, #14]
 800835c:	2b04      	cmp	r3, #4
 800835e:	f040 80d3 	bne.w	8008508 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	220b      	movs	r2, #11
 8008366:	761a      	strb	r2, [r3, #24]
      break;
 8008368:	e0ce      	b.n	8008508 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6899      	ldr	r1, [r3, #8]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	899a      	ldrh	r2, [r3, #12]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	795b      	ldrb	r3, [r3, #5]
 8008376:	2001      	movs	r0, #1
 8008378:	9000      	str	r0, [sp, #0]
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 f8ea 	bl	8008554 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008386:	b29a      	uxth	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2206      	movs	r2, #6
 8008390:	761a      	strb	r2, [r3, #24]
      break;
 8008392:	e0c0      	b.n	8008516 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	795b      	ldrb	r3, [r3, #5]
 8008398:	4619      	mov	r1, r3
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fc4c 	bl	8008c38 <USBH_LL_GetURBState>
 80083a0:	4603      	mov	r3, r0
 80083a2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80083a4:	7bbb      	ldrb	r3, [r7, #14]
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d103      	bne.n	80083b2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2207      	movs	r2, #7
 80083ae:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80083b0:	e0ac      	b.n	800850c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80083b2:	7bbb      	ldrb	r3, [r7, #14]
 80083b4:	2b05      	cmp	r3, #5
 80083b6:	d105      	bne.n	80083c4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	220c      	movs	r2, #12
 80083bc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80083be:	2303      	movs	r3, #3
 80083c0:	73fb      	strb	r3, [r7, #15]
      break;
 80083c2:	e0a3      	b.n	800850c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80083c4:	7bbb      	ldrb	r3, [r7, #14]
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	d103      	bne.n	80083d2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2205      	movs	r2, #5
 80083ce:	761a      	strb	r2, [r3, #24]
      break;
 80083d0:	e09c      	b.n	800850c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80083d2:	7bbb      	ldrb	r3, [r7, #14]
 80083d4:	2b04      	cmp	r3, #4
 80083d6:	f040 8099 	bne.w	800850c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	220b      	movs	r2, #11
 80083de:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80083e0:	2302      	movs	r3, #2
 80083e2:	73fb      	strb	r3, [r7, #15]
      break;
 80083e4:	e092      	b.n	800850c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	791b      	ldrb	r3, [r3, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	2100      	movs	r1, #0
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f8d5 	bl	800859e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2208      	movs	r2, #8
 8008404:	761a      	strb	r2, [r3, #24]

      break;
 8008406:	e086      	b.n	8008516 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	791b      	ldrb	r3, [r3, #4]
 800840c:	4619      	mov	r1, r3
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 fc12 	bl	8008c38 <USBH_LL_GetURBState>
 8008414:	4603      	mov	r3, r0
 8008416:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008418:	7bbb      	ldrb	r3, [r7, #14]
 800841a:	2b01      	cmp	r3, #1
 800841c:	d105      	bne.n	800842a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	220d      	movs	r2, #13
 8008422:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008424:	2300      	movs	r3, #0
 8008426:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008428:	e072      	b.n	8008510 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800842a:	7bbb      	ldrb	r3, [r7, #14]
 800842c:	2b04      	cmp	r3, #4
 800842e:	d103      	bne.n	8008438 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	220b      	movs	r2, #11
 8008434:	761a      	strb	r2, [r3, #24]
      break;
 8008436:	e06b      	b.n	8008510 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008438:	7bbb      	ldrb	r3, [r7, #14]
 800843a:	2b05      	cmp	r3, #5
 800843c:	d168      	bne.n	8008510 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800843e:	2303      	movs	r3, #3
 8008440:	73fb      	strb	r3, [r7, #15]
      break;
 8008442:	e065      	b.n	8008510 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	795b      	ldrb	r3, [r3, #5]
 8008448:	2201      	movs	r2, #1
 800844a:	9200      	str	r2, [sp, #0]
 800844c:	2200      	movs	r2, #0
 800844e:	2100      	movs	r1, #0
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 f87f 	bl	8008554 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800845c:	b29a      	uxth	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	220a      	movs	r2, #10
 8008466:	761a      	strb	r2, [r3, #24]
      break;
 8008468:	e055      	b.n	8008516 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	795b      	ldrb	r3, [r3, #5]
 800846e:	4619      	mov	r1, r3
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 fbe1 	bl	8008c38 <USBH_LL_GetURBState>
 8008476:	4603      	mov	r3, r0
 8008478:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800847a:	7bbb      	ldrb	r3, [r7, #14]
 800847c:	2b01      	cmp	r3, #1
 800847e:	d105      	bne.n	800848c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008480:	2300      	movs	r3, #0
 8008482:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	220d      	movs	r2, #13
 8008488:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800848a:	e043      	b.n	8008514 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800848c:	7bbb      	ldrb	r3, [r7, #14]
 800848e:	2b02      	cmp	r3, #2
 8008490:	d103      	bne.n	800849a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2209      	movs	r2, #9
 8008496:	761a      	strb	r2, [r3, #24]
      break;
 8008498:	e03c      	b.n	8008514 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800849a:	7bbb      	ldrb	r3, [r7, #14]
 800849c:	2b04      	cmp	r3, #4
 800849e:	d139      	bne.n	8008514 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	220b      	movs	r2, #11
 80084a4:	761a      	strb	r2, [r3, #24]
      break;
 80084a6:	e035      	b.n	8008514 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	7e5b      	ldrb	r3, [r3, #25]
 80084ac:	3301      	adds	r3, #1
 80084ae:	b2da      	uxtb	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	765a      	strb	r2, [r3, #25]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	7e5b      	ldrb	r3, [r3, #25]
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d806      	bhi.n	80084ca <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2201      	movs	r2, #1
 80084c6:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80084c8:	e025      	b.n	8008516 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80084d0:	2106      	movs	r1, #6
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	795b      	ldrb	r3, [r3, #5]
 80084e0:	4619      	mov	r1, r3
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f90c 	bl	8008700 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	791b      	ldrb	r3, [r3, #4]
 80084ec:	4619      	mov	r1, r3
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f906 	bl	8008700 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80084fa:	2302      	movs	r3, #2
 80084fc:	73fb      	strb	r3, [r7, #15]
      break;
 80084fe:	e00a      	b.n	8008516 <USBH_HandleControl+0x2de>

    default:
      break;
 8008500:	bf00      	nop
 8008502:	e008      	b.n	8008516 <USBH_HandleControl+0x2de>
      break;
 8008504:	bf00      	nop
 8008506:	e006      	b.n	8008516 <USBH_HandleControl+0x2de>
      break;
 8008508:	bf00      	nop
 800850a:	e004      	b.n	8008516 <USBH_HandleControl+0x2de>
      break;
 800850c:	bf00      	nop
 800850e:	e002      	b.n	8008516 <USBH_HandleControl+0x2de>
      break;
 8008510:	bf00      	nop
 8008512:	e000      	b.n	8008516 <USBH_HandleControl+0x2de>
      break;
 8008514:	bf00      	nop
  }

  return status;
 8008516:	7bfb      	ldrb	r3, [r7, #15]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b088      	sub	sp, #32
 8008524:	af04      	add	r7, sp, #16
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	4613      	mov	r3, r2
 800852c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800852e:	79f9      	ldrb	r1, [r7, #7]
 8008530:	2300      	movs	r3, #0
 8008532:	9303      	str	r3, [sp, #12]
 8008534:	2308      	movs	r3, #8
 8008536:	9302      	str	r3, [sp, #8]
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	9301      	str	r3, [sp, #4]
 800853c:	2300      	movs	r3, #0
 800853e:	9300      	str	r3, [sp, #0]
 8008540:	2300      	movs	r3, #0
 8008542:	2200      	movs	r2, #0
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f000 fb46 	bl	8008bd6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b088      	sub	sp, #32
 8008558:	af04      	add	r7, sp, #16
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	4611      	mov	r1, r2
 8008560:	461a      	mov	r2, r3
 8008562:	460b      	mov	r3, r1
 8008564:	80fb      	strh	r3, [r7, #6]
 8008566:	4613      	mov	r3, r2
 8008568:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008570:	2b00      	cmp	r3, #0
 8008572:	d001      	beq.n	8008578 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008574:	2300      	movs	r3, #0
 8008576:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008578:	7979      	ldrb	r1, [r7, #5]
 800857a:	7e3b      	ldrb	r3, [r7, #24]
 800857c:	9303      	str	r3, [sp, #12]
 800857e:	88fb      	ldrh	r3, [r7, #6]
 8008580:	9302      	str	r3, [sp, #8]
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	9301      	str	r3, [sp, #4]
 8008586:	2301      	movs	r3, #1
 8008588:	9300      	str	r3, [sp, #0]
 800858a:	2300      	movs	r3, #0
 800858c:	2200      	movs	r2, #0
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f000 fb21 	bl	8008bd6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b088      	sub	sp, #32
 80085a2:	af04      	add	r7, sp, #16
 80085a4:	60f8      	str	r0, [r7, #12]
 80085a6:	60b9      	str	r1, [r7, #8]
 80085a8:	4611      	mov	r1, r2
 80085aa:	461a      	mov	r2, r3
 80085ac:	460b      	mov	r3, r1
 80085ae:	80fb      	strh	r3, [r7, #6]
 80085b0:	4613      	mov	r3, r2
 80085b2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80085b4:	7979      	ldrb	r1, [r7, #5]
 80085b6:	2300      	movs	r3, #0
 80085b8:	9303      	str	r3, [sp, #12]
 80085ba:	88fb      	ldrh	r3, [r7, #6]
 80085bc:	9302      	str	r3, [sp, #8]
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	9301      	str	r3, [sp, #4]
 80085c2:	2301      	movs	r3, #1
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	2300      	movs	r3, #0
 80085c8:	2201      	movs	r2, #1
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f000 fb03 	bl	8008bd6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80085d0:	2300      	movs	r3, #0

}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b088      	sub	sp, #32
 80085de:	af04      	add	r7, sp, #16
 80085e0:	60f8      	str	r0, [r7, #12]
 80085e2:	60b9      	str	r1, [r7, #8]
 80085e4:	4611      	mov	r1, r2
 80085e6:	461a      	mov	r2, r3
 80085e8:	460b      	mov	r3, r1
 80085ea:	80fb      	strh	r3, [r7, #6]
 80085ec:	4613      	mov	r3, r2
 80085ee:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d001      	beq.n	80085fe <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80085fa:	2300      	movs	r3, #0
 80085fc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80085fe:	7979      	ldrb	r1, [r7, #5]
 8008600:	7e3b      	ldrb	r3, [r7, #24]
 8008602:	9303      	str	r3, [sp, #12]
 8008604:	88fb      	ldrh	r3, [r7, #6]
 8008606:	9302      	str	r3, [sp, #8]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	9301      	str	r3, [sp, #4]
 800860c:	2301      	movs	r3, #1
 800860e:	9300      	str	r3, [sp, #0]
 8008610:	2302      	movs	r3, #2
 8008612:	2200      	movs	r2, #0
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f000 fade 	bl	8008bd6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b088      	sub	sp, #32
 8008628:	af04      	add	r7, sp, #16
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	4611      	mov	r1, r2
 8008630:	461a      	mov	r2, r3
 8008632:	460b      	mov	r3, r1
 8008634:	80fb      	strh	r3, [r7, #6]
 8008636:	4613      	mov	r3, r2
 8008638:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800863a:	7979      	ldrb	r1, [r7, #5]
 800863c:	2300      	movs	r3, #0
 800863e:	9303      	str	r3, [sp, #12]
 8008640:	88fb      	ldrh	r3, [r7, #6]
 8008642:	9302      	str	r3, [sp, #8]
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	9301      	str	r3, [sp, #4]
 8008648:	2301      	movs	r3, #1
 800864a:	9300      	str	r3, [sp, #0]
 800864c:	2302      	movs	r3, #2
 800864e:	2201      	movs	r2, #1
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f000 fac0 	bl	8008bd6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008656:	2300      	movs	r3, #0
}
 8008658:	4618      	mov	r0, r3
 800865a:	3710      	adds	r7, #16
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b086      	sub	sp, #24
 8008664:	af04      	add	r7, sp, #16
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	4608      	mov	r0, r1
 800866a:	4611      	mov	r1, r2
 800866c:	461a      	mov	r2, r3
 800866e:	4603      	mov	r3, r0
 8008670:	70fb      	strb	r3, [r7, #3]
 8008672:	460b      	mov	r3, r1
 8008674:	70bb      	strb	r3, [r7, #2]
 8008676:	4613      	mov	r3, r2
 8008678:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800867a:	7878      	ldrb	r0, [r7, #1]
 800867c:	78ba      	ldrb	r2, [r7, #2]
 800867e:	78f9      	ldrb	r1, [r7, #3]
 8008680:	8b3b      	ldrh	r3, [r7, #24]
 8008682:	9302      	str	r3, [sp, #8]
 8008684:	7d3b      	ldrb	r3, [r7, #20]
 8008686:	9301      	str	r3, [sp, #4]
 8008688:	7c3b      	ldrb	r3, [r7, #16]
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	4603      	mov	r3, r0
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fa53 	bl	8008b3a <USBH_LL_OpenPipe>

  return USBH_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b082      	sub	sp, #8
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
 80086a6:	460b      	mov	r3, r1
 80086a8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80086aa:	78fb      	ldrb	r3, [r7, #3]
 80086ac:	4619      	mov	r1, r3
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fa72 	bl	8008b98 <USBH_LL_ClosePipe>

  return USBH_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b084      	sub	sp, #16
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	460b      	mov	r3, r1
 80086c8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 f836 	bl	800873c <USBH_GetFreePipe>
 80086d0:	4603      	mov	r3, r0
 80086d2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80086d4:	89fb      	ldrh	r3, [r7, #14]
 80086d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086da:	4293      	cmp	r3, r2
 80086dc:	d00a      	beq.n	80086f4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80086de:	78fa      	ldrb	r2, [r7, #3]
 80086e0:	89fb      	ldrh	r3, [r7, #14]
 80086e2:	f003 030f 	and.w	r3, r3, #15
 80086e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80086ea:	6879      	ldr	r1, [r7, #4]
 80086ec:	33e0      	adds	r3, #224	; 0xe0
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	440b      	add	r3, r1
 80086f2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80086f4:	89fb      	ldrh	r3, [r7, #14]
 80086f6:	b2db      	uxtb	r3, r3
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3710      	adds	r7, #16
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	460b      	mov	r3, r1
 800870a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800870c:	78fb      	ldrb	r3, [r7, #3]
 800870e:	2b0a      	cmp	r3, #10
 8008710:	d80d      	bhi.n	800872e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008712:	78fb      	ldrb	r3, [r7, #3]
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	33e0      	adds	r3, #224	; 0xe0
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4413      	add	r3, r2
 800871c:	685a      	ldr	r2, [r3, #4]
 800871e:	78fb      	ldrb	r3, [r7, #3]
 8008720:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008724:	6879      	ldr	r1, [r7, #4]
 8008726:	33e0      	adds	r3, #224	; 0xe0
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	440b      	add	r3, r1
 800872c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800873c:	b480      	push	{r7}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008744:	2300      	movs	r3, #0
 8008746:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008748:	2300      	movs	r3, #0
 800874a:	73fb      	strb	r3, [r7, #15]
 800874c:	e00f      	b.n	800876e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800874e:	7bfb      	ldrb	r3, [r7, #15]
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	33e0      	adds	r3, #224	; 0xe0
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4413      	add	r3, r2
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800875e:	2b00      	cmp	r3, #0
 8008760:	d102      	bne.n	8008768 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008762:	7bfb      	ldrb	r3, [r7, #15]
 8008764:	b29b      	uxth	r3, r3
 8008766:	e007      	b.n	8008778 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008768:	7bfb      	ldrb	r3, [r7, #15]
 800876a:	3301      	adds	r3, #1
 800876c:	73fb      	strb	r3, [r7, #15]
 800876e:	7bfb      	ldrb	r3, [r7, #15]
 8008770:	2b0a      	cmp	r3, #10
 8008772:	d9ec      	bls.n	800874e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008774:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008778:	4618      	mov	r0, r3
 800877a:	3714      	adds	r7, #20
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008788:	2201      	movs	r2, #1
 800878a:	490e      	ldr	r1, [pc, #56]	; (80087c4 <MX_USB_HOST_Init+0x40>)
 800878c:	480e      	ldr	r0, [pc, #56]	; (80087c8 <MX_USB_HOST_Init+0x44>)
 800878e:	f7fe fca1 	bl	80070d4 <USBH_Init>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d001      	beq.n	800879c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008798:	f7f8 ff68 	bl	800166c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800879c:	490b      	ldr	r1, [pc, #44]	; (80087cc <MX_USB_HOST_Init+0x48>)
 800879e:	480a      	ldr	r0, [pc, #40]	; (80087c8 <MX_USB_HOST_Init+0x44>)
 80087a0:	f7fe fd26 	bl	80071f0 <USBH_RegisterClass>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80087aa:	f7f8 ff5f 	bl	800166c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80087ae:	4806      	ldr	r0, [pc, #24]	; (80087c8 <MX_USB_HOST_Init+0x44>)
 80087b0:	f7fe fdaa 	bl	8007308 <USBH_Start>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80087ba:	f7f8 ff57 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80087be:	bf00      	nop
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	080087e5 	.word	0x080087e5
 80087c8:	200001cc 	.word	0x200001cc
 80087cc:	2000000c 	.word	0x2000000c

080087d0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80087d4:	4802      	ldr	r0, [pc, #8]	; (80087e0 <MX_USB_HOST_Process+0x10>)
 80087d6:	f7fe fda7 	bl	8007328 <USBH_Process>
}
 80087da:	bf00      	nop
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	200001cc 	.word	0x200001cc

080087e4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	460b      	mov	r3, r1
 80087ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80087f0:	78fb      	ldrb	r3, [r7, #3]
 80087f2:	3b01      	subs	r3, #1
 80087f4:	2b04      	cmp	r3, #4
 80087f6:	d819      	bhi.n	800882c <USBH_UserProcess+0x48>
 80087f8:	a201      	add	r2, pc, #4	; (adr r2, 8008800 <USBH_UserProcess+0x1c>)
 80087fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fe:	bf00      	nop
 8008800:	0800882d 	.word	0x0800882d
 8008804:	0800881d 	.word	0x0800881d
 8008808:	0800882d 	.word	0x0800882d
 800880c:	08008825 	.word	0x08008825
 8008810:	08008815 	.word	0x08008815
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008814:	4b09      	ldr	r3, [pc, #36]	; (800883c <USBH_UserProcess+0x58>)
 8008816:	2203      	movs	r2, #3
 8008818:	701a      	strb	r2, [r3, #0]
  break;
 800881a:	e008      	b.n	800882e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800881c:	4b07      	ldr	r3, [pc, #28]	; (800883c <USBH_UserProcess+0x58>)
 800881e:	2202      	movs	r2, #2
 8008820:	701a      	strb	r2, [r3, #0]
  break;
 8008822:	e004      	b.n	800882e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008824:	4b05      	ldr	r3, [pc, #20]	; (800883c <USBH_UserProcess+0x58>)
 8008826:	2201      	movs	r2, #1
 8008828:	701a      	strb	r2, [r3, #0]
  break;
 800882a:	e000      	b.n	800882e <USBH_UserProcess+0x4a>

  default:
  break;
 800882c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800882e:	bf00      	nop
 8008830:	370c      	adds	r7, #12
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	200000bc 	.word	0x200000bc

08008840 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b08a      	sub	sp, #40	; 0x28
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008848:	f107 0314 	add.w	r3, r7, #20
 800884c:	2200      	movs	r2, #0
 800884e:	601a      	str	r2, [r3, #0]
 8008850:	605a      	str	r2, [r3, #4]
 8008852:	609a      	str	r2, [r3, #8]
 8008854:	60da      	str	r2, [r3, #12]
 8008856:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008860:	d147      	bne.n	80088f2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008862:	2300      	movs	r3, #0
 8008864:	613b      	str	r3, [r7, #16]
 8008866:	4b25      	ldr	r3, [pc, #148]	; (80088fc <HAL_HCD_MspInit+0xbc>)
 8008868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886a:	4a24      	ldr	r2, [pc, #144]	; (80088fc <HAL_HCD_MspInit+0xbc>)
 800886c:	f043 0301 	orr.w	r3, r3, #1
 8008870:	6313      	str	r3, [r2, #48]	; 0x30
 8008872:	4b22      	ldr	r3, [pc, #136]	; (80088fc <HAL_HCD_MspInit+0xbc>)
 8008874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008876:	f003 0301 	and.w	r3, r3, #1
 800887a:	613b      	str	r3, [r7, #16]
 800887c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800887e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008884:	2300      	movs	r3, #0
 8008886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008888:	2300      	movs	r3, #0
 800888a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800888c:	f107 0314 	add.w	r3, r7, #20
 8008890:	4619      	mov	r1, r3
 8008892:	481b      	ldr	r0, [pc, #108]	; (8008900 <HAL_HCD_MspInit+0xc0>)
 8008894:	f7fa f9ae 	bl	8002bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008898:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800889c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800889e:	2302      	movs	r3, #2
 80088a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088a2:	2300      	movs	r3, #0
 80088a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088a6:	2300      	movs	r3, #0
 80088a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80088aa:	230a      	movs	r3, #10
 80088ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088ae:	f107 0314 	add.w	r3, r7, #20
 80088b2:	4619      	mov	r1, r3
 80088b4:	4812      	ldr	r0, [pc, #72]	; (8008900 <HAL_HCD_MspInit+0xc0>)
 80088b6:	f7fa f99d 	bl	8002bf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80088ba:	4b10      	ldr	r3, [pc, #64]	; (80088fc <HAL_HCD_MspInit+0xbc>)
 80088bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088be:	4a0f      	ldr	r2, [pc, #60]	; (80088fc <HAL_HCD_MspInit+0xbc>)
 80088c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088c4:	6353      	str	r3, [r2, #52]	; 0x34
 80088c6:	2300      	movs	r3, #0
 80088c8:	60fb      	str	r3, [r7, #12]
 80088ca:	4b0c      	ldr	r3, [pc, #48]	; (80088fc <HAL_HCD_MspInit+0xbc>)
 80088cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ce:	4a0b      	ldr	r2, [pc, #44]	; (80088fc <HAL_HCD_MspInit+0xbc>)
 80088d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088d4:	6453      	str	r3, [r2, #68]	; 0x44
 80088d6:	4b09      	ldr	r3, [pc, #36]	; (80088fc <HAL_HCD_MspInit+0xbc>)
 80088d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088de:	60fb      	str	r3, [r7, #12]
 80088e0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80088e2:	2200      	movs	r2, #0
 80088e4:	2100      	movs	r1, #0
 80088e6:	2043      	movs	r0, #67	; 0x43
 80088e8:	f7f9 fe63 	bl	80025b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80088ec:	2043      	movs	r0, #67	; 0x43
 80088ee:	f7f9 fe7c 	bl	80025ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80088f2:	bf00      	nop
 80088f4:	3728      	adds	r7, #40	; 0x28
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	40023800 	.word	0x40023800
 8008900:	40020000 	.word	0x40020000

08008904 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008912:	4618      	mov	r0, r3
 8008914:	f7ff f8db 	bl	8007ace <USBH_LL_IncTimer>
}
 8008918:	bf00      	nop
 800891a:	3708      	adds	r7, #8
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800892e:	4618      	mov	r0, r3
 8008930:	f7ff f913 	bl	8007b5a <USBH_LL_Connect>
}
 8008934:	bf00      	nop
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800894a:	4618      	mov	r0, r3
 800894c:	f7ff f91c 	bl	8007b88 <USBH_LL_Disconnect>
}
 8008950:	bf00      	nop
 8008952:	3708      	adds	r7, #8
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	460b      	mov	r3, r1
 8008962:	70fb      	strb	r3, [r7, #3]
 8008964:	4613      	mov	r3, r2
 8008966:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008968:	bf00      	nop
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008982:	4618      	mov	r0, r3
 8008984:	f7ff f8cd 	bl	8007b22 <USBH_LL_PortEnabled>
}
 8008988:	bf00      	nop
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800899e:	4618      	mov	r0, r3
 80089a0:	f7ff f8cd 	bl	8007b3e <USBH_LL_PortDisabled>
}
 80089a4:	bf00      	nop
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d12a      	bne.n	8008a14 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80089be:	4a18      	ldr	r2, [pc, #96]	; (8008a20 <USBH_LL_Init+0x74>)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a15      	ldr	r2, [pc, #84]	; (8008a20 <USBH_LL_Init+0x74>)
 80089ca:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80089ce:	4b14      	ldr	r3, [pc, #80]	; (8008a20 <USBH_LL_Init+0x74>)
 80089d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80089d4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80089d6:	4b12      	ldr	r3, [pc, #72]	; (8008a20 <USBH_LL_Init+0x74>)
 80089d8:	2208      	movs	r2, #8
 80089da:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80089dc:	4b10      	ldr	r3, [pc, #64]	; (8008a20 <USBH_LL_Init+0x74>)
 80089de:	2201      	movs	r2, #1
 80089e0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80089e2:	4b0f      	ldr	r3, [pc, #60]	; (8008a20 <USBH_LL_Init+0x74>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80089e8:	4b0d      	ldr	r3, [pc, #52]	; (8008a20 <USBH_LL_Init+0x74>)
 80089ea:	2202      	movs	r2, #2
 80089ec:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80089ee:	4b0c      	ldr	r3, [pc, #48]	; (8008a20 <USBH_LL_Init+0x74>)
 80089f0:	2200      	movs	r2, #0
 80089f2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80089f4:	480a      	ldr	r0, [pc, #40]	; (8008a20 <USBH_LL_Init+0x74>)
 80089f6:	f7fa fab2 	bl	8002f5e <HAL_HCD_Init>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d001      	beq.n	8008a04 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008a00:	f7f8 fe34 	bl	800166c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008a04:	4806      	ldr	r0, [pc, #24]	; (8008a20 <USBH_LL_Init+0x74>)
 8008a06:	f7fa fe96 	bl	8003736 <HAL_HCD_GetCurrentFrame>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f7ff f84e 	bl	8007ab0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	200005a4 	.word	0x200005a4

08008a24 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a30:	2300      	movs	r3, #0
 8008a32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7fa fe05 	bl	800364a <HAL_HCD_Start>
 8008a40:	4603      	mov	r3, r0
 8008a42:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a44:	7bfb      	ldrb	r3, [r7, #15]
 8008a46:	4618      	mov	r0, r3
 8008a48:	f000 f95c 	bl	8008d04 <USBH_Get_USB_Status>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a50:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3710      	adds	r7, #16
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b084      	sub	sp, #16
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a62:	2300      	movs	r3, #0
 8008a64:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a66:	2300      	movs	r3, #0
 8008a68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7fa fe0d 	bl	8003690 <HAL_HCD_Stop>
 8008a76:	4603      	mov	r3, r0
 8008a78:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a7a:	7bfb      	ldrb	r3, [r7, #15]
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f000 f941 	bl	8008d04 <USBH_Get_USB_Status>
 8008a82:	4603      	mov	r3, r0
 8008a84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a86:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7fa fe55 	bl	8003752 <HAL_HCD_GetCurrentSpeed>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d00c      	beq.n	8008ac8 <USBH_LL_GetSpeed+0x38>
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d80d      	bhi.n	8008ace <USBH_LL_GetSpeed+0x3e>
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d002      	beq.n	8008abc <USBH_LL_GetSpeed+0x2c>
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d003      	beq.n	8008ac2 <USBH_LL_GetSpeed+0x32>
 8008aba:	e008      	b.n	8008ace <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008abc:	2300      	movs	r3, #0
 8008abe:	73fb      	strb	r3, [r7, #15]
    break;
 8008ac0:	e008      	b.n	8008ad4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ac6:	e005      	b.n	8008ad4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008ac8:	2302      	movs	r3, #2
 8008aca:	73fb      	strb	r3, [r7, #15]
    break;
 8008acc:	e002      	b.n	8008ad4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ad2:	bf00      	nop
  }
  return  speed;
 8008ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b084      	sub	sp, #16
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008aea:	2300      	movs	r3, #0
 8008aec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7fa fde8 	bl	80036ca <HAL_HCD_ResetPort>
 8008afa:	4603      	mov	r3, r0
 8008afc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008afe:	7bfb      	ldrb	r3, [r7, #15]
 8008b00:	4618      	mov	r0, r3
 8008b02:	f000 f8ff 	bl	8008d04 <USBH_Get_USB_Status>
 8008b06:	4603      	mov	r3, r0
 8008b08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b26:	78fa      	ldrb	r2, [r7, #3]
 8008b28:	4611      	mov	r1, r2
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7fa fdef 	bl	800370e <HAL_HCD_HC_GetXferCount>
 8008b30:	4603      	mov	r3, r0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3708      	adds	r7, #8
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008b3a:	b590      	push	{r4, r7, lr}
 8008b3c:	b089      	sub	sp, #36	; 0x24
 8008b3e:	af04      	add	r7, sp, #16
 8008b40:	6078      	str	r0, [r7, #4]
 8008b42:	4608      	mov	r0, r1
 8008b44:	4611      	mov	r1, r2
 8008b46:	461a      	mov	r2, r3
 8008b48:	4603      	mov	r3, r0
 8008b4a:	70fb      	strb	r3, [r7, #3]
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	70bb      	strb	r3, [r7, #2]
 8008b50:	4613      	mov	r3, r2
 8008b52:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b54:	2300      	movs	r3, #0
 8008b56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008b62:	787c      	ldrb	r4, [r7, #1]
 8008b64:	78ba      	ldrb	r2, [r7, #2]
 8008b66:	78f9      	ldrb	r1, [r7, #3]
 8008b68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b6a:	9302      	str	r3, [sp, #8]
 8008b6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008b70:	9301      	str	r3, [sp, #4]
 8008b72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b76:	9300      	str	r3, [sp, #0]
 8008b78:	4623      	mov	r3, r4
 8008b7a:	f7fa fa52 	bl	8003022 <HAL_HCD_HC_Init>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b82:	7bfb      	ldrb	r3, [r7, #15]
 8008b84:	4618      	mov	r0, r3
 8008b86:	f000 f8bd 	bl	8008d04 <USBH_Get_USB_Status>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3714      	adds	r7, #20
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd90      	pop	{r4, r7, pc}

08008b98 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bb2:	78fa      	ldrb	r2, [r7, #3]
 8008bb4:	4611      	mov	r1, r2
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7fa fac2 	bl	8003140 <HAL_HCD_HC_Halt>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008bc0:	7bfb      	ldrb	r3, [r7, #15]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f000 f89e 	bl	8008d04 <USBH_Get_USB_Status>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008bd6:	b590      	push	{r4, r7, lr}
 8008bd8:	b089      	sub	sp, #36	; 0x24
 8008bda:	af04      	add	r7, sp, #16
 8008bdc:	6078      	str	r0, [r7, #4]
 8008bde:	4608      	mov	r0, r1
 8008be0:	4611      	mov	r1, r2
 8008be2:	461a      	mov	r2, r3
 8008be4:	4603      	mov	r3, r0
 8008be6:	70fb      	strb	r3, [r7, #3]
 8008be8:	460b      	mov	r3, r1
 8008bea:	70bb      	strb	r3, [r7, #2]
 8008bec:	4613      	mov	r3, r2
 8008bee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008bfe:	787c      	ldrb	r4, [r7, #1]
 8008c00:	78ba      	ldrb	r2, [r7, #2]
 8008c02:	78f9      	ldrb	r1, [r7, #3]
 8008c04:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008c08:	9303      	str	r3, [sp, #12]
 8008c0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008c0c:	9302      	str	r3, [sp, #8]
 8008c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c10:	9301      	str	r3, [sp, #4]
 8008c12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c16:	9300      	str	r3, [sp, #0]
 8008c18:	4623      	mov	r3, r4
 8008c1a:	f7fa fab5 	bl	8003188 <HAL_HCD_HC_SubmitRequest>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008c22:	7bfb      	ldrb	r3, [r7, #15]
 8008c24:	4618      	mov	r0, r3
 8008c26:	f000 f86d 	bl	8008d04 <USBH_Get_USB_Status>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3714      	adds	r7, #20
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd90      	pop	{r4, r7, pc}

08008c38 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	460b      	mov	r3, r1
 8008c42:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c4a:	78fa      	ldrb	r2, [r7, #3]
 8008c4c:	4611      	mov	r1, r2
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7fa fd49 	bl	80036e6 <HAL_HCD_HC_GetURBState>
 8008c54:	4603      	mov	r3, r0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3708      	adds	r7, #8
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b082      	sub	sp, #8
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
 8008c66:	460b      	mov	r3, r1
 8008c68:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d103      	bne.n	8008c7c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008c74:	78fb      	ldrb	r3, [r7, #3]
 8008c76:	4618      	mov	r0, r3
 8008c78:	f000 f870 	bl	8008d5c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008c7c:	20c8      	movs	r0, #200	; 0xc8
 8008c7e:	f7f9 fb99 	bl	80023b4 <HAL_Delay>
  return USBH_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3708      	adds	r7, #8
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	460b      	mov	r3, r1
 8008c96:	70fb      	strb	r3, [r7, #3]
 8008c98:	4613      	mov	r3, r2
 8008c9a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ca2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008ca4:	78fb      	ldrb	r3, [r7, #3]
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	212c      	movs	r1, #44	; 0x2c
 8008caa:	fb01 f303 	mul.w	r3, r1, r3
 8008cae:	4413      	add	r3, r2
 8008cb0:	333b      	adds	r3, #59	; 0x3b
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d009      	beq.n	8008ccc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008cb8:	78fb      	ldrb	r3, [r7, #3]
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	212c      	movs	r1, #44	; 0x2c
 8008cbe:	fb01 f303 	mul.w	r3, r1, r3
 8008cc2:	4413      	add	r3, r2
 8008cc4:	3354      	adds	r3, #84	; 0x54
 8008cc6:	78ba      	ldrb	r2, [r7, #2]
 8008cc8:	701a      	strb	r2, [r3, #0]
 8008cca:	e008      	b.n	8008cde <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008ccc:	78fb      	ldrb	r3, [r7, #3]
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	212c      	movs	r1, #44	; 0x2c
 8008cd2:	fb01 f303 	mul.w	r3, r1, r3
 8008cd6:	4413      	add	r3, r2
 8008cd8:	3355      	adds	r3, #85	; 0x55
 8008cda:	78ba      	ldrb	r2, [r7, #2]
 8008cdc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3714      	adds	r7, #20
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f7f9 fb5d 	bl	80023b4 <HAL_Delay>
}
 8008cfa:	bf00      	nop
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
	...

08008d04 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d12:	79fb      	ldrb	r3, [r7, #7]
 8008d14:	2b03      	cmp	r3, #3
 8008d16:	d817      	bhi.n	8008d48 <USBH_Get_USB_Status+0x44>
 8008d18:	a201      	add	r2, pc, #4	; (adr r2, 8008d20 <USBH_Get_USB_Status+0x1c>)
 8008d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d1e:	bf00      	nop
 8008d20:	08008d31 	.word	0x08008d31
 8008d24:	08008d37 	.word	0x08008d37
 8008d28:	08008d3d 	.word	0x08008d3d
 8008d2c:	08008d43 	.word	0x08008d43
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008d30:	2300      	movs	r3, #0
 8008d32:	73fb      	strb	r3, [r7, #15]
    break;
 8008d34:	e00b      	b.n	8008d4e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008d36:	2302      	movs	r3, #2
 8008d38:	73fb      	strb	r3, [r7, #15]
    break;
 8008d3a:	e008      	b.n	8008d4e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d40:	e005      	b.n	8008d4e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008d42:	2302      	movs	r3, #2
 8008d44:	73fb      	strb	r3, [r7, #15]
    break;
 8008d46:	e002      	b.n	8008d4e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008d48:	2302      	movs	r3, #2
 8008d4a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d4c:	bf00      	nop
  }
  return usb_status;
 8008d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3714      	adds	r7, #20
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	4603      	mov	r3, r0
 8008d64:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008d66:	79fb      	ldrb	r3, [r7, #7]
 8008d68:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008d6a:	79fb      	ldrb	r3, [r7, #7]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d102      	bne.n	8008d76 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008d70:	2300      	movs	r3, #0
 8008d72:	73fb      	strb	r3, [r7, #15]
 8008d74:	e001      	b.n	8008d7a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008d76:	2301      	movs	r3, #1
 8008d78:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008d7a:	7bfb      	ldrb	r3, [r7, #15]
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	2101      	movs	r1, #1
 8008d80:	4803      	ldr	r0, [pc, #12]	; (8008d90 <MX_DriverVbusFS+0x34>)
 8008d82:	f7fa f8d3 	bl	8002f2c <HAL_GPIO_WritePin>
}
 8008d86:	bf00      	nop
 8008d88:	3710      	adds	r7, #16
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	40020800 	.word	0x40020800

08008d94 <__errno>:
 8008d94:	4b01      	ldr	r3, [pc, #4]	; (8008d9c <__errno+0x8>)
 8008d96:	6818      	ldr	r0, [r3, #0]
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	2000002c 	.word	0x2000002c

08008da0 <__libc_init_array>:
 8008da0:	b570      	push	{r4, r5, r6, lr}
 8008da2:	4d0d      	ldr	r5, [pc, #52]	; (8008dd8 <__libc_init_array+0x38>)
 8008da4:	4c0d      	ldr	r4, [pc, #52]	; (8008ddc <__libc_init_array+0x3c>)
 8008da6:	1b64      	subs	r4, r4, r5
 8008da8:	10a4      	asrs	r4, r4, #2
 8008daa:	2600      	movs	r6, #0
 8008dac:	42a6      	cmp	r6, r4
 8008dae:	d109      	bne.n	8008dc4 <__libc_init_array+0x24>
 8008db0:	4d0b      	ldr	r5, [pc, #44]	; (8008de0 <__libc_init_array+0x40>)
 8008db2:	4c0c      	ldr	r4, [pc, #48]	; (8008de4 <__libc_init_array+0x44>)
 8008db4:	f002 fa7e 	bl	800b2b4 <_init>
 8008db8:	1b64      	subs	r4, r4, r5
 8008dba:	10a4      	asrs	r4, r4, #2
 8008dbc:	2600      	movs	r6, #0
 8008dbe:	42a6      	cmp	r6, r4
 8008dc0:	d105      	bne.n	8008dce <__libc_init_array+0x2e>
 8008dc2:	bd70      	pop	{r4, r5, r6, pc}
 8008dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dc8:	4798      	blx	r3
 8008dca:	3601      	adds	r6, #1
 8008dcc:	e7ee      	b.n	8008dac <__libc_init_array+0xc>
 8008dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dd2:	4798      	blx	r3
 8008dd4:	3601      	adds	r6, #1
 8008dd6:	e7f2      	b.n	8008dbe <__libc_init_array+0x1e>
 8008dd8:	0800b560 	.word	0x0800b560
 8008ddc:	0800b560 	.word	0x0800b560
 8008de0:	0800b560 	.word	0x0800b560
 8008de4:	0800b564 	.word	0x0800b564

08008de8 <malloc>:
 8008de8:	4b02      	ldr	r3, [pc, #8]	; (8008df4 <malloc+0xc>)
 8008dea:	4601      	mov	r1, r0
 8008dec:	6818      	ldr	r0, [r3, #0]
 8008dee:	f000 b863 	b.w	8008eb8 <_malloc_r>
 8008df2:	bf00      	nop
 8008df4:	2000002c 	.word	0x2000002c

08008df8 <free>:
 8008df8:	4b02      	ldr	r3, [pc, #8]	; (8008e04 <free+0xc>)
 8008dfa:	4601      	mov	r1, r0
 8008dfc:	6818      	ldr	r0, [r3, #0]
 8008dfe:	f000 b80b 	b.w	8008e18 <_free_r>
 8008e02:	bf00      	nop
 8008e04:	2000002c 	.word	0x2000002c

08008e08 <memset>:
 8008e08:	4402      	add	r2, r0
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d100      	bne.n	8008e12 <memset+0xa>
 8008e10:	4770      	bx	lr
 8008e12:	f803 1b01 	strb.w	r1, [r3], #1
 8008e16:	e7f9      	b.n	8008e0c <memset+0x4>

08008e18 <_free_r>:
 8008e18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e1a:	2900      	cmp	r1, #0
 8008e1c:	d048      	beq.n	8008eb0 <_free_r+0x98>
 8008e1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e22:	9001      	str	r0, [sp, #4]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f1a1 0404 	sub.w	r4, r1, #4
 8008e2a:	bfb8      	it	lt
 8008e2c:	18e4      	addlt	r4, r4, r3
 8008e2e:	f000 f8ad 	bl	8008f8c <__malloc_lock>
 8008e32:	4a20      	ldr	r2, [pc, #128]	; (8008eb4 <_free_r+0x9c>)
 8008e34:	9801      	ldr	r0, [sp, #4]
 8008e36:	6813      	ldr	r3, [r2, #0]
 8008e38:	4615      	mov	r5, r2
 8008e3a:	b933      	cbnz	r3, 8008e4a <_free_r+0x32>
 8008e3c:	6063      	str	r3, [r4, #4]
 8008e3e:	6014      	str	r4, [r2, #0]
 8008e40:	b003      	add	sp, #12
 8008e42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e46:	f000 b8a7 	b.w	8008f98 <__malloc_unlock>
 8008e4a:	42a3      	cmp	r3, r4
 8008e4c:	d90b      	bls.n	8008e66 <_free_r+0x4e>
 8008e4e:	6821      	ldr	r1, [r4, #0]
 8008e50:	1862      	adds	r2, r4, r1
 8008e52:	4293      	cmp	r3, r2
 8008e54:	bf04      	itt	eq
 8008e56:	681a      	ldreq	r2, [r3, #0]
 8008e58:	685b      	ldreq	r3, [r3, #4]
 8008e5a:	6063      	str	r3, [r4, #4]
 8008e5c:	bf04      	itt	eq
 8008e5e:	1852      	addeq	r2, r2, r1
 8008e60:	6022      	streq	r2, [r4, #0]
 8008e62:	602c      	str	r4, [r5, #0]
 8008e64:	e7ec      	b.n	8008e40 <_free_r+0x28>
 8008e66:	461a      	mov	r2, r3
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	b10b      	cbz	r3, 8008e70 <_free_r+0x58>
 8008e6c:	42a3      	cmp	r3, r4
 8008e6e:	d9fa      	bls.n	8008e66 <_free_r+0x4e>
 8008e70:	6811      	ldr	r1, [r2, #0]
 8008e72:	1855      	adds	r5, r2, r1
 8008e74:	42a5      	cmp	r5, r4
 8008e76:	d10b      	bne.n	8008e90 <_free_r+0x78>
 8008e78:	6824      	ldr	r4, [r4, #0]
 8008e7a:	4421      	add	r1, r4
 8008e7c:	1854      	adds	r4, r2, r1
 8008e7e:	42a3      	cmp	r3, r4
 8008e80:	6011      	str	r1, [r2, #0]
 8008e82:	d1dd      	bne.n	8008e40 <_free_r+0x28>
 8008e84:	681c      	ldr	r4, [r3, #0]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	6053      	str	r3, [r2, #4]
 8008e8a:	4421      	add	r1, r4
 8008e8c:	6011      	str	r1, [r2, #0]
 8008e8e:	e7d7      	b.n	8008e40 <_free_r+0x28>
 8008e90:	d902      	bls.n	8008e98 <_free_r+0x80>
 8008e92:	230c      	movs	r3, #12
 8008e94:	6003      	str	r3, [r0, #0]
 8008e96:	e7d3      	b.n	8008e40 <_free_r+0x28>
 8008e98:	6825      	ldr	r5, [r4, #0]
 8008e9a:	1961      	adds	r1, r4, r5
 8008e9c:	428b      	cmp	r3, r1
 8008e9e:	bf04      	itt	eq
 8008ea0:	6819      	ldreq	r1, [r3, #0]
 8008ea2:	685b      	ldreq	r3, [r3, #4]
 8008ea4:	6063      	str	r3, [r4, #4]
 8008ea6:	bf04      	itt	eq
 8008ea8:	1949      	addeq	r1, r1, r5
 8008eaa:	6021      	streq	r1, [r4, #0]
 8008eac:	6054      	str	r4, [r2, #4]
 8008eae:	e7c7      	b.n	8008e40 <_free_r+0x28>
 8008eb0:	b003      	add	sp, #12
 8008eb2:	bd30      	pop	{r4, r5, pc}
 8008eb4:	200000c0 	.word	0x200000c0

08008eb8 <_malloc_r>:
 8008eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eba:	1ccd      	adds	r5, r1, #3
 8008ebc:	f025 0503 	bic.w	r5, r5, #3
 8008ec0:	3508      	adds	r5, #8
 8008ec2:	2d0c      	cmp	r5, #12
 8008ec4:	bf38      	it	cc
 8008ec6:	250c      	movcc	r5, #12
 8008ec8:	2d00      	cmp	r5, #0
 8008eca:	4606      	mov	r6, r0
 8008ecc:	db01      	blt.n	8008ed2 <_malloc_r+0x1a>
 8008ece:	42a9      	cmp	r1, r5
 8008ed0:	d903      	bls.n	8008eda <_malloc_r+0x22>
 8008ed2:	230c      	movs	r3, #12
 8008ed4:	6033      	str	r3, [r6, #0]
 8008ed6:	2000      	movs	r0, #0
 8008ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eda:	f000 f857 	bl	8008f8c <__malloc_lock>
 8008ede:	4921      	ldr	r1, [pc, #132]	; (8008f64 <_malloc_r+0xac>)
 8008ee0:	680a      	ldr	r2, [r1, #0]
 8008ee2:	4614      	mov	r4, r2
 8008ee4:	b99c      	cbnz	r4, 8008f0e <_malloc_r+0x56>
 8008ee6:	4f20      	ldr	r7, [pc, #128]	; (8008f68 <_malloc_r+0xb0>)
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	b923      	cbnz	r3, 8008ef6 <_malloc_r+0x3e>
 8008eec:	4621      	mov	r1, r4
 8008eee:	4630      	mov	r0, r6
 8008ef0:	f000 f83c 	bl	8008f6c <_sbrk_r>
 8008ef4:	6038      	str	r0, [r7, #0]
 8008ef6:	4629      	mov	r1, r5
 8008ef8:	4630      	mov	r0, r6
 8008efa:	f000 f837 	bl	8008f6c <_sbrk_r>
 8008efe:	1c43      	adds	r3, r0, #1
 8008f00:	d123      	bne.n	8008f4a <_malloc_r+0x92>
 8008f02:	230c      	movs	r3, #12
 8008f04:	6033      	str	r3, [r6, #0]
 8008f06:	4630      	mov	r0, r6
 8008f08:	f000 f846 	bl	8008f98 <__malloc_unlock>
 8008f0c:	e7e3      	b.n	8008ed6 <_malloc_r+0x1e>
 8008f0e:	6823      	ldr	r3, [r4, #0]
 8008f10:	1b5b      	subs	r3, r3, r5
 8008f12:	d417      	bmi.n	8008f44 <_malloc_r+0x8c>
 8008f14:	2b0b      	cmp	r3, #11
 8008f16:	d903      	bls.n	8008f20 <_malloc_r+0x68>
 8008f18:	6023      	str	r3, [r4, #0]
 8008f1a:	441c      	add	r4, r3
 8008f1c:	6025      	str	r5, [r4, #0]
 8008f1e:	e004      	b.n	8008f2a <_malloc_r+0x72>
 8008f20:	6863      	ldr	r3, [r4, #4]
 8008f22:	42a2      	cmp	r2, r4
 8008f24:	bf0c      	ite	eq
 8008f26:	600b      	streq	r3, [r1, #0]
 8008f28:	6053      	strne	r3, [r2, #4]
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	f000 f834 	bl	8008f98 <__malloc_unlock>
 8008f30:	f104 000b 	add.w	r0, r4, #11
 8008f34:	1d23      	adds	r3, r4, #4
 8008f36:	f020 0007 	bic.w	r0, r0, #7
 8008f3a:	1ac2      	subs	r2, r0, r3
 8008f3c:	d0cc      	beq.n	8008ed8 <_malloc_r+0x20>
 8008f3e:	1a1b      	subs	r3, r3, r0
 8008f40:	50a3      	str	r3, [r4, r2]
 8008f42:	e7c9      	b.n	8008ed8 <_malloc_r+0x20>
 8008f44:	4622      	mov	r2, r4
 8008f46:	6864      	ldr	r4, [r4, #4]
 8008f48:	e7cc      	b.n	8008ee4 <_malloc_r+0x2c>
 8008f4a:	1cc4      	adds	r4, r0, #3
 8008f4c:	f024 0403 	bic.w	r4, r4, #3
 8008f50:	42a0      	cmp	r0, r4
 8008f52:	d0e3      	beq.n	8008f1c <_malloc_r+0x64>
 8008f54:	1a21      	subs	r1, r4, r0
 8008f56:	4630      	mov	r0, r6
 8008f58:	f000 f808 	bl	8008f6c <_sbrk_r>
 8008f5c:	3001      	adds	r0, #1
 8008f5e:	d1dd      	bne.n	8008f1c <_malloc_r+0x64>
 8008f60:	e7cf      	b.n	8008f02 <_malloc_r+0x4a>
 8008f62:	bf00      	nop
 8008f64:	200000c0 	.word	0x200000c0
 8008f68:	200000c4 	.word	0x200000c4

08008f6c <_sbrk_r>:
 8008f6c:	b538      	push	{r3, r4, r5, lr}
 8008f6e:	4d06      	ldr	r5, [pc, #24]	; (8008f88 <_sbrk_r+0x1c>)
 8008f70:	2300      	movs	r3, #0
 8008f72:	4604      	mov	r4, r0
 8008f74:	4608      	mov	r0, r1
 8008f76:	602b      	str	r3, [r5, #0]
 8008f78:	f7f9 f938 	bl	80021ec <_sbrk>
 8008f7c:	1c43      	adds	r3, r0, #1
 8008f7e:	d102      	bne.n	8008f86 <_sbrk_r+0x1a>
 8008f80:	682b      	ldr	r3, [r5, #0]
 8008f82:	b103      	cbz	r3, 8008f86 <_sbrk_r+0x1a>
 8008f84:	6023      	str	r3, [r4, #0]
 8008f86:	bd38      	pop	{r3, r4, r5, pc}
 8008f88:	200008a8 	.word	0x200008a8

08008f8c <__malloc_lock>:
 8008f8c:	4801      	ldr	r0, [pc, #4]	; (8008f94 <__malloc_lock+0x8>)
 8008f8e:	f000 b809 	b.w	8008fa4 <__retarget_lock_acquire_recursive>
 8008f92:	bf00      	nop
 8008f94:	200008b0 	.word	0x200008b0

08008f98 <__malloc_unlock>:
 8008f98:	4801      	ldr	r0, [pc, #4]	; (8008fa0 <__malloc_unlock+0x8>)
 8008f9a:	f000 b804 	b.w	8008fa6 <__retarget_lock_release_recursive>
 8008f9e:	bf00      	nop
 8008fa0:	200008b0 	.word	0x200008b0

08008fa4 <__retarget_lock_acquire_recursive>:
 8008fa4:	4770      	bx	lr

08008fa6 <__retarget_lock_release_recursive>:
 8008fa6:	4770      	bx	lr

08008fa8 <atan>:
 8008fa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fac:	ec55 4b10 	vmov	r4, r5, d0
 8008fb0:	4bc3      	ldr	r3, [pc, #780]	; (80092c0 <atan+0x318>)
 8008fb2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008fb6:	429e      	cmp	r6, r3
 8008fb8:	46ab      	mov	fp, r5
 8008fba:	dd18      	ble.n	8008fee <atan+0x46>
 8008fbc:	4bc1      	ldr	r3, [pc, #772]	; (80092c4 <atan+0x31c>)
 8008fbe:	429e      	cmp	r6, r3
 8008fc0:	dc01      	bgt.n	8008fc6 <atan+0x1e>
 8008fc2:	d109      	bne.n	8008fd8 <atan+0x30>
 8008fc4:	b144      	cbz	r4, 8008fd8 <atan+0x30>
 8008fc6:	4622      	mov	r2, r4
 8008fc8:	462b      	mov	r3, r5
 8008fca:	4620      	mov	r0, r4
 8008fcc:	4629      	mov	r1, r5
 8008fce:	f7f7 f901 	bl	80001d4 <__adddf3>
 8008fd2:	4604      	mov	r4, r0
 8008fd4:	460d      	mov	r5, r1
 8008fd6:	e006      	b.n	8008fe6 <atan+0x3e>
 8008fd8:	f1bb 0f00 	cmp.w	fp, #0
 8008fdc:	f300 8131 	bgt.w	8009242 <atan+0x29a>
 8008fe0:	a59b      	add	r5, pc, #620	; (adr r5, 8009250 <atan+0x2a8>)
 8008fe2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008fe6:	ec45 4b10 	vmov	d0, r4, r5
 8008fea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fee:	4bb6      	ldr	r3, [pc, #728]	; (80092c8 <atan+0x320>)
 8008ff0:	429e      	cmp	r6, r3
 8008ff2:	dc14      	bgt.n	800901e <atan+0x76>
 8008ff4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008ff8:	429e      	cmp	r6, r3
 8008ffa:	dc0d      	bgt.n	8009018 <atan+0x70>
 8008ffc:	a396      	add	r3, pc, #600	; (adr r3, 8009258 <atan+0x2b0>)
 8008ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009002:	ee10 0a10 	vmov	r0, s0
 8009006:	4629      	mov	r1, r5
 8009008:	f7f7 f8e4 	bl	80001d4 <__adddf3>
 800900c:	4baf      	ldr	r3, [pc, #700]	; (80092cc <atan+0x324>)
 800900e:	2200      	movs	r2, #0
 8009010:	f7f7 fd26 	bl	8000a60 <__aeabi_dcmpgt>
 8009014:	2800      	cmp	r0, #0
 8009016:	d1e6      	bne.n	8008fe6 <atan+0x3e>
 8009018:	f04f 3aff 	mov.w	sl, #4294967295
 800901c:	e02b      	b.n	8009076 <atan+0xce>
 800901e:	f000 f9b3 	bl	8009388 <fabs>
 8009022:	4bab      	ldr	r3, [pc, #684]	; (80092d0 <atan+0x328>)
 8009024:	429e      	cmp	r6, r3
 8009026:	ec55 4b10 	vmov	r4, r5, d0
 800902a:	f300 80bf 	bgt.w	80091ac <atan+0x204>
 800902e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009032:	429e      	cmp	r6, r3
 8009034:	f300 80a0 	bgt.w	8009178 <atan+0x1d0>
 8009038:	ee10 2a10 	vmov	r2, s0
 800903c:	ee10 0a10 	vmov	r0, s0
 8009040:	462b      	mov	r3, r5
 8009042:	4629      	mov	r1, r5
 8009044:	f7f7 f8c6 	bl	80001d4 <__adddf3>
 8009048:	4ba0      	ldr	r3, [pc, #640]	; (80092cc <atan+0x324>)
 800904a:	2200      	movs	r2, #0
 800904c:	f7f7 f8c0 	bl	80001d0 <__aeabi_dsub>
 8009050:	2200      	movs	r2, #0
 8009052:	4606      	mov	r6, r0
 8009054:	460f      	mov	r7, r1
 8009056:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800905a:	4620      	mov	r0, r4
 800905c:	4629      	mov	r1, r5
 800905e:	f7f7 f8b9 	bl	80001d4 <__adddf3>
 8009062:	4602      	mov	r2, r0
 8009064:	460b      	mov	r3, r1
 8009066:	4630      	mov	r0, r6
 8009068:	4639      	mov	r1, r7
 800906a:	f7f7 fb93 	bl	8000794 <__aeabi_ddiv>
 800906e:	f04f 0a00 	mov.w	sl, #0
 8009072:	4604      	mov	r4, r0
 8009074:	460d      	mov	r5, r1
 8009076:	4622      	mov	r2, r4
 8009078:	462b      	mov	r3, r5
 800907a:	4620      	mov	r0, r4
 800907c:	4629      	mov	r1, r5
 800907e:	f7f7 fa5f 	bl	8000540 <__aeabi_dmul>
 8009082:	4602      	mov	r2, r0
 8009084:	460b      	mov	r3, r1
 8009086:	4680      	mov	r8, r0
 8009088:	4689      	mov	r9, r1
 800908a:	f7f7 fa59 	bl	8000540 <__aeabi_dmul>
 800908e:	a374      	add	r3, pc, #464	; (adr r3, 8009260 <atan+0x2b8>)
 8009090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009094:	4606      	mov	r6, r0
 8009096:	460f      	mov	r7, r1
 8009098:	f7f7 fa52 	bl	8000540 <__aeabi_dmul>
 800909c:	a372      	add	r3, pc, #456	; (adr r3, 8009268 <atan+0x2c0>)
 800909e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a2:	f7f7 f897 	bl	80001d4 <__adddf3>
 80090a6:	4632      	mov	r2, r6
 80090a8:	463b      	mov	r3, r7
 80090aa:	f7f7 fa49 	bl	8000540 <__aeabi_dmul>
 80090ae:	a370      	add	r3, pc, #448	; (adr r3, 8009270 <atan+0x2c8>)
 80090b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b4:	f7f7 f88e 	bl	80001d4 <__adddf3>
 80090b8:	4632      	mov	r2, r6
 80090ba:	463b      	mov	r3, r7
 80090bc:	f7f7 fa40 	bl	8000540 <__aeabi_dmul>
 80090c0:	a36d      	add	r3, pc, #436	; (adr r3, 8009278 <atan+0x2d0>)
 80090c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c6:	f7f7 f885 	bl	80001d4 <__adddf3>
 80090ca:	4632      	mov	r2, r6
 80090cc:	463b      	mov	r3, r7
 80090ce:	f7f7 fa37 	bl	8000540 <__aeabi_dmul>
 80090d2:	a36b      	add	r3, pc, #428	; (adr r3, 8009280 <atan+0x2d8>)
 80090d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d8:	f7f7 f87c 	bl	80001d4 <__adddf3>
 80090dc:	4632      	mov	r2, r6
 80090de:	463b      	mov	r3, r7
 80090e0:	f7f7 fa2e 	bl	8000540 <__aeabi_dmul>
 80090e4:	a368      	add	r3, pc, #416	; (adr r3, 8009288 <atan+0x2e0>)
 80090e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ea:	f7f7 f873 	bl	80001d4 <__adddf3>
 80090ee:	4642      	mov	r2, r8
 80090f0:	464b      	mov	r3, r9
 80090f2:	f7f7 fa25 	bl	8000540 <__aeabi_dmul>
 80090f6:	a366      	add	r3, pc, #408	; (adr r3, 8009290 <atan+0x2e8>)
 80090f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fc:	4680      	mov	r8, r0
 80090fe:	4689      	mov	r9, r1
 8009100:	4630      	mov	r0, r6
 8009102:	4639      	mov	r1, r7
 8009104:	f7f7 fa1c 	bl	8000540 <__aeabi_dmul>
 8009108:	a363      	add	r3, pc, #396	; (adr r3, 8009298 <atan+0x2f0>)
 800910a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910e:	f7f7 f85f 	bl	80001d0 <__aeabi_dsub>
 8009112:	4632      	mov	r2, r6
 8009114:	463b      	mov	r3, r7
 8009116:	f7f7 fa13 	bl	8000540 <__aeabi_dmul>
 800911a:	a361      	add	r3, pc, #388	; (adr r3, 80092a0 <atan+0x2f8>)
 800911c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009120:	f7f7 f856 	bl	80001d0 <__aeabi_dsub>
 8009124:	4632      	mov	r2, r6
 8009126:	463b      	mov	r3, r7
 8009128:	f7f7 fa0a 	bl	8000540 <__aeabi_dmul>
 800912c:	a35e      	add	r3, pc, #376	; (adr r3, 80092a8 <atan+0x300>)
 800912e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009132:	f7f7 f84d 	bl	80001d0 <__aeabi_dsub>
 8009136:	4632      	mov	r2, r6
 8009138:	463b      	mov	r3, r7
 800913a:	f7f7 fa01 	bl	8000540 <__aeabi_dmul>
 800913e:	a35c      	add	r3, pc, #368	; (adr r3, 80092b0 <atan+0x308>)
 8009140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009144:	f7f7 f844 	bl	80001d0 <__aeabi_dsub>
 8009148:	4632      	mov	r2, r6
 800914a:	463b      	mov	r3, r7
 800914c:	f7f7 f9f8 	bl	8000540 <__aeabi_dmul>
 8009150:	4602      	mov	r2, r0
 8009152:	460b      	mov	r3, r1
 8009154:	4640      	mov	r0, r8
 8009156:	4649      	mov	r1, r9
 8009158:	f7f7 f83c 	bl	80001d4 <__adddf3>
 800915c:	4622      	mov	r2, r4
 800915e:	462b      	mov	r3, r5
 8009160:	f7f7 f9ee 	bl	8000540 <__aeabi_dmul>
 8009164:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009168:	4602      	mov	r2, r0
 800916a:	460b      	mov	r3, r1
 800916c:	d14b      	bne.n	8009206 <atan+0x25e>
 800916e:	4620      	mov	r0, r4
 8009170:	4629      	mov	r1, r5
 8009172:	f7f7 f82d 	bl	80001d0 <__aeabi_dsub>
 8009176:	e72c      	b.n	8008fd2 <atan+0x2a>
 8009178:	ee10 0a10 	vmov	r0, s0
 800917c:	4b53      	ldr	r3, [pc, #332]	; (80092cc <atan+0x324>)
 800917e:	2200      	movs	r2, #0
 8009180:	4629      	mov	r1, r5
 8009182:	f7f7 f825 	bl	80001d0 <__aeabi_dsub>
 8009186:	4b51      	ldr	r3, [pc, #324]	; (80092cc <atan+0x324>)
 8009188:	4606      	mov	r6, r0
 800918a:	460f      	mov	r7, r1
 800918c:	2200      	movs	r2, #0
 800918e:	4620      	mov	r0, r4
 8009190:	4629      	mov	r1, r5
 8009192:	f7f7 f81f 	bl	80001d4 <__adddf3>
 8009196:	4602      	mov	r2, r0
 8009198:	460b      	mov	r3, r1
 800919a:	4630      	mov	r0, r6
 800919c:	4639      	mov	r1, r7
 800919e:	f7f7 faf9 	bl	8000794 <__aeabi_ddiv>
 80091a2:	f04f 0a01 	mov.w	sl, #1
 80091a6:	4604      	mov	r4, r0
 80091a8:	460d      	mov	r5, r1
 80091aa:	e764      	b.n	8009076 <atan+0xce>
 80091ac:	4b49      	ldr	r3, [pc, #292]	; (80092d4 <atan+0x32c>)
 80091ae:	429e      	cmp	r6, r3
 80091b0:	da1d      	bge.n	80091ee <atan+0x246>
 80091b2:	ee10 0a10 	vmov	r0, s0
 80091b6:	4b48      	ldr	r3, [pc, #288]	; (80092d8 <atan+0x330>)
 80091b8:	2200      	movs	r2, #0
 80091ba:	4629      	mov	r1, r5
 80091bc:	f7f7 f808 	bl	80001d0 <__aeabi_dsub>
 80091c0:	4b45      	ldr	r3, [pc, #276]	; (80092d8 <atan+0x330>)
 80091c2:	4606      	mov	r6, r0
 80091c4:	460f      	mov	r7, r1
 80091c6:	2200      	movs	r2, #0
 80091c8:	4620      	mov	r0, r4
 80091ca:	4629      	mov	r1, r5
 80091cc:	f7f7 f9b8 	bl	8000540 <__aeabi_dmul>
 80091d0:	4b3e      	ldr	r3, [pc, #248]	; (80092cc <atan+0x324>)
 80091d2:	2200      	movs	r2, #0
 80091d4:	f7f6 fffe 	bl	80001d4 <__adddf3>
 80091d8:	4602      	mov	r2, r0
 80091da:	460b      	mov	r3, r1
 80091dc:	4630      	mov	r0, r6
 80091de:	4639      	mov	r1, r7
 80091e0:	f7f7 fad8 	bl	8000794 <__aeabi_ddiv>
 80091e4:	f04f 0a02 	mov.w	sl, #2
 80091e8:	4604      	mov	r4, r0
 80091ea:	460d      	mov	r5, r1
 80091ec:	e743      	b.n	8009076 <atan+0xce>
 80091ee:	462b      	mov	r3, r5
 80091f0:	ee10 2a10 	vmov	r2, s0
 80091f4:	4939      	ldr	r1, [pc, #228]	; (80092dc <atan+0x334>)
 80091f6:	2000      	movs	r0, #0
 80091f8:	f7f7 facc 	bl	8000794 <__aeabi_ddiv>
 80091fc:	f04f 0a03 	mov.w	sl, #3
 8009200:	4604      	mov	r4, r0
 8009202:	460d      	mov	r5, r1
 8009204:	e737      	b.n	8009076 <atan+0xce>
 8009206:	4b36      	ldr	r3, [pc, #216]	; (80092e0 <atan+0x338>)
 8009208:	4e36      	ldr	r6, [pc, #216]	; (80092e4 <atan+0x33c>)
 800920a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800920e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009212:	e9da 2300 	ldrd	r2, r3, [sl]
 8009216:	f7f6 ffdb 	bl	80001d0 <__aeabi_dsub>
 800921a:	4622      	mov	r2, r4
 800921c:	462b      	mov	r3, r5
 800921e:	f7f6 ffd7 	bl	80001d0 <__aeabi_dsub>
 8009222:	4602      	mov	r2, r0
 8009224:	460b      	mov	r3, r1
 8009226:	e9d6 0100 	ldrd	r0, r1, [r6]
 800922a:	f7f6 ffd1 	bl	80001d0 <__aeabi_dsub>
 800922e:	f1bb 0f00 	cmp.w	fp, #0
 8009232:	4604      	mov	r4, r0
 8009234:	460d      	mov	r5, r1
 8009236:	f6bf aed6 	bge.w	8008fe6 <atan+0x3e>
 800923a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800923e:	461d      	mov	r5, r3
 8009240:	e6d1      	b.n	8008fe6 <atan+0x3e>
 8009242:	a51d      	add	r5, pc, #116	; (adr r5, 80092b8 <atan+0x310>)
 8009244:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009248:	e6cd      	b.n	8008fe6 <atan+0x3e>
 800924a:	bf00      	nop
 800924c:	f3af 8000 	nop.w
 8009250:	54442d18 	.word	0x54442d18
 8009254:	bff921fb 	.word	0xbff921fb
 8009258:	8800759c 	.word	0x8800759c
 800925c:	7e37e43c 	.word	0x7e37e43c
 8009260:	e322da11 	.word	0xe322da11
 8009264:	3f90ad3a 	.word	0x3f90ad3a
 8009268:	24760deb 	.word	0x24760deb
 800926c:	3fa97b4b 	.word	0x3fa97b4b
 8009270:	a0d03d51 	.word	0xa0d03d51
 8009274:	3fb10d66 	.word	0x3fb10d66
 8009278:	c54c206e 	.word	0xc54c206e
 800927c:	3fb745cd 	.word	0x3fb745cd
 8009280:	920083ff 	.word	0x920083ff
 8009284:	3fc24924 	.word	0x3fc24924
 8009288:	5555550d 	.word	0x5555550d
 800928c:	3fd55555 	.word	0x3fd55555
 8009290:	2c6a6c2f 	.word	0x2c6a6c2f
 8009294:	bfa2b444 	.word	0xbfa2b444
 8009298:	52defd9a 	.word	0x52defd9a
 800929c:	3fadde2d 	.word	0x3fadde2d
 80092a0:	af749a6d 	.word	0xaf749a6d
 80092a4:	3fb3b0f2 	.word	0x3fb3b0f2
 80092a8:	fe231671 	.word	0xfe231671
 80092ac:	3fbc71c6 	.word	0x3fbc71c6
 80092b0:	9998ebc4 	.word	0x9998ebc4
 80092b4:	3fc99999 	.word	0x3fc99999
 80092b8:	54442d18 	.word	0x54442d18
 80092bc:	3ff921fb 	.word	0x3ff921fb
 80092c0:	440fffff 	.word	0x440fffff
 80092c4:	7ff00000 	.word	0x7ff00000
 80092c8:	3fdbffff 	.word	0x3fdbffff
 80092cc:	3ff00000 	.word	0x3ff00000
 80092d0:	3ff2ffff 	.word	0x3ff2ffff
 80092d4:	40038000 	.word	0x40038000
 80092d8:	3ff80000 	.word	0x3ff80000
 80092dc:	bff00000 	.word	0xbff00000
 80092e0:	0800b318 	.word	0x0800b318
 80092e4:	0800b2f8 	.word	0x0800b2f8

080092e8 <cos>:
 80092e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092ea:	ec53 2b10 	vmov	r2, r3, d0
 80092ee:	4824      	ldr	r0, [pc, #144]	; (8009380 <cos+0x98>)
 80092f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80092f4:	4281      	cmp	r1, r0
 80092f6:	dc06      	bgt.n	8009306 <cos+0x1e>
 80092f8:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8009378 <cos+0x90>
 80092fc:	f001 f96c 	bl	800a5d8 <__kernel_cos>
 8009300:	ec51 0b10 	vmov	r0, r1, d0
 8009304:	e007      	b.n	8009316 <cos+0x2e>
 8009306:	481f      	ldr	r0, [pc, #124]	; (8009384 <cos+0x9c>)
 8009308:	4281      	cmp	r1, r0
 800930a:	dd09      	ble.n	8009320 <cos+0x38>
 800930c:	ee10 0a10 	vmov	r0, s0
 8009310:	4619      	mov	r1, r3
 8009312:	f7f6 ff5d 	bl	80001d0 <__aeabi_dsub>
 8009316:	ec41 0b10 	vmov	d0, r0, r1
 800931a:	b005      	add	sp, #20
 800931c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009320:	4668      	mov	r0, sp
 8009322:	f000 fe99 	bl	800a058 <__ieee754_rem_pio2>
 8009326:	f000 0003 	and.w	r0, r0, #3
 800932a:	2801      	cmp	r0, #1
 800932c:	d007      	beq.n	800933e <cos+0x56>
 800932e:	2802      	cmp	r0, #2
 8009330:	d012      	beq.n	8009358 <cos+0x70>
 8009332:	b9c0      	cbnz	r0, 8009366 <cos+0x7e>
 8009334:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009338:	ed9d 0b00 	vldr	d0, [sp]
 800933c:	e7de      	b.n	80092fc <cos+0x14>
 800933e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009342:	ed9d 0b00 	vldr	d0, [sp]
 8009346:	f001 fd4f 	bl	800ade8 <__kernel_sin>
 800934a:	ec53 2b10 	vmov	r2, r3, d0
 800934e:	ee10 0a10 	vmov	r0, s0
 8009352:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009356:	e7de      	b.n	8009316 <cos+0x2e>
 8009358:	ed9d 1b02 	vldr	d1, [sp, #8]
 800935c:	ed9d 0b00 	vldr	d0, [sp]
 8009360:	f001 f93a 	bl	800a5d8 <__kernel_cos>
 8009364:	e7f1      	b.n	800934a <cos+0x62>
 8009366:	ed9d 1b02 	vldr	d1, [sp, #8]
 800936a:	ed9d 0b00 	vldr	d0, [sp]
 800936e:	2001      	movs	r0, #1
 8009370:	f001 fd3a 	bl	800ade8 <__kernel_sin>
 8009374:	e7c4      	b.n	8009300 <cos+0x18>
 8009376:	bf00      	nop
	...
 8009380:	3fe921fb 	.word	0x3fe921fb
 8009384:	7fefffff 	.word	0x7fefffff

08009388 <fabs>:
 8009388:	ec51 0b10 	vmov	r0, r1, d0
 800938c:	ee10 2a10 	vmov	r2, s0
 8009390:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009394:	ec43 2b10 	vmov	d0, r2, r3
 8009398:	4770      	bx	lr
 800939a:	0000      	movs	r0, r0
 800939c:	0000      	movs	r0, r0
	...

080093a0 <sin>:
 80093a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093a2:	ec53 2b10 	vmov	r2, r3, d0
 80093a6:	4826      	ldr	r0, [pc, #152]	; (8009440 <sin+0xa0>)
 80093a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80093ac:	4281      	cmp	r1, r0
 80093ae:	dc07      	bgt.n	80093c0 <sin+0x20>
 80093b0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009438 <sin+0x98>
 80093b4:	2000      	movs	r0, #0
 80093b6:	f001 fd17 	bl	800ade8 <__kernel_sin>
 80093ba:	ec51 0b10 	vmov	r0, r1, d0
 80093be:	e007      	b.n	80093d0 <sin+0x30>
 80093c0:	4820      	ldr	r0, [pc, #128]	; (8009444 <sin+0xa4>)
 80093c2:	4281      	cmp	r1, r0
 80093c4:	dd09      	ble.n	80093da <sin+0x3a>
 80093c6:	ee10 0a10 	vmov	r0, s0
 80093ca:	4619      	mov	r1, r3
 80093cc:	f7f6 ff00 	bl	80001d0 <__aeabi_dsub>
 80093d0:	ec41 0b10 	vmov	d0, r0, r1
 80093d4:	b005      	add	sp, #20
 80093d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80093da:	4668      	mov	r0, sp
 80093dc:	f000 fe3c 	bl	800a058 <__ieee754_rem_pio2>
 80093e0:	f000 0003 	and.w	r0, r0, #3
 80093e4:	2801      	cmp	r0, #1
 80093e6:	d008      	beq.n	80093fa <sin+0x5a>
 80093e8:	2802      	cmp	r0, #2
 80093ea:	d00d      	beq.n	8009408 <sin+0x68>
 80093ec:	b9d0      	cbnz	r0, 8009424 <sin+0x84>
 80093ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80093f2:	ed9d 0b00 	vldr	d0, [sp]
 80093f6:	2001      	movs	r0, #1
 80093f8:	e7dd      	b.n	80093b6 <sin+0x16>
 80093fa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80093fe:	ed9d 0b00 	vldr	d0, [sp]
 8009402:	f001 f8e9 	bl	800a5d8 <__kernel_cos>
 8009406:	e7d8      	b.n	80093ba <sin+0x1a>
 8009408:	ed9d 1b02 	vldr	d1, [sp, #8]
 800940c:	ed9d 0b00 	vldr	d0, [sp]
 8009410:	2001      	movs	r0, #1
 8009412:	f001 fce9 	bl	800ade8 <__kernel_sin>
 8009416:	ec53 2b10 	vmov	r2, r3, d0
 800941a:	ee10 0a10 	vmov	r0, s0
 800941e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009422:	e7d5      	b.n	80093d0 <sin+0x30>
 8009424:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009428:	ed9d 0b00 	vldr	d0, [sp]
 800942c:	f001 f8d4 	bl	800a5d8 <__kernel_cos>
 8009430:	e7f1      	b.n	8009416 <sin+0x76>
 8009432:	bf00      	nop
 8009434:	f3af 8000 	nop.w
	...
 8009440:	3fe921fb 	.word	0x3fe921fb
 8009444:	7fefffff 	.word	0x7fefffff

08009448 <pow>:
 8009448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800944c:	ec59 8b10 	vmov	r8, r9, d0
 8009450:	ec57 6b11 	vmov	r6, r7, d1
 8009454:	f000 f8dc 	bl	8009610 <__ieee754_pow>
 8009458:	4b4e      	ldr	r3, [pc, #312]	; (8009594 <pow+0x14c>)
 800945a:	f993 3000 	ldrsb.w	r3, [r3]
 800945e:	3301      	adds	r3, #1
 8009460:	ec55 4b10 	vmov	r4, r5, d0
 8009464:	d015      	beq.n	8009492 <pow+0x4a>
 8009466:	4632      	mov	r2, r6
 8009468:	463b      	mov	r3, r7
 800946a:	4630      	mov	r0, r6
 800946c:	4639      	mov	r1, r7
 800946e:	f7f7 fb01 	bl	8000a74 <__aeabi_dcmpun>
 8009472:	b970      	cbnz	r0, 8009492 <pow+0x4a>
 8009474:	4642      	mov	r2, r8
 8009476:	464b      	mov	r3, r9
 8009478:	4640      	mov	r0, r8
 800947a:	4649      	mov	r1, r9
 800947c:	f7f7 fafa 	bl	8000a74 <__aeabi_dcmpun>
 8009480:	2200      	movs	r2, #0
 8009482:	2300      	movs	r3, #0
 8009484:	b148      	cbz	r0, 800949a <pow+0x52>
 8009486:	4630      	mov	r0, r6
 8009488:	4639      	mov	r1, r7
 800948a:	f7f7 fac1 	bl	8000a10 <__aeabi_dcmpeq>
 800948e:	2800      	cmp	r0, #0
 8009490:	d17d      	bne.n	800958e <pow+0x146>
 8009492:	ec45 4b10 	vmov	d0, r4, r5
 8009496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800949a:	4640      	mov	r0, r8
 800949c:	4649      	mov	r1, r9
 800949e:	f7f7 fab7 	bl	8000a10 <__aeabi_dcmpeq>
 80094a2:	b1e0      	cbz	r0, 80094de <pow+0x96>
 80094a4:	2200      	movs	r2, #0
 80094a6:	2300      	movs	r3, #0
 80094a8:	4630      	mov	r0, r6
 80094aa:	4639      	mov	r1, r7
 80094ac:	f7f7 fab0 	bl	8000a10 <__aeabi_dcmpeq>
 80094b0:	2800      	cmp	r0, #0
 80094b2:	d16c      	bne.n	800958e <pow+0x146>
 80094b4:	ec47 6b10 	vmov	d0, r6, r7
 80094b8:	f001 fd54 	bl	800af64 <finite>
 80094bc:	2800      	cmp	r0, #0
 80094be:	d0e8      	beq.n	8009492 <pow+0x4a>
 80094c0:	2200      	movs	r2, #0
 80094c2:	2300      	movs	r3, #0
 80094c4:	4630      	mov	r0, r6
 80094c6:	4639      	mov	r1, r7
 80094c8:	f7f7 faac 	bl	8000a24 <__aeabi_dcmplt>
 80094cc:	2800      	cmp	r0, #0
 80094ce:	d0e0      	beq.n	8009492 <pow+0x4a>
 80094d0:	f7ff fc60 	bl	8008d94 <__errno>
 80094d4:	2321      	movs	r3, #33	; 0x21
 80094d6:	6003      	str	r3, [r0, #0]
 80094d8:	2400      	movs	r4, #0
 80094da:	4d2f      	ldr	r5, [pc, #188]	; (8009598 <pow+0x150>)
 80094dc:	e7d9      	b.n	8009492 <pow+0x4a>
 80094de:	ec45 4b10 	vmov	d0, r4, r5
 80094e2:	f001 fd3f 	bl	800af64 <finite>
 80094e6:	bbb8      	cbnz	r0, 8009558 <pow+0x110>
 80094e8:	ec49 8b10 	vmov	d0, r8, r9
 80094ec:	f001 fd3a 	bl	800af64 <finite>
 80094f0:	b390      	cbz	r0, 8009558 <pow+0x110>
 80094f2:	ec47 6b10 	vmov	d0, r6, r7
 80094f6:	f001 fd35 	bl	800af64 <finite>
 80094fa:	b368      	cbz	r0, 8009558 <pow+0x110>
 80094fc:	4622      	mov	r2, r4
 80094fe:	462b      	mov	r3, r5
 8009500:	4620      	mov	r0, r4
 8009502:	4629      	mov	r1, r5
 8009504:	f7f7 fab6 	bl	8000a74 <__aeabi_dcmpun>
 8009508:	b160      	cbz	r0, 8009524 <pow+0xdc>
 800950a:	f7ff fc43 	bl	8008d94 <__errno>
 800950e:	2321      	movs	r3, #33	; 0x21
 8009510:	6003      	str	r3, [r0, #0]
 8009512:	2200      	movs	r2, #0
 8009514:	2300      	movs	r3, #0
 8009516:	4610      	mov	r0, r2
 8009518:	4619      	mov	r1, r3
 800951a:	f7f7 f93b 	bl	8000794 <__aeabi_ddiv>
 800951e:	4604      	mov	r4, r0
 8009520:	460d      	mov	r5, r1
 8009522:	e7b6      	b.n	8009492 <pow+0x4a>
 8009524:	f7ff fc36 	bl	8008d94 <__errno>
 8009528:	2322      	movs	r3, #34	; 0x22
 800952a:	6003      	str	r3, [r0, #0]
 800952c:	2200      	movs	r2, #0
 800952e:	2300      	movs	r3, #0
 8009530:	4640      	mov	r0, r8
 8009532:	4649      	mov	r1, r9
 8009534:	f7f7 fa76 	bl	8000a24 <__aeabi_dcmplt>
 8009538:	2400      	movs	r4, #0
 800953a:	b158      	cbz	r0, 8009554 <pow+0x10c>
 800953c:	ec47 6b10 	vmov	d0, r6, r7
 8009540:	f001 fda6 	bl	800b090 <rint>
 8009544:	4632      	mov	r2, r6
 8009546:	ec51 0b10 	vmov	r0, r1, d0
 800954a:	463b      	mov	r3, r7
 800954c:	f7f7 fa60 	bl	8000a10 <__aeabi_dcmpeq>
 8009550:	2800      	cmp	r0, #0
 8009552:	d0c2      	beq.n	80094da <pow+0x92>
 8009554:	4d11      	ldr	r5, [pc, #68]	; (800959c <pow+0x154>)
 8009556:	e79c      	b.n	8009492 <pow+0x4a>
 8009558:	2200      	movs	r2, #0
 800955a:	2300      	movs	r3, #0
 800955c:	4620      	mov	r0, r4
 800955e:	4629      	mov	r1, r5
 8009560:	f7f7 fa56 	bl	8000a10 <__aeabi_dcmpeq>
 8009564:	2800      	cmp	r0, #0
 8009566:	d094      	beq.n	8009492 <pow+0x4a>
 8009568:	ec49 8b10 	vmov	d0, r8, r9
 800956c:	f001 fcfa 	bl	800af64 <finite>
 8009570:	2800      	cmp	r0, #0
 8009572:	d08e      	beq.n	8009492 <pow+0x4a>
 8009574:	ec47 6b10 	vmov	d0, r6, r7
 8009578:	f001 fcf4 	bl	800af64 <finite>
 800957c:	2800      	cmp	r0, #0
 800957e:	d088      	beq.n	8009492 <pow+0x4a>
 8009580:	f7ff fc08 	bl	8008d94 <__errno>
 8009584:	2322      	movs	r3, #34	; 0x22
 8009586:	6003      	str	r3, [r0, #0]
 8009588:	2400      	movs	r4, #0
 800958a:	2500      	movs	r5, #0
 800958c:	e781      	b.n	8009492 <pow+0x4a>
 800958e:	4d04      	ldr	r5, [pc, #16]	; (80095a0 <pow+0x158>)
 8009590:	2400      	movs	r4, #0
 8009592:	e77e      	b.n	8009492 <pow+0x4a>
 8009594:	20000090 	.word	0x20000090
 8009598:	fff00000 	.word	0xfff00000
 800959c:	7ff00000 	.word	0x7ff00000
 80095a0:	3ff00000 	.word	0x3ff00000

080095a4 <sqrt>:
 80095a4:	b538      	push	{r3, r4, r5, lr}
 80095a6:	ed2d 8b02 	vpush	{d8}
 80095aa:	ec55 4b10 	vmov	r4, r5, d0
 80095ae:	f000 ff5d 	bl	800a46c <__ieee754_sqrt>
 80095b2:	4b15      	ldr	r3, [pc, #84]	; (8009608 <sqrt+0x64>)
 80095b4:	eeb0 8a40 	vmov.f32	s16, s0
 80095b8:	eef0 8a60 	vmov.f32	s17, s1
 80095bc:	f993 3000 	ldrsb.w	r3, [r3]
 80095c0:	3301      	adds	r3, #1
 80095c2:	d019      	beq.n	80095f8 <sqrt+0x54>
 80095c4:	4622      	mov	r2, r4
 80095c6:	462b      	mov	r3, r5
 80095c8:	4620      	mov	r0, r4
 80095ca:	4629      	mov	r1, r5
 80095cc:	f7f7 fa52 	bl	8000a74 <__aeabi_dcmpun>
 80095d0:	b990      	cbnz	r0, 80095f8 <sqrt+0x54>
 80095d2:	2200      	movs	r2, #0
 80095d4:	2300      	movs	r3, #0
 80095d6:	4620      	mov	r0, r4
 80095d8:	4629      	mov	r1, r5
 80095da:	f7f7 fa23 	bl	8000a24 <__aeabi_dcmplt>
 80095de:	b158      	cbz	r0, 80095f8 <sqrt+0x54>
 80095e0:	f7ff fbd8 	bl	8008d94 <__errno>
 80095e4:	2321      	movs	r3, #33	; 0x21
 80095e6:	6003      	str	r3, [r0, #0]
 80095e8:	2200      	movs	r2, #0
 80095ea:	2300      	movs	r3, #0
 80095ec:	4610      	mov	r0, r2
 80095ee:	4619      	mov	r1, r3
 80095f0:	f7f7 f8d0 	bl	8000794 <__aeabi_ddiv>
 80095f4:	ec41 0b18 	vmov	d8, r0, r1
 80095f8:	eeb0 0a48 	vmov.f32	s0, s16
 80095fc:	eef0 0a68 	vmov.f32	s1, s17
 8009600:	ecbd 8b02 	vpop	{d8}
 8009604:	bd38      	pop	{r3, r4, r5, pc}
 8009606:	bf00      	nop
 8009608:	20000090 	.word	0x20000090
 800960c:	00000000 	.word	0x00000000

08009610 <__ieee754_pow>:
 8009610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009614:	ed2d 8b06 	vpush	{d8-d10}
 8009618:	b08d      	sub	sp, #52	; 0x34
 800961a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800961e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8009622:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8009626:	ea56 0100 	orrs.w	r1, r6, r0
 800962a:	ec53 2b10 	vmov	r2, r3, d0
 800962e:	f000 84d1 	beq.w	8009fd4 <__ieee754_pow+0x9c4>
 8009632:	497f      	ldr	r1, [pc, #508]	; (8009830 <__ieee754_pow+0x220>)
 8009634:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8009638:	428c      	cmp	r4, r1
 800963a:	ee10 8a10 	vmov	r8, s0
 800963e:	4699      	mov	r9, r3
 8009640:	dc09      	bgt.n	8009656 <__ieee754_pow+0x46>
 8009642:	d103      	bne.n	800964c <__ieee754_pow+0x3c>
 8009644:	b97a      	cbnz	r2, 8009666 <__ieee754_pow+0x56>
 8009646:	42a6      	cmp	r6, r4
 8009648:	dd02      	ble.n	8009650 <__ieee754_pow+0x40>
 800964a:	e00c      	b.n	8009666 <__ieee754_pow+0x56>
 800964c:	428e      	cmp	r6, r1
 800964e:	dc02      	bgt.n	8009656 <__ieee754_pow+0x46>
 8009650:	428e      	cmp	r6, r1
 8009652:	d110      	bne.n	8009676 <__ieee754_pow+0x66>
 8009654:	b178      	cbz	r0, 8009676 <__ieee754_pow+0x66>
 8009656:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800965a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800965e:	ea54 0308 	orrs.w	r3, r4, r8
 8009662:	f000 84b7 	beq.w	8009fd4 <__ieee754_pow+0x9c4>
 8009666:	4873      	ldr	r0, [pc, #460]	; (8009834 <__ieee754_pow+0x224>)
 8009668:	b00d      	add	sp, #52	; 0x34
 800966a:	ecbd 8b06 	vpop	{d8-d10}
 800966e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009672:	f001 bd05 	b.w	800b080 <nan>
 8009676:	f1b9 0f00 	cmp.w	r9, #0
 800967a:	da36      	bge.n	80096ea <__ieee754_pow+0xda>
 800967c:	496e      	ldr	r1, [pc, #440]	; (8009838 <__ieee754_pow+0x228>)
 800967e:	428e      	cmp	r6, r1
 8009680:	dc51      	bgt.n	8009726 <__ieee754_pow+0x116>
 8009682:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8009686:	428e      	cmp	r6, r1
 8009688:	f340 84af 	ble.w	8009fea <__ieee754_pow+0x9da>
 800968c:	1531      	asrs	r1, r6, #20
 800968e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009692:	2914      	cmp	r1, #20
 8009694:	dd0f      	ble.n	80096b6 <__ieee754_pow+0xa6>
 8009696:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800969a:	fa20 fc01 	lsr.w	ip, r0, r1
 800969e:	fa0c f101 	lsl.w	r1, ip, r1
 80096a2:	4281      	cmp	r1, r0
 80096a4:	f040 84a1 	bne.w	8009fea <__ieee754_pow+0x9da>
 80096a8:	f00c 0c01 	and.w	ip, ip, #1
 80096ac:	f1cc 0102 	rsb	r1, ip, #2
 80096b0:	9100      	str	r1, [sp, #0]
 80096b2:	b180      	cbz	r0, 80096d6 <__ieee754_pow+0xc6>
 80096b4:	e059      	b.n	800976a <__ieee754_pow+0x15a>
 80096b6:	2800      	cmp	r0, #0
 80096b8:	d155      	bne.n	8009766 <__ieee754_pow+0x156>
 80096ba:	f1c1 0114 	rsb	r1, r1, #20
 80096be:	fa46 fc01 	asr.w	ip, r6, r1
 80096c2:	fa0c f101 	lsl.w	r1, ip, r1
 80096c6:	42b1      	cmp	r1, r6
 80096c8:	f040 848c 	bne.w	8009fe4 <__ieee754_pow+0x9d4>
 80096cc:	f00c 0c01 	and.w	ip, ip, #1
 80096d0:	f1cc 0102 	rsb	r1, ip, #2
 80096d4:	9100      	str	r1, [sp, #0]
 80096d6:	4959      	ldr	r1, [pc, #356]	; (800983c <__ieee754_pow+0x22c>)
 80096d8:	428e      	cmp	r6, r1
 80096da:	d12d      	bne.n	8009738 <__ieee754_pow+0x128>
 80096dc:	2f00      	cmp	r7, #0
 80096de:	da79      	bge.n	80097d4 <__ieee754_pow+0x1c4>
 80096e0:	4956      	ldr	r1, [pc, #344]	; (800983c <__ieee754_pow+0x22c>)
 80096e2:	2000      	movs	r0, #0
 80096e4:	f7f7 f856 	bl	8000794 <__aeabi_ddiv>
 80096e8:	e016      	b.n	8009718 <__ieee754_pow+0x108>
 80096ea:	2100      	movs	r1, #0
 80096ec:	9100      	str	r1, [sp, #0]
 80096ee:	2800      	cmp	r0, #0
 80096f0:	d13b      	bne.n	800976a <__ieee754_pow+0x15a>
 80096f2:	494f      	ldr	r1, [pc, #316]	; (8009830 <__ieee754_pow+0x220>)
 80096f4:	428e      	cmp	r6, r1
 80096f6:	d1ee      	bne.n	80096d6 <__ieee754_pow+0xc6>
 80096f8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80096fc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009700:	ea53 0308 	orrs.w	r3, r3, r8
 8009704:	f000 8466 	beq.w	8009fd4 <__ieee754_pow+0x9c4>
 8009708:	4b4d      	ldr	r3, [pc, #308]	; (8009840 <__ieee754_pow+0x230>)
 800970a:	429c      	cmp	r4, r3
 800970c:	dd0d      	ble.n	800972a <__ieee754_pow+0x11a>
 800970e:	2f00      	cmp	r7, #0
 8009710:	f280 8464 	bge.w	8009fdc <__ieee754_pow+0x9cc>
 8009714:	2000      	movs	r0, #0
 8009716:	2100      	movs	r1, #0
 8009718:	ec41 0b10 	vmov	d0, r0, r1
 800971c:	b00d      	add	sp, #52	; 0x34
 800971e:	ecbd 8b06 	vpop	{d8-d10}
 8009722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009726:	2102      	movs	r1, #2
 8009728:	e7e0      	b.n	80096ec <__ieee754_pow+0xdc>
 800972a:	2f00      	cmp	r7, #0
 800972c:	daf2      	bge.n	8009714 <__ieee754_pow+0x104>
 800972e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8009732:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009736:	e7ef      	b.n	8009718 <__ieee754_pow+0x108>
 8009738:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800973c:	d104      	bne.n	8009748 <__ieee754_pow+0x138>
 800973e:	4610      	mov	r0, r2
 8009740:	4619      	mov	r1, r3
 8009742:	f7f6 fefd 	bl	8000540 <__aeabi_dmul>
 8009746:	e7e7      	b.n	8009718 <__ieee754_pow+0x108>
 8009748:	493e      	ldr	r1, [pc, #248]	; (8009844 <__ieee754_pow+0x234>)
 800974a:	428f      	cmp	r7, r1
 800974c:	d10d      	bne.n	800976a <__ieee754_pow+0x15a>
 800974e:	f1b9 0f00 	cmp.w	r9, #0
 8009752:	db0a      	blt.n	800976a <__ieee754_pow+0x15a>
 8009754:	ec43 2b10 	vmov	d0, r2, r3
 8009758:	b00d      	add	sp, #52	; 0x34
 800975a:	ecbd 8b06 	vpop	{d8-d10}
 800975e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009762:	f000 be83 	b.w	800a46c <__ieee754_sqrt>
 8009766:	2100      	movs	r1, #0
 8009768:	9100      	str	r1, [sp, #0]
 800976a:	ec43 2b10 	vmov	d0, r2, r3
 800976e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009772:	f7ff fe09 	bl	8009388 <fabs>
 8009776:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800977a:	ec51 0b10 	vmov	r0, r1, d0
 800977e:	f1b8 0f00 	cmp.w	r8, #0
 8009782:	d12a      	bne.n	80097da <__ieee754_pow+0x1ca>
 8009784:	b12c      	cbz	r4, 8009792 <__ieee754_pow+0x182>
 8009786:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800983c <__ieee754_pow+0x22c>
 800978a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800978e:	45e6      	cmp	lr, ip
 8009790:	d123      	bne.n	80097da <__ieee754_pow+0x1ca>
 8009792:	2f00      	cmp	r7, #0
 8009794:	da05      	bge.n	80097a2 <__ieee754_pow+0x192>
 8009796:	4602      	mov	r2, r0
 8009798:	460b      	mov	r3, r1
 800979a:	2000      	movs	r0, #0
 800979c:	4927      	ldr	r1, [pc, #156]	; (800983c <__ieee754_pow+0x22c>)
 800979e:	f7f6 fff9 	bl	8000794 <__aeabi_ddiv>
 80097a2:	f1b9 0f00 	cmp.w	r9, #0
 80097a6:	dab7      	bge.n	8009718 <__ieee754_pow+0x108>
 80097a8:	9b00      	ldr	r3, [sp, #0]
 80097aa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80097ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80097b2:	4323      	orrs	r3, r4
 80097b4:	d108      	bne.n	80097c8 <__ieee754_pow+0x1b8>
 80097b6:	4602      	mov	r2, r0
 80097b8:	460b      	mov	r3, r1
 80097ba:	4610      	mov	r0, r2
 80097bc:	4619      	mov	r1, r3
 80097be:	f7f6 fd07 	bl	80001d0 <__aeabi_dsub>
 80097c2:	4602      	mov	r2, r0
 80097c4:	460b      	mov	r3, r1
 80097c6:	e78d      	b.n	80096e4 <__ieee754_pow+0xd4>
 80097c8:	9b00      	ldr	r3, [sp, #0]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d1a4      	bne.n	8009718 <__ieee754_pow+0x108>
 80097ce:	4602      	mov	r2, r0
 80097d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097d4:	4610      	mov	r0, r2
 80097d6:	4619      	mov	r1, r3
 80097d8:	e79e      	b.n	8009718 <__ieee754_pow+0x108>
 80097da:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80097de:	f10c 35ff 	add.w	r5, ip, #4294967295
 80097e2:	950a      	str	r5, [sp, #40]	; 0x28
 80097e4:	9d00      	ldr	r5, [sp, #0]
 80097e6:	46ac      	mov	ip, r5
 80097e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80097ea:	ea5c 0505 	orrs.w	r5, ip, r5
 80097ee:	d0e4      	beq.n	80097ba <__ieee754_pow+0x1aa>
 80097f0:	4b15      	ldr	r3, [pc, #84]	; (8009848 <__ieee754_pow+0x238>)
 80097f2:	429e      	cmp	r6, r3
 80097f4:	f340 80fc 	ble.w	80099f0 <__ieee754_pow+0x3e0>
 80097f8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80097fc:	429e      	cmp	r6, r3
 80097fe:	4b10      	ldr	r3, [pc, #64]	; (8009840 <__ieee754_pow+0x230>)
 8009800:	dd07      	ble.n	8009812 <__ieee754_pow+0x202>
 8009802:	429c      	cmp	r4, r3
 8009804:	dc0a      	bgt.n	800981c <__ieee754_pow+0x20c>
 8009806:	2f00      	cmp	r7, #0
 8009808:	da84      	bge.n	8009714 <__ieee754_pow+0x104>
 800980a:	a307      	add	r3, pc, #28	; (adr r3, 8009828 <__ieee754_pow+0x218>)
 800980c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009810:	e795      	b.n	800973e <__ieee754_pow+0x12e>
 8009812:	429c      	cmp	r4, r3
 8009814:	dbf7      	blt.n	8009806 <__ieee754_pow+0x1f6>
 8009816:	4b09      	ldr	r3, [pc, #36]	; (800983c <__ieee754_pow+0x22c>)
 8009818:	429c      	cmp	r4, r3
 800981a:	dd17      	ble.n	800984c <__ieee754_pow+0x23c>
 800981c:	2f00      	cmp	r7, #0
 800981e:	dcf4      	bgt.n	800980a <__ieee754_pow+0x1fa>
 8009820:	e778      	b.n	8009714 <__ieee754_pow+0x104>
 8009822:	bf00      	nop
 8009824:	f3af 8000 	nop.w
 8009828:	8800759c 	.word	0x8800759c
 800982c:	7e37e43c 	.word	0x7e37e43c
 8009830:	7ff00000 	.word	0x7ff00000
 8009834:	0800b338 	.word	0x0800b338
 8009838:	433fffff 	.word	0x433fffff
 800983c:	3ff00000 	.word	0x3ff00000
 8009840:	3fefffff 	.word	0x3fefffff
 8009844:	3fe00000 	.word	0x3fe00000
 8009848:	41e00000 	.word	0x41e00000
 800984c:	4b64      	ldr	r3, [pc, #400]	; (80099e0 <__ieee754_pow+0x3d0>)
 800984e:	2200      	movs	r2, #0
 8009850:	f7f6 fcbe 	bl	80001d0 <__aeabi_dsub>
 8009854:	a356      	add	r3, pc, #344	; (adr r3, 80099b0 <__ieee754_pow+0x3a0>)
 8009856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985a:	4604      	mov	r4, r0
 800985c:	460d      	mov	r5, r1
 800985e:	f7f6 fe6f 	bl	8000540 <__aeabi_dmul>
 8009862:	a355      	add	r3, pc, #340	; (adr r3, 80099b8 <__ieee754_pow+0x3a8>)
 8009864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009868:	4606      	mov	r6, r0
 800986a:	460f      	mov	r7, r1
 800986c:	4620      	mov	r0, r4
 800986e:	4629      	mov	r1, r5
 8009870:	f7f6 fe66 	bl	8000540 <__aeabi_dmul>
 8009874:	4b5b      	ldr	r3, [pc, #364]	; (80099e4 <__ieee754_pow+0x3d4>)
 8009876:	4682      	mov	sl, r0
 8009878:	468b      	mov	fp, r1
 800987a:	2200      	movs	r2, #0
 800987c:	4620      	mov	r0, r4
 800987e:	4629      	mov	r1, r5
 8009880:	f7f6 fe5e 	bl	8000540 <__aeabi_dmul>
 8009884:	4602      	mov	r2, r0
 8009886:	460b      	mov	r3, r1
 8009888:	a14d      	add	r1, pc, #308	; (adr r1, 80099c0 <__ieee754_pow+0x3b0>)
 800988a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800988e:	f7f6 fc9f 	bl	80001d0 <__aeabi_dsub>
 8009892:	4622      	mov	r2, r4
 8009894:	462b      	mov	r3, r5
 8009896:	f7f6 fe53 	bl	8000540 <__aeabi_dmul>
 800989a:	4602      	mov	r2, r0
 800989c:	460b      	mov	r3, r1
 800989e:	2000      	movs	r0, #0
 80098a0:	4951      	ldr	r1, [pc, #324]	; (80099e8 <__ieee754_pow+0x3d8>)
 80098a2:	f7f6 fc95 	bl	80001d0 <__aeabi_dsub>
 80098a6:	4622      	mov	r2, r4
 80098a8:	4680      	mov	r8, r0
 80098aa:	4689      	mov	r9, r1
 80098ac:	462b      	mov	r3, r5
 80098ae:	4620      	mov	r0, r4
 80098b0:	4629      	mov	r1, r5
 80098b2:	f7f6 fe45 	bl	8000540 <__aeabi_dmul>
 80098b6:	4602      	mov	r2, r0
 80098b8:	460b      	mov	r3, r1
 80098ba:	4640      	mov	r0, r8
 80098bc:	4649      	mov	r1, r9
 80098be:	f7f6 fe3f 	bl	8000540 <__aeabi_dmul>
 80098c2:	a341      	add	r3, pc, #260	; (adr r3, 80099c8 <__ieee754_pow+0x3b8>)
 80098c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c8:	f7f6 fe3a 	bl	8000540 <__aeabi_dmul>
 80098cc:	4602      	mov	r2, r0
 80098ce:	460b      	mov	r3, r1
 80098d0:	4650      	mov	r0, sl
 80098d2:	4659      	mov	r1, fp
 80098d4:	f7f6 fc7c 	bl	80001d0 <__aeabi_dsub>
 80098d8:	4602      	mov	r2, r0
 80098da:	460b      	mov	r3, r1
 80098dc:	4680      	mov	r8, r0
 80098de:	4689      	mov	r9, r1
 80098e0:	4630      	mov	r0, r6
 80098e2:	4639      	mov	r1, r7
 80098e4:	f7f6 fc76 	bl	80001d4 <__adddf3>
 80098e8:	2400      	movs	r4, #0
 80098ea:	4632      	mov	r2, r6
 80098ec:	463b      	mov	r3, r7
 80098ee:	4620      	mov	r0, r4
 80098f0:	460d      	mov	r5, r1
 80098f2:	f7f6 fc6d 	bl	80001d0 <__aeabi_dsub>
 80098f6:	4602      	mov	r2, r0
 80098f8:	460b      	mov	r3, r1
 80098fa:	4640      	mov	r0, r8
 80098fc:	4649      	mov	r1, r9
 80098fe:	f7f6 fc67 	bl	80001d0 <__aeabi_dsub>
 8009902:	9b00      	ldr	r3, [sp, #0]
 8009904:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009906:	3b01      	subs	r3, #1
 8009908:	4313      	orrs	r3, r2
 800990a:	4682      	mov	sl, r0
 800990c:	468b      	mov	fp, r1
 800990e:	f040 81f1 	bne.w	8009cf4 <__ieee754_pow+0x6e4>
 8009912:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80099d0 <__ieee754_pow+0x3c0>
 8009916:	eeb0 8a47 	vmov.f32	s16, s14
 800991a:	eef0 8a67 	vmov.f32	s17, s15
 800991e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009922:	2600      	movs	r6, #0
 8009924:	4632      	mov	r2, r6
 8009926:	463b      	mov	r3, r7
 8009928:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800992c:	f7f6 fc50 	bl	80001d0 <__aeabi_dsub>
 8009930:	4622      	mov	r2, r4
 8009932:	462b      	mov	r3, r5
 8009934:	f7f6 fe04 	bl	8000540 <__aeabi_dmul>
 8009938:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800993c:	4680      	mov	r8, r0
 800993e:	4689      	mov	r9, r1
 8009940:	4650      	mov	r0, sl
 8009942:	4659      	mov	r1, fp
 8009944:	f7f6 fdfc 	bl	8000540 <__aeabi_dmul>
 8009948:	4602      	mov	r2, r0
 800994a:	460b      	mov	r3, r1
 800994c:	4640      	mov	r0, r8
 800994e:	4649      	mov	r1, r9
 8009950:	f7f6 fc40 	bl	80001d4 <__adddf3>
 8009954:	4632      	mov	r2, r6
 8009956:	463b      	mov	r3, r7
 8009958:	4680      	mov	r8, r0
 800995a:	4689      	mov	r9, r1
 800995c:	4620      	mov	r0, r4
 800995e:	4629      	mov	r1, r5
 8009960:	f7f6 fdee 	bl	8000540 <__aeabi_dmul>
 8009964:	460b      	mov	r3, r1
 8009966:	4604      	mov	r4, r0
 8009968:	460d      	mov	r5, r1
 800996a:	4602      	mov	r2, r0
 800996c:	4649      	mov	r1, r9
 800996e:	4640      	mov	r0, r8
 8009970:	f7f6 fc30 	bl	80001d4 <__adddf3>
 8009974:	4b1d      	ldr	r3, [pc, #116]	; (80099ec <__ieee754_pow+0x3dc>)
 8009976:	4299      	cmp	r1, r3
 8009978:	ec45 4b19 	vmov	d9, r4, r5
 800997c:	4606      	mov	r6, r0
 800997e:	460f      	mov	r7, r1
 8009980:	468b      	mov	fp, r1
 8009982:	f340 82fe 	ble.w	8009f82 <__ieee754_pow+0x972>
 8009986:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800998a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800998e:	4303      	orrs	r3, r0
 8009990:	f000 81f0 	beq.w	8009d74 <__ieee754_pow+0x764>
 8009994:	a310      	add	r3, pc, #64	; (adr r3, 80099d8 <__ieee754_pow+0x3c8>)
 8009996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999a:	ec51 0b18 	vmov	r0, r1, d8
 800999e:	f7f6 fdcf 	bl	8000540 <__aeabi_dmul>
 80099a2:	a30d      	add	r3, pc, #52	; (adr r3, 80099d8 <__ieee754_pow+0x3c8>)
 80099a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a8:	e6cb      	b.n	8009742 <__ieee754_pow+0x132>
 80099aa:	bf00      	nop
 80099ac:	f3af 8000 	nop.w
 80099b0:	60000000 	.word	0x60000000
 80099b4:	3ff71547 	.word	0x3ff71547
 80099b8:	f85ddf44 	.word	0xf85ddf44
 80099bc:	3e54ae0b 	.word	0x3e54ae0b
 80099c0:	55555555 	.word	0x55555555
 80099c4:	3fd55555 	.word	0x3fd55555
 80099c8:	652b82fe 	.word	0x652b82fe
 80099cc:	3ff71547 	.word	0x3ff71547
 80099d0:	00000000 	.word	0x00000000
 80099d4:	bff00000 	.word	0xbff00000
 80099d8:	8800759c 	.word	0x8800759c
 80099dc:	7e37e43c 	.word	0x7e37e43c
 80099e0:	3ff00000 	.word	0x3ff00000
 80099e4:	3fd00000 	.word	0x3fd00000
 80099e8:	3fe00000 	.word	0x3fe00000
 80099ec:	408fffff 	.word	0x408fffff
 80099f0:	4bd7      	ldr	r3, [pc, #860]	; (8009d50 <__ieee754_pow+0x740>)
 80099f2:	ea03 0309 	and.w	r3, r3, r9
 80099f6:	2200      	movs	r2, #0
 80099f8:	b92b      	cbnz	r3, 8009a06 <__ieee754_pow+0x3f6>
 80099fa:	4bd6      	ldr	r3, [pc, #856]	; (8009d54 <__ieee754_pow+0x744>)
 80099fc:	f7f6 fda0 	bl	8000540 <__aeabi_dmul>
 8009a00:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009a04:	460c      	mov	r4, r1
 8009a06:	1523      	asrs	r3, r4, #20
 8009a08:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009a0c:	4413      	add	r3, r2
 8009a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8009a10:	4bd1      	ldr	r3, [pc, #836]	; (8009d58 <__ieee754_pow+0x748>)
 8009a12:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009a16:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009a1a:	429c      	cmp	r4, r3
 8009a1c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009a20:	dd08      	ble.n	8009a34 <__ieee754_pow+0x424>
 8009a22:	4bce      	ldr	r3, [pc, #824]	; (8009d5c <__ieee754_pow+0x74c>)
 8009a24:	429c      	cmp	r4, r3
 8009a26:	f340 8163 	ble.w	8009cf0 <__ieee754_pow+0x6e0>
 8009a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8009a30:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009a34:	2400      	movs	r4, #0
 8009a36:	00e3      	lsls	r3, r4, #3
 8009a38:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a3a:	4bc9      	ldr	r3, [pc, #804]	; (8009d60 <__ieee754_pow+0x750>)
 8009a3c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009a40:	ed93 7b00 	vldr	d7, [r3]
 8009a44:	4629      	mov	r1, r5
 8009a46:	ec53 2b17 	vmov	r2, r3, d7
 8009a4a:	eeb0 8a47 	vmov.f32	s16, s14
 8009a4e:	eef0 8a67 	vmov.f32	s17, s15
 8009a52:	4682      	mov	sl, r0
 8009a54:	f7f6 fbbc 	bl	80001d0 <__aeabi_dsub>
 8009a58:	4652      	mov	r2, sl
 8009a5a:	4606      	mov	r6, r0
 8009a5c:	460f      	mov	r7, r1
 8009a5e:	462b      	mov	r3, r5
 8009a60:	ec51 0b18 	vmov	r0, r1, d8
 8009a64:	f7f6 fbb6 	bl	80001d4 <__adddf3>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	49bd      	ldr	r1, [pc, #756]	; (8009d64 <__ieee754_pow+0x754>)
 8009a70:	f7f6 fe90 	bl	8000794 <__aeabi_ddiv>
 8009a74:	ec41 0b19 	vmov	d9, r0, r1
 8009a78:	4602      	mov	r2, r0
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	4630      	mov	r0, r6
 8009a7e:	4639      	mov	r1, r7
 8009a80:	f7f6 fd5e 	bl	8000540 <__aeabi_dmul>
 8009a84:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009a88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a8c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a90:	2300      	movs	r3, #0
 8009a92:	9304      	str	r3, [sp, #16]
 8009a94:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009a98:	46ab      	mov	fp, r5
 8009a9a:	106d      	asrs	r5, r5, #1
 8009a9c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009aa0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009aa4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	4640      	mov	r0, r8
 8009aac:	4649      	mov	r1, r9
 8009aae:	4614      	mov	r4, r2
 8009ab0:	461d      	mov	r5, r3
 8009ab2:	f7f6 fd45 	bl	8000540 <__aeabi_dmul>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	460b      	mov	r3, r1
 8009aba:	4630      	mov	r0, r6
 8009abc:	4639      	mov	r1, r7
 8009abe:	f7f6 fb87 	bl	80001d0 <__aeabi_dsub>
 8009ac2:	ec53 2b18 	vmov	r2, r3, d8
 8009ac6:	4606      	mov	r6, r0
 8009ac8:	460f      	mov	r7, r1
 8009aca:	4620      	mov	r0, r4
 8009acc:	4629      	mov	r1, r5
 8009ace:	f7f6 fb7f 	bl	80001d0 <__aeabi_dsub>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	4650      	mov	r0, sl
 8009ad8:	4659      	mov	r1, fp
 8009ada:	f7f6 fb79 	bl	80001d0 <__aeabi_dsub>
 8009ade:	4642      	mov	r2, r8
 8009ae0:	464b      	mov	r3, r9
 8009ae2:	f7f6 fd2d 	bl	8000540 <__aeabi_dmul>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	460b      	mov	r3, r1
 8009aea:	4630      	mov	r0, r6
 8009aec:	4639      	mov	r1, r7
 8009aee:	f7f6 fb6f 	bl	80001d0 <__aeabi_dsub>
 8009af2:	ec53 2b19 	vmov	r2, r3, d9
 8009af6:	f7f6 fd23 	bl	8000540 <__aeabi_dmul>
 8009afa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009afe:	ec41 0b18 	vmov	d8, r0, r1
 8009b02:	4610      	mov	r0, r2
 8009b04:	4619      	mov	r1, r3
 8009b06:	f7f6 fd1b 	bl	8000540 <__aeabi_dmul>
 8009b0a:	a37d      	add	r3, pc, #500	; (adr r3, 8009d00 <__ieee754_pow+0x6f0>)
 8009b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b10:	4604      	mov	r4, r0
 8009b12:	460d      	mov	r5, r1
 8009b14:	f7f6 fd14 	bl	8000540 <__aeabi_dmul>
 8009b18:	a37b      	add	r3, pc, #492	; (adr r3, 8009d08 <__ieee754_pow+0x6f8>)
 8009b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1e:	f7f6 fb59 	bl	80001d4 <__adddf3>
 8009b22:	4622      	mov	r2, r4
 8009b24:	462b      	mov	r3, r5
 8009b26:	f7f6 fd0b 	bl	8000540 <__aeabi_dmul>
 8009b2a:	a379      	add	r3, pc, #484	; (adr r3, 8009d10 <__ieee754_pow+0x700>)
 8009b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b30:	f7f6 fb50 	bl	80001d4 <__adddf3>
 8009b34:	4622      	mov	r2, r4
 8009b36:	462b      	mov	r3, r5
 8009b38:	f7f6 fd02 	bl	8000540 <__aeabi_dmul>
 8009b3c:	a376      	add	r3, pc, #472	; (adr r3, 8009d18 <__ieee754_pow+0x708>)
 8009b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b42:	f7f6 fb47 	bl	80001d4 <__adddf3>
 8009b46:	4622      	mov	r2, r4
 8009b48:	462b      	mov	r3, r5
 8009b4a:	f7f6 fcf9 	bl	8000540 <__aeabi_dmul>
 8009b4e:	a374      	add	r3, pc, #464	; (adr r3, 8009d20 <__ieee754_pow+0x710>)
 8009b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b54:	f7f6 fb3e 	bl	80001d4 <__adddf3>
 8009b58:	4622      	mov	r2, r4
 8009b5a:	462b      	mov	r3, r5
 8009b5c:	f7f6 fcf0 	bl	8000540 <__aeabi_dmul>
 8009b60:	a371      	add	r3, pc, #452	; (adr r3, 8009d28 <__ieee754_pow+0x718>)
 8009b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b66:	f7f6 fb35 	bl	80001d4 <__adddf3>
 8009b6a:	4622      	mov	r2, r4
 8009b6c:	4606      	mov	r6, r0
 8009b6e:	460f      	mov	r7, r1
 8009b70:	462b      	mov	r3, r5
 8009b72:	4620      	mov	r0, r4
 8009b74:	4629      	mov	r1, r5
 8009b76:	f7f6 fce3 	bl	8000540 <__aeabi_dmul>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	4630      	mov	r0, r6
 8009b80:	4639      	mov	r1, r7
 8009b82:	f7f6 fcdd 	bl	8000540 <__aeabi_dmul>
 8009b86:	4642      	mov	r2, r8
 8009b88:	4604      	mov	r4, r0
 8009b8a:	460d      	mov	r5, r1
 8009b8c:	464b      	mov	r3, r9
 8009b8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b92:	f7f6 fb1f 	bl	80001d4 <__adddf3>
 8009b96:	ec53 2b18 	vmov	r2, r3, d8
 8009b9a:	f7f6 fcd1 	bl	8000540 <__aeabi_dmul>
 8009b9e:	4622      	mov	r2, r4
 8009ba0:	462b      	mov	r3, r5
 8009ba2:	f7f6 fb17 	bl	80001d4 <__adddf3>
 8009ba6:	4642      	mov	r2, r8
 8009ba8:	4682      	mov	sl, r0
 8009baa:	468b      	mov	fp, r1
 8009bac:	464b      	mov	r3, r9
 8009bae:	4640      	mov	r0, r8
 8009bb0:	4649      	mov	r1, r9
 8009bb2:	f7f6 fcc5 	bl	8000540 <__aeabi_dmul>
 8009bb6:	4b6c      	ldr	r3, [pc, #432]	; (8009d68 <__ieee754_pow+0x758>)
 8009bb8:	2200      	movs	r2, #0
 8009bba:	4606      	mov	r6, r0
 8009bbc:	460f      	mov	r7, r1
 8009bbe:	f7f6 fb09 	bl	80001d4 <__adddf3>
 8009bc2:	4652      	mov	r2, sl
 8009bc4:	465b      	mov	r3, fp
 8009bc6:	f7f6 fb05 	bl	80001d4 <__adddf3>
 8009bca:	9c04      	ldr	r4, [sp, #16]
 8009bcc:	460d      	mov	r5, r1
 8009bce:	4622      	mov	r2, r4
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	4640      	mov	r0, r8
 8009bd4:	4649      	mov	r1, r9
 8009bd6:	f7f6 fcb3 	bl	8000540 <__aeabi_dmul>
 8009bda:	4b63      	ldr	r3, [pc, #396]	; (8009d68 <__ieee754_pow+0x758>)
 8009bdc:	4680      	mov	r8, r0
 8009bde:	4689      	mov	r9, r1
 8009be0:	2200      	movs	r2, #0
 8009be2:	4620      	mov	r0, r4
 8009be4:	4629      	mov	r1, r5
 8009be6:	f7f6 faf3 	bl	80001d0 <__aeabi_dsub>
 8009bea:	4632      	mov	r2, r6
 8009bec:	463b      	mov	r3, r7
 8009bee:	f7f6 faef 	bl	80001d0 <__aeabi_dsub>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	4650      	mov	r0, sl
 8009bf8:	4659      	mov	r1, fp
 8009bfa:	f7f6 fae9 	bl	80001d0 <__aeabi_dsub>
 8009bfe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c02:	f7f6 fc9d 	bl	8000540 <__aeabi_dmul>
 8009c06:	4622      	mov	r2, r4
 8009c08:	4606      	mov	r6, r0
 8009c0a:	460f      	mov	r7, r1
 8009c0c:	462b      	mov	r3, r5
 8009c0e:	ec51 0b18 	vmov	r0, r1, d8
 8009c12:	f7f6 fc95 	bl	8000540 <__aeabi_dmul>
 8009c16:	4602      	mov	r2, r0
 8009c18:	460b      	mov	r3, r1
 8009c1a:	4630      	mov	r0, r6
 8009c1c:	4639      	mov	r1, r7
 8009c1e:	f7f6 fad9 	bl	80001d4 <__adddf3>
 8009c22:	4606      	mov	r6, r0
 8009c24:	460f      	mov	r7, r1
 8009c26:	4602      	mov	r2, r0
 8009c28:	460b      	mov	r3, r1
 8009c2a:	4640      	mov	r0, r8
 8009c2c:	4649      	mov	r1, r9
 8009c2e:	f7f6 fad1 	bl	80001d4 <__adddf3>
 8009c32:	9c04      	ldr	r4, [sp, #16]
 8009c34:	a33e      	add	r3, pc, #248	; (adr r3, 8009d30 <__ieee754_pow+0x720>)
 8009c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3a:	4620      	mov	r0, r4
 8009c3c:	460d      	mov	r5, r1
 8009c3e:	f7f6 fc7f 	bl	8000540 <__aeabi_dmul>
 8009c42:	4642      	mov	r2, r8
 8009c44:	ec41 0b18 	vmov	d8, r0, r1
 8009c48:	464b      	mov	r3, r9
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	4629      	mov	r1, r5
 8009c4e:	f7f6 fabf 	bl	80001d0 <__aeabi_dsub>
 8009c52:	4602      	mov	r2, r0
 8009c54:	460b      	mov	r3, r1
 8009c56:	4630      	mov	r0, r6
 8009c58:	4639      	mov	r1, r7
 8009c5a:	f7f6 fab9 	bl	80001d0 <__aeabi_dsub>
 8009c5e:	a336      	add	r3, pc, #216	; (adr r3, 8009d38 <__ieee754_pow+0x728>)
 8009c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c64:	f7f6 fc6c 	bl	8000540 <__aeabi_dmul>
 8009c68:	a335      	add	r3, pc, #212	; (adr r3, 8009d40 <__ieee754_pow+0x730>)
 8009c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6e:	4606      	mov	r6, r0
 8009c70:	460f      	mov	r7, r1
 8009c72:	4620      	mov	r0, r4
 8009c74:	4629      	mov	r1, r5
 8009c76:	f7f6 fc63 	bl	8000540 <__aeabi_dmul>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	4630      	mov	r0, r6
 8009c80:	4639      	mov	r1, r7
 8009c82:	f7f6 faa7 	bl	80001d4 <__adddf3>
 8009c86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c88:	4b38      	ldr	r3, [pc, #224]	; (8009d6c <__ieee754_pow+0x75c>)
 8009c8a:	4413      	add	r3, r2
 8009c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c90:	f7f6 faa0 	bl	80001d4 <__adddf3>
 8009c94:	4682      	mov	sl, r0
 8009c96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c98:	468b      	mov	fp, r1
 8009c9a:	f7f6 fbe7 	bl	800046c <__aeabi_i2d>
 8009c9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ca0:	4b33      	ldr	r3, [pc, #204]	; (8009d70 <__ieee754_pow+0x760>)
 8009ca2:	4413      	add	r3, r2
 8009ca4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ca8:	4606      	mov	r6, r0
 8009caa:	460f      	mov	r7, r1
 8009cac:	4652      	mov	r2, sl
 8009cae:	465b      	mov	r3, fp
 8009cb0:	ec51 0b18 	vmov	r0, r1, d8
 8009cb4:	f7f6 fa8e 	bl	80001d4 <__adddf3>
 8009cb8:	4642      	mov	r2, r8
 8009cba:	464b      	mov	r3, r9
 8009cbc:	f7f6 fa8a 	bl	80001d4 <__adddf3>
 8009cc0:	4632      	mov	r2, r6
 8009cc2:	463b      	mov	r3, r7
 8009cc4:	f7f6 fa86 	bl	80001d4 <__adddf3>
 8009cc8:	9c04      	ldr	r4, [sp, #16]
 8009cca:	4632      	mov	r2, r6
 8009ccc:	463b      	mov	r3, r7
 8009cce:	4620      	mov	r0, r4
 8009cd0:	460d      	mov	r5, r1
 8009cd2:	f7f6 fa7d 	bl	80001d0 <__aeabi_dsub>
 8009cd6:	4642      	mov	r2, r8
 8009cd8:	464b      	mov	r3, r9
 8009cda:	f7f6 fa79 	bl	80001d0 <__aeabi_dsub>
 8009cde:	ec53 2b18 	vmov	r2, r3, d8
 8009ce2:	f7f6 fa75 	bl	80001d0 <__aeabi_dsub>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	460b      	mov	r3, r1
 8009cea:	4650      	mov	r0, sl
 8009cec:	4659      	mov	r1, fp
 8009cee:	e606      	b.n	80098fe <__ieee754_pow+0x2ee>
 8009cf0:	2401      	movs	r4, #1
 8009cf2:	e6a0      	b.n	8009a36 <__ieee754_pow+0x426>
 8009cf4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009d48 <__ieee754_pow+0x738>
 8009cf8:	e60d      	b.n	8009916 <__ieee754_pow+0x306>
 8009cfa:	bf00      	nop
 8009cfc:	f3af 8000 	nop.w
 8009d00:	4a454eef 	.word	0x4a454eef
 8009d04:	3fca7e28 	.word	0x3fca7e28
 8009d08:	93c9db65 	.word	0x93c9db65
 8009d0c:	3fcd864a 	.word	0x3fcd864a
 8009d10:	a91d4101 	.word	0xa91d4101
 8009d14:	3fd17460 	.word	0x3fd17460
 8009d18:	518f264d 	.word	0x518f264d
 8009d1c:	3fd55555 	.word	0x3fd55555
 8009d20:	db6fabff 	.word	0xdb6fabff
 8009d24:	3fdb6db6 	.word	0x3fdb6db6
 8009d28:	33333303 	.word	0x33333303
 8009d2c:	3fe33333 	.word	0x3fe33333
 8009d30:	e0000000 	.word	0xe0000000
 8009d34:	3feec709 	.word	0x3feec709
 8009d38:	dc3a03fd 	.word	0xdc3a03fd
 8009d3c:	3feec709 	.word	0x3feec709
 8009d40:	145b01f5 	.word	0x145b01f5
 8009d44:	be3e2fe0 	.word	0xbe3e2fe0
 8009d48:	00000000 	.word	0x00000000
 8009d4c:	3ff00000 	.word	0x3ff00000
 8009d50:	7ff00000 	.word	0x7ff00000
 8009d54:	43400000 	.word	0x43400000
 8009d58:	0003988e 	.word	0x0003988e
 8009d5c:	000bb679 	.word	0x000bb679
 8009d60:	0800b340 	.word	0x0800b340
 8009d64:	3ff00000 	.word	0x3ff00000
 8009d68:	40080000 	.word	0x40080000
 8009d6c:	0800b360 	.word	0x0800b360
 8009d70:	0800b350 	.word	0x0800b350
 8009d74:	a3b5      	add	r3, pc, #724	; (adr r3, 800a04c <__ieee754_pow+0xa3c>)
 8009d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7a:	4640      	mov	r0, r8
 8009d7c:	4649      	mov	r1, r9
 8009d7e:	f7f6 fa29 	bl	80001d4 <__adddf3>
 8009d82:	4622      	mov	r2, r4
 8009d84:	ec41 0b1a 	vmov	d10, r0, r1
 8009d88:	462b      	mov	r3, r5
 8009d8a:	4630      	mov	r0, r6
 8009d8c:	4639      	mov	r1, r7
 8009d8e:	f7f6 fa1f 	bl	80001d0 <__aeabi_dsub>
 8009d92:	4602      	mov	r2, r0
 8009d94:	460b      	mov	r3, r1
 8009d96:	ec51 0b1a 	vmov	r0, r1, d10
 8009d9a:	f7f6 fe61 	bl	8000a60 <__aeabi_dcmpgt>
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	f47f adf8 	bne.w	8009994 <__ieee754_pow+0x384>
 8009da4:	4aa4      	ldr	r2, [pc, #656]	; (800a038 <__ieee754_pow+0xa28>)
 8009da6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009daa:	4293      	cmp	r3, r2
 8009dac:	f340 810b 	ble.w	8009fc6 <__ieee754_pow+0x9b6>
 8009db0:	151b      	asrs	r3, r3, #20
 8009db2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009db6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009dba:	fa4a f303 	asr.w	r3, sl, r3
 8009dbe:	445b      	add	r3, fp
 8009dc0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009dc4:	4e9d      	ldr	r6, [pc, #628]	; (800a03c <__ieee754_pow+0xa2c>)
 8009dc6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009dca:	4116      	asrs	r6, r2
 8009dcc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009dd0:	2000      	movs	r0, #0
 8009dd2:	ea23 0106 	bic.w	r1, r3, r6
 8009dd6:	f1c2 0214 	rsb	r2, r2, #20
 8009dda:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009dde:	fa4a fa02 	asr.w	sl, sl, r2
 8009de2:	f1bb 0f00 	cmp.w	fp, #0
 8009de6:	4602      	mov	r2, r0
 8009de8:	460b      	mov	r3, r1
 8009dea:	4620      	mov	r0, r4
 8009dec:	4629      	mov	r1, r5
 8009dee:	bfb8      	it	lt
 8009df0:	f1ca 0a00 	rsblt	sl, sl, #0
 8009df4:	f7f6 f9ec 	bl	80001d0 <__aeabi_dsub>
 8009df8:	ec41 0b19 	vmov	d9, r0, r1
 8009dfc:	4642      	mov	r2, r8
 8009dfe:	464b      	mov	r3, r9
 8009e00:	ec51 0b19 	vmov	r0, r1, d9
 8009e04:	f7f6 f9e6 	bl	80001d4 <__adddf3>
 8009e08:	2400      	movs	r4, #0
 8009e0a:	a379      	add	r3, pc, #484	; (adr r3, 8009ff0 <__ieee754_pow+0x9e0>)
 8009e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e10:	4620      	mov	r0, r4
 8009e12:	460d      	mov	r5, r1
 8009e14:	f7f6 fb94 	bl	8000540 <__aeabi_dmul>
 8009e18:	ec53 2b19 	vmov	r2, r3, d9
 8009e1c:	4606      	mov	r6, r0
 8009e1e:	460f      	mov	r7, r1
 8009e20:	4620      	mov	r0, r4
 8009e22:	4629      	mov	r1, r5
 8009e24:	f7f6 f9d4 	bl	80001d0 <__aeabi_dsub>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	4640      	mov	r0, r8
 8009e2e:	4649      	mov	r1, r9
 8009e30:	f7f6 f9ce 	bl	80001d0 <__aeabi_dsub>
 8009e34:	a370      	add	r3, pc, #448	; (adr r3, 8009ff8 <__ieee754_pow+0x9e8>)
 8009e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3a:	f7f6 fb81 	bl	8000540 <__aeabi_dmul>
 8009e3e:	a370      	add	r3, pc, #448	; (adr r3, 800a000 <__ieee754_pow+0x9f0>)
 8009e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e44:	4680      	mov	r8, r0
 8009e46:	4689      	mov	r9, r1
 8009e48:	4620      	mov	r0, r4
 8009e4a:	4629      	mov	r1, r5
 8009e4c:	f7f6 fb78 	bl	8000540 <__aeabi_dmul>
 8009e50:	4602      	mov	r2, r0
 8009e52:	460b      	mov	r3, r1
 8009e54:	4640      	mov	r0, r8
 8009e56:	4649      	mov	r1, r9
 8009e58:	f7f6 f9bc 	bl	80001d4 <__adddf3>
 8009e5c:	4604      	mov	r4, r0
 8009e5e:	460d      	mov	r5, r1
 8009e60:	4602      	mov	r2, r0
 8009e62:	460b      	mov	r3, r1
 8009e64:	4630      	mov	r0, r6
 8009e66:	4639      	mov	r1, r7
 8009e68:	f7f6 f9b4 	bl	80001d4 <__adddf3>
 8009e6c:	4632      	mov	r2, r6
 8009e6e:	463b      	mov	r3, r7
 8009e70:	4680      	mov	r8, r0
 8009e72:	4689      	mov	r9, r1
 8009e74:	f7f6 f9ac 	bl	80001d0 <__aeabi_dsub>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	4629      	mov	r1, r5
 8009e80:	f7f6 f9a6 	bl	80001d0 <__aeabi_dsub>
 8009e84:	4642      	mov	r2, r8
 8009e86:	4606      	mov	r6, r0
 8009e88:	460f      	mov	r7, r1
 8009e8a:	464b      	mov	r3, r9
 8009e8c:	4640      	mov	r0, r8
 8009e8e:	4649      	mov	r1, r9
 8009e90:	f7f6 fb56 	bl	8000540 <__aeabi_dmul>
 8009e94:	a35c      	add	r3, pc, #368	; (adr r3, 800a008 <__ieee754_pow+0x9f8>)
 8009e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9a:	4604      	mov	r4, r0
 8009e9c:	460d      	mov	r5, r1
 8009e9e:	f7f6 fb4f 	bl	8000540 <__aeabi_dmul>
 8009ea2:	a35b      	add	r3, pc, #364	; (adr r3, 800a010 <__ieee754_pow+0xa00>)
 8009ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea8:	f7f6 f992 	bl	80001d0 <__aeabi_dsub>
 8009eac:	4622      	mov	r2, r4
 8009eae:	462b      	mov	r3, r5
 8009eb0:	f7f6 fb46 	bl	8000540 <__aeabi_dmul>
 8009eb4:	a358      	add	r3, pc, #352	; (adr r3, 800a018 <__ieee754_pow+0xa08>)
 8009eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eba:	f7f6 f98b 	bl	80001d4 <__adddf3>
 8009ebe:	4622      	mov	r2, r4
 8009ec0:	462b      	mov	r3, r5
 8009ec2:	f7f6 fb3d 	bl	8000540 <__aeabi_dmul>
 8009ec6:	a356      	add	r3, pc, #344	; (adr r3, 800a020 <__ieee754_pow+0xa10>)
 8009ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ecc:	f7f6 f980 	bl	80001d0 <__aeabi_dsub>
 8009ed0:	4622      	mov	r2, r4
 8009ed2:	462b      	mov	r3, r5
 8009ed4:	f7f6 fb34 	bl	8000540 <__aeabi_dmul>
 8009ed8:	a353      	add	r3, pc, #332	; (adr r3, 800a028 <__ieee754_pow+0xa18>)
 8009eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ede:	f7f6 f979 	bl	80001d4 <__adddf3>
 8009ee2:	4622      	mov	r2, r4
 8009ee4:	462b      	mov	r3, r5
 8009ee6:	f7f6 fb2b 	bl	8000540 <__aeabi_dmul>
 8009eea:	4602      	mov	r2, r0
 8009eec:	460b      	mov	r3, r1
 8009eee:	4640      	mov	r0, r8
 8009ef0:	4649      	mov	r1, r9
 8009ef2:	f7f6 f96d 	bl	80001d0 <__aeabi_dsub>
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	460d      	mov	r5, r1
 8009efa:	4602      	mov	r2, r0
 8009efc:	460b      	mov	r3, r1
 8009efe:	4640      	mov	r0, r8
 8009f00:	4649      	mov	r1, r9
 8009f02:	f7f6 fb1d 	bl	8000540 <__aeabi_dmul>
 8009f06:	2200      	movs	r2, #0
 8009f08:	ec41 0b19 	vmov	d9, r0, r1
 8009f0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009f10:	4620      	mov	r0, r4
 8009f12:	4629      	mov	r1, r5
 8009f14:	f7f6 f95c 	bl	80001d0 <__aeabi_dsub>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	ec51 0b19 	vmov	r0, r1, d9
 8009f20:	f7f6 fc38 	bl	8000794 <__aeabi_ddiv>
 8009f24:	4632      	mov	r2, r6
 8009f26:	4604      	mov	r4, r0
 8009f28:	460d      	mov	r5, r1
 8009f2a:	463b      	mov	r3, r7
 8009f2c:	4640      	mov	r0, r8
 8009f2e:	4649      	mov	r1, r9
 8009f30:	f7f6 fb06 	bl	8000540 <__aeabi_dmul>
 8009f34:	4632      	mov	r2, r6
 8009f36:	463b      	mov	r3, r7
 8009f38:	f7f6 f94c 	bl	80001d4 <__adddf3>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	460b      	mov	r3, r1
 8009f40:	4620      	mov	r0, r4
 8009f42:	4629      	mov	r1, r5
 8009f44:	f7f6 f944 	bl	80001d0 <__aeabi_dsub>
 8009f48:	4642      	mov	r2, r8
 8009f4a:	464b      	mov	r3, r9
 8009f4c:	f7f6 f940 	bl	80001d0 <__aeabi_dsub>
 8009f50:	460b      	mov	r3, r1
 8009f52:	4602      	mov	r2, r0
 8009f54:	493a      	ldr	r1, [pc, #232]	; (800a040 <__ieee754_pow+0xa30>)
 8009f56:	2000      	movs	r0, #0
 8009f58:	f7f6 f93a 	bl	80001d0 <__aeabi_dsub>
 8009f5c:	e9cd 0100 	strd	r0, r1, [sp]
 8009f60:	9b01      	ldr	r3, [sp, #4]
 8009f62:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009f66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f6a:	da2f      	bge.n	8009fcc <__ieee754_pow+0x9bc>
 8009f6c:	4650      	mov	r0, sl
 8009f6e:	ed9d 0b00 	vldr	d0, [sp]
 8009f72:	f001 f919 	bl	800b1a8 <scalbn>
 8009f76:	ec51 0b10 	vmov	r0, r1, d0
 8009f7a:	ec53 2b18 	vmov	r2, r3, d8
 8009f7e:	f7ff bbe0 	b.w	8009742 <__ieee754_pow+0x132>
 8009f82:	4b30      	ldr	r3, [pc, #192]	; (800a044 <__ieee754_pow+0xa34>)
 8009f84:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009f88:	429e      	cmp	r6, r3
 8009f8a:	f77f af0b 	ble.w	8009da4 <__ieee754_pow+0x794>
 8009f8e:	4b2e      	ldr	r3, [pc, #184]	; (800a048 <__ieee754_pow+0xa38>)
 8009f90:	440b      	add	r3, r1
 8009f92:	4303      	orrs	r3, r0
 8009f94:	d00b      	beq.n	8009fae <__ieee754_pow+0x99e>
 8009f96:	a326      	add	r3, pc, #152	; (adr r3, 800a030 <__ieee754_pow+0xa20>)
 8009f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9c:	ec51 0b18 	vmov	r0, r1, d8
 8009fa0:	f7f6 face 	bl	8000540 <__aeabi_dmul>
 8009fa4:	a322      	add	r3, pc, #136	; (adr r3, 800a030 <__ieee754_pow+0xa20>)
 8009fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009faa:	f7ff bbca 	b.w	8009742 <__ieee754_pow+0x132>
 8009fae:	4622      	mov	r2, r4
 8009fb0:	462b      	mov	r3, r5
 8009fb2:	f7f6 f90d 	bl	80001d0 <__aeabi_dsub>
 8009fb6:	4642      	mov	r2, r8
 8009fb8:	464b      	mov	r3, r9
 8009fba:	f7f6 fd47 	bl	8000a4c <__aeabi_dcmpge>
 8009fbe:	2800      	cmp	r0, #0
 8009fc0:	f43f aef0 	beq.w	8009da4 <__ieee754_pow+0x794>
 8009fc4:	e7e7      	b.n	8009f96 <__ieee754_pow+0x986>
 8009fc6:	f04f 0a00 	mov.w	sl, #0
 8009fca:	e717      	b.n	8009dfc <__ieee754_pow+0x7ec>
 8009fcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	e7d2      	b.n	8009f7a <__ieee754_pow+0x96a>
 8009fd4:	491a      	ldr	r1, [pc, #104]	; (800a040 <__ieee754_pow+0xa30>)
 8009fd6:	2000      	movs	r0, #0
 8009fd8:	f7ff bb9e 	b.w	8009718 <__ieee754_pow+0x108>
 8009fdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fe0:	f7ff bb9a 	b.w	8009718 <__ieee754_pow+0x108>
 8009fe4:	9000      	str	r0, [sp, #0]
 8009fe6:	f7ff bb76 	b.w	80096d6 <__ieee754_pow+0xc6>
 8009fea:	2100      	movs	r1, #0
 8009fec:	f7ff bb60 	b.w	80096b0 <__ieee754_pow+0xa0>
 8009ff0:	00000000 	.word	0x00000000
 8009ff4:	3fe62e43 	.word	0x3fe62e43
 8009ff8:	fefa39ef 	.word	0xfefa39ef
 8009ffc:	3fe62e42 	.word	0x3fe62e42
 800a000:	0ca86c39 	.word	0x0ca86c39
 800a004:	be205c61 	.word	0xbe205c61
 800a008:	72bea4d0 	.word	0x72bea4d0
 800a00c:	3e663769 	.word	0x3e663769
 800a010:	c5d26bf1 	.word	0xc5d26bf1
 800a014:	3ebbbd41 	.word	0x3ebbbd41
 800a018:	af25de2c 	.word	0xaf25de2c
 800a01c:	3f11566a 	.word	0x3f11566a
 800a020:	16bebd93 	.word	0x16bebd93
 800a024:	3f66c16c 	.word	0x3f66c16c
 800a028:	5555553e 	.word	0x5555553e
 800a02c:	3fc55555 	.word	0x3fc55555
 800a030:	c2f8f359 	.word	0xc2f8f359
 800a034:	01a56e1f 	.word	0x01a56e1f
 800a038:	3fe00000 	.word	0x3fe00000
 800a03c:	000fffff 	.word	0x000fffff
 800a040:	3ff00000 	.word	0x3ff00000
 800a044:	4090cbff 	.word	0x4090cbff
 800a048:	3f6f3400 	.word	0x3f6f3400
 800a04c:	652b82fe 	.word	0x652b82fe
 800a050:	3c971547 	.word	0x3c971547
 800a054:	00000000 	.word	0x00000000

0800a058 <__ieee754_rem_pio2>:
 800a058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a05c:	ed2d 8b02 	vpush	{d8}
 800a060:	ec55 4b10 	vmov	r4, r5, d0
 800a064:	4bca      	ldr	r3, [pc, #808]	; (800a390 <__ieee754_rem_pio2+0x338>)
 800a066:	b08b      	sub	sp, #44	; 0x2c
 800a068:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a06c:	4598      	cmp	r8, r3
 800a06e:	4682      	mov	sl, r0
 800a070:	9502      	str	r5, [sp, #8]
 800a072:	dc08      	bgt.n	800a086 <__ieee754_rem_pio2+0x2e>
 800a074:	2200      	movs	r2, #0
 800a076:	2300      	movs	r3, #0
 800a078:	ed80 0b00 	vstr	d0, [r0]
 800a07c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a080:	f04f 0b00 	mov.w	fp, #0
 800a084:	e028      	b.n	800a0d8 <__ieee754_rem_pio2+0x80>
 800a086:	4bc3      	ldr	r3, [pc, #780]	; (800a394 <__ieee754_rem_pio2+0x33c>)
 800a088:	4598      	cmp	r8, r3
 800a08a:	dc78      	bgt.n	800a17e <__ieee754_rem_pio2+0x126>
 800a08c:	9b02      	ldr	r3, [sp, #8]
 800a08e:	4ec2      	ldr	r6, [pc, #776]	; (800a398 <__ieee754_rem_pio2+0x340>)
 800a090:	2b00      	cmp	r3, #0
 800a092:	ee10 0a10 	vmov	r0, s0
 800a096:	a3b0      	add	r3, pc, #704	; (adr r3, 800a358 <__ieee754_rem_pio2+0x300>)
 800a098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09c:	4629      	mov	r1, r5
 800a09e:	dd39      	ble.n	800a114 <__ieee754_rem_pio2+0xbc>
 800a0a0:	f7f6 f896 	bl	80001d0 <__aeabi_dsub>
 800a0a4:	45b0      	cmp	r8, r6
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	460d      	mov	r5, r1
 800a0aa:	d01b      	beq.n	800a0e4 <__ieee754_rem_pio2+0x8c>
 800a0ac:	a3ac      	add	r3, pc, #688	; (adr r3, 800a360 <__ieee754_rem_pio2+0x308>)
 800a0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b2:	f7f6 f88d 	bl	80001d0 <__aeabi_dsub>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	e9ca 2300 	strd	r2, r3, [sl]
 800a0be:	4620      	mov	r0, r4
 800a0c0:	4629      	mov	r1, r5
 800a0c2:	f7f6 f885 	bl	80001d0 <__aeabi_dsub>
 800a0c6:	a3a6      	add	r3, pc, #664	; (adr r3, 800a360 <__ieee754_rem_pio2+0x308>)
 800a0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0cc:	f7f6 f880 	bl	80001d0 <__aeabi_dsub>
 800a0d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a0d4:	f04f 0b01 	mov.w	fp, #1
 800a0d8:	4658      	mov	r0, fp
 800a0da:	b00b      	add	sp, #44	; 0x2c
 800a0dc:	ecbd 8b02 	vpop	{d8}
 800a0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e4:	a3a0      	add	r3, pc, #640	; (adr r3, 800a368 <__ieee754_rem_pio2+0x310>)
 800a0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ea:	f7f6 f871 	bl	80001d0 <__aeabi_dsub>
 800a0ee:	a3a0      	add	r3, pc, #640	; (adr r3, 800a370 <__ieee754_rem_pio2+0x318>)
 800a0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f4:	4604      	mov	r4, r0
 800a0f6:	460d      	mov	r5, r1
 800a0f8:	f7f6 f86a 	bl	80001d0 <__aeabi_dsub>
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	460b      	mov	r3, r1
 800a100:	e9ca 2300 	strd	r2, r3, [sl]
 800a104:	4620      	mov	r0, r4
 800a106:	4629      	mov	r1, r5
 800a108:	f7f6 f862 	bl	80001d0 <__aeabi_dsub>
 800a10c:	a398      	add	r3, pc, #608	; (adr r3, 800a370 <__ieee754_rem_pio2+0x318>)
 800a10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a112:	e7db      	b.n	800a0cc <__ieee754_rem_pio2+0x74>
 800a114:	f7f6 f85e 	bl	80001d4 <__adddf3>
 800a118:	45b0      	cmp	r8, r6
 800a11a:	4604      	mov	r4, r0
 800a11c:	460d      	mov	r5, r1
 800a11e:	d016      	beq.n	800a14e <__ieee754_rem_pio2+0xf6>
 800a120:	a38f      	add	r3, pc, #572	; (adr r3, 800a360 <__ieee754_rem_pio2+0x308>)
 800a122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a126:	f7f6 f855 	bl	80001d4 <__adddf3>
 800a12a:	4602      	mov	r2, r0
 800a12c:	460b      	mov	r3, r1
 800a12e:	e9ca 2300 	strd	r2, r3, [sl]
 800a132:	4620      	mov	r0, r4
 800a134:	4629      	mov	r1, r5
 800a136:	f7f6 f84b 	bl	80001d0 <__aeabi_dsub>
 800a13a:	a389      	add	r3, pc, #548	; (adr r3, 800a360 <__ieee754_rem_pio2+0x308>)
 800a13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a140:	f7f6 f848 	bl	80001d4 <__adddf3>
 800a144:	f04f 3bff 	mov.w	fp, #4294967295
 800a148:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a14c:	e7c4      	b.n	800a0d8 <__ieee754_rem_pio2+0x80>
 800a14e:	a386      	add	r3, pc, #536	; (adr r3, 800a368 <__ieee754_rem_pio2+0x310>)
 800a150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a154:	f7f6 f83e 	bl	80001d4 <__adddf3>
 800a158:	a385      	add	r3, pc, #532	; (adr r3, 800a370 <__ieee754_rem_pio2+0x318>)
 800a15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15e:	4604      	mov	r4, r0
 800a160:	460d      	mov	r5, r1
 800a162:	f7f6 f837 	bl	80001d4 <__adddf3>
 800a166:	4602      	mov	r2, r0
 800a168:	460b      	mov	r3, r1
 800a16a:	e9ca 2300 	strd	r2, r3, [sl]
 800a16e:	4620      	mov	r0, r4
 800a170:	4629      	mov	r1, r5
 800a172:	f7f6 f82d 	bl	80001d0 <__aeabi_dsub>
 800a176:	a37e      	add	r3, pc, #504	; (adr r3, 800a370 <__ieee754_rem_pio2+0x318>)
 800a178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17c:	e7e0      	b.n	800a140 <__ieee754_rem_pio2+0xe8>
 800a17e:	4b87      	ldr	r3, [pc, #540]	; (800a39c <__ieee754_rem_pio2+0x344>)
 800a180:	4598      	cmp	r8, r3
 800a182:	f300 80d9 	bgt.w	800a338 <__ieee754_rem_pio2+0x2e0>
 800a186:	f7ff f8ff 	bl	8009388 <fabs>
 800a18a:	ec55 4b10 	vmov	r4, r5, d0
 800a18e:	ee10 0a10 	vmov	r0, s0
 800a192:	a379      	add	r3, pc, #484	; (adr r3, 800a378 <__ieee754_rem_pio2+0x320>)
 800a194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a198:	4629      	mov	r1, r5
 800a19a:	f7f6 f9d1 	bl	8000540 <__aeabi_dmul>
 800a19e:	4b80      	ldr	r3, [pc, #512]	; (800a3a0 <__ieee754_rem_pio2+0x348>)
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f7f6 f817 	bl	80001d4 <__adddf3>
 800a1a6:	f7f6 fc7b 	bl	8000aa0 <__aeabi_d2iz>
 800a1aa:	4683      	mov	fp, r0
 800a1ac:	f7f6 f95e 	bl	800046c <__aeabi_i2d>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	ec43 2b18 	vmov	d8, r2, r3
 800a1b8:	a367      	add	r3, pc, #412	; (adr r3, 800a358 <__ieee754_rem_pio2+0x300>)
 800a1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1be:	f7f6 f9bf 	bl	8000540 <__aeabi_dmul>
 800a1c2:	4602      	mov	r2, r0
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	4629      	mov	r1, r5
 800a1ca:	f7f6 f801 	bl	80001d0 <__aeabi_dsub>
 800a1ce:	a364      	add	r3, pc, #400	; (adr r3, 800a360 <__ieee754_rem_pio2+0x308>)
 800a1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d4:	4606      	mov	r6, r0
 800a1d6:	460f      	mov	r7, r1
 800a1d8:	ec51 0b18 	vmov	r0, r1, d8
 800a1dc:	f7f6 f9b0 	bl	8000540 <__aeabi_dmul>
 800a1e0:	f1bb 0f1f 	cmp.w	fp, #31
 800a1e4:	4604      	mov	r4, r0
 800a1e6:	460d      	mov	r5, r1
 800a1e8:	dc0d      	bgt.n	800a206 <__ieee754_rem_pio2+0x1ae>
 800a1ea:	4b6e      	ldr	r3, [pc, #440]	; (800a3a4 <__ieee754_rem_pio2+0x34c>)
 800a1ec:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a1f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1f4:	4543      	cmp	r3, r8
 800a1f6:	d006      	beq.n	800a206 <__ieee754_rem_pio2+0x1ae>
 800a1f8:	4622      	mov	r2, r4
 800a1fa:	462b      	mov	r3, r5
 800a1fc:	4630      	mov	r0, r6
 800a1fe:	4639      	mov	r1, r7
 800a200:	f7f5 ffe6 	bl	80001d0 <__aeabi_dsub>
 800a204:	e00f      	b.n	800a226 <__ieee754_rem_pio2+0x1ce>
 800a206:	462b      	mov	r3, r5
 800a208:	4622      	mov	r2, r4
 800a20a:	4630      	mov	r0, r6
 800a20c:	4639      	mov	r1, r7
 800a20e:	f7f5 ffdf 	bl	80001d0 <__aeabi_dsub>
 800a212:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a216:	9303      	str	r3, [sp, #12]
 800a218:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a21c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a220:	f1b8 0f10 	cmp.w	r8, #16
 800a224:	dc02      	bgt.n	800a22c <__ieee754_rem_pio2+0x1d4>
 800a226:	e9ca 0100 	strd	r0, r1, [sl]
 800a22a:	e039      	b.n	800a2a0 <__ieee754_rem_pio2+0x248>
 800a22c:	a34e      	add	r3, pc, #312	; (adr r3, 800a368 <__ieee754_rem_pio2+0x310>)
 800a22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a232:	ec51 0b18 	vmov	r0, r1, d8
 800a236:	f7f6 f983 	bl	8000540 <__aeabi_dmul>
 800a23a:	4604      	mov	r4, r0
 800a23c:	460d      	mov	r5, r1
 800a23e:	4602      	mov	r2, r0
 800a240:	460b      	mov	r3, r1
 800a242:	4630      	mov	r0, r6
 800a244:	4639      	mov	r1, r7
 800a246:	f7f5 ffc3 	bl	80001d0 <__aeabi_dsub>
 800a24a:	4602      	mov	r2, r0
 800a24c:	460b      	mov	r3, r1
 800a24e:	4680      	mov	r8, r0
 800a250:	4689      	mov	r9, r1
 800a252:	4630      	mov	r0, r6
 800a254:	4639      	mov	r1, r7
 800a256:	f7f5 ffbb 	bl	80001d0 <__aeabi_dsub>
 800a25a:	4622      	mov	r2, r4
 800a25c:	462b      	mov	r3, r5
 800a25e:	f7f5 ffb7 	bl	80001d0 <__aeabi_dsub>
 800a262:	a343      	add	r3, pc, #268	; (adr r3, 800a370 <__ieee754_rem_pio2+0x318>)
 800a264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a268:	4604      	mov	r4, r0
 800a26a:	460d      	mov	r5, r1
 800a26c:	ec51 0b18 	vmov	r0, r1, d8
 800a270:	f7f6 f966 	bl	8000540 <__aeabi_dmul>
 800a274:	4622      	mov	r2, r4
 800a276:	462b      	mov	r3, r5
 800a278:	f7f5 ffaa 	bl	80001d0 <__aeabi_dsub>
 800a27c:	4602      	mov	r2, r0
 800a27e:	460b      	mov	r3, r1
 800a280:	4604      	mov	r4, r0
 800a282:	460d      	mov	r5, r1
 800a284:	4640      	mov	r0, r8
 800a286:	4649      	mov	r1, r9
 800a288:	f7f5 ffa2 	bl	80001d0 <__aeabi_dsub>
 800a28c:	9a03      	ldr	r2, [sp, #12]
 800a28e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a292:	1ad3      	subs	r3, r2, r3
 800a294:	2b31      	cmp	r3, #49	; 0x31
 800a296:	dc24      	bgt.n	800a2e2 <__ieee754_rem_pio2+0x28a>
 800a298:	e9ca 0100 	strd	r0, r1, [sl]
 800a29c:	4646      	mov	r6, r8
 800a29e:	464f      	mov	r7, r9
 800a2a0:	e9da 8900 	ldrd	r8, r9, [sl]
 800a2a4:	4630      	mov	r0, r6
 800a2a6:	4642      	mov	r2, r8
 800a2a8:	464b      	mov	r3, r9
 800a2aa:	4639      	mov	r1, r7
 800a2ac:	f7f5 ff90 	bl	80001d0 <__aeabi_dsub>
 800a2b0:	462b      	mov	r3, r5
 800a2b2:	4622      	mov	r2, r4
 800a2b4:	f7f5 ff8c 	bl	80001d0 <__aeabi_dsub>
 800a2b8:	9b02      	ldr	r3, [sp, #8]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a2c0:	f6bf af0a 	bge.w	800a0d8 <__ieee754_rem_pio2+0x80>
 800a2c4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a2c8:	f8ca 3004 	str.w	r3, [sl, #4]
 800a2cc:	f8ca 8000 	str.w	r8, [sl]
 800a2d0:	f8ca 0008 	str.w	r0, [sl, #8]
 800a2d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2d8:	f8ca 300c 	str.w	r3, [sl, #12]
 800a2dc:	f1cb 0b00 	rsb	fp, fp, #0
 800a2e0:	e6fa      	b.n	800a0d8 <__ieee754_rem_pio2+0x80>
 800a2e2:	a327      	add	r3, pc, #156	; (adr r3, 800a380 <__ieee754_rem_pio2+0x328>)
 800a2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e8:	ec51 0b18 	vmov	r0, r1, d8
 800a2ec:	f7f6 f928 	bl	8000540 <__aeabi_dmul>
 800a2f0:	4604      	mov	r4, r0
 800a2f2:	460d      	mov	r5, r1
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	4640      	mov	r0, r8
 800a2fa:	4649      	mov	r1, r9
 800a2fc:	f7f5 ff68 	bl	80001d0 <__aeabi_dsub>
 800a300:	4602      	mov	r2, r0
 800a302:	460b      	mov	r3, r1
 800a304:	4606      	mov	r6, r0
 800a306:	460f      	mov	r7, r1
 800a308:	4640      	mov	r0, r8
 800a30a:	4649      	mov	r1, r9
 800a30c:	f7f5 ff60 	bl	80001d0 <__aeabi_dsub>
 800a310:	4622      	mov	r2, r4
 800a312:	462b      	mov	r3, r5
 800a314:	f7f5 ff5c 	bl	80001d0 <__aeabi_dsub>
 800a318:	a31b      	add	r3, pc, #108	; (adr r3, 800a388 <__ieee754_rem_pio2+0x330>)
 800a31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31e:	4604      	mov	r4, r0
 800a320:	460d      	mov	r5, r1
 800a322:	ec51 0b18 	vmov	r0, r1, d8
 800a326:	f7f6 f90b 	bl	8000540 <__aeabi_dmul>
 800a32a:	4622      	mov	r2, r4
 800a32c:	462b      	mov	r3, r5
 800a32e:	f7f5 ff4f 	bl	80001d0 <__aeabi_dsub>
 800a332:	4604      	mov	r4, r0
 800a334:	460d      	mov	r5, r1
 800a336:	e75f      	b.n	800a1f8 <__ieee754_rem_pio2+0x1a0>
 800a338:	4b1b      	ldr	r3, [pc, #108]	; (800a3a8 <__ieee754_rem_pio2+0x350>)
 800a33a:	4598      	cmp	r8, r3
 800a33c:	dd36      	ble.n	800a3ac <__ieee754_rem_pio2+0x354>
 800a33e:	ee10 2a10 	vmov	r2, s0
 800a342:	462b      	mov	r3, r5
 800a344:	4620      	mov	r0, r4
 800a346:	4629      	mov	r1, r5
 800a348:	f7f5 ff42 	bl	80001d0 <__aeabi_dsub>
 800a34c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a350:	e9ca 0100 	strd	r0, r1, [sl]
 800a354:	e694      	b.n	800a080 <__ieee754_rem_pio2+0x28>
 800a356:	bf00      	nop
 800a358:	54400000 	.word	0x54400000
 800a35c:	3ff921fb 	.word	0x3ff921fb
 800a360:	1a626331 	.word	0x1a626331
 800a364:	3dd0b461 	.word	0x3dd0b461
 800a368:	1a600000 	.word	0x1a600000
 800a36c:	3dd0b461 	.word	0x3dd0b461
 800a370:	2e037073 	.word	0x2e037073
 800a374:	3ba3198a 	.word	0x3ba3198a
 800a378:	6dc9c883 	.word	0x6dc9c883
 800a37c:	3fe45f30 	.word	0x3fe45f30
 800a380:	2e000000 	.word	0x2e000000
 800a384:	3ba3198a 	.word	0x3ba3198a
 800a388:	252049c1 	.word	0x252049c1
 800a38c:	397b839a 	.word	0x397b839a
 800a390:	3fe921fb 	.word	0x3fe921fb
 800a394:	4002d97b 	.word	0x4002d97b
 800a398:	3ff921fb 	.word	0x3ff921fb
 800a39c:	413921fb 	.word	0x413921fb
 800a3a0:	3fe00000 	.word	0x3fe00000
 800a3a4:	0800b370 	.word	0x0800b370
 800a3a8:	7fefffff 	.word	0x7fefffff
 800a3ac:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a3b0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a3b4:	ee10 0a10 	vmov	r0, s0
 800a3b8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a3bc:	ee10 6a10 	vmov	r6, s0
 800a3c0:	460f      	mov	r7, r1
 800a3c2:	f7f6 fb6d 	bl	8000aa0 <__aeabi_d2iz>
 800a3c6:	f7f6 f851 	bl	800046c <__aeabi_i2d>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	4630      	mov	r0, r6
 800a3d0:	4639      	mov	r1, r7
 800a3d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a3d6:	f7f5 fefb 	bl	80001d0 <__aeabi_dsub>
 800a3da:	4b22      	ldr	r3, [pc, #136]	; (800a464 <__ieee754_rem_pio2+0x40c>)
 800a3dc:	2200      	movs	r2, #0
 800a3de:	f7f6 f8af 	bl	8000540 <__aeabi_dmul>
 800a3e2:	460f      	mov	r7, r1
 800a3e4:	4606      	mov	r6, r0
 800a3e6:	f7f6 fb5b 	bl	8000aa0 <__aeabi_d2iz>
 800a3ea:	f7f6 f83f 	bl	800046c <__aeabi_i2d>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	4630      	mov	r0, r6
 800a3f4:	4639      	mov	r1, r7
 800a3f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a3fa:	f7f5 fee9 	bl	80001d0 <__aeabi_dsub>
 800a3fe:	4b19      	ldr	r3, [pc, #100]	; (800a464 <__ieee754_rem_pio2+0x40c>)
 800a400:	2200      	movs	r2, #0
 800a402:	f7f6 f89d 	bl	8000540 <__aeabi_dmul>
 800a406:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a40a:	ad04      	add	r5, sp, #16
 800a40c:	f04f 0803 	mov.w	r8, #3
 800a410:	46a9      	mov	r9, r5
 800a412:	2600      	movs	r6, #0
 800a414:	2700      	movs	r7, #0
 800a416:	4632      	mov	r2, r6
 800a418:	463b      	mov	r3, r7
 800a41a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a41e:	46c3      	mov	fp, r8
 800a420:	3d08      	subs	r5, #8
 800a422:	f108 38ff 	add.w	r8, r8, #4294967295
 800a426:	f7f6 faf3 	bl	8000a10 <__aeabi_dcmpeq>
 800a42a:	2800      	cmp	r0, #0
 800a42c:	d1f3      	bne.n	800a416 <__ieee754_rem_pio2+0x3be>
 800a42e:	4b0e      	ldr	r3, [pc, #56]	; (800a468 <__ieee754_rem_pio2+0x410>)
 800a430:	9301      	str	r3, [sp, #4]
 800a432:	2302      	movs	r3, #2
 800a434:	9300      	str	r3, [sp, #0]
 800a436:	4622      	mov	r2, r4
 800a438:	465b      	mov	r3, fp
 800a43a:	4651      	mov	r1, sl
 800a43c:	4648      	mov	r0, r9
 800a43e:	f000 f993 	bl	800a768 <__kernel_rem_pio2>
 800a442:	9b02      	ldr	r3, [sp, #8]
 800a444:	2b00      	cmp	r3, #0
 800a446:	4683      	mov	fp, r0
 800a448:	f6bf ae46 	bge.w	800a0d8 <__ieee754_rem_pio2+0x80>
 800a44c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a450:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a454:	f8ca 3004 	str.w	r3, [sl, #4]
 800a458:	f8da 300c 	ldr.w	r3, [sl, #12]
 800a45c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a460:	e73a      	b.n	800a2d8 <__ieee754_rem_pio2+0x280>
 800a462:	bf00      	nop
 800a464:	41700000 	.word	0x41700000
 800a468:	0800b3f0 	.word	0x0800b3f0

0800a46c <__ieee754_sqrt>:
 800a46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a470:	ec55 4b10 	vmov	r4, r5, d0
 800a474:	4e56      	ldr	r6, [pc, #344]	; (800a5d0 <__ieee754_sqrt+0x164>)
 800a476:	43ae      	bics	r6, r5
 800a478:	ee10 0a10 	vmov	r0, s0
 800a47c:	ee10 3a10 	vmov	r3, s0
 800a480:	4629      	mov	r1, r5
 800a482:	462a      	mov	r2, r5
 800a484:	d110      	bne.n	800a4a8 <__ieee754_sqrt+0x3c>
 800a486:	ee10 2a10 	vmov	r2, s0
 800a48a:	462b      	mov	r3, r5
 800a48c:	f7f6 f858 	bl	8000540 <__aeabi_dmul>
 800a490:	4602      	mov	r2, r0
 800a492:	460b      	mov	r3, r1
 800a494:	4620      	mov	r0, r4
 800a496:	4629      	mov	r1, r5
 800a498:	f7f5 fe9c 	bl	80001d4 <__adddf3>
 800a49c:	4604      	mov	r4, r0
 800a49e:	460d      	mov	r5, r1
 800a4a0:	ec45 4b10 	vmov	d0, r4, r5
 800a4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4a8:	2d00      	cmp	r5, #0
 800a4aa:	dc10      	bgt.n	800a4ce <__ieee754_sqrt+0x62>
 800a4ac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a4b0:	4330      	orrs	r0, r6
 800a4b2:	d0f5      	beq.n	800a4a0 <__ieee754_sqrt+0x34>
 800a4b4:	b15d      	cbz	r5, 800a4ce <__ieee754_sqrt+0x62>
 800a4b6:	ee10 2a10 	vmov	r2, s0
 800a4ba:	462b      	mov	r3, r5
 800a4bc:	ee10 0a10 	vmov	r0, s0
 800a4c0:	f7f5 fe86 	bl	80001d0 <__aeabi_dsub>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	f7f6 f964 	bl	8000794 <__aeabi_ddiv>
 800a4cc:	e7e6      	b.n	800a49c <__ieee754_sqrt+0x30>
 800a4ce:	1509      	asrs	r1, r1, #20
 800a4d0:	d076      	beq.n	800a5c0 <__ieee754_sqrt+0x154>
 800a4d2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a4d6:	07ce      	lsls	r6, r1, #31
 800a4d8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800a4dc:	bf5e      	ittt	pl
 800a4de:	0fda      	lsrpl	r2, r3, #31
 800a4e0:	005b      	lslpl	r3, r3, #1
 800a4e2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800a4e6:	0fda      	lsrs	r2, r3, #31
 800a4e8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800a4ec:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800a4f0:	2000      	movs	r0, #0
 800a4f2:	106d      	asrs	r5, r5, #1
 800a4f4:	005b      	lsls	r3, r3, #1
 800a4f6:	f04f 0e16 	mov.w	lr, #22
 800a4fa:	4684      	mov	ip, r0
 800a4fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a500:	eb0c 0401 	add.w	r4, ip, r1
 800a504:	4294      	cmp	r4, r2
 800a506:	bfde      	ittt	le
 800a508:	1b12      	suble	r2, r2, r4
 800a50a:	eb04 0c01 	addle.w	ip, r4, r1
 800a50e:	1840      	addle	r0, r0, r1
 800a510:	0052      	lsls	r2, r2, #1
 800a512:	f1be 0e01 	subs.w	lr, lr, #1
 800a516:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a51a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a51e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a522:	d1ed      	bne.n	800a500 <__ieee754_sqrt+0x94>
 800a524:	4671      	mov	r1, lr
 800a526:	2720      	movs	r7, #32
 800a528:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a52c:	4562      	cmp	r2, ip
 800a52e:	eb04 060e 	add.w	r6, r4, lr
 800a532:	dc02      	bgt.n	800a53a <__ieee754_sqrt+0xce>
 800a534:	d113      	bne.n	800a55e <__ieee754_sqrt+0xf2>
 800a536:	429e      	cmp	r6, r3
 800a538:	d811      	bhi.n	800a55e <__ieee754_sqrt+0xf2>
 800a53a:	2e00      	cmp	r6, #0
 800a53c:	eb06 0e04 	add.w	lr, r6, r4
 800a540:	da43      	bge.n	800a5ca <__ieee754_sqrt+0x15e>
 800a542:	f1be 0f00 	cmp.w	lr, #0
 800a546:	db40      	blt.n	800a5ca <__ieee754_sqrt+0x15e>
 800a548:	f10c 0801 	add.w	r8, ip, #1
 800a54c:	eba2 020c 	sub.w	r2, r2, ip
 800a550:	429e      	cmp	r6, r3
 800a552:	bf88      	it	hi
 800a554:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a558:	1b9b      	subs	r3, r3, r6
 800a55a:	4421      	add	r1, r4
 800a55c:	46c4      	mov	ip, r8
 800a55e:	0052      	lsls	r2, r2, #1
 800a560:	3f01      	subs	r7, #1
 800a562:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a566:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a56a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a56e:	d1dd      	bne.n	800a52c <__ieee754_sqrt+0xc0>
 800a570:	4313      	orrs	r3, r2
 800a572:	d006      	beq.n	800a582 <__ieee754_sqrt+0x116>
 800a574:	1c4c      	adds	r4, r1, #1
 800a576:	bf13      	iteet	ne
 800a578:	3101      	addne	r1, #1
 800a57a:	3001      	addeq	r0, #1
 800a57c:	4639      	moveq	r1, r7
 800a57e:	f021 0101 	bicne.w	r1, r1, #1
 800a582:	1043      	asrs	r3, r0, #1
 800a584:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a588:	0849      	lsrs	r1, r1, #1
 800a58a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a58e:	07c2      	lsls	r2, r0, #31
 800a590:	bf48      	it	mi
 800a592:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a596:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800a59a:	460c      	mov	r4, r1
 800a59c:	463d      	mov	r5, r7
 800a59e:	e77f      	b.n	800a4a0 <__ieee754_sqrt+0x34>
 800a5a0:	0ada      	lsrs	r2, r3, #11
 800a5a2:	3815      	subs	r0, #21
 800a5a4:	055b      	lsls	r3, r3, #21
 800a5a6:	2a00      	cmp	r2, #0
 800a5a8:	d0fa      	beq.n	800a5a0 <__ieee754_sqrt+0x134>
 800a5aa:	02d7      	lsls	r7, r2, #11
 800a5ac:	d50a      	bpl.n	800a5c4 <__ieee754_sqrt+0x158>
 800a5ae:	f1c1 0420 	rsb	r4, r1, #32
 800a5b2:	fa23 f404 	lsr.w	r4, r3, r4
 800a5b6:	1e4d      	subs	r5, r1, #1
 800a5b8:	408b      	lsls	r3, r1
 800a5ba:	4322      	orrs	r2, r4
 800a5bc:	1b41      	subs	r1, r0, r5
 800a5be:	e788      	b.n	800a4d2 <__ieee754_sqrt+0x66>
 800a5c0:	4608      	mov	r0, r1
 800a5c2:	e7f0      	b.n	800a5a6 <__ieee754_sqrt+0x13a>
 800a5c4:	0052      	lsls	r2, r2, #1
 800a5c6:	3101      	adds	r1, #1
 800a5c8:	e7ef      	b.n	800a5aa <__ieee754_sqrt+0x13e>
 800a5ca:	46e0      	mov	r8, ip
 800a5cc:	e7be      	b.n	800a54c <__ieee754_sqrt+0xe0>
 800a5ce:	bf00      	nop
 800a5d0:	7ff00000 	.word	0x7ff00000
 800a5d4:	00000000 	.word	0x00000000

0800a5d8 <__kernel_cos>:
 800a5d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5dc:	ec57 6b10 	vmov	r6, r7, d0
 800a5e0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a5e4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a5e8:	ed8d 1b00 	vstr	d1, [sp]
 800a5ec:	da07      	bge.n	800a5fe <__kernel_cos+0x26>
 800a5ee:	ee10 0a10 	vmov	r0, s0
 800a5f2:	4639      	mov	r1, r7
 800a5f4:	f7f6 fa54 	bl	8000aa0 <__aeabi_d2iz>
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	f000 8088 	beq.w	800a70e <__kernel_cos+0x136>
 800a5fe:	4632      	mov	r2, r6
 800a600:	463b      	mov	r3, r7
 800a602:	4630      	mov	r0, r6
 800a604:	4639      	mov	r1, r7
 800a606:	f7f5 ff9b 	bl	8000540 <__aeabi_dmul>
 800a60a:	4b51      	ldr	r3, [pc, #324]	; (800a750 <__kernel_cos+0x178>)
 800a60c:	2200      	movs	r2, #0
 800a60e:	4604      	mov	r4, r0
 800a610:	460d      	mov	r5, r1
 800a612:	f7f5 ff95 	bl	8000540 <__aeabi_dmul>
 800a616:	a340      	add	r3, pc, #256	; (adr r3, 800a718 <__kernel_cos+0x140>)
 800a618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61c:	4682      	mov	sl, r0
 800a61e:	468b      	mov	fp, r1
 800a620:	4620      	mov	r0, r4
 800a622:	4629      	mov	r1, r5
 800a624:	f7f5 ff8c 	bl	8000540 <__aeabi_dmul>
 800a628:	a33d      	add	r3, pc, #244	; (adr r3, 800a720 <__kernel_cos+0x148>)
 800a62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62e:	f7f5 fdd1 	bl	80001d4 <__adddf3>
 800a632:	4622      	mov	r2, r4
 800a634:	462b      	mov	r3, r5
 800a636:	f7f5 ff83 	bl	8000540 <__aeabi_dmul>
 800a63a:	a33b      	add	r3, pc, #236	; (adr r3, 800a728 <__kernel_cos+0x150>)
 800a63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a640:	f7f5 fdc6 	bl	80001d0 <__aeabi_dsub>
 800a644:	4622      	mov	r2, r4
 800a646:	462b      	mov	r3, r5
 800a648:	f7f5 ff7a 	bl	8000540 <__aeabi_dmul>
 800a64c:	a338      	add	r3, pc, #224	; (adr r3, 800a730 <__kernel_cos+0x158>)
 800a64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a652:	f7f5 fdbf 	bl	80001d4 <__adddf3>
 800a656:	4622      	mov	r2, r4
 800a658:	462b      	mov	r3, r5
 800a65a:	f7f5 ff71 	bl	8000540 <__aeabi_dmul>
 800a65e:	a336      	add	r3, pc, #216	; (adr r3, 800a738 <__kernel_cos+0x160>)
 800a660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a664:	f7f5 fdb4 	bl	80001d0 <__aeabi_dsub>
 800a668:	4622      	mov	r2, r4
 800a66a:	462b      	mov	r3, r5
 800a66c:	f7f5 ff68 	bl	8000540 <__aeabi_dmul>
 800a670:	a333      	add	r3, pc, #204	; (adr r3, 800a740 <__kernel_cos+0x168>)
 800a672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a676:	f7f5 fdad 	bl	80001d4 <__adddf3>
 800a67a:	4622      	mov	r2, r4
 800a67c:	462b      	mov	r3, r5
 800a67e:	f7f5 ff5f 	bl	8000540 <__aeabi_dmul>
 800a682:	4622      	mov	r2, r4
 800a684:	462b      	mov	r3, r5
 800a686:	f7f5 ff5b 	bl	8000540 <__aeabi_dmul>
 800a68a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a68e:	4604      	mov	r4, r0
 800a690:	460d      	mov	r5, r1
 800a692:	4630      	mov	r0, r6
 800a694:	4639      	mov	r1, r7
 800a696:	f7f5 ff53 	bl	8000540 <__aeabi_dmul>
 800a69a:	460b      	mov	r3, r1
 800a69c:	4602      	mov	r2, r0
 800a69e:	4629      	mov	r1, r5
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	f7f5 fd95 	bl	80001d0 <__aeabi_dsub>
 800a6a6:	4b2b      	ldr	r3, [pc, #172]	; (800a754 <__kernel_cos+0x17c>)
 800a6a8:	4598      	cmp	r8, r3
 800a6aa:	4606      	mov	r6, r0
 800a6ac:	460f      	mov	r7, r1
 800a6ae:	dc10      	bgt.n	800a6d2 <__kernel_cos+0xfa>
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	460b      	mov	r3, r1
 800a6b4:	4650      	mov	r0, sl
 800a6b6:	4659      	mov	r1, fp
 800a6b8:	f7f5 fd8a 	bl	80001d0 <__aeabi_dsub>
 800a6bc:	460b      	mov	r3, r1
 800a6be:	4926      	ldr	r1, [pc, #152]	; (800a758 <__kernel_cos+0x180>)
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	2000      	movs	r0, #0
 800a6c4:	f7f5 fd84 	bl	80001d0 <__aeabi_dsub>
 800a6c8:	ec41 0b10 	vmov	d0, r0, r1
 800a6cc:	b003      	add	sp, #12
 800a6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6d2:	4b22      	ldr	r3, [pc, #136]	; (800a75c <__kernel_cos+0x184>)
 800a6d4:	4920      	ldr	r1, [pc, #128]	; (800a758 <__kernel_cos+0x180>)
 800a6d6:	4598      	cmp	r8, r3
 800a6d8:	bfcc      	ite	gt
 800a6da:	4d21      	ldrgt	r5, [pc, #132]	; (800a760 <__kernel_cos+0x188>)
 800a6dc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a6e0:	2400      	movs	r4, #0
 800a6e2:	4622      	mov	r2, r4
 800a6e4:	462b      	mov	r3, r5
 800a6e6:	2000      	movs	r0, #0
 800a6e8:	f7f5 fd72 	bl	80001d0 <__aeabi_dsub>
 800a6ec:	4622      	mov	r2, r4
 800a6ee:	4680      	mov	r8, r0
 800a6f0:	4689      	mov	r9, r1
 800a6f2:	462b      	mov	r3, r5
 800a6f4:	4650      	mov	r0, sl
 800a6f6:	4659      	mov	r1, fp
 800a6f8:	f7f5 fd6a 	bl	80001d0 <__aeabi_dsub>
 800a6fc:	4632      	mov	r2, r6
 800a6fe:	463b      	mov	r3, r7
 800a700:	f7f5 fd66 	bl	80001d0 <__aeabi_dsub>
 800a704:	4602      	mov	r2, r0
 800a706:	460b      	mov	r3, r1
 800a708:	4640      	mov	r0, r8
 800a70a:	4649      	mov	r1, r9
 800a70c:	e7da      	b.n	800a6c4 <__kernel_cos+0xec>
 800a70e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a748 <__kernel_cos+0x170>
 800a712:	e7db      	b.n	800a6cc <__kernel_cos+0xf4>
 800a714:	f3af 8000 	nop.w
 800a718:	be8838d4 	.word	0xbe8838d4
 800a71c:	bda8fae9 	.word	0xbda8fae9
 800a720:	bdb4b1c4 	.word	0xbdb4b1c4
 800a724:	3e21ee9e 	.word	0x3e21ee9e
 800a728:	809c52ad 	.word	0x809c52ad
 800a72c:	3e927e4f 	.word	0x3e927e4f
 800a730:	19cb1590 	.word	0x19cb1590
 800a734:	3efa01a0 	.word	0x3efa01a0
 800a738:	16c15177 	.word	0x16c15177
 800a73c:	3f56c16c 	.word	0x3f56c16c
 800a740:	5555554c 	.word	0x5555554c
 800a744:	3fa55555 	.word	0x3fa55555
 800a748:	00000000 	.word	0x00000000
 800a74c:	3ff00000 	.word	0x3ff00000
 800a750:	3fe00000 	.word	0x3fe00000
 800a754:	3fd33332 	.word	0x3fd33332
 800a758:	3ff00000 	.word	0x3ff00000
 800a75c:	3fe90000 	.word	0x3fe90000
 800a760:	3fd20000 	.word	0x3fd20000
 800a764:	00000000 	.word	0x00000000

0800a768 <__kernel_rem_pio2>:
 800a768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a76c:	ed2d 8b02 	vpush	{d8}
 800a770:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800a774:	f112 0f14 	cmn.w	r2, #20
 800a778:	9308      	str	r3, [sp, #32]
 800a77a:	9101      	str	r1, [sp, #4]
 800a77c:	4bc6      	ldr	r3, [pc, #792]	; (800aa98 <__kernel_rem_pio2+0x330>)
 800a77e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800a780:	9009      	str	r0, [sp, #36]	; 0x24
 800a782:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a786:	9304      	str	r3, [sp, #16]
 800a788:	9b08      	ldr	r3, [sp, #32]
 800a78a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a78e:	bfa8      	it	ge
 800a790:	1ed4      	subge	r4, r2, #3
 800a792:	9306      	str	r3, [sp, #24]
 800a794:	bfb2      	itee	lt
 800a796:	2400      	movlt	r4, #0
 800a798:	2318      	movge	r3, #24
 800a79a:	fb94 f4f3 	sdivge	r4, r4, r3
 800a79e:	f06f 0317 	mvn.w	r3, #23
 800a7a2:	fb04 3303 	mla	r3, r4, r3, r3
 800a7a6:	eb03 0a02 	add.w	sl, r3, r2
 800a7aa:	9b04      	ldr	r3, [sp, #16]
 800a7ac:	9a06      	ldr	r2, [sp, #24]
 800a7ae:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800aa88 <__kernel_rem_pio2+0x320>
 800a7b2:	eb03 0802 	add.w	r8, r3, r2
 800a7b6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a7b8:	1aa7      	subs	r7, r4, r2
 800a7ba:	ae20      	add	r6, sp, #128	; 0x80
 800a7bc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a7c0:	2500      	movs	r5, #0
 800a7c2:	4545      	cmp	r5, r8
 800a7c4:	dd18      	ble.n	800a7f8 <__kernel_rem_pio2+0x90>
 800a7c6:	9b08      	ldr	r3, [sp, #32]
 800a7c8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800a7cc:	aa20      	add	r2, sp, #128	; 0x80
 800a7ce:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800aa88 <__kernel_rem_pio2+0x320>
 800a7d2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a7d6:	f1c3 0301 	rsb	r3, r3, #1
 800a7da:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800a7de:	9307      	str	r3, [sp, #28]
 800a7e0:	9b07      	ldr	r3, [sp, #28]
 800a7e2:	9a04      	ldr	r2, [sp, #16]
 800a7e4:	4443      	add	r3, r8
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	db2f      	blt.n	800a84a <__kernel_rem_pio2+0xe2>
 800a7ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a7ee:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a7f2:	462f      	mov	r7, r5
 800a7f4:	2600      	movs	r6, #0
 800a7f6:	e01b      	b.n	800a830 <__kernel_rem_pio2+0xc8>
 800a7f8:	42ef      	cmn	r7, r5
 800a7fa:	d407      	bmi.n	800a80c <__kernel_rem_pio2+0xa4>
 800a7fc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a800:	f7f5 fe34 	bl	800046c <__aeabi_i2d>
 800a804:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a808:	3501      	adds	r5, #1
 800a80a:	e7da      	b.n	800a7c2 <__kernel_rem_pio2+0x5a>
 800a80c:	ec51 0b18 	vmov	r0, r1, d8
 800a810:	e7f8      	b.n	800a804 <__kernel_rem_pio2+0x9c>
 800a812:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a816:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a81a:	f7f5 fe91 	bl	8000540 <__aeabi_dmul>
 800a81e:	4602      	mov	r2, r0
 800a820:	460b      	mov	r3, r1
 800a822:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a826:	f7f5 fcd5 	bl	80001d4 <__adddf3>
 800a82a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a82e:	3601      	adds	r6, #1
 800a830:	9b06      	ldr	r3, [sp, #24]
 800a832:	429e      	cmp	r6, r3
 800a834:	f1a7 0708 	sub.w	r7, r7, #8
 800a838:	ddeb      	ble.n	800a812 <__kernel_rem_pio2+0xaa>
 800a83a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a83e:	3508      	adds	r5, #8
 800a840:	ecab 7b02 	vstmia	fp!, {d7}
 800a844:	f108 0801 	add.w	r8, r8, #1
 800a848:	e7ca      	b.n	800a7e0 <__kernel_rem_pio2+0x78>
 800a84a:	9b04      	ldr	r3, [sp, #16]
 800a84c:	aa0c      	add	r2, sp, #48	; 0x30
 800a84e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a852:	930b      	str	r3, [sp, #44]	; 0x2c
 800a854:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a856:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a85a:	9c04      	ldr	r4, [sp, #16]
 800a85c:	930a      	str	r3, [sp, #40]	; 0x28
 800a85e:	ab98      	add	r3, sp, #608	; 0x260
 800a860:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a864:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a868:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800a86c:	f8cd b008 	str.w	fp, [sp, #8]
 800a870:	4625      	mov	r5, r4
 800a872:	2d00      	cmp	r5, #0
 800a874:	dc78      	bgt.n	800a968 <__kernel_rem_pio2+0x200>
 800a876:	ec47 6b10 	vmov	d0, r6, r7
 800a87a:	4650      	mov	r0, sl
 800a87c:	f000 fc94 	bl	800b1a8 <scalbn>
 800a880:	ec57 6b10 	vmov	r6, r7, d0
 800a884:	2200      	movs	r2, #0
 800a886:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a88a:	ee10 0a10 	vmov	r0, s0
 800a88e:	4639      	mov	r1, r7
 800a890:	f7f5 fe56 	bl	8000540 <__aeabi_dmul>
 800a894:	ec41 0b10 	vmov	d0, r0, r1
 800a898:	f000 fb72 	bl	800af80 <floor>
 800a89c:	4b7f      	ldr	r3, [pc, #508]	; (800aa9c <__kernel_rem_pio2+0x334>)
 800a89e:	ec51 0b10 	vmov	r0, r1, d0
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f7f5 fe4c 	bl	8000540 <__aeabi_dmul>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	4630      	mov	r0, r6
 800a8ae:	4639      	mov	r1, r7
 800a8b0:	f7f5 fc8e 	bl	80001d0 <__aeabi_dsub>
 800a8b4:	460f      	mov	r7, r1
 800a8b6:	4606      	mov	r6, r0
 800a8b8:	f7f6 f8f2 	bl	8000aa0 <__aeabi_d2iz>
 800a8bc:	9007      	str	r0, [sp, #28]
 800a8be:	f7f5 fdd5 	bl	800046c <__aeabi_i2d>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	4630      	mov	r0, r6
 800a8c8:	4639      	mov	r1, r7
 800a8ca:	f7f5 fc81 	bl	80001d0 <__aeabi_dsub>
 800a8ce:	f1ba 0f00 	cmp.w	sl, #0
 800a8d2:	4606      	mov	r6, r0
 800a8d4:	460f      	mov	r7, r1
 800a8d6:	dd70      	ble.n	800a9ba <__kernel_rem_pio2+0x252>
 800a8d8:	1e62      	subs	r2, r4, #1
 800a8da:	ab0c      	add	r3, sp, #48	; 0x30
 800a8dc:	9d07      	ldr	r5, [sp, #28]
 800a8de:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a8e2:	f1ca 0118 	rsb	r1, sl, #24
 800a8e6:	fa40 f301 	asr.w	r3, r0, r1
 800a8ea:	441d      	add	r5, r3
 800a8ec:	408b      	lsls	r3, r1
 800a8ee:	1ac0      	subs	r0, r0, r3
 800a8f0:	ab0c      	add	r3, sp, #48	; 0x30
 800a8f2:	9507      	str	r5, [sp, #28]
 800a8f4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a8f8:	f1ca 0317 	rsb	r3, sl, #23
 800a8fc:	fa40 f303 	asr.w	r3, r0, r3
 800a900:	9302      	str	r3, [sp, #8]
 800a902:	9b02      	ldr	r3, [sp, #8]
 800a904:	2b00      	cmp	r3, #0
 800a906:	dd66      	ble.n	800a9d6 <__kernel_rem_pio2+0x26e>
 800a908:	9b07      	ldr	r3, [sp, #28]
 800a90a:	2200      	movs	r2, #0
 800a90c:	3301      	adds	r3, #1
 800a90e:	9307      	str	r3, [sp, #28]
 800a910:	4615      	mov	r5, r2
 800a912:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a916:	4294      	cmp	r4, r2
 800a918:	f300 8099 	bgt.w	800aa4e <__kernel_rem_pio2+0x2e6>
 800a91c:	f1ba 0f00 	cmp.w	sl, #0
 800a920:	dd07      	ble.n	800a932 <__kernel_rem_pio2+0x1ca>
 800a922:	f1ba 0f01 	cmp.w	sl, #1
 800a926:	f000 80a5 	beq.w	800aa74 <__kernel_rem_pio2+0x30c>
 800a92a:	f1ba 0f02 	cmp.w	sl, #2
 800a92e:	f000 80c1 	beq.w	800aab4 <__kernel_rem_pio2+0x34c>
 800a932:	9b02      	ldr	r3, [sp, #8]
 800a934:	2b02      	cmp	r3, #2
 800a936:	d14e      	bne.n	800a9d6 <__kernel_rem_pio2+0x26e>
 800a938:	4632      	mov	r2, r6
 800a93a:	463b      	mov	r3, r7
 800a93c:	4958      	ldr	r1, [pc, #352]	; (800aaa0 <__kernel_rem_pio2+0x338>)
 800a93e:	2000      	movs	r0, #0
 800a940:	f7f5 fc46 	bl	80001d0 <__aeabi_dsub>
 800a944:	4606      	mov	r6, r0
 800a946:	460f      	mov	r7, r1
 800a948:	2d00      	cmp	r5, #0
 800a94a:	d044      	beq.n	800a9d6 <__kernel_rem_pio2+0x26e>
 800a94c:	4650      	mov	r0, sl
 800a94e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800aa90 <__kernel_rem_pio2+0x328>
 800a952:	f000 fc29 	bl	800b1a8 <scalbn>
 800a956:	4630      	mov	r0, r6
 800a958:	4639      	mov	r1, r7
 800a95a:	ec53 2b10 	vmov	r2, r3, d0
 800a95e:	f7f5 fc37 	bl	80001d0 <__aeabi_dsub>
 800a962:	4606      	mov	r6, r0
 800a964:	460f      	mov	r7, r1
 800a966:	e036      	b.n	800a9d6 <__kernel_rem_pio2+0x26e>
 800a968:	4b4e      	ldr	r3, [pc, #312]	; (800aaa4 <__kernel_rem_pio2+0x33c>)
 800a96a:	2200      	movs	r2, #0
 800a96c:	4630      	mov	r0, r6
 800a96e:	4639      	mov	r1, r7
 800a970:	f7f5 fde6 	bl	8000540 <__aeabi_dmul>
 800a974:	f7f6 f894 	bl	8000aa0 <__aeabi_d2iz>
 800a978:	f7f5 fd78 	bl	800046c <__aeabi_i2d>
 800a97c:	4b4a      	ldr	r3, [pc, #296]	; (800aaa8 <__kernel_rem_pio2+0x340>)
 800a97e:	2200      	movs	r2, #0
 800a980:	4680      	mov	r8, r0
 800a982:	4689      	mov	r9, r1
 800a984:	f7f5 fddc 	bl	8000540 <__aeabi_dmul>
 800a988:	4602      	mov	r2, r0
 800a98a:	460b      	mov	r3, r1
 800a98c:	4630      	mov	r0, r6
 800a98e:	4639      	mov	r1, r7
 800a990:	f7f5 fc1e 	bl	80001d0 <__aeabi_dsub>
 800a994:	f7f6 f884 	bl	8000aa0 <__aeabi_d2iz>
 800a998:	9b02      	ldr	r3, [sp, #8]
 800a99a:	f843 0b04 	str.w	r0, [r3], #4
 800a99e:	3d01      	subs	r5, #1
 800a9a0:	9302      	str	r3, [sp, #8]
 800a9a2:	ab70      	add	r3, sp, #448	; 0x1c0
 800a9a4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ac:	4640      	mov	r0, r8
 800a9ae:	4649      	mov	r1, r9
 800a9b0:	f7f5 fc10 	bl	80001d4 <__adddf3>
 800a9b4:	4606      	mov	r6, r0
 800a9b6:	460f      	mov	r7, r1
 800a9b8:	e75b      	b.n	800a872 <__kernel_rem_pio2+0x10a>
 800a9ba:	d105      	bne.n	800a9c8 <__kernel_rem_pio2+0x260>
 800a9bc:	1e63      	subs	r3, r4, #1
 800a9be:	aa0c      	add	r2, sp, #48	; 0x30
 800a9c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a9c4:	15c3      	asrs	r3, r0, #23
 800a9c6:	e79b      	b.n	800a900 <__kernel_rem_pio2+0x198>
 800a9c8:	4b38      	ldr	r3, [pc, #224]	; (800aaac <__kernel_rem_pio2+0x344>)
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f7f6 f83e 	bl	8000a4c <__aeabi_dcmpge>
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	d139      	bne.n	800aa48 <__kernel_rem_pio2+0x2e0>
 800a9d4:	9002      	str	r0, [sp, #8]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	2300      	movs	r3, #0
 800a9da:	4630      	mov	r0, r6
 800a9dc:	4639      	mov	r1, r7
 800a9de:	f7f6 f817 	bl	8000a10 <__aeabi_dcmpeq>
 800a9e2:	2800      	cmp	r0, #0
 800a9e4:	f000 80b4 	beq.w	800ab50 <__kernel_rem_pio2+0x3e8>
 800a9e8:	f104 3bff 	add.w	fp, r4, #4294967295
 800a9ec:	465b      	mov	r3, fp
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	9904      	ldr	r1, [sp, #16]
 800a9f2:	428b      	cmp	r3, r1
 800a9f4:	da65      	bge.n	800aac2 <__kernel_rem_pio2+0x35a>
 800a9f6:	2a00      	cmp	r2, #0
 800a9f8:	d07b      	beq.n	800aaf2 <__kernel_rem_pio2+0x38a>
 800a9fa:	ab0c      	add	r3, sp, #48	; 0x30
 800a9fc:	f1aa 0a18 	sub.w	sl, sl, #24
 800aa00:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f000 80a0 	beq.w	800ab4a <__kernel_rem_pio2+0x3e2>
 800aa0a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800aa90 <__kernel_rem_pio2+0x328>
 800aa0e:	4650      	mov	r0, sl
 800aa10:	f000 fbca 	bl	800b1a8 <scalbn>
 800aa14:	4f23      	ldr	r7, [pc, #140]	; (800aaa4 <__kernel_rem_pio2+0x33c>)
 800aa16:	ec55 4b10 	vmov	r4, r5, d0
 800aa1a:	46d8      	mov	r8, fp
 800aa1c:	2600      	movs	r6, #0
 800aa1e:	f1b8 0f00 	cmp.w	r8, #0
 800aa22:	f280 80cf 	bge.w	800abc4 <__kernel_rem_pio2+0x45c>
 800aa26:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800aa88 <__kernel_rem_pio2+0x320>
 800aa2a:	465f      	mov	r7, fp
 800aa2c:	f04f 0800 	mov.w	r8, #0
 800aa30:	2f00      	cmp	r7, #0
 800aa32:	f2c0 80fd 	blt.w	800ac30 <__kernel_rem_pio2+0x4c8>
 800aa36:	ab70      	add	r3, sp, #448	; 0x1c0
 800aa38:	f8df a074 	ldr.w	sl, [pc, #116]	; 800aab0 <__kernel_rem_pio2+0x348>
 800aa3c:	ec55 4b18 	vmov	r4, r5, d8
 800aa40:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800aa44:	2600      	movs	r6, #0
 800aa46:	e0e5      	b.n	800ac14 <__kernel_rem_pio2+0x4ac>
 800aa48:	2302      	movs	r3, #2
 800aa4a:	9302      	str	r3, [sp, #8]
 800aa4c:	e75c      	b.n	800a908 <__kernel_rem_pio2+0x1a0>
 800aa4e:	f8db 3000 	ldr.w	r3, [fp]
 800aa52:	b955      	cbnz	r5, 800aa6a <__kernel_rem_pio2+0x302>
 800aa54:	b123      	cbz	r3, 800aa60 <__kernel_rem_pio2+0x2f8>
 800aa56:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800aa5a:	f8cb 3000 	str.w	r3, [fp]
 800aa5e:	2301      	movs	r3, #1
 800aa60:	3201      	adds	r2, #1
 800aa62:	f10b 0b04 	add.w	fp, fp, #4
 800aa66:	461d      	mov	r5, r3
 800aa68:	e755      	b.n	800a916 <__kernel_rem_pio2+0x1ae>
 800aa6a:	1acb      	subs	r3, r1, r3
 800aa6c:	f8cb 3000 	str.w	r3, [fp]
 800aa70:	462b      	mov	r3, r5
 800aa72:	e7f5      	b.n	800aa60 <__kernel_rem_pio2+0x2f8>
 800aa74:	1e62      	subs	r2, r4, #1
 800aa76:	ab0c      	add	r3, sp, #48	; 0x30
 800aa78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa7c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800aa80:	a90c      	add	r1, sp, #48	; 0x30
 800aa82:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800aa86:	e754      	b.n	800a932 <__kernel_rem_pio2+0x1ca>
	...
 800aa94:	3ff00000 	.word	0x3ff00000
 800aa98:	0800b538 	.word	0x0800b538
 800aa9c:	40200000 	.word	0x40200000
 800aaa0:	3ff00000 	.word	0x3ff00000
 800aaa4:	3e700000 	.word	0x3e700000
 800aaa8:	41700000 	.word	0x41700000
 800aaac:	3fe00000 	.word	0x3fe00000
 800aab0:	0800b4f8 	.word	0x0800b4f8
 800aab4:	1e62      	subs	r2, r4, #1
 800aab6:	ab0c      	add	r3, sp, #48	; 0x30
 800aab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aabc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800aac0:	e7de      	b.n	800aa80 <__kernel_rem_pio2+0x318>
 800aac2:	a90c      	add	r1, sp, #48	; 0x30
 800aac4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800aac8:	3b01      	subs	r3, #1
 800aaca:	430a      	orrs	r2, r1
 800aacc:	e790      	b.n	800a9f0 <__kernel_rem_pio2+0x288>
 800aace:	3301      	adds	r3, #1
 800aad0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800aad4:	2900      	cmp	r1, #0
 800aad6:	d0fa      	beq.n	800aace <__kernel_rem_pio2+0x366>
 800aad8:	9a08      	ldr	r2, [sp, #32]
 800aada:	18e3      	adds	r3, r4, r3
 800aadc:	18a6      	adds	r6, r4, r2
 800aade:	aa20      	add	r2, sp, #128	; 0x80
 800aae0:	1c65      	adds	r5, r4, #1
 800aae2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800aae6:	9302      	str	r3, [sp, #8]
 800aae8:	9b02      	ldr	r3, [sp, #8]
 800aaea:	42ab      	cmp	r3, r5
 800aaec:	da04      	bge.n	800aaf8 <__kernel_rem_pio2+0x390>
 800aaee:	461c      	mov	r4, r3
 800aaf0:	e6b5      	b.n	800a85e <__kernel_rem_pio2+0xf6>
 800aaf2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	e7eb      	b.n	800aad0 <__kernel_rem_pio2+0x368>
 800aaf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aafa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aafe:	f7f5 fcb5 	bl	800046c <__aeabi_i2d>
 800ab02:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ab06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab08:	46b3      	mov	fp, r6
 800ab0a:	461c      	mov	r4, r3
 800ab0c:	2700      	movs	r7, #0
 800ab0e:	f04f 0800 	mov.w	r8, #0
 800ab12:	f04f 0900 	mov.w	r9, #0
 800ab16:	9b06      	ldr	r3, [sp, #24]
 800ab18:	429f      	cmp	r7, r3
 800ab1a:	dd06      	ble.n	800ab2a <__kernel_rem_pio2+0x3c2>
 800ab1c:	ab70      	add	r3, sp, #448	; 0x1c0
 800ab1e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ab22:	e9c3 8900 	strd	r8, r9, [r3]
 800ab26:	3501      	adds	r5, #1
 800ab28:	e7de      	b.n	800aae8 <__kernel_rem_pio2+0x380>
 800ab2a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ab2e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ab32:	f7f5 fd05 	bl	8000540 <__aeabi_dmul>
 800ab36:	4602      	mov	r2, r0
 800ab38:	460b      	mov	r3, r1
 800ab3a:	4640      	mov	r0, r8
 800ab3c:	4649      	mov	r1, r9
 800ab3e:	f7f5 fb49 	bl	80001d4 <__adddf3>
 800ab42:	3701      	adds	r7, #1
 800ab44:	4680      	mov	r8, r0
 800ab46:	4689      	mov	r9, r1
 800ab48:	e7e5      	b.n	800ab16 <__kernel_rem_pio2+0x3ae>
 800ab4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab4e:	e754      	b.n	800a9fa <__kernel_rem_pio2+0x292>
 800ab50:	ec47 6b10 	vmov	d0, r6, r7
 800ab54:	f1ca 0000 	rsb	r0, sl, #0
 800ab58:	f000 fb26 	bl	800b1a8 <scalbn>
 800ab5c:	ec57 6b10 	vmov	r6, r7, d0
 800ab60:	4b9f      	ldr	r3, [pc, #636]	; (800ade0 <__kernel_rem_pio2+0x678>)
 800ab62:	ee10 0a10 	vmov	r0, s0
 800ab66:	2200      	movs	r2, #0
 800ab68:	4639      	mov	r1, r7
 800ab6a:	f7f5 ff6f 	bl	8000a4c <__aeabi_dcmpge>
 800ab6e:	b300      	cbz	r0, 800abb2 <__kernel_rem_pio2+0x44a>
 800ab70:	4b9c      	ldr	r3, [pc, #624]	; (800ade4 <__kernel_rem_pio2+0x67c>)
 800ab72:	2200      	movs	r2, #0
 800ab74:	4630      	mov	r0, r6
 800ab76:	4639      	mov	r1, r7
 800ab78:	f7f5 fce2 	bl	8000540 <__aeabi_dmul>
 800ab7c:	f7f5 ff90 	bl	8000aa0 <__aeabi_d2iz>
 800ab80:	4605      	mov	r5, r0
 800ab82:	f7f5 fc73 	bl	800046c <__aeabi_i2d>
 800ab86:	4b96      	ldr	r3, [pc, #600]	; (800ade0 <__kernel_rem_pio2+0x678>)
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f7f5 fcd9 	bl	8000540 <__aeabi_dmul>
 800ab8e:	460b      	mov	r3, r1
 800ab90:	4602      	mov	r2, r0
 800ab92:	4639      	mov	r1, r7
 800ab94:	4630      	mov	r0, r6
 800ab96:	f7f5 fb1b 	bl	80001d0 <__aeabi_dsub>
 800ab9a:	f7f5 ff81 	bl	8000aa0 <__aeabi_d2iz>
 800ab9e:	f104 0b01 	add.w	fp, r4, #1
 800aba2:	ab0c      	add	r3, sp, #48	; 0x30
 800aba4:	f10a 0a18 	add.w	sl, sl, #24
 800aba8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800abac:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800abb0:	e72b      	b.n	800aa0a <__kernel_rem_pio2+0x2a2>
 800abb2:	4630      	mov	r0, r6
 800abb4:	4639      	mov	r1, r7
 800abb6:	f7f5 ff73 	bl	8000aa0 <__aeabi_d2iz>
 800abba:	ab0c      	add	r3, sp, #48	; 0x30
 800abbc:	46a3      	mov	fp, r4
 800abbe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800abc2:	e722      	b.n	800aa0a <__kernel_rem_pio2+0x2a2>
 800abc4:	ab70      	add	r3, sp, #448	; 0x1c0
 800abc6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800abca:	ab0c      	add	r3, sp, #48	; 0x30
 800abcc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800abd0:	f7f5 fc4c 	bl	800046c <__aeabi_i2d>
 800abd4:	4622      	mov	r2, r4
 800abd6:	462b      	mov	r3, r5
 800abd8:	f7f5 fcb2 	bl	8000540 <__aeabi_dmul>
 800abdc:	4632      	mov	r2, r6
 800abde:	e9c9 0100 	strd	r0, r1, [r9]
 800abe2:	463b      	mov	r3, r7
 800abe4:	4620      	mov	r0, r4
 800abe6:	4629      	mov	r1, r5
 800abe8:	f7f5 fcaa 	bl	8000540 <__aeabi_dmul>
 800abec:	f108 38ff 	add.w	r8, r8, #4294967295
 800abf0:	4604      	mov	r4, r0
 800abf2:	460d      	mov	r5, r1
 800abf4:	e713      	b.n	800aa1e <__kernel_rem_pio2+0x2b6>
 800abf6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800abfa:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800abfe:	f7f5 fc9f 	bl	8000540 <__aeabi_dmul>
 800ac02:	4602      	mov	r2, r0
 800ac04:	460b      	mov	r3, r1
 800ac06:	4620      	mov	r0, r4
 800ac08:	4629      	mov	r1, r5
 800ac0a:	f7f5 fae3 	bl	80001d4 <__adddf3>
 800ac0e:	3601      	adds	r6, #1
 800ac10:	4604      	mov	r4, r0
 800ac12:	460d      	mov	r5, r1
 800ac14:	9b04      	ldr	r3, [sp, #16]
 800ac16:	429e      	cmp	r6, r3
 800ac18:	dc01      	bgt.n	800ac1e <__kernel_rem_pio2+0x4b6>
 800ac1a:	45b0      	cmp	r8, r6
 800ac1c:	daeb      	bge.n	800abf6 <__kernel_rem_pio2+0x48e>
 800ac1e:	ab48      	add	r3, sp, #288	; 0x120
 800ac20:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ac24:	e9c3 4500 	strd	r4, r5, [r3]
 800ac28:	3f01      	subs	r7, #1
 800ac2a:	f108 0801 	add.w	r8, r8, #1
 800ac2e:	e6ff      	b.n	800aa30 <__kernel_rem_pio2+0x2c8>
 800ac30:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ac32:	2b02      	cmp	r3, #2
 800ac34:	dc0b      	bgt.n	800ac4e <__kernel_rem_pio2+0x4e6>
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	dc6e      	bgt.n	800ad18 <__kernel_rem_pio2+0x5b0>
 800ac3a:	d045      	beq.n	800acc8 <__kernel_rem_pio2+0x560>
 800ac3c:	9b07      	ldr	r3, [sp, #28]
 800ac3e:	f003 0007 	and.w	r0, r3, #7
 800ac42:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800ac46:	ecbd 8b02 	vpop	{d8}
 800ac4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac4e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ac50:	2b03      	cmp	r3, #3
 800ac52:	d1f3      	bne.n	800ac3c <__kernel_rem_pio2+0x4d4>
 800ac54:	ab48      	add	r3, sp, #288	; 0x120
 800ac56:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800ac5a:	46d0      	mov	r8, sl
 800ac5c:	46d9      	mov	r9, fp
 800ac5e:	f1b9 0f00 	cmp.w	r9, #0
 800ac62:	f1a8 0808 	sub.w	r8, r8, #8
 800ac66:	dc64      	bgt.n	800ad32 <__kernel_rem_pio2+0x5ca>
 800ac68:	465c      	mov	r4, fp
 800ac6a:	2c01      	cmp	r4, #1
 800ac6c:	f1aa 0a08 	sub.w	sl, sl, #8
 800ac70:	dc7e      	bgt.n	800ad70 <__kernel_rem_pio2+0x608>
 800ac72:	2000      	movs	r0, #0
 800ac74:	2100      	movs	r1, #0
 800ac76:	f1bb 0f01 	cmp.w	fp, #1
 800ac7a:	f300 8097 	bgt.w	800adac <__kernel_rem_pio2+0x644>
 800ac7e:	9b02      	ldr	r3, [sp, #8]
 800ac80:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800ac84:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	f040 8099 	bne.w	800adc0 <__kernel_rem_pio2+0x658>
 800ac8e:	9b01      	ldr	r3, [sp, #4]
 800ac90:	e9c3 5600 	strd	r5, r6, [r3]
 800ac94:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800ac98:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ac9c:	e7ce      	b.n	800ac3c <__kernel_rem_pio2+0x4d4>
 800ac9e:	ab48      	add	r3, sp, #288	; 0x120
 800aca0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800aca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca8:	f7f5 fa94 	bl	80001d4 <__adddf3>
 800acac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800acb0:	f1bb 0f00 	cmp.w	fp, #0
 800acb4:	daf3      	bge.n	800ac9e <__kernel_rem_pio2+0x536>
 800acb6:	9b02      	ldr	r3, [sp, #8]
 800acb8:	b113      	cbz	r3, 800acc0 <__kernel_rem_pio2+0x558>
 800acba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800acbe:	4619      	mov	r1, r3
 800acc0:	9b01      	ldr	r3, [sp, #4]
 800acc2:	e9c3 0100 	strd	r0, r1, [r3]
 800acc6:	e7b9      	b.n	800ac3c <__kernel_rem_pio2+0x4d4>
 800acc8:	2000      	movs	r0, #0
 800acca:	2100      	movs	r1, #0
 800accc:	e7f0      	b.n	800acb0 <__kernel_rem_pio2+0x548>
 800acce:	ab48      	add	r3, sp, #288	; 0x120
 800acd0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800acd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd8:	f7f5 fa7c 	bl	80001d4 <__adddf3>
 800acdc:	3c01      	subs	r4, #1
 800acde:	2c00      	cmp	r4, #0
 800ace0:	daf5      	bge.n	800acce <__kernel_rem_pio2+0x566>
 800ace2:	9b02      	ldr	r3, [sp, #8]
 800ace4:	b1e3      	cbz	r3, 800ad20 <__kernel_rem_pio2+0x5b8>
 800ace6:	4602      	mov	r2, r0
 800ace8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800acec:	9c01      	ldr	r4, [sp, #4]
 800acee:	e9c4 2300 	strd	r2, r3, [r4]
 800acf2:	4602      	mov	r2, r0
 800acf4:	460b      	mov	r3, r1
 800acf6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800acfa:	f7f5 fa69 	bl	80001d0 <__aeabi_dsub>
 800acfe:	ad4a      	add	r5, sp, #296	; 0x128
 800ad00:	2401      	movs	r4, #1
 800ad02:	45a3      	cmp	fp, r4
 800ad04:	da0f      	bge.n	800ad26 <__kernel_rem_pio2+0x5be>
 800ad06:	9b02      	ldr	r3, [sp, #8]
 800ad08:	b113      	cbz	r3, 800ad10 <__kernel_rem_pio2+0x5a8>
 800ad0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad0e:	4619      	mov	r1, r3
 800ad10:	9b01      	ldr	r3, [sp, #4]
 800ad12:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ad16:	e791      	b.n	800ac3c <__kernel_rem_pio2+0x4d4>
 800ad18:	465c      	mov	r4, fp
 800ad1a:	2000      	movs	r0, #0
 800ad1c:	2100      	movs	r1, #0
 800ad1e:	e7de      	b.n	800acde <__kernel_rem_pio2+0x576>
 800ad20:	4602      	mov	r2, r0
 800ad22:	460b      	mov	r3, r1
 800ad24:	e7e2      	b.n	800acec <__kernel_rem_pio2+0x584>
 800ad26:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800ad2a:	f7f5 fa53 	bl	80001d4 <__adddf3>
 800ad2e:	3401      	adds	r4, #1
 800ad30:	e7e7      	b.n	800ad02 <__kernel_rem_pio2+0x59a>
 800ad32:	e9d8 4500 	ldrd	r4, r5, [r8]
 800ad36:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	4632      	mov	r2, r6
 800ad3e:	463b      	mov	r3, r7
 800ad40:	4629      	mov	r1, r5
 800ad42:	f7f5 fa47 	bl	80001d4 <__adddf3>
 800ad46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	4620      	mov	r0, r4
 800ad50:	4629      	mov	r1, r5
 800ad52:	f7f5 fa3d 	bl	80001d0 <__aeabi_dsub>
 800ad56:	4632      	mov	r2, r6
 800ad58:	463b      	mov	r3, r7
 800ad5a:	f7f5 fa3b 	bl	80001d4 <__adddf3>
 800ad5e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ad62:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800ad66:	ed88 7b00 	vstr	d7, [r8]
 800ad6a:	f109 39ff 	add.w	r9, r9, #4294967295
 800ad6e:	e776      	b.n	800ac5e <__kernel_rem_pio2+0x4f6>
 800ad70:	e9da 8900 	ldrd	r8, r9, [sl]
 800ad74:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ad78:	4640      	mov	r0, r8
 800ad7a:	4632      	mov	r2, r6
 800ad7c:	463b      	mov	r3, r7
 800ad7e:	4649      	mov	r1, r9
 800ad80:	f7f5 fa28 	bl	80001d4 <__adddf3>
 800ad84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad88:	4602      	mov	r2, r0
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	4640      	mov	r0, r8
 800ad8e:	4649      	mov	r1, r9
 800ad90:	f7f5 fa1e 	bl	80001d0 <__aeabi_dsub>
 800ad94:	4632      	mov	r2, r6
 800ad96:	463b      	mov	r3, r7
 800ad98:	f7f5 fa1c 	bl	80001d4 <__adddf3>
 800ad9c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ada0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ada4:	ed8a 7b00 	vstr	d7, [sl]
 800ada8:	3c01      	subs	r4, #1
 800adaa:	e75e      	b.n	800ac6a <__kernel_rem_pio2+0x502>
 800adac:	ab48      	add	r3, sp, #288	; 0x120
 800adae:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800adb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb6:	f7f5 fa0d 	bl	80001d4 <__adddf3>
 800adba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800adbe:	e75a      	b.n	800ac76 <__kernel_rem_pio2+0x50e>
 800adc0:	9b01      	ldr	r3, [sp, #4]
 800adc2:	9a01      	ldr	r2, [sp, #4]
 800adc4:	601d      	str	r5, [r3, #0]
 800adc6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800adca:	605c      	str	r4, [r3, #4]
 800adcc:	609f      	str	r7, [r3, #8]
 800adce:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800add2:	60d3      	str	r3, [r2, #12]
 800add4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800add8:	6110      	str	r0, [r2, #16]
 800adda:	6153      	str	r3, [r2, #20]
 800addc:	e72e      	b.n	800ac3c <__kernel_rem_pio2+0x4d4>
 800adde:	bf00      	nop
 800ade0:	41700000 	.word	0x41700000
 800ade4:	3e700000 	.word	0x3e700000

0800ade8 <__kernel_sin>:
 800ade8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adec:	ed2d 8b04 	vpush	{d8-d9}
 800adf0:	eeb0 8a41 	vmov.f32	s16, s2
 800adf4:	eef0 8a61 	vmov.f32	s17, s3
 800adf8:	ec55 4b10 	vmov	r4, r5, d0
 800adfc:	b083      	sub	sp, #12
 800adfe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ae02:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ae06:	9001      	str	r0, [sp, #4]
 800ae08:	da06      	bge.n	800ae18 <__kernel_sin+0x30>
 800ae0a:	ee10 0a10 	vmov	r0, s0
 800ae0e:	4629      	mov	r1, r5
 800ae10:	f7f5 fe46 	bl	8000aa0 <__aeabi_d2iz>
 800ae14:	2800      	cmp	r0, #0
 800ae16:	d051      	beq.n	800aebc <__kernel_sin+0xd4>
 800ae18:	4622      	mov	r2, r4
 800ae1a:	462b      	mov	r3, r5
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	4629      	mov	r1, r5
 800ae20:	f7f5 fb8e 	bl	8000540 <__aeabi_dmul>
 800ae24:	4682      	mov	sl, r0
 800ae26:	468b      	mov	fp, r1
 800ae28:	4602      	mov	r2, r0
 800ae2a:	460b      	mov	r3, r1
 800ae2c:	4620      	mov	r0, r4
 800ae2e:	4629      	mov	r1, r5
 800ae30:	f7f5 fb86 	bl	8000540 <__aeabi_dmul>
 800ae34:	a341      	add	r3, pc, #260	; (adr r3, 800af3c <__kernel_sin+0x154>)
 800ae36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3a:	4680      	mov	r8, r0
 800ae3c:	4689      	mov	r9, r1
 800ae3e:	4650      	mov	r0, sl
 800ae40:	4659      	mov	r1, fp
 800ae42:	f7f5 fb7d 	bl	8000540 <__aeabi_dmul>
 800ae46:	a33f      	add	r3, pc, #252	; (adr r3, 800af44 <__kernel_sin+0x15c>)
 800ae48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4c:	f7f5 f9c0 	bl	80001d0 <__aeabi_dsub>
 800ae50:	4652      	mov	r2, sl
 800ae52:	465b      	mov	r3, fp
 800ae54:	f7f5 fb74 	bl	8000540 <__aeabi_dmul>
 800ae58:	a33c      	add	r3, pc, #240	; (adr r3, 800af4c <__kernel_sin+0x164>)
 800ae5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5e:	f7f5 f9b9 	bl	80001d4 <__adddf3>
 800ae62:	4652      	mov	r2, sl
 800ae64:	465b      	mov	r3, fp
 800ae66:	f7f5 fb6b 	bl	8000540 <__aeabi_dmul>
 800ae6a:	a33a      	add	r3, pc, #232	; (adr r3, 800af54 <__kernel_sin+0x16c>)
 800ae6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae70:	f7f5 f9ae 	bl	80001d0 <__aeabi_dsub>
 800ae74:	4652      	mov	r2, sl
 800ae76:	465b      	mov	r3, fp
 800ae78:	f7f5 fb62 	bl	8000540 <__aeabi_dmul>
 800ae7c:	a337      	add	r3, pc, #220	; (adr r3, 800af5c <__kernel_sin+0x174>)
 800ae7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae82:	f7f5 f9a7 	bl	80001d4 <__adddf3>
 800ae86:	9b01      	ldr	r3, [sp, #4]
 800ae88:	4606      	mov	r6, r0
 800ae8a:	460f      	mov	r7, r1
 800ae8c:	b9eb      	cbnz	r3, 800aeca <__kernel_sin+0xe2>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	460b      	mov	r3, r1
 800ae92:	4650      	mov	r0, sl
 800ae94:	4659      	mov	r1, fp
 800ae96:	f7f5 fb53 	bl	8000540 <__aeabi_dmul>
 800ae9a:	a325      	add	r3, pc, #148	; (adr r3, 800af30 <__kernel_sin+0x148>)
 800ae9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea0:	f7f5 f996 	bl	80001d0 <__aeabi_dsub>
 800aea4:	4642      	mov	r2, r8
 800aea6:	464b      	mov	r3, r9
 800aea8:	f7f5 fb4a 	bl	8000540 <__aeabi_dmul>
 800aeac:	4602      	mov	r2, r0
 800aeae:	460b      	mov	r3, r1
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	4629      	mov	r1, r5
 800aeb4:	f7f5 f98e 	bl	80001d4 <__adddf3>
 800aeb8:	4604      	mov	r4, r0
 800aeba:	460d      	mov	r5, r1
 800aebc:	ec45 4b10 	vmov	d0, r4, r5
 800aec0:	b003      	add	sp, #12
 800aec2:	ecbd 8b04 	vpop	{d8-d9}
 800aec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeca:	4b1b      	ldr	r3, [pc, #108]	; (800af38 <__kernel_sin+0x150>)
 800aecc:	ec51 0b18 	vmov	r0, r1, d8
 800aed0:	2200      	movs	r2, #0
 800aed2:	f7f5 fb35 	bl	8000540 <__aeabi_dmul>
 800aed6:	4632      	mov	r2, r6
 800aed8:	ec41 0b19 	vmov	d9, r0, r1
 800aedc:	463b      	mov	r3, r7
 800aede:	4640      	mov	r0, r8
 800aee0:	4649      	mov	r1, r9
 800aee2:	f7f5 fb2d 	bl	8000540 <__aeabi_dmul>
 800aee6:	4602      	mov	r2, r0
 800aee8:	460b      	mov	r3, r1
 800aeea:	ec51 0b19 	vmov	r0, r1, d9
 800aeee:	f7f5 f96f 	bl	80001d0 <__aeabi_dsub>
 800aef2:	4652      	mov	r2, sl
 800aef4:	465b      	mov	r3, fp
 800aef6:	f7f5 fb23 	bl	8000540 <__aeabi_dmul>
 800aefa:	ec53 2b18 	vmov	r2, r3, d8
 800aefe:	f7f5 f967 	bl	80001d0 <__aeabi_dsub>
 800af02:	a30b      	add	r3, pc, #44	; (adr r3, 800af30 <__kernel_sin+0x148>)
 800af04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af08:	4606      	mov	r6, r0
 800af0a:	460f      	mov	r7, r1
 800af0c:	4640      	mov	r0, r8
 800af0e:	4649      	mov	r1, r9
 800af10:	f7f5 fb16 	bl	8000540 <__aeabi_dmul>
 800af14:	4602      	mov	r2, r0
 800af16:	460b      	mov	r3, r1
 800af18:	4630      	mov	r0, r6
 800af1a:	4639      	mov	r1, r7
 800af1c:	f7f5 f95a 	bl	80001d4 <__adddf3>
 800af20:	4602      	mov	r2, r0
 800af22:	460b      	mov	r3, r1
 800af24:	4620      	mov	r0, r4
 800af26:	4629      	mov	r1, r5
 800af28:	f7f5 f952 	bl	80001d0 <__aeabi_dsub>
 800af2c:	e7c4      	b.n	800aeb8 <__kernel_sin+0xd0>
 800af2e:	bf00      	nop
 800af30:	55555549 	.word	0x55555549
 800af34:	3fc55555 	.word	0x3fc55555
 800af38:	3fe00000 	.word	0x3fe00000
 800af3c:	5acfd57c 	.word	0x5acfd57c
 800af40:	3de5d93a 	.word	0x3de5d93a
 800af44:	8a2b9ceb 	.word	0x8a2b9ceb
 800af48:	3e5ae5e6 	.word	0x3e5ae5e6
 800af4c:	57b1fe7d 	.word	0x57b1fe7d
 800af50:	3ec71de3 	.word	0x3ec71de3
 800af54:	19c161d5 	.word	0x19c161d5
 800af58:	3f2a01a0 	.word	0x3f2a01a0
 800af5c:	1110f8a6 	.word	0x1110f8a6
 800af60:	3f811111 	.word	0x3f811111

0800af64 <finite>:
 800af64:	b082      	sub	sp, #8
 800af66:	ed8d 0b00 	vstr	d0, [sp]
 800af6a:	9801      	ldr	r0, [sp, #4]
 800af6c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800af70:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800af74:	0fc0      	lsrs	r0, r0, #31
 800af76:	b002      	add	sp, #8
 800af78:	4770      	bx	lr
 800af7a:	0000      	movs	r0, r0
 800af7c:	0000      	movs	r0, r0
	...

0800af80 <floor>:
 800af80:	ec51 0b10 	vmov	r0, r1, d0
 800af84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af88:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800af8c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800af90:	2e13      	cmp	r6, #19
 800af92:	ee10 5a10 	vmov	r5, s0
 800af96:	ee10 8a10 	vmov	r8, s0
 800af9a:	460c      	mov	r4, r1
 800af9c:	dc32      	bgt.n	800b004 <floor+0x84>
 800af9e:	2e00      	cmp	r6, #0
 800afa0:	da14      	bge.n	800afcc <floor+0x4c>
 800afa2:	a333      	add	r3, pc, #204	; (adr r3, 800b070 <floor+0xf0>)
 800afa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa8:	f7f5 f914 	bl	80001d4 <__adddf3>
 800afac:	2200      	movs	r2, #0
 800afae:	2300      	movs	r3, #0
 800afb0:	f7f5 fd56 	bl	8000a60 <__aeabi_dcmpgt>
 800afb4:	b138      	cbz	r0, 800afc6 <floor+0x46>
 800afb6:	2c00      	cmp	r4, #0
 800afb8:	da57      	bge.n	800b06a <floor+0xea>
 800afba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800afbe:	431d      	orrs	r5, r3
 800afc0:	d001      	beq.n	800afc6 <floor+0x46>
 800afc2:	4c2d      	ldr	r4, [pc, #180]	; (800b078 <floor+0xf8>)
 800afc4:	2500      	movs	r5, #0
 800afc6:	4621      	mov	r1, r4
 800afc8:	4628      	mov	r0, r5
 800afca:	e025      	b.n	800b018 <floor+0x98>
 800afcc:	4f2b      	ldr	r7, [pc, #172]	; (800b07c <floor+0xfc>)
 800afce:	4137      	asrs	r7, r6
 800afd0:	ea01 0307 	and.w	r3, r1, r7
 800afd4:	4303      	orrs	r3, r0
 800afd6:	d01f      	beq.n	800b018 <floor+0x98>
 800afd8:	a325      	add	r3, pc, #148	; (adr r3, 800b070 <floor+0xf0>)
 800afda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afde:	f7f5 f8f9 	bl	80001d4 <__adddf3>
 800afe2:	2200      	movs	r2, #0
 800afe4:	2300      	movs	r3, #0
 800afe6:	f7f5 fd3b 	bl	8000a60 <__aeabi_dcmpgt>
 800afea:	2800      	cmp	r0, #0
 800afec:	d0eb      	beq.n	800afc6 <floor+0x46>
 800afee:	2c00      	cmp	r4, #0
 800aff0:	bfbe      	ittt	lt
 800aff2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800aff6:	fa43 f606 	asrlt.w	r6, r3, r6
 800affa:	19a4      	addlt	r4, r4, r6
 800affc:	ea24 0407 	bic.w	r4, r4, r7
 800b000:	2500      	movs	r5, #0
 800b002:	e7e0      	b.n	800afc6 <floor+0x46>
 800b004:	2e33      	cmp	r6, #51	; 0x33
 800b006:	dd0b      	ble.n	800b020 <floor+0xa0>
 800b008:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b00c:	d104      	bne.n	800b018 <floor+0x98>
 800b00e:	ee10 2a10 	vmov	r2, s0
 800b012:	460b      	mov	r3, r1
 800b014:	f7f5 f8de 	bl	80001d4 <__adddf3>
 800b018:	ec41 0b10 	vmov	d0, r0, r1
 800b01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b020:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b024:	f04f 33ff 	mov.w	r3, #4294967295
 800b028:	fa23 f707 	lsr.w	r7, r3, r7
 800b02c:	4207      	tst	r7, r0
 800b02e:	d0f3      	beq.n	800b018 <floor+0x98>
 800b030:	a30f      	add	r3, pc, #60	; (adr r3, 800b070 <floor+0xf0>)
 800b032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b036:	f7f5 f8cd 	bl	80001d4 <__adddf3>
 800b03a:	2200      	movs	r2, #0
 800b03c:	2300      	movs	r3, #0
 800b03e:	f7f5 fd0f 	bl	8000a60 <__aeabi_dcmpgt>
 800b042:	2800      	cmp	r0, #0
 800b044:	d0bf      	beq.n	800afc6 <floor+0x46>
 800b046:	2c00      	cmp	r4, #0
 800b048:	da02      	bge.n	800b050 <floor+0xd0>
 800b04a:	2e14      	cmp	r6, #20
 800b04c:	d103      	bne.n	800b056 <floor+0xd6>
 800b04e:	3401      	adds	r4, #1
 800b050:	ea25 0507 	bic.w	r5, r5, r7
 800b054:	e7b7      	b.n	800afc6 <floor+0x46>
 800b056:	2301      	movs	r3, #1
 800b058:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b05c:	fa03 f606 	lsl.w	r6, r3, r6
 800b060:	4435      	add	r5, r6
 800b062:	4545      	cmp	r5, r8
 800b064:	bf38      	it	cc
 800b066:	18e4      	addcc	r4, r4, r3
 800b068:	e7f2      	b.n	800b050 <floor+0xd0>
 800b06a:	2500      	movs	r5, #0
 800b06c:	462c      	mov	r4, r5
 800b06e:	e7aa      	b.n	800afc6 <floor+0x46>
 800b070:	8800759c 	.word	0x8800759c
 800b074:	7e37e43c 	.word	0x7e37e43c
 800b078:	bff00000 	.word	0xbff00000
 800b07c:	000fffff 	.word	0x000fffff

0800b080 <nan>:
 800b080:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b088 <nan+0x8>
 800b084:	4770      	bx	lr
 800b086:	bf00      	nop
 800b088:	00000000 	.word	0x00000000
 800b08c:	7ff80000 	.word	0x7ff80000

0800b090 <rint>:
 800b090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b092:	ec51 0b10 	vmov	r0, r1, d0
 800b096:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b09a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800b09e:	2e13      	cmp	r6, #19
 800b0a0:	ee10 4a10 	vmov	r4, s0
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800b0aa:	dc58      	bgt.n	800b15e <rint+0xce>
 800b0ac:	2e00      	cmp	r6, #0
 800b0ae:	da2b      	bge.n	800b108 <rint+0x78>
 800b0b0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800b0b4:	4302      	orrs	r2, r0
 800b0b6:	d023      	beq.n	800b100 <rint+0x70>
 800b0b8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800b0bc:	4302      	orrs	r2, r0
 800b0be:	4254      	negs	r4, r2
 800b0c0:	4314      	orrs	r4, r2
 800b0c2:	0c4b      	lsrs	r3, r1, #17
 800b0c4:	0b24      	lsrs	r4, r4, #12
 800b0c6:	045b      	lsls	r3, r3, #17
 800b0c8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800b0cc:	ea44 0103 	orr.w	r1, r4, r3
 800b0d0:	4b32      	ldr	r3, [pc, #200]	; (800b19c <rint+0x10c>)
 800b0d2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b0d6:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b0da:	4602      	mov	r2, r0
 800b0dc:	460b      	mov	r3, r1
 800b0de:	4630      	mov	r0, r6
 800b0e0:	4639      	mov	r1, r7
 800b0e2:	f7f5 f877 	bl	80001d4 <__adddf3>
 800b0e6:	e9cd 0100 	strd	r0, r1, [sp]
 800b0ea:	463b      	mov	r3, r7
 800b0ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b0f0:	4632      	mov	r2, r6
 800b0f2:	f7f5 f86d 	bl	80001d0 <__aeabi_dsub>
 800b0f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b0fa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800b0fe:	4639      	mov	r1, r7
 800b100:	ec41 0b10 	vmov	d0, r0, r1
 800b104:	b003      	add	sp, #12
 800b106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b108:	4a25      	ldr	r2, [pc, #148]	; (800b1a0 <rint+0x110>)
 800b10a:	4132      	asrs	r2, r6
 800b10c:	ea01 0702 	and.w	r7, r1, r2
 800b110:	4307      	orrs	r7, r0
 800b112:	d0f5      	beq.n	800b100 <rint+0x70>
 800b114:	0851      	lsrs	r1, r2, #1
 800b116:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800b11a:	4314      	orrs	r4, r2
 800b11c:	d00c      	beq.n	800b138 <rint+0xa8>
 800b11e:	ea23 0201 	bic.w	r2, r3, r1
 800b122:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b126:	2e13      	cmp	r6, #19
 800b128:	fa43 f606 	asr.w	r6, r3, r6
 800b12c:	bf0c      	ite	eq
 800b12e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800b132:	2400      	movne	r4, #0
 800b134:	ea42 0306 	orr.w	r3, r2, r6
 800b138:	4918      	ldr	r1, [pc, #96]	; (800b19c <rint+0x10c>)
 800b13a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800b13e:	4622      	mov	r2, r4
 800b140:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b144:	4620      	mov	r0, r4
 800b146:	4629      	mov	r1, r5
 800b148:	f7f5 f844 	bl	80001d4 <__adddf3>
 800b14c:	e9cd 0100 	strd	r0, r1, [sp]
 800b150:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b154:	4622      	mov	r2, r4
 800b156:	462b      	mov	r3, r5
 800b158:	f7f5 f83a 	bl	80001d0 <__aeabi_dsub>
 800b15c:	e7d0      	b.n	800b100 <rint+0x70>
 800b15e:	2e33      	cmp	r6, #51	; 0x33
 800b160:	dd07      	ble.n	800b172 <rint+0xe2>
 800b162:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b166:	d1cb      	bne.n	800b100 <rint+0x70>
 800b168:	ee10 2a10 	vmov	r2, s0
 800b16c:	f7f5 f832 	bl	80001d4 <__adddf3>
 800b170:	e7c6      	b.n	800b100 <rint+0x70>
 800b172:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800b176:	f04f 36ff 	mov.w	r6, #4294967295
 800b17a:	40d6      	lsrs	r6, r2
 800b17c:	4230      	tst	r0, r6
 800b17e:	d0bf      	beq.n	800b100 <rint+0x70>
 800b180:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800b184:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800b188:	bf1f      	itttt	ne
 800b18a:	ea24 0101 	bicne.w	r1, r4, r1
 800b18e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800b192:	fa44 f202 	asrne.w	r2, r4, r2
 800b196:	ea41 0402 	orrne.w	r4, r1, r2
 800b19a:	e7cd      	b.n	800b138 <rint+0xa8>
 800b19c:	0800b548 	.word	0x0800b548
 800b1a0:	000fffff 	.word	0x000fffff
 800b1a4:	00000000 	.word	0x00000000

0800b1a8 <scalbn>:
 800b1a8:	b570      	push	{r4, r5, r6, lr}
 800b1aa:	ec55 4b10 	vmov	r4, r5, d0
 800b1ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b1b2:	4606      	mov	r6, r0
 800b1b4:	462b      	mov	r3, r5
 800b1b6:	b99a      	cbnz	r2, 800b1e0 <scalbn+0x38>
 800b1b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b1bc:	4323      	orrs	r3, r4
 800b1be:	d036      	beq.n	800b22e <scalbn+0x86>
 800b1c0:	4b39      	ldr	r3, [pc, #228]	; (800b2a8 <scalbn+0x100>)
 800b1c2:	4629      	mov	r1, r5
 800b1c4:	ee10 0a10 	vmov	r0, s0
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f7f5 f9b9 	bl	8000540 <__aeabi_dmul>
 800b1ce:	4b37      	ldr	r3, [pc, #220]	; (800b2ac <scalbn+0x104>)
 800b1d0:	429e      	cmp	r6, r3
 800b1d2:	4604      	mov	r4, r0
 800b1d4:	460d      	mov	r5, r1
 800b1d6:	da10      	bge.n	800b1fa <scalbn+0x52>
 800b1d8:	a32b      	add	r3, pc, #172	; (adr r3, 800b288 <scalbn+0xe0>)
 800b1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1de:	e03a      	b.n	800b256 <scalbn+0xae>
 800b1e0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b1e4:	428a      	cmp	r2, r1
 800b1e6:	d10c      	bne.n	800b202 <scalbn+0x5a>
 800b1e8:	ee10 2a10 	vmov	r2, s0
 800b1ec:	4620      	mov	r0, r4
 800b1ee:	4629      	mov	r1, r5
 800b1f0:	f7f4 fff0 	bl	80001d4 <__adddf3>
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	460d      	mov	r5, r1
 800b1f8:	e019      	b.n	800b22e <scalbn+0x86>
 800b1fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b1fe:	460b      	mov	r3, r1
 800b200:	3a36      	subs	r2, #54	; 0x36
 800b202:	4432      	add	r2, r6
 800b204:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b208:	428a      	cmp	r2, r1
 800b20a:	dd08      	ble.n	800b21e <scalbn+0x76>
 800b20c:	2d00      	cmp	r5, #0
 800b20e:	a120      	add	r1, pc, #128	; (adr r1, 800b290 <scalbn+0xe8>)
 800b210:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b214:	da1c      	bge.n	800b250 <scalbn+0xa8>
 800b216:	a120      	add	r1, pc, #128	; (adr r1, 800b298 <scalbn+0xf0>)
 800b218:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b21c:	e018      	b.n	800b250 <scalbn+0xa8>
 800b21e:	2a00      	cmp	r2, #0
 800b220:	dd08      	ble.n	800b234 <scalbn+0x8c>
 800b222:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b226:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b22a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b22e:	ec45 4b10 	vmov	d0, r4, r5
 800b232:	bd70      	pop	{r4, r5, r6, pc}
 800b234:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b238:	da19      	bge.n	800b26e <scalbn+0xc6>
 800b23a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b23e:	429e      	cmp	r6, r3
 800b240:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b244:	dd0a      	ble.n	800b25c <scalbn+0xb4>
 800b246:	a112      	add	r1, pc, #72	; (adr r1, 800b290 <scalbn+0xe8>)
 800b248:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d1e2      	bne.n	800b216 <scalbn+0x6e>
 800b250:	a30f      	add	r3, pc, #60	; (adr r3, 800b290 <scalbn+0xe8>)
 800b252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b256:	f7f5 f973 	bl	8000540 <__aeabi_dmul>
 800b25a:	e7cb      	b.n	800b1f4 <scalbn+0x4c>
 800b25c:	a10a      	add	r1, pc, #40	; (adr r1, 800b288 <scalbn+0xe0>)
 800b25e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d0b8      	beq.n	800b1d8 <scalbn+0x30>
 800b266:	a10e      	add	r1, pc, #56	; (adr r1, 800b2a0 <scalbn+0xf8>)
 800b268:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b26c:	e7b4      	b.n	800b1d8 <scalbn+0x30>
 800b26e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b272:	3236      	adds	r2, #54	; 0x36
 800b274:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b278:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b27c:	4620      	mov	r0, r4
 800b27e:	4b0c      	ldr	r3, [pc, #48]	; (800b2b0 <scalbn+0x108>)
 800b280:	2200      	movs	r2, #0
 800b282:	e7e8      	b.n	800b256 <scalbn+0xae>
 800b284:	f3af 8000 	nop.w
 800b288:	c2f8f359 	.word	0xc2f8f359
 800b28c:	01a56e1f 	.word	0x01a56e1f
 800b290:	8800759c 	.word	0x8800759c
 800b294:	7e37e43c 	.word	0x7e37e43c
 800b298:	8800759c 	.word	0x8800759c
 800b29c:	fe37e43c 	.word	0xfe37e43c
 800b2a0:	c2f8f359 	.word	0xc2f8f359
 800b2a4:	81a56e1f 	.word	0x81a56e1f
 800b2a8:	43500000 	.word	0x43500000
 800b2ac:	ffff3cb0 	.word	0xffff3cb0
 800b2b0:	3c900000 	.word	0x3c900000

0800b2b4 <_init>:
 800b2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2b6:	bf00      	nop
 800b2b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2ba:	bc08      	pop	{r3}
 800b2bc:	469e      	mov	lr, r3
 800b2be:	4770      	bx	lr

0800b2c0 <_fini>:
 800b2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2c2:	bf00      	nop
 800b2c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2c6:	bc08      	pop	{r3}
 800b2c8:	469e      	mov	lr, r3
 800b2ca:	4770      	bx	lr
