
motor_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a0  0800ef08  0800ef08  0001ef08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f6a8  0800f6a8  00020524  2**0
                  CONTENTS
  4 .ARM          00000008  0800f6a8  0800f6a8  0001f6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f6b0  0800f6b0  00020524  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f6b0  0800f6b0  0001f6b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f6b4  0800f6b4  0001f6b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000524  20000000  0800f6b8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020524  2**0
                  CONTENTS
 10 .bss          0000081c  20000524  20000524  00020524  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000d40  20000d40  00020524  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020524  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001eef0  00000000  00000000  00020554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004118  00000000  00000000  0003f444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001420  00000000  00000000  00043560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012a8  00000000  00000000  00044980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000256b5  00000000  00000000  00045c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018b39  00000000  00000000  0006b2dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2313  00000000  00000000  00083e16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00156129  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006cc4  00000000  00000000  0015617c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000524 	.word	0x20000524
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800eeec 	.word	0x0800eeec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000528 	.word	0x20000528
 80001cc:	0800eeec 	.word	0x0800eeec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <initPins>:
// Z_step_pin = PA3
// Z_dir0_pin = PA3

// Z endstop = PE4

void initPins(){
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  TIM6->PSC = 89;
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <initPins+0x28>)
 8000ff2:	2259      	movs	r2, #89	; 0x59
 8000ff4:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 0xffff;
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <initPins+0x28>)
 8000ff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ffc:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM6->CR1 |= (1 << 0);
 8000ffe:	4b05      	ldr	r3, [pc, #20]	; (8001014 <initPins+0x28>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a04      	ldr	r2, [pc, #16]	; (8001014 <initPins+0x28>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6013      	str	r3, [r2, #0]
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	40001000 	.word	0x40001000

08001018 <pinWrite>:

void pinWrite(axis writeAxis, pin writePin, int state){
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	603a      	str	r2, [r7, #0]
 8001022:	71fb      	strb	r3, [r7, #7]
 8001024:	460b      	mov	r3, r1
 8001026:	71bb      	strb	r3, [r7, #6]
	int shift = state * 16;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	011b      	lsls	r3, r3, #4
 800102c:	60fb      	str	r3, [r7, #12]
  switch(writeAxis){
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	2b02      	cmp	r3, #2
 8001032:	d062      	beq.n	80010fa <pinWrite+0xe2>
 8001034:	2b02      	cmp	r3, #2
 8001036:	f300 8087 	bgt.w	8001148 <pinWrite+0x130>
 800103a:	2b00      	cmp	r3, #0
 800103c:	d002      	beq.n	8001044 <pinWrite+0x2c>
 800103e:	2b01      	cmp	r3, #1
 8001040:	d02f      	beq.n	80010a2 <pinWrite+0x8a>
		  case dir1:
			break;
		}
		break;
  }
}
 8001042:	e081      	b.n	8001148 <pinWrite+0x130>
      switch(writePin){
 8001044:	79bb      	ldrb	r3, [r7, #6]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d01e      	beq.n	8001088 <pinWrite+0x70>
 800104a:	2b02      	cmp	r3, #2
 800104c:	dc77      	bgt.n	800113e <pinWrite+0x126>
 800104e:	2b00      	cmp	r3, #0
 8001050:	d002      	beq.n	8001058 <pinWrite+0x40>
 8001052:	2b01      	cmp	r3, #1
 8001054:	d00c      	beq.n	8001070 <pinWrite+0x58>
      break;
 8001056:	e072      	b.n	800113e <pinWrite+0x126>
        	GPIOC->BSRR |= (1<<14) << shift;
 8001058:	4b3e      	ldr	r3, [pc, #248]	; (8001154 <pinWrite+0x13c>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001060:	68fa      	ldr	r2, [r7, #12]
 8001062:	fa01 f202 	lsl.w	r2, r1, r2
 8001066:	4611      	mov	r1, r2
 8001068:	4a3a      	ldr	r2, [pc, #232]	; (8001154 <pinWrite+0x13c>)
 800106a:	430b      	orrs	r3, r1
 800106c:	6193      	str	r3, [r2, #24]
          break;
 800106e:	e017      	b.n	80010a0 <pinWrite+0x88>
        	GPIOC->BSRR |= (1<<15) << shift;
 8001070:	4b38      	ldr	r3, [pc, #224]	; (8001154 <pinWrite+0x13c>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001078:	68fa      	ldr	r2, [r7, #12]
 800107a:	fa01 f202 	lsl.w	r2, r1, r2
 800107e:	4611      	mov	r1, r2
 8001080:	4a34      	ldr	r2, [pc, #208]	; (8001154 <pinWrite+0x13c>)
 8001082:	430b      	orrs	r3, r1
 8001084:	6193      	str	r3, [r2, #24]
          break;
 8001086:	e00b      	b.n	80010a0 <pinWrite+0x88>
        	GPIOC->BSRR |= (1<<13) << shift;
 8001088:	4b32      	ldr	r3, [pc, #200]	; (8001154 <pinWrite+0x13c>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	fa01 f202 	lsl.w	r2, r1, r2
 8001096:	4611      	mov	r1, r2
 8001098:	4a2e      	ldr	r2, [pc, #184]	; (8001154 <pinWrite+0x13c>)
 800109a:	430b      	orrs	r3, r1
 800109c:	6193      	str	r3, [r2, #24]
          break;
 800109e:	bf00      	nop
      break;
 80010a0:	e04d      	b.n	800113e <pinWrite+0x126>
      switch(writePin){
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d01c      	beq.n	80010e2 <pinWrite+0xca>
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	dc4a      	bgt.n	8001142 <pinWrite+0x12a>
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d002      	beq.n	80010b6 <pinWrite+0x9e>
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d00b      	beq.n	80010cc <pinWrite+0xb4>
      break;
 80010b4:	e045      	b.n	8001142 <pinWrite+0x12a>
        	GPIOC->BSRR |= (1<<5) << shift;
 80010b6:	4b27      	ldr	r3, [pc, #156]	; (8001154 <pinWrite+0x13c>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	2120      	movs	r1, #32
 80010bc:	68fa      	ldr	r2, [r7, #12]
 80010be:	fa01 f202 	lsl.w	r2, r1, r2
 80010c2:	4611      	mov	r1, r2
 80010c4:	4a23      	ldr	r2, [pc, #140]	; (8001154 <pinWrite+0x13c>)
 80010c6:	430b      	orrs	r3, r1
 80010c8:	6193      	str	r3, [r2, #24]
          break;
 80010ca:	e015      	b.n	80010f8 <pinWrite+0xe0>
        	GPIOA->BSRR |= (1<<1) << shift;
 80010cc:	4b22      	ldr	r3, [pc, #136]	; (8001158 <pinWrite+0x140>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	2102      	movs	r1, #2
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	fa01 f202 	lsl.w	r2, r1, r2
 80010d8:	4611      	mov	r1, r2
 80010da:	4a1f      	ldr	r2, [pc, #124]	; (8001158 <pinWrite+0x140>)
 80010dc:	430b      	orrs	r3, r1
 80010de:	6193      	str	r3, [r2, #24]
          break;
 80010e0:	e00a      	b.n	80010f8 <pinWrite+0xe0>
        	GPIOA->BSRR |= (1<<2) << shift;
 80010e2:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <pinWrite+0x140>)
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	2104      	movs	r1, #4
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	fa01 f202 	lsl.w	r2, r1, r2
 80010ee:	4611      	mov	r1, r2
 80010f0:	4a19      	ldr	r2, [pc, #100]	; (8001158 <pinWrite+0x140>)
 80010f2:	430b      	orrs	r3, r1
 80010f4:	6193      	str	r3, [r2, #24]
          break;
 80010f6:	bf00      	nop
      break;
 80010f8:	e023      	b.n	8001142 <pinWrite+0x12a>
		switch(writePin){
 80010fa:	79bb      	ldrb	r3, [r7, #6]
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d01c      	beq.n	800113a <pinWrite+0x122>
 8001100:	2b02      	cmp	r3, #2
 8001102:	dc20      	bgt.n	8001146 <pinWrite+0x12e>
 8001104:	2b00      	cmp	r3, #0
 8001106:	d002      	beq.n	800110e <pinWrite+0xf6>
 8001108:	2b01      	cmp	r3, #1
 800110a:	d00b      	beq.n	8001124 <pinWrite+0x10c>
		break;
 800110c:	e01b      	b.n	8001146 <pinWrite+0x12e>
			GPIOA->BSRR |= (1<<5) << shift;
 800110e:	4b12      	ldr	r3, [pc, #72]	; (8001158 <pinWrite+0x140>)
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	2120      	movs	r1, #32
 8001114:	68fa      	ldr	r2, [r7, #12]
 8001116:	fa01 f202 	lsl.w	r2, r1, r2
 800111a:	4611      	mov	r1, r2
 800111c:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <pinWrite+0x140>)
 800111e:	430b      	orrs	r3, r1
 8001120:	6193      	str	r3, [r2, #24]
			break;
 8001122:	e00b      	b.n	800113c <pinWrite+0x124>
			GPIOA->BSRR |= (1<<3) << shift;
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <pinWrite+0x140>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	2108      	movs	r1, #8
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	fa01 f202 	lsl.w	r2, r1, r2
 8001130:	4611      	mov	r1, r2
 8001132:	4a09      	ldr	r2, [pc, #36]	; (8001158 <pinWrite+0x140>)
 8001134:	430b      	orrs	r3, r1
 8001136:	6193      	str	r3, [r2, #24]
			break;
 8001138:	e000      	b.n	800113c <pinWrite+0x124>
			break;
 800113a:	bf00      	nop
		break;
 800113c:	e003      	b.n	8001146 <pinWrite+0x12e>
      break;
 800113e:	bf00      	nop
 8001140:	e002      	b.n	8001148 <pinWrite+0x130>
      break;
 8001142:	bf00      	nop
 8001144:	e000      	b.n	8001148 <pinWrite+0x130>
		break;
 8001146:	bf00      	nop
}
 8001148:	bf00      	nop
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	40020800 	.word	0x40020800
 8001158:	40020000 	.word	0x40020000

0800115c <setMagnet>:

int checkEndstop(){
	return GPIOC->IDR & (1 << 8);
}

void setMagnet(int state){
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	int shift = state * 16;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	011b      	lsls	r3, r3, #4
 8001168:	60fb      	str	r3, [r7, #12]
	GPIOE->BSRR |= (1<<9) << shift;
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <setMagnet+0x30>)
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	fa01 f202 	lsl.w	r2, r1, r2
 8001178:	4611      	mov	r1, r2
 800117a:	4a04      	ldr	r2, [pc, #16]	; (800118c <setMagnet+0x30>)
 800117c:	430b      	orrs	r3, r1
 800117e:	6193      	str	r3, [r2, #24]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	40021000 	.word	0x40021000

08001190 <delayMicro>:

void delayMicro(long time){
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	TIM6->CNT = 0;
 8001198:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <delayMicro+0x28>)
 800119a:	2200      	movs	r2, #0
 800119c:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM6->CNT < time){}
 800119e:	bf00      	nop
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <delayMicro+0x28>)
 80011a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d3fa      	bcc.n	80011a0 <delayMicro+0x10>
}
 80011aa:	bf00      	nop
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	40001000 	.word	0x40001000

080011bc <getMessage>:
char messageBuffer[20];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	messageReceived = 1;
}

void getMessage(char* buffer){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	char incomingChar;
	strcpy(buffer, "");
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
	while (incomingChar != '\n') {
 80011ca:	e010      	b.n	80011ee <getMessage+0x32>
		HAL_UART_Receive(&huart3, (uint8_t*) &incomingChar, 1, 10);
 80011cc:	f107 010f 	add.w	r1, r7, #15
 80011d0:	230a      	movs	r3, #10
 80011d2:	2201      	movs	r2, #1
 80011d4:	480a      	ldr	r0, [pc, #40]	; (8001200 <getMessage+0x44>)
 80011d6:	f004 ff02 	bl	8005fde <HAL_UART_Receive>
		if(incomingChar != '\b'){
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d006      	beq.n	80011ee <getMessage+0x32>
			strncat(buffer, &incomingChar,1);
 80011e0:	f107 030f 	add.w	r3, r7, #15
 80011e4:	2201      	movs	r2, #1
 80011e6:	4619      	mov	r1, r3
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f008 fca9 	bl	8009b40 <strncat>
	while (incomingChar != '\n') {
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	2b0a      	cmp	r3, #10
 80011f2:	d1eb      	bne.n	80011cc <getMessage+0x10>
		}
	}
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200005b0 	.word	0x200005b0

08001204 <printMessage>:

void printMessage(char* buffer){
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i<strlen(buffer); i++){
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	e00e      	b.n	8001230 <printMessage+0x2c>
		HAL_UART_Transmit (&huart3, (uint8_t*) buffer+i, 1, 10);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	18d1      	adds	r1, r2, r3
 8001218:	230a      	movs	r3, #10
 800121a:	2201      	movs	r2, #1
 800121c:	480c      	ldr	r0, [pc, #48]	; (8001250 <printMessage+0x4c>)
 800121e:	f004 fe4c 	bl	8005eba <HAL_UART_Transmit>
		delayMicro(pow(2,10));
 8001222:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001226:	f7ff ffb3 	bl	8001190 <delayMicro>
	for(int i = 0; i<strlen(buffer); i++){
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	3301      	adds	r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7fe ffcd 	bl	80001d0 <strlen>
 8001236:	4602      	mov	r2, r0
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	429a      	cmp	r2, r3
 800123c:	d8e9      	bhi.n	8001212 <printMessage+0xe>
	}
	delayMicro(pow(2,15));
 800123e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001242:	f7ff ffa5 	bl	8001190 <delayMicro>

}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200005b0 	.word	0x200005b0

08001254 <parse>:

float acceleration = 800;
float speed = 120;
void parse(char *buffer){
 8001254:	b580      	push	{r7, lr}
 8001256:	b096      	sub	sp, #88	; 0x58
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	char message[50];
	char* s;
	switch(buffer[0]){
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	3b61      	subs	r3, #97	; 0x61
 8001262:	2b19      	cmp	r3, #25
 8001264:	f200 8102 	bhi.w	800146c <parse+0x218>
 8001268:	a201      	add	r2, pc, #4	; (adr r2, 8001270 <parse+0x1c>)
 800126a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800126e:	bf00      	nop
 8001270:	0800131f 	.word	0x0800131f
 8001274:	0800146d 	.word	0x0800146d
 8001278:	0800146d 	.word	0x0800146d
 800127c:	0800146d 	.word	0x0800146d
 8001280:	0800146d 	.word	0x0800146d
 8001284:	0800146d 	.word	0x0800146d
 8001288:	0800146d 	.word	0x0800146d
 800128c:	08001365 	.word	0x08001365
 8001290:	0800146d 	.word	0x0800146d
 8001294:	0800146d 	.word	0x0800146d
 8001298:	0800146d 	.word	0x0800146d
 800129c:	0800146d 	.word	0x0800146d
 80012a0:	080013d5 	.word	0x080013d5
 80012a4:	0800146d 	.word	0x0800146d
 80012a8:	0800146d 	.word	0x0800146d
 80012ac:	0800146d 	.word	0x0800146d
 80012b0:	0800146d 	.word	0x0800146d
 80012b4:	0800146d 	.word	0x0800146d
 80012b8:	080012d9 	.word	0x080012d9
 80012bc:	0800146d 	.word	0x0800146d
 80012c0:	0800146d 	.word	0x0800146d
 80012c4:	0800146d 	.word	0x0800146d
 80012c8:	0800146d 	.word	0x0800146d
 80012cc:	0800146d 	.word	0x0800146d
 80012d0:	0800146d 	.word	0x0800146d
 80012d4:	08001381 	.word	0x08001381
		case 's':
			s = strtok(buffer, "=");
 80012d8:	4982      	ldr	r1, [pc, #520]	; (80014e4 <parse+0x290>)
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f009 fa76 	bl	800a7cc <strtok>
 80012e0:	6578      	str	r0, [r7, #84]	; 0x54
			s = strtok(NULL, "=");
 80012e2:	4980      	ldr	r1, [pc, #512]	; (80014e4 <parse+0x290>)
 80012e4:	2000      	movs	r0, #0
 80012e6:	f009 fa71 	bl	800a7cc <strtok>
 80012ea:	6578      	str	r0, [r7, #84]	; 0x54
			speed = atof(s);
 80012ec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80012ee:	f008 fb03 	bl	80098f8 <atof>
 80012f2:	ec53 2b10 	vmov	r2, r3, d0
 80012f6:	4610      	mov	r0, r2
 80012f8:	4619      	mov	r1, r3
 80012fa:	f7ff fc75 	bl	8000be8 <__aeabi_d2f>
 80012fe:	4603      	mov	r3, r0
 8001300:	4a79      	ldr	r2, [pc, #484]	; (80014e8 <parse+0x294>)
 8001302:	6013      	str	r3, [r2, #0]

			sprintf(message, "Speed is set to %s \r\n", s);
 8001304:	f107 0308 	add.w	r3, r7, #8
 8001308:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800130a:	4978      	ldr	r1, [pc, #480]	; (80014ec <parse+0x298>)
 800130c:	4618      	mov	r0, r3
 800130e:	f008 fbf7 	bl	8009b00 <siprintf>
			printMessage(message);
 8001312:	f107 0308 	add.w	r3, r7, #8
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff ff74 	bl	8001204 <printMessage>
			break;
 800131c:	e0de      	b.n	80014dc <parse+0x288>
		case 'a':
			s = strtok(buffer, "=");
 800131e:	4971      	ldr	r1, [pc, #452]	; (80014e4 <parse+0x290>)
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f009 fa53 	bl	800a7cc <strtok>
 8001326:	6578      	str	r0, [r7, #84]	; 0x54
			s = strtok(NULL, "=");
 8001328:	496e      	ldr	r1, [pc, #440]	; (80014e4 <parse+0x290>)
 800132a:	2000      	movs	r0, #0
 800132c:	f009 fa4e 	bl	800a7cc <strtok>
 8001330:	6578      	str	r0, [r7, #84]	; 0x54
			acceleration = atof(s);
 8001332:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001334:	f008 fae0 	bl	80098f8 <atof>
 8001338:	ec53 2b10 	vmov	r2, r3, d0
 800133c:	4610      	mov	r0, r2
 800133e:	4619      	mov	r1, r3
 8001340:	f7ff fc52 	bl	8000be8 <__aeabi_d2f>
 8001344:	4603      	mov	r3, r0
 8001346:	4a6a      	ldr	r2, [pc, #424]	; (80014f0 <parse+0x29c>)
 8001348:	6013      	str	r3, [r2, #0]

			sprintf(message, "Acceleration is set to %s \r\n", s);
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001350:	4968      	ldr	r1, [pc, #416]	; (80014f4 <parse+0x2a0>)
 8001352:	4618      	mov	r0, r3
 8001354:	f008 fbd4 	bl	8009b00 <siprintf>
			printMessage(message);
 8001358:	f107 0308 	add.w	r3, r7, #8
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff51 	bl	8001204 <printMessage>
			break;
 8001362:	e0bb      	b.n	80014dc <parse+0x288>
		case 'h':
			setHomeZ();
 8001364:	f000 ff86 	bl	8002274 <setHomeZ>
			sprintf(message, "Home set\r\n");
 8001368:	f107 0308 	add.w	r3, r7, #8
 800136c:	4962      	ldr	r1, [pc, #392]	; (80014f8 <parse+0x2a4>)
 800136e:	4618      	mov	r0, r3
 8001370:	f008 fbc6 	bl	8009b00 <siprintf>
			printMessage(message);
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff43 	bl	8001204 <printMessage>
			break;
 800137e:	e0ad      	b.n	80014dc <parse+0x288>
		case 'z':
			s = strtok(buffer, "=");
 8001380:	4958      	ldr	r1, [pc, #352]	; (80014e4 <parse+0x290>)
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f009 fa22 	bl	800a7cc <strtok>
 8001388:	6578      	str	r0, [r7, #84]	; 0x54
			s = strtok(NULL, "=");
 800138a:	4956      	ldr	r1, [pc, #344]	; (80014e4 <parse+0x290>)
 800138c:	2000      	movs	r0, #0
 800138e:	f009 fa1d 	bl	800a7cc <strtok>
 8001392:	6578      	str	r0, [r7, #84]	; 0x54
			float z = atof(s);
 8001394:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001396:	f008 faaf 	bl	80098f8 <atof>
 800139a:	ec53 2b10 	vmov	r2, r3, d0
 800139e:	4610      	mov	r0, r2
 80013a0:	4619      	mov	r1, r3
 80013a2:	f7ff fc21 	bl	8000be8 <__aeabi_d2f>
 80013a6:	4603      	mov	r3, r0
 80013a8:	653b      	str	r3, [r7, #80]	; 0x50
			moveZAbsolute(z,45,300);
 80013aa:	ed9f 1a54 	vldr	s2, [pc, #336]	; 80014fc <parse+0x2a8>
 80013ae:	eddf 0a54 	vldr	s1, [pc, #336]	; 8001500 <parse+0x2ac>
 80013b2:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 80013b6:	f000 fff7 	bl	80023a8 <moveZAbsolute>

			sprintf(message, "Z is set to %s \r\n", s);
 80013ba:	f107 0308 	add.w	r3, r7, #8
 80013be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80013c0:	4950      	ldr	r1, [pc, #320]	; (8001504 <parse+0x2b0>)
 80013c2:	4618      	mov	r0, r3
 80013c4:	f008 fb9c 	bl	8009b00 <siprintf>
			printMessage(message);
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff19 	bl	8001204 <printMessage>
			break;
 80013d2:	e083      	b.n	80014dc <parse+0x288>
		case 'm':
			sprintf(message, "Starting Move\r\n");
 80013d4:	f107 0308 	add.w	r3, r7, #8
 80013d8:	494b      	ldr	r1, [pc, #300]	; (8001508 <parse+0x2b4>)
 80013da:	4618      	mov	r0, r3
 80013dc:	f008 fb90 	bl	8009b00 <siprintf>
			printMessage(message);
 80013e0:	f107 0308 	add.w	r3, r7, #8
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff0d 	bl	8001204 <printMessage>

			s = strtok(buffer, " ");
 80013ea:	4948      	ldr	r1, [pc, #288]	; (800150c <parse+0x2b8>)
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f009 f9ed 	bl	800a7cc <strtok>
 80013f2:	6578      	str	r0, [r7, #84]	; 0x54
			s = strtok(NULL, ",");
 80013f4:	4946      	ldr	r1, [pc, #280]	; (8001510 <parse+0x2bc>)
 80013f6:	2000      	movs	r0, #0
 80013f8:	f009 f9e8 	bl	800a7cc <strtok>
 80013fc:	6578      	str	r0, [r7, #84]	; 0x54
			float x = atof(s);
 80013fe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001400:	f008 fa7a 	bl	80098f8 <atof>
 8001404:	ec53 2b10 	vmov	r2, r3, d0
 8001408:	4610      	mov	r0, r2
 800140a:	4619      	mov	r1, r3
 800140c:	f7ff fbec 	bl	8000be8 <__aeabi_d2f>
 8001410:	4603      	mov	r3, r0
 8001412:	64fb      	str	r3, [r7, #76]	; 0x4c
			s = strtok(NULL, ",");
 8001414:	493e      	ldr	r1, [pc, #248]	; (8001510 <parse+0x2bc>)
 8001416:	2000      	movs	r0, #0
 8001418:	f009 f9d8 	bl	800a7cc <strtok>
 800141c:	6578      	str	r0, [r7, #84]	; 0x54
			float y = atof(s);
 800141e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001420:	f008 fa6a 	bl	80098f8 <atof>
 8001424:	ec53 2b10 	vmov	r2, r3, d0
 8001428:	4610      	mov	r0, r2
 800142a:	4619      	mov	r1, r3
 800142c:	f7ff fbdc 	bl	8000be8 <__aeabi_d2f>
 8001430:	4603      	mov	r3, r0
 8001432:	64bb      	str	r3, [r7, #72]	; 0x48
			moveXYAbsolute(x,y,speed,acceleration);
 8001434:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <parse+0x294>)
 8001436:	edd3 7a00 	vldr	s15, [r3]
 800143a:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <parse+0x29c>)
 800143c:	ed93 7a00 	vldr	s14, [r3]
 8001440:	eef0 1a47 	vmov.f32	s3, s14
 8001444:	eeb0 1a67 	vmov.f32	s2, s15
 8001448:	edd7 0a12 	vldr	s1, [r7, #72]	; 0x48
 800144c:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8001450:	f000 ff1e 	bl	8002290 <moveXYAbsolute>

			sprintf(message, "Move Complete\r\n");
 8001454:	f107 0308 	add.w	r3, r7, #8
 8001458:	492e      	ldr	r1, [pc, #184]	; (8001514 <parse+0x2c0>)
 800145a:	4618      	mov	r0, r3
 800145c:	f008 fb50 	bl	8009b00 <siprintf>
			printMessage(message);
 8001460:	f107 0308 	add.w	r3, r7, #8
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fecd 	bl	8001204 <printMessage>
			break;
 800146a:	e037      	b.n	80014dc <parse+0x288>
		default:
			s = strtok(buffer,",/");
 800146c:	492a      	ldr	r1, [pc, #168]	; (8001518 <parse+0x2c4>)
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f009 f9ac 	bl	800a7cc <strtok>
 8001474:	6578      	str	r0, [r7, #84]	; 0x54
			while(s[0] != '$'){
 8001476:	e01f      	b.n	80014b8 <parse+0x264>
				int pieceIndex = atoi(s);
 8001478:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800147a:	f008 fa40 	bl	80098fe <atoi>
 800147e:	6478      	str	r0, [r7, #68]	; 0x44
				s = strtok(NULL, ",/");
 8001480:	4925      	ldr	r1, [pc, #148]	; (8001518 <parse+0x2c4>)
 8001482:	2000      	movs	r0, #0
 8001484:	f009 f9a2 	bl	800a7cc <strtok>
 8001488:	6578      	str	r0, [r7, #84]	; 0x54
				int startIndex = atoi(s);
 800148a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800148c:	f008 fa37 	bl	80098fe <atoi>
 8001490:	6438      	str	r0, [r7, #64]	; 0x40
				s = strtok(NULL, ",/");
 8001492:	4921      	ldr	r1, [pc, #132]	; (8001518 <parse+0x2c4>)
 8001494:	2000      	movs	r0, #0
 8001496:	f009 f999 	bl	800a7cc <strtok>
 800149a:	6578      	str	r0, [r7, #84]	; 0x54
				int endIndex = atoi(s);
 800149c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800149e:	f008 fa2e 	bl	80098fe <atoi>
 80014a2:	63f8      	str	r0, [r7, #60]	; 0x3c
				movePieceByIndex(startIndex, endIndex, pieceIndex);
 80014a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80014a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80014a8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80014aa:	f001 f87d 	bl	80025a8 <movePieceByIndex>
				s = strtok(NULL,",/");
 80014ae:	491a      	ldr	r1, [pc, #104]	; (8001518 <parse+0x2c4>)
 80014b0:	2000      	movs	r0, #0
 80014b2:	f009 f98b 	bl	800a7cc <strtok>
 80014b6:	6578      	str	r0, [r7, #84]	; 0x54
			while(s[0] != '$'){
 80014b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b24      	cmp	r3, #36	; 0x24
 80014be:	d1db      	bne.n	8001478 <parse+0x224>
			}
			moveToStandbyPosition();
 80014c0:	f001 f84c 	bl	800255c <moveToStandbyPosition>


			sprintf(message, "Move Complete\r\n");
 80014c4:	f107 0308 	add.w	r3, r7, #8
 80014c8:	4912      	ldr	r1, [pc, #72]	; (8001514 <parse+0x2c0>)
 80014ca:	4618      	mov	r0, r3
 80014cc:	f008 fb18 	bl	8009b00 <siprintf>
			printMessage(message);
 80014d0:	f107 0308 	add.w	r3, r7, #8
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fe95 	bl	8001204 <printMessage>
	}
}
 80014da:	bf00      	nop
 80014dc:	bf00      	nop
 80014de:	3758      	adds	r7, #88	; 0x58
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	0800ef08 	.word	0x0800ef08
 80014e8:	20000004 	.word	0x20000004
 80014ec:	0800ef0c 	.word	0x0800ef0c
 80014f0:	20000000 	.word	0x20000000
 80014f4:	0800ef24 	.word	0x0800ef24
 80014f8:	0800ef44 	.word	0x0800ef44
 80014fc:	43960000 	.word	0x43960000
 8001500:	42340000 	.word	0x42340000
 8001504:	0800ef50 	.word	0x0800ef50
 8001508:	0800ef64 	.word	0x0800ef64
 800150c:	0800ef74 	.word	0x0800ef74
 8001510:	0800ef78 	.word	0x0800ef78
 8001514:	0800ef7c 	.word	0x0800ef7c
 8001518:	0800ef8c 	.word	0x0800ef8c

0800151c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001520:	f001 fae6 	bl	8002af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001524:	f000 f826 	bl	8001574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001528:	f000 f910 	bl	800174c <MX_GPIO_Init>
  MX_USB_HOST_Init();
 800152c:	f007 fedc 	bl	80092e8 <MX_USB_HOST_Init>
  MX_TIM6_Init();
 8001530:	f000 f88c 	bl	800164c <MX_TIM6_Init>
  MX_DMA_Init();
 8001534:	f000 f8ea 	bl	800170c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001538:	f000 f8be 	bl	80016b8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	initPins();
 800153c:	f7ff fd56 	bl	8000fec <initPins>
	moveZAbsolute(TRAVEL_Z,50,300);
 8001540:	ed9f 1a08 	vldr	s2, [pc, #32]	; 8001564 <main+0x48>
 8001544:	eddf 0a08 	vldr	s1, [pc, #32]	; 8001568 <main+0x4c>
 8001548:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800156c <main+0x50>
 800154c:	f000 ff2c 	bl	80023a8 <moveZAbsolute>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001550:	f007 fef0 	bl	8009334 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    getMessage(messageBuffer);
 8001554:	4806      	ldr	r0, [pc, #24]	; (8001570 <main+0x54>)
 8001556:	f7ff fe31 	bl	80011bc <getMessage>
    parse(messageBuffer);
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <main+0x54>)
 800155c:	f7ff fe7a 	bl	8001254 <parse>
    MX_USB_HOST_Process();
 8001560:	e7f6      	b.n	8001550 <main+0x34>
 8001562:	bf00      	nop
 8001564:	43960000 	.word	0x43960000
 8001568:	42480000 	.word	0x42480000
 800156c:	43160000 	.word	0x43160000
 8001570:	2000063c 	.word	0x2000063c

08001574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b094      	sub	sp, #80	; 0x50
 8001578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157a:	f107 0320 	add.w	r3, r7, #32
 800157e:	2230      	movs	r2, #48	; 0x30
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f008 f9fa 	bl	800997c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	4b29      	ldr	r3, [pc, #164]	; (8001644 <SystemClock_Config+0xd0>)
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	4a28      	ldr	r2, [pc, #160]	; (8001644 <SystemClock_Config+0xd0>)
 80015a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a6:	6413      	str	r3, [r2, #64]	; 0x40
 80015a8:	4b26      	ldr	r3, [pc, #152]	; (8001644 <SystemClock_Config+0xd0>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015b4:	2300      	movs	r3, #0
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	4b23      	ldr	r3, [pc, #140]	; (8001648 <SystemClock_Config+0xd4>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a22      	ldr	r2, [pc, #136]	; (8001648 <SystemClock_Config+0xd4>)
 80015be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	4b20      	ldr	r3, [pc, #128]	; (8001648 <SystemClock_Config+0xd4>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80015d0:	2303      	movs	r3, #3
 80015d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015da:	2301      	movs	r3, #1
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015de:	2310      	movs	r3, #16
 80015e0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015e2:	2302      	movs	r3, #2
 80015e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015ec:	2304      	movs	r3, #4
 80015ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015f0:	23a8      	movs	r3, #168	; 0xa8
 80015f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015f4:	2302      	movs	r3, #2
 80015f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015f8:	2307      	movs	r3, #7
 80015fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015fc:	f107 0320 	add.w	r3, r7, #32
 8001600:	4618      	mov	r0, r3
 8001602:	f003 fe2d 	bl	8005260 <HAL_RCC_OscConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800160c:	f000 fa2e 	bl	8001a6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001610:	230f      	movs	r3, #15
 8001612:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001614:	2300      	movs	r3, #0
 8001616:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800161c:	2300      	movs	r3, #0
 800161e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001624:	f107 030c 	add.w	r3, r7, #12
 8001628:	2100      	movs	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f004 f890 	bl	8005750 <HAL_RCC_ClockConfig>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001636:	f000 fa19 	bl	8001a6c <Error_Handler>
  }
}
 800163a:	bf00      	nop
 800163c:	3750      	adds	r7, #80	; 0x50
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800
 8001648:	40007000 	.word	0x40007000

0800164c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001652:	463b      	mov	r3, r7
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <MX_TIM6_Init+0x64>)
 800165c:	4a15      	ldr	r2, [pc, #84]	; (80016b4 <MX_TIM6_Init+0x68>)
 800165e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <MX_TIM6_Init+0x64>)
 8001662:	2200      	movs	r2, #0
 8001664:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <MX_TIM6_Init+0x64>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800166c:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <MX_TIM6_Init+0x64>)
 800166e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001672:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001674:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MX_TIM6_Init+0x64>)
 8001676:	2200      	movs	r2, #0
 8001678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800167a:	480d      	ldr	r0, [pc, #52]	; (80016b0 <MX_TIM6_Init+0x64>)
 800167c:	f004 fa64 	bl	8005b48 <HAL_TIM_Base_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001686:	f000 f9f1 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168a:	2300      	movs	r3, #0
 800168c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001692:	463b      	mov	r3, r7
 8001694:	4619      	mov	r1, r3
 8001696:	4806      	ldr	r0, [pc, #24]	; (80016b0 <MX_TIM6_Init+0x64>)
 8001698:	f004 fb46 	bl	8005d28 <HAL_TIMEx_MasterConfigSynchronization>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80016a2:	f000 f9e3 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200005f4 	.word	0x200005f4
 80016b4:	40001000 	.word	0x40001000

080016b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <MX_USART3_UART_Init+0x4c>)
 80016be:	4a12      	ldr	r2, [pc, #72]	; (8001708 <MX_USART3_UART_Init+0x50>)
 80016c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <MX_USART3_UART_Init+0x4c>)
 80016c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <MX_USART3_UART_Init+0x4c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <MX_USART3_UART_Init+0x4c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <MX_USART3_UART_Init+0x4c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <MX_USART3_UART_Init+0x4c>)
 80016de:	220c      	movs	r2, #12
 80016e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <MX_USART3_UART_Init+0x4c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <MX_USART3_UART_Init+0x4c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <MX_USART3_UART_Init+0x4c>)
 80016f0:	f004 fb96 	bl	8005e20 <HAL_UART_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80016fa:	f000 f9b7 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200005b0 	.word	0x200005b0
 8001708:	40004800 	.word	0x40004800

0800170c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_DMA_Init+0x3c>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <MX_DMA_Init+0x3c>)
 800171c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <MX_DMA_Init+0x3c>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	200c      	movs	r0, #12
 8001734:	f001 fb4d 	bl	8002dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001738:	200c      	movs	r0, #12
 800173a:	f001 fb66 	bl	8002e0a <HAL_NVIC_EnableIRQ>

}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800

0800174c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08c      	sub	sp, #48	; 0x30
 8001750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001752:	f107 031c 	add.w	r3, r7, #28
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
 8001760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	61bb      	str	r3, [r7, #24]
 8001766:	4bb6      	ldr	r3, [pc, #728]	; (8001a40 <MX_GPIO_Init+0x2f4>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	4ab5      	ldr	r2, [pc, #724]	; (8001a40 <MX_GPIO_Init+0x2f4>)
 800176c:	f043 0310 	orr.w	r3, r3, #16
 8001770:	6313      	str	r3, [r2, #48]	; 0x30
 8001772:	4bb3      	ldr	r3, [pc, #716]	; (8001a40 <MX_GPIO_Init+0x2f4>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f003 0310 	and.w	r3, r3, #16
 800177a:	61bb      	str	r3, [r7, #24]
 800177c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	4baf      	ldr	r3, [pc, #700]	; (8001a40 <MX_GPIO_Init+0x2f4>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4aae      	ldr	r2, [pc, #696]	; (8001a40 <MX_GPIO_Init+0x2f4>)
 8001788:	f043 0304 	orr.w	r3, r3, #4
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4bac      	ldr	r3, [pc, #688]	; (8001a40 <MX_GPIO_Init+0x2f4>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	4ba8      	ldr	r3, [pc, #672]	; (8001a40 <MX_GPIO_Init+0x2f4>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4aa7      	ldr	r2, [pc, #668]	; (8001a40 <MX_GPIO_Init+0x2f4>)
 80017a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4ba5      	ldr	r3, [pc, #660]	; (8001a40 <MX_GPIO_Init+0x2f4>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4ba1      	ldr	r3, [pc, #644]	; (8001a40 <MX_GPIO_Init+0x2f4>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4aa0      	ldr	r2, [pc, #640]	; (8001a40 <MX_GPIO_Init+0x2f4>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b9e      	ldr	r3, [pc, #632]	; (8001a40 <MX_GPIO_Init+0x2f4>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	4b9a      	ldr	r3, [pc, #616]	; (8001a40 <MX_GPIO_Init+0x2f4>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a99      	ldr	r2, [pc, #612]	; (8001a40 <MX_GPIO_Init+0x2f4>)
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b97      	ldr	r3, [pc, #604]	; (8001a40 <MX_GPIO_Init+0x2f4>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	4b93      	ldr	r3, [pc, #588]	; (8001a40 <MX_GPIO_Init+0x2f4>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a92      	ldr	r2, [pc, #584]	; (8001a40 <MX_GPIO_Init+0x2f4>)
 80017f8:	f043 0308 	orr.w	r3, r3, #8
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b90      	ldr	r3, [pc, #576]	; (8001a40 <MX_GPIO_Init+0x2f4>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	f44f 7142 	mov.w	r1, #776	; 0x308
 8001810:	488c      	ldr	r0, [pc, #560]	; (8001a44 <MX_GPIO_Init+0x2f8>)
 8001812:	f001 ff9b 	bl	800374c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5
 8001816:	2200      	movs	r2, #0
 8001818:	f24e 01e0 	movw	r1, #57568	; 0xe0e0
 800181c:	488a      	ldr	r0, [pc, #552]	; (8001a48 <MX_GPIO_Init+0x2fc>)
 800181e:	f001 ff95 	bl	800374c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001822:	2201      	movs	r2, #1
 8001824:	2101      	movs	r1, #1
 8001826:	4888      	ldr	r0, [pc, #544]	; (8001a48 <MX_GPIO_Init+0x2fc>)
 8001828:	f001 ff90 	bl	800374c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 800182c:	2200      	movs	r2, #0
 800182e:	21ae      	movs	r1, #174	; 0xae
 8001830:	4886      	ldr	r0, [pc, #536]	; (8001a4c <MX_GPIO_Init+0x300>)
 8001832:	f001 ff8b 	bl	800374c <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001836:	2200      	movs	r2, #0
 8001838:	2102      	movs	r1, #2
 800183a:	4885      	ldr	r0, [pc, #532]	; (8001a50 <MX_GPIO_Init+0x304>)
 800183c:	f001 ff86 	bl	800374c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001840:	2200      	movs	r2, #0
 8001842:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001846:	4883      	ldr	r0, [pc, #524]	; (8001a54 <MX_GPIO_Init+0x308>)
 8001848:	f001 ff80 	bl	800374c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE8 PE9 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_8|GPIO_PIN_9;
 800184c:	f44f 7342 	mov.w	r3, #776	; 0x308
 8001850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001852:	2301      	movs	r3, #1
 8001854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	2300      	movs	r3, #0
 800185c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800185e:	f107 031c 	add.w	r3, r7, #28
 8001862:	4619      	mov	r1, r3
 8001864:	4877      	ldr	r0, [pc, #476]	; (8001a44 <MX_GPIO_Init+0x2f8>)
 8001866:	f001 fdd5 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 OTG_FS_PowerSwitchOn_Pin
                           PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|OTG_FS_PowerSwitchOn_Pin
 800186a:	f24e 03e1 	movw	r3, #57569	; 0xe0e1
 800186e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001870:	2301      	movs	r3, #1
 8001872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	2300      	movs	r3, #0
 800187a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800187c:	f107 031c 	add.w	r3, r7, #28
 8001880:	4619      	mov	r1, r3
 8001882:	4871      	ldr	r0, [pc, #452]	; (8001a48 <MX_GPIO_Init+0x2fc>)
 8001884:	f001 fdc6 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001888:	2308      	movs	r3, #8
 800188a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001894:	2300      	movs	r3, #0
 8001896:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001898:	2305      	movs	r3, #5
 800189a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800189c:	f107 031c 	add.w	r3, r7, #28
 80018a0:	4619      	mov	r1, r3
 80018a2:	4869      	ldr	r0, [pc, #420]	; (8001a48 <MX_GPIO_Init+0x2fc>)
 80018a4:	f001 fdb6 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018a8:	2301      	movs	r3, #1
 80018aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018ac:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80018b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018b6:	f107 031c 	add.w	r3, r7, #28
 80018ba:	4619      	mov	r1, r3
 80018bc:	4863      	ldr	r0, [pc, #396]	; (8001a4c <MX_GPIO_Init+0x300>)
 80018be:	f001 fda9 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA5
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 80018c2:	23ae      	movs	r3, #174	; 0xae
 80018c4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c6:	2301      	movs	r3, #1
 80018c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	4619      	mov	r1, r3
 80018d8:	485c      	ldr	r0, [pc, #368]	; (8001a4c <MX_GPIO_Init+0x300>)
 80018da:	f001 fd9b 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80018de:	2310      	movs	r3, #16
 80018e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	2302      	movs	r3, #2
 80018e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018ee:	2306      	movs	r3, #6
 80018f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80018f2:	f107 031c 	add.w	r3, r7, #28
 80018f6:	4619      	mov	r1, r3
 80018f8:	4854      	ldr	r0, [pc, #336]	; (8001a4c <MX_GPIO_Init+0x300>)
 80018fa:	f001 fd8b 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_MISO_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 80018fe:	2340      	movs	r3, #64	; 0x40
 8001900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800190e:	2305      	movs	r3, #5
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8001912:	f107 031c 	add.w	r3, r7, #28
 8001916:	4619      	mov	r1, r3
 8001918:	484c      	ldr	r0, [pc, #304]	; (8001a4c <MX_GPIO_Init+0x300>)
 800191a:	f001 fd7b 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800191e:	2302      	movs	r3, #2
 8001920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001922:	2301      	movs	r3, #1
 8001924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2300      	movs	r3, #0
 800192c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192e:	f107 031c 	add.w	r3, r7, #28
 8001932:	4619      	mov	r1, r3
 8001934:	4846      	ldr	r0, [pc, #280]	; (8001a50 <MX_GPIO_Init+0x304>)
 8001936:	f001 fd6d 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800193a:	2304      	movs	r3, #4
 800193c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193e:	2300      	movs	r3, #0
 8001940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001946:	f107 031c 	add.w	r3, r7, #28
 800194a:	4619      	mov	r1, r3
 800194c:	4840      	ldr	r0, [pc, #256]	; (8001a50 <MX_GPIO_Init+0x304>)
 800194e:	f001 fd61 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001960:	2300      	movs	r3, #0
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001964:	2305      	movs	r3, #5
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	4619      	mov	r1, r3
 800196e:	4838      	ldr	r0, [pc, #224]	; (8001a50 <MX_GPIO_Init+0x304>)
 8001970:	f001 fd50 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001974:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001978:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197a:	2301      	movs	r3, #1
 800197c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001986:	f107 031c 	add.w	r3, r7, #28
 800198a:	4619      	mov	r1, r3
 800198c:	4831      	ldr	r0, [pc, #196]	; (8001a54 <MX_GPIO_Init+0x308>)
 800198e:	f001 fd41 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001992:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001998:	2300      	movs	r3, #0
 800199a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800199c:	2301      	movs	r3, #1
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a0:	f107 031c 	add.w	r3, r7, #28
 80019a4:	4619      	mov	r1, r3
 80019a6:	4828      	ldr	r0, [pc, #160]	; (8001a48 <MX_GPIO_Init+0x2fc>)
 80019a8:	f001 fd34 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 80019ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019be:	2306      	movs	r3, #6
 80019c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c2:	f107 031c 	add.w	r3, r7, #28
 80019c6:	4619      	mov	r1, r3
 80019c8:	481f      	ldr	r0, [pc, #124]	; (8001a48 <MX_GPIO_Init+0x2fc>)
 80019ca:	f001 fd23 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80019ce:	2320      	movs	r3, #32
 80019d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d2:	2300      	movs	r3, #0
 80019d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019da:	f107 031c 	add.w	r3, r7, #28
 80019de:	4619      	mov	r1, r3
 80019e0:	481c      	ldr	r0, [pc, #112]	; (8001a54 <MX_GPIO_Init+0x308>)
 80019e2:	f001 fd17 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019e6:	2340      	movs	r3, #64	; 0x40
 80019e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f2:	2303      	movs	r3, #3
 80019f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019f6:	2307      	movs	r3, #7
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fa:	f107 031c 	add.w	r3, r7, #28
 80019fe:	4619      	mov	r1, r3
 8001a00:	4813      	ldr	r0, [pc, #76]	; (8001a50 <MX_GPIO_Init+0x304>)
 8001a02:	f001 fd07 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8001a06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a0c:	2312      	movs	r3, #18
 8001a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a10:	2301      	movs	r3, #1
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a18:	2304      	movs	r3, #4
 8001a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 8001a1c:	f107 031c 	add.w	r3, r7, #28
 8001a20:	4619      	mov	r1, r3
 8001a22:	480b      	ldr	r0, [pc, #44]	; (8001a50 <MX_GPIO_Init+0x304>)
 8001a24:	f001 fcf6 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a2c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001a36:	f107 031c 	add.w	r3, r7, #28
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	e00c      	b.n	8001a58 <MX_GPIO_Init+0x30c>
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40020800 	.word	0x40020800
 8001a4c:	40020000 	.word	0x40020000
 8001a50:	40020400 	.word	0x40020400
 8001a54:	40020c00 	.word	0x40020c00
 8001a58:	4803      	ldr	r0, [pc, #12]	; (8001a68 <MX_GPIO_Init+0x31c>)
 8001a5a:	f001 fcdb 	bl	8003414 <HAL_GPIO_Init>

}
 8001a5e:	bf00      	nop
 8001a60:	3730      	adds	r7, #48	; 0x30
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000

08001a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a70:	b672      	cpsid	i
}
 8001a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a74:	e7fe      	b.n	8001a74 <Error_Handler+0x8>
	...

08001a78 <moveXYRelative>:
float currentX = STANDBY_X;
float currentY = STANDBY_Y;
float currentZ = TRAVEL_Z;

// Moves the X and Y axes in sync so the toolhead moves in a straight line. Moves relative to current position
void moveXYRelative(float x, float y, float speed, float acceleration){
 8001a78:	b5b0      	push	{r4, r5, r7, lr}
 8001a7a:	b0bc      	sub	sp, #240	; 0xf0
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001a82:	edc7 0a02 	vstr	s1, [r7, #8]
 8001a86:	ed87 1a01 	vstr	s2, [r7, #4]
 8001a8a:	edc7 1a00 	vstr	s3, [r7]
	float XYmicrostepsPerMM = XY_STEPS_PER_MM * MICROSTEP_FACTOR;
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	; (8001b00 <moveXYRelative+0x88>)
 8001a90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	setDirection(x,y);
 8001a94:	edd7 0a02 	vldr	s1, [r7, #8]
 8001a98:	ed97 0a03 	vldr	s0, [r7, #12]
 8001a9c:	f000 fba8 	bl	80021f0 <setDirection>
	double distanceX = fabs(x);
 8001aa0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001aa4:	eef0 7ae7 	vabs.f32	s15, s15
 8001aa8:	ee17 0a90 	vmov	r0, s15
 8001aac:	f7fe fd4c 	bl	8000548 <__aeabi_f2d>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	double distanceY = fabs(y);
 8001ab8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001abc:	eef0 7ae7 	vabs.f32	s15, s15
 8001ac0:	ee17 0a90 	vmov	r0, s15
 8001ac4:	f7fe fd40 	bl	8000548 <__aeabi_f2d>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

	double angle;

	if(distanceX == 0){
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001adc:	f7fe fff4 	bl	8000ac8 <__aeabi_dcmpeq>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d010      	beq.n	8001b08 <moveXYRelative+0x90>
		angle = PI/2;
 8001ae6:	a304      	add	r3, pc, #16	; (adr r3, 8001af8 <moveXYRelative+0x80>)
 8001ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aec:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 8001af0:	e01c      	b.n	8001b2c <moveXYRelative+0xb4>
 8001af2:	bf00      	nop
 8001af4:	f3af 8000 	nop.w
 8001af8:	54442d18 	.word	0x54442d18
 8001afc:	3ff921fb 	.word	0x3ff921fb
 8001b00:	42480000 	.word	0x42480000
 8001b04:	00000000 	.word	0x00000000
	} else {
		angle = atan(distanceY/distanceX);
 8001b08:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001b0c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001b10:	f7fe fe9c 	bl	800084c <__aeabi_ddiv>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	ec43 2b17 	vmov	d7, r2, r3
 8001b1c:	eeb0 0a47 	vmov.f32	s0, s14
 8001b20:	eef0 0a67 	vmov.f32	s1, s15
 8001b24:	f00b f864 	bl	800cbf0 <atan>
 8001b28:	ed87 0b3a 	vstr	d0, [r7, #232]	; 0xe8
	}


	// X vars
	double speedX = cos(angle) * speed;
 8001b2c:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 8001b30:	f00b f9fe 	bl	800cf30 <cos>
 8001b34:	ec55 4b10 	vmov	r4, r5, d0
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7fe fd05 	bl	8000548 <__aeabi_f2d>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4620      	mov	r0, r4
 8001b44:	4629      	mov	r1, r5
 8001b46:	f7fe fd57 	bl	80005f8 <__aeabi_dmul>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
	double accelTimeX = speedX/acceleration;
 8001b52:	6838      	ldr	r0, [r7, #0]
 8001b54:	f7fe fcf8 	bl	8000548 <__aeabi_f2d>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001b60:	f7fe fe74 	bl	800084c <__aeabi_ddiv>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	double accelDistanceX = calcDistance(accelTimeX, 0, acceleration);
 8001b6c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8001b70:	f7ff f83a 	bl	8000be8 <__aeabi_d2f>
 8001b74:	4603      	mov	r3, r0
 8001b76:	ed97 1a00 	vldr	s2, [r7]
 8001b7a:	ed5f 0a1e 	vldr	s1, [pc, #-120]	; 8001b04 <moveXYRelative+0x8c>
 8001b7e:	ee00 3a10 	vmov	s0, r3
 8001b82:	f000 fc31 	bl	80023e8 <calcDistance>
 8001b86:	ee10 3a10 	vmov	r3, s0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fcdc 	bl	8000548 <__aeabi_f2d>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	double coastDistanceX = distanceX - (accelDistanceX);
 8001b98:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001b9c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001ba0:	f7fe fb72 	bl	8000288 <__aeabi_dsub>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double coastTimeX = coastDistanceX/speedX;
 8001bac:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8001bb0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001bb4:	f7fe fe4a 	bl	800084c <__aeabi_ddiv>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

	if(coastTimeX < 0){
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	f04f 0300 	mov.w	r3, #0
 8001bc8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001bcc:	f7fe ff86 	bl	8000adc <__aeabi_dcmplt>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d043      	beq.n	8001c5e <moveXYRelative+0x1e6>
		accelTimeX = sqrt(distanceX/acceleration);
 8001bd6:	6838      	ldr	r0, [r7, #0]
 8001bd8:	f7fe fcb6 	bl	8000548 <__aeabi_f2d>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001be4:	f7fe fe32 	bl	800084c <__aeabi_ddiv>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	ec43 2b17 	vmov	d7, r2, r3
 8001bf0:	eeb0 0a47 	vmov.f32	s0, s14
 8001bf4:	eef0 0a67 	vmov.f32	s1, s15
 8001bf8:	f00b faf8 	bl	800d1ec <sqrt>
 8001bfc:	ed87 0b36 	vstr	d0, [r7, #216]	; 0xd8
		speedX = accelTimeX * acceleration;
 8001c00:	6838      	ldr	r0, [r7, #0]
 8001c02:	f7fe fca1 	bl	8000548 <__aeabi_f2d>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8001c0e:	f7fe fcf3 	bl	80005f8 <__aeabi_dmul>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
		accelDistanceX = calcDistance(accelTimeX, 0, acceleration);
 8001c1a:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8001c1e:	f7fe ffe3 	bl	8000be8 <__aeabi_d2f>
 8001c22:	4603      	mov	r3, r0
 8001c24:	ed97 1a00 	vldr	s2, [r7]
 8001c28:	ed5f 0a4a 	vldr	s1, [pc, #-296]	; 8001b04 <moveXYRelative+0x8c>
 8001c2c:	ee00 3a10 	vmov	s0, r3
 8001c30:	f000 fbda 	bl	80023e8 <calcDistance>
 8001c34:	ee10 3a10 	vmov	r3, s0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fc85 	bl	8000548 <__aeabi_f2d>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
		coastTimeX = 0;
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
		coastDistanceX = 0;
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	}

	unsigned long accelTime_usX = accelTimeX * 1000000.0;
 8001c5e:	a3c8      	add	r3, pc, #800	; (adr r3, 8001f80 <moveXYRelative+0x508>)
 8001c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c64:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8001c68:	f7fe fcc6 	bl	80005f8 <__aeabi_dmul>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	f7fe ff98 	bl	8000ba8 <__aeabi_d2uiz>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
	unsigned long coastTime_usX = coastTimeX * 1000000.0;
 8001c7c:	a3c0      	add	r3, pc, #768	; (adr r3, 8001f80 <moveXYRelative+0x508>)
 8001c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c82:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001c86:	f7fe fcb7 	bl	80005f8 <__aeabi_dmul>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	f7fe ff89 	bl	8000ba8 <__aeabi_d2uiz>
 8001c96:	4603      	mov	r3, r0
 8001c98:	65bb      	str	r3, [r7, #88]	; 0x58

	unsigned long stepsX = XYmicrostepsPerMM * distanceX;
 8001c9a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001c9e:	f7fe fc53 	bl	8000548 <__aeabi_f2d>
 8001ca2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001ca6:	f7fe fca7 	bl	80005f8 <__aeabi_dmul>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4610      	mov	r0, r2
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f7fe ff79 	bl	8000ba8 <__aeabi_d2uiz>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	double currentSpeedX = 5;
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	4bb1      	ldr	r3, [pc, #708]	; (8001f88 <moveXYRelative+0x510>)
 8001cc2:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	unsigned long pulseLengthX = 1000000.0/(currentSpeedX * XYmicrostepsPerMM);
 8001cc6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001cca:	f7fe fc3d 	bl	8000548 <__aeabi_f2d>
 8001cce:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001cd2:	f7fe fc91 	bl	80005f8 <__aeabi_dmul>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	a1a9      	add	r1, pc, #676	; (adr r1, 8001f80 <moveXYRelative+0x508>)
 8001cdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ce0:	f7fe fdb4 	bl	800084c <__aeabi_ddiv>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4610      	mov	r0, r2
 8001cea:	4619      	mov	r1, r3
 8001cec:	f7fe ff5c 	bl	8000ba8 <__aeabi_d2uiz>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

	// Y vars
	double speedY = sin(angle) * speed;
 8001cf6:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 8001cfa:	f00b f975 	bl	800cfe8 <sin>
 8001cfe:	ec55 4b10 	vmov	r4, r5, d0
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7fe fc20 	bl	8000548 <__aeabi_f2d>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	4629      	mov	r1, r5
 8001d10:	f7fe fc72 	bl	80005f8 <__aeabi_dmul>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	double accelTimeY = speedY/acceleration;
 8001d1c:	6838      	ldr	r0, [r7, #0]
 8001d1e:	f7fe fc13 	bl	8000548 <__aeabi_f2d>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001d2a:	f7fe fd8f 	bl	800084c <__aeabi_ddiv>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	double accelDistanceY = calcDistance(accelTimeY, 0, acceleration);
 8001d36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001d3a:	f7fe ff55 	bl	8000be8 <__aeabi_d2f>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	ed97 1a00 	vldr	s2, [r7]
 8001d44:	eddf 0a91 	vldr	s1, [pc, #580]	; 8001f8c <moveXYRelative+0x514>
 8001d48:	ee00 3a10 	vmov	s0, r3
 8001d4c:	f000 fb4c 	bl	80023e8 <calcDistance>
 8001d50:	ee10 3a10 	vmov	r3, s0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fbf7 	bl	8000548 <__aeabi_f2d>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double coastDistanceY = distanceY - (accelDistanceY);
 8001d62:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d66:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001d6a:	f7fe fa8d 	bl	8000288 <__aeabi_dsub>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double coastTimeY = coastDistanceY/speedY;
 8001d76:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d7a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001d7e:	f7fe fd65 	bl	800084c <__aeabi_ddiv>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	if(coastTimeY < 0){
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001d96:	f7fe fea1 	bl	8000adc <__aeabi_dcmplt>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d043      	beq.n	8001e28 <moveXYRelative+0x3b0>
		accelTimeY = sqrt(distanceY/acceleration);
 8001da0:	6838      	ldr	r0, [r7, #0]
 8001da2:	f7fe fbd1 	bl	8000548 <__aeabi_f2d>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001dae:	f7fe fd4d 	bl	800084c <__aeabi_ddiv>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	ec43 2b17 	vmov	d7, r2, r3
 8001dba:	eeb0 0a47 	vmov.f32	s0, s14
 8001dbe:	eef0 0a67 	vmov.f32	s1, s15
 8001dc2:	f00b fa13 	bl	800d1ec <sqrt>
 8001dc6:	ed87 0b2c 	vstr	d0, [r7, #176]	; 0xb0
		speedX = accelTimeY * acceleration;
 8001dca:	6838      	ldr	r0, [r7, #0]
 8001dcc:	f7fe fbbc 	bl	8000548 <__aeabi_f2d>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001dd8:	f7fe fc0e 	bl	80005f8 <__aeabi_dmul>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
		accelDistanceY = calcDistance(accelTimeY, 0, acceleration);
 8001de4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001de8:	f7fe fefe 	bl	8000be8 <__aeabi_d2f>
 8001dec:	4603      	mov	r3, r0
 8001dee:	ed97 1a00 	vldr	s2, [r7]
 8001df2:	eddf 0a66 	vldr	s1, [pc, #408]	; 8001f8c <moveXYRelative+0x514>
 8001df6:	ee00 3a10 	vmov	s0, r3
 8001dfa:	f000 faf5 	bl	80023e8 <calcDistance>
 8001dfe:	ee10 3a10 	vmov	r3, s0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe fba0 	bl	8000548 <__aeabi_f2d>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		coastTimeY = 0;
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	f04f 0300 	mov.w	r3, #0
 8001e18:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		coastDistanceY = 0;
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	f04f 0300 	mov.w	r3, #0
 8001e24:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	}

	unsigned long accelTime_usY = accelTimeY * 1000000.0;
 8001e28:	a355      	add	r3, pc, #340	; (adr r3, 8001f80 <moveXYRelative+0x508>)
 8001e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001e32:	f7fe fbe1 	bl	80005f8 <__aeabi_dmul>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f7fe feb3 	bl	8000ba8 <__aeabi_d2uiz>
 8001e42:	4603      	mov	r3, r0
 8001e44:	63fb      	str	r3, [r7, #60]	; 0x3c
	unsigned long coastTime_usY = coastTimeY * 1000000.0;
 8001e46:	a34e      	add	r3, pc, #312	; (adr r3, 8001f80 <moveXYRelative+0x508>)
 8001e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001e50:	f7fe fbd2 	bl	80005f8 <__aeabi_dmul>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f7fe fea4 	bl	8000ba8 <__aeabi_d2uiz>
 8001e60:	4603      	mov	r3, r0
 8001e62:	63bb      	str	r3, [r7, #56]	; 0x38

	unsigned long stepsY = XYmicrostepsPerMM * distanceY;
 8001e64:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001e68:	f7fe fb6e 	bl	8000548 <__aeabi_f2d>
 8001e6c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001e70:	f7fe fbc2 	bl	80005f8 <__aeabi_dmul>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4610      	mov	r0, r2
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	f7fe fe94 	bl	8000ba8 <__aeabi_d2uiz>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	double currentSpeedY = 5;
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	4b3f      	ldr	r3, [pc, #252]	; (8001f88 <moveXYRelative+0x510>)
 8001e8c:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	unsigned long pulseLengthY = 1000000.0/(currentSpeedY * XYmicrostepsPerMM);
 8001e90:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001e94:	f7fe fb58 	bl	8000548 <__aeabi_f2d>
 8001e98:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001e9c:	f7fe fbac 	bl	80005f8 <__aeabi_dmul>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	a136      	add	r1, pc, #216	; (adr r1, 8001f80 <moveXYRelative+0x508>)
 8001ea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001eaa:	f7fe fccf 	bl	800084c <__aeabi_ddiv>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f7fe fe77 	bl	8000ba8 <__aeabi_d2uiz>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	// Time
	unsigned long time = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	unsigned long pulseTimerX = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	unsigned long pulseTimerY = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	unsigned long timeStep = 10;
 8001ed2:	230a      	movs	r3, #10
 8001ed4:	637b      	str	r3, [r7, #52]	; 0x34

	while(stepsX > 0 || stepsY > 0){
 8001ed6:	e175      	b.n	80021c4 <moveXYRelative+0x74c>
		delayMicro(timeStep);
 8001ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff f958 	bl	8001190 <delayMicro>
		time += timeStep;
 8001ee0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		pulseTimerX += timeStep;
 8001eec:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		pulseTimerY += timeStep;
 8001ef8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001efe:	4413      	add	r3, r2
 8001f00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

		// Update X
		if(stepsX > 0 && pulseTimerX >= pulseLengthX){
 8001f04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 80af 	beq.w	800206c <moveXYRelative+0x5f4>
 8001f0e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001f12:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f16:	429a      	cmp	r2, r3
 8001f18:	f0c0 80a8 	bcc.w	800206c <moveXYRelative+0x5f4>
			pulseTimerX = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			if(time <= accelTime_usX){
 8001f22:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d818      	bhi.n	8001f5e <moveXYRelative+0x4e6>
				currentSpeedX = acceleration * (time/1000000.0);
 8001f2c:	6838      	ldr	r0, [r7, #0]
 8001f2e:	f7fe fb0b 	bl	8000548 <__aeabi_f2d>
 8001f32:	4604      	mov	r4, r0
 8001f34:	460d      	mov	r5, r1
 8001f36:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001f3a:	f7fe fae3 	bl	8000504 <__aeabi_ui2d>
 8001f3e:	a310      	add	r3, pc, #64	; (adr r3, 8001f80 <moveXYRelative+0x508>)
 8001f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f44:	f7fe fc82 	bl	800084c <__aeabi_ddiv>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4620      	mov	r0, r4
 8001f4e:	4629      	mov	r1, r5
 8001f50:	f7fe fb52 	bl	80005f8 <__aeabi_dmul>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
 8001f5c:	e04d      	b.n	8001ffa <moveXYRelative+0x582>
			} else if(time > accelTime_usX && time <= (accelTime_usX + coastTime_usX)){
 8001f5e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001f62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d913      	bls.n	8001f90 <moveXYRelative+0x518>
 8001f68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001f6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d80c      	bhi.n	8001f90 <moveXYRelative+0x518>
				currentSpeedX = speedX;
 8001f76:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8001f7a:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
 8001f7e:	e03c      	b.n	8001ffa <moveXYRelative+0x582>
 8001f80:	00000000 	.word	0x00000000
 8001f84:	412e8480 	.word	0x412e8480
 8001f88:	40140000 	.word	0x40140000
 8001f8c:	00000000 	.word	0x00000000
			} else {
				currentSpeedX = max((speedX - (acceleration * (time-(accelTime_usX + coastTime_usX))/1000000.0)),speedX);
 8001f90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001f92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f94:	4413      	add	r3, r2
 8001f96:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	ee07 3a90 	vmov	s15, r3
 8001fa0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fa4:	edd7 7a00 	vldr	s15, [r7]
 8001fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fac:	ee17 0a90 	vmov	r0, s15
 8001fb0:	f7fe faca 	bl	8000548 <__aeabi_f2d>
 8001fb4:	a38c      	add	r3, pc, #560	; (adr r3, 80021e8 <moveXYRelative+0x770>)
 8001fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fba:	f7fe fc47 	bl	800084c <__aeabi_ddiv>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001fc6:	f7fe f95f 	bl	8000288 <__aeabi_dsub>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001fd2:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8001fd6:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001fda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001fe2:	f7fe fd99 	bl	8000b18 <__aeabi_dcmpgt>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <moveXYRelative+0x57a>
 8001fec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ff0:	e001      	b.n	8001ff6 <moveXYRelative+0x57e>
 8001ff2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ff6:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			}
			pulseLengthX = 1000000/(currentSpeedX * XYmicrostepsPerMM);
 8001ffa:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001ffe:	f7fe faa3 	bl	8000548 <__aeabi_f2d>
 8002002:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8002006:	f7fe faf7 	bl	80005f8 <__aeabi_dmul>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	a176      	add	r1, pc, #472	; (adr r1, 80021e8 <moveXYRelative+0x770>)
 8002010:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002014:	f7fe fc1a 	bl	800084c <__aeabi_ddiv>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4610      	mov	r0, r2
 800201e:	4619      	mov	r1, r3
 8002020:	f7fe fdc2 	bl	8000ba8 <__aeabi_d2uiz>
 8002024:	4603      	mov	r3, r0
 8002026:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			pinWrite(X, step,1);
 800202a:	2201      	movs	r2, #1
 800202c:	2100      	movs	r1, #0
 800202e:	2000      	movs	r0, #0
 8002030:	f7fe fff2 	bl	8001018 <pinWrite>
			delayMicro(10);
 8002034:	200a      	movs	r0, #10
 8002036:	f7ff f8ab 	bl	8001190 <delayMicro>
			pinWrite(X, step,0);
 800203a:	2200      	movs	r2, #0
 800203c:	2100      	movs	r1, #0
 800203e:	2000      	movs	r0, #0
 8002040:	f7fe ffea 	bl	8001018 <pinWrite>
			time += 10;
 8002044:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002048:	330a      	adds	r3, #10
 800204a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			pulseTimerX += 10;
 800204e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002052:	330a      	adds	r3, #10
 8002054:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			pulseTimerY += 10;
 8002058:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800205c:	330a      	adds	r3, #10
 800205e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			stepsX--;
 8002062:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002066:	3b01      	subs	r3, #1
 8002068:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		}

		// Update Y
		if(stepsY > 0 && pulseTimerY >= pulseLengthY){
 800206c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80a7 	beq.w	80021c4 <moveXYRelative+0x74c>
 8002076:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800207a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800207e:	429a      	cmp	r2, r3
 8002080:	f0c0 80a0 	bcc.w	80021c4 <moveXYRelative+0x74c>
			pulseTimerY = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			if(time <= accelTime_usY){
 800208a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800208e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002090:	429a      	cmp	r2, r3
 8002092:	d818      	bhi.n	80020c6 <moveXYRelative+0x64e>
				currentSpeedY = acceleration * (time/1000000.0);
 8002094:	6838      	ldr	r0, [r7, #0]
 8002096:	f7fe fa57 	bl	8000548 <__aeabi_f2d>
 800209a:	4604      	mov	r4, r0
 800209c:	460d      	mov	r5, r1
 800209e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80020a2:	f7fe fa2f 	bl	8000504 <__aeabi_ui2d>
 80020a6:	a350      	add	r3, pc, #320	; (adr r3, 80021e8 <moveXYRelative+0x770>)
 80020a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ac:	f7fe fbce 	bl	800084c <__aeabi_ddiv>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	4620      	mov	r0, r4
 80020b6:	4629      	mov	r1, r5
 80020b8:	f7fe fa9e 	bl	80005f8 <__aeabi_dmul>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
 80020c4:	e045      	b.n	8002152 <moveXYRelative+0x6da>
			} else if(time > accelTime_usY && time <= (accelTime_usY + coastTime_usY)){
 80020c6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80020ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d90b      	bls.n	80020e8 <moveXYRelative+0x670>
 80020d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d4:	4413      	add	r3, r2
 80020d6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80020da:	429a      	cmp	r2, r3
 80020dc:	d804      	bhi.n	80020e8 <moveXYRelative+0x670>
				currentSpeedY = speedY;
 80020de:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80020e2:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
 80020e6:	e034      	b.n	8002152 <moveXYRelative+0x6da>
			} else {
				currentSpeedY = max((speedY - (acceleration * (time-(accelTime_usY + coastTime_usY))/1000000.0)),speedY);
 80020e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ec:	4413      	add	r3, r2
 80020ee:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	ee07 3a90 	vmov	s15, r3
 80020f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020fc:	edd7 7a00 	vldr	s15, [r7]
 8002100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002104:	ee17 0a90 	vmov	r0, s15
 8002108:	f7fe fa1e 	bl	8000548 <__aeabi_f2d>
 800210c:	a336      	add	r3, pc, #216	; (adr r3, 80021e8 <moveXYRelative+0x770>)
 800210e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002112:	f7fe fb9b 	bl	800084c <__aeabi_ddiv>
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800211e:	f7fe f8b3 	bl	8000288 <__aeabi_dsub>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800212a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800212e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002132:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002136:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800213a:	f7fe fced 	bl	8000b18 <__aeabi_dcmpgt>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d002      	beq.n	800214a <moveXYRelative+0x6d2>
 8002144:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002148:	e001      	b.n	800214e <moveXYRelative+0x6d6>
 800214a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800214e:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
			}
			pulseLengthY = 1000000.0/(currentSpeedY * XYmicrostepsPerMM);
 8002152:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002156:	f7fe f9f7 	bl	8000548 <__aeabi_f2d>
 800215a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800215e:	f7fe fa4b 	bl	80005f8 <__aeabi_dmul>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	a120      	add	r1, pc, #128	; (adr r1, 80021e8 <moveXYRelative+0x770>)
 8002168:	e9d1 0100 	ldrd	r0, r1, [r1]
 800216c:	f7fe fb6e 	bl	800084c <__aeabi_ddiv>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4610      	mov	r0, r2
 8002176:	4619      	mov	r1, r3
 8002178:	f7fe fd16 	bl	8000ba8 <__aeabi_d2uiz>
 800217c:	4603      	mov	r3, r0
 800217e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			pinWrite(Y, step,1);
 8002182:	2201      	movs	r2, #1
 8002184:	2100      	movs	r1, #0
 8002186:	2001      	movs	r0, #1
 8002188:	f7fe ff46 	bl	8001018 <pinWrite>
			delayMicro(10);
 800218c:	200a      	movs	r0, #10
 800218e:	f7fe ffff 	bl	8001190 <delayMicro>
			pinWrite(Y, step,0);
 8002192:	2200      	movs	r2, #0
 8002194:	2100      	movs	r1, #0
 8002196:	2001      	movs	r0, #1
 8002198:	f7fe ff3e 	bl	8001018 <pinWrite>
			time += 10;
 800219c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021a0:	330a      	adds	r3, #10
 80021a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			pulseTimerX += 10;
 80021a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021aa:	330a      	adds	r3, #10
 80021ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			pulseTimerY += 10;
 80021b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021b4:	330a      	adds	r3, #10
 80021b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			stepsY--;
 80021ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80021be:	3b01      	subs	r3, #1
 80021c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	while(stepsX > 0 || stepsY > 0){
 80021c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f47f ae85 	bne.w	8001ed8 <moveXYRelative+0x460>
 80021ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f47f ae80 	bne.w	8001ed8 <moveXYRelative+0x460>
		}

	}

}
 80021d8:	bf00      	nop
 80021da:	bf00      	nop
 80021dc:	37f0      	adds	r7, #240	; 0xf0
 80021de:	46bd      	mov	sp, r7
 80021e0:	bdb0      	pop	{r4, r5, r7, pc}
 80021e2:	bf00      	nop
 80021e4:	f3af 8000 	nop.w
 80021e8:	00000000 	.word	0x00000000
 80021ec:	412e8480 	.word	0x412e8480

080021f0 <setDirection>:

// Set the directions of the XY motors
void setDirection(float x, float y){
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80021fa:	edc7 0a00 	vstr	s1, [r7]
  int directionX = x >= 0;
 80021fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002202:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220a:	bfac      	ite	ge
 800220c:	2301      	movge	r3, #1
 800220e:	2300      	movlt	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	60fb      	str	r3, [r7, #12]
  int directionY = y >= 0;
 8002214:	edd7 7a00 	vldr	s15, [r7]
 8002218:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800221c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002220:	bfac      	ite	ge
 8002222:	2301      	movge	r3, #1
 8002224:	2300      	movlt	r3, #0
 8002226:	b2db      	uxtb	r3, r3
 8002228:	60bb      	str	r3, [r7, #8]
  pinWrite(X, dir0, directionX);
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	2101      	movs	r1, #1
 800222e:	2000      	movs	r0, #0
 8002230:	f7fe fef2 	bl	8001018 <pinWrite>
  pinWrite(X, dir1, !directionX);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2b00      	cmp	r3, #0
 8002238:	bf0c      	ite	eq
 800223a:	2301      	moveq	r3, #1
 800223c:	2300      	movne	r3, #0
 800223e:	b2db      	uxtb	r3, r3
 8002240:	461a      	mov	r2, r3
 8002242:	2102      	movs	r1, #2
 8002244:	2000      	movs	r0, #0
 8002246:	f7fe fee7 	bl	8001018 <pinWrite>
  pinWrite(Y, dir0, directionY);
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	2101      	movs	r1, #1
 800224e:	2001      	movs	r0, #1
 8002250:	f7fe fee2 	bl	8001018 <pinWrite>
  pinWrite(Y, dir1, !directionY);
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	bf0c      	ite	eq
 800225a:	2301      	moveq	r3, #1
 800225c:	2300      	movne	r3, #0
 800225e:	b2db      	uxtb	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	2102      	movs	r1, #2
 8002264:	2001      	movs	r0, #1
 8002266:	f7fe fed7 	bl	8001018 <pinWrite>
}
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <setHomeZ>:
void setHomeXY(){
  currentX = 0.0;
  currentY = 0.0;
}

void setHomeZ(){
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
	currentZ = 0.0;
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <setHomeZ+0x18>)
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	20000010 	.word	0x20000010

08002290 <moveXYAbsolute>:

void moveXYAbsolute(float x, float y, float speed, float accel){
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	ed87 0a03 	vstr	s0, [r7, #12]
 800229a:	edc7 0a02 	vstr	s1, [r7, #8]
 800229e:	ed87 1a01 	vstr	s2, [r7, #4]
 80022a2:	edc7 1a00 	vstr	s3, [r7]
  moveXYRelative(x-currentX, y-currentY, speed, accel);
 80022a6:	4b11      	ldr	r3, [pc, #68]	; (80022ec <moveXYAbsolute+0x5c>)
 80022a8:	edd3 7a00 	vldr	s15, [r3]
 80022ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80022b0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80022b4:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <moveXYAbsolute+0x60>)
 80022b6:	edd3 7a00 	vldr	s15, [r3]
 80022ba:	ed97 7a02 	vldr	s14, [r7, #8]
 80022be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022c2:	edd7 1a00 	vldr	s3, [r7]
 80022c6:	ed97 1a01 	vldr	s2, [r7, #4]
 80022ca:	eef0 0a67 	vmov.f32	s1, s15
 80022ce:	eeb0 0a66 	vmov.f32	s0, s13
 80022d2:	f7ff fbd1 	bl	8001a78 <moveXYRelative>
  currentX = x;
 80022d6:	4a05      	ldr	r2, [pc, #20]	; (80022ec <moveXYAbsolute+0x5c>)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6013      	str	r3, [r2, #0]
  currentY = y;
 80022dc:	4a04      	ldr	r2, [pc, #16]	; (80022f0 <moveXYAbsolute+0x60>)
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	6013      	str	r3, [r2, #0]
}
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000008 	.word	0x20000008
 80022f0:	2000000c 	.word	0x2000000c

080022f4 <moveZRelative>:
			steps--;
		}
	}
}

void moveZRelative(float z, float speed) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	ed87 0a01 	vstr	s0, [r7, #4]
 80022fe:	edc7 0a00 	vstr	s1, [r7]
	float ZmicrostepsPerMM = Z_STEPS_PER_MM * MICROSTEP_FACTOR_Z;
 8002302:	4b27      	ldr	r3, [pc, #156]	; (80023a0 <moveZRelative+0xac>)
 8002304:	613b      	str	r3, [r7, #16]

	pinWrite(Z,dir0, z < 0);
 8002306:	edd7 7a01 	vldr	s15, [r7, #4]
 800230a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800230e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002312:	bf4c      	ite	mi
 8002314:	2301      	movmi	r3, #1
 8002316:	2300      	movpl	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	461a      	mov	r2, r3
 800231c:	2101      	movs	r1, #1
 800231e:	2002      	movs	r0, #2
 8002320:	f7fe fe7a 	bl	8001018 <pinWrite>
	unsigned long delay = 1000000/(speed * ZmicrostepsPerMM);
 8002324:	ed97 7a00 	vldr	s14, [r7]
 8002328:	edd7 7a04 	vldr	s15, [r7, #16]
 800232c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002330:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80023a4 <moveZRelative+0xb0>
 8002334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800233c:	ee17 3a90 	vmov	r3, s15
 8002340:	60fb      	str	r3, [r7, #12]

	float travelDistance = fabs(z);
 8002342:	edd7 7a01 	vldr	s15, [r7, #4]
 8002346:	eef0 7ae7 	vabs.f32	s15, s15
 800234a:	edc7 7a02 	vstr	s15, [r7, #8]
	unsigned long steps = ZmicrostepsPerMM * travelDistance;
 800234e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002352:	edd7 7a02 	vldr	s15, [r7, #8]
 8002356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800235a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800235e:	ee17 3a90 	vmov	r3, s15
 8002362:	617b      	str	r3, [r7, #20]
	for(; steps > 0; steps --){
 8002364:	e013      	b.n	800238e <moveZRelative+0x9a>
		pinWrite(Z, step,1);
 8002366:	2201      	movs	r2, #1
 8002368:	2100      	movs	r1, #0
 800236a:	2002      	movs	r0, #2
 800236c:	f7fe fe54 	bl	8001018 <pinWrite>
		delayMicro(10);
 8002370:	200a      	movs	r0, #10
 8002372:	f7fe ff0d 	bl	8001190 <delayMicro>
		pinWrite(Z, step,0);
 8002376:	2200      	movs	r2, #0
 8002378:	2100      	movs	r1, #0
 800237a:	2002      	movs	r0, #2
 800237c:	f7fe fe4c 	bl	8001018 <pinWrite>
		delayMicro(delay);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe ff04 	bl	8001190 <delayMicro>
	for(; steps > 0; steps --){
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	3b01      	subs	r3, #1
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1e8      	bne.n	8002366 <moveZRelative+0x72>
	}
}
 8002394:	bf00      	nop
 8002396:	bf00      	nop
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	42bb8000 	.word	0x42bb8000
 80023a4:	49742400 	.word	0x49742400

080023a8 <moveZAbsolute>:

void moveZAbsolute(float z, float speed, float acceleration){
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80023b2:	edc7 0a02 	vstr	s1, [r7, #8]
 80023b6:	ed87 1a01 	vstr	s2, [r7, #4]
	moveZRelative(z-currentZ, speed);
 80023ba:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <moveZAbsolute+0x3c>)
 80023bc:	edd3 7a00 	vldr	s15, [r3]
 80023c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80023c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023c8:	edd7 0a02 	vldr	s1, [r7, #8]
 80023cc:	eeb0 0a67 	vmov.f32	s0, s15
 80023d0:	f7ff ff90 	bl	80022f4 <moveZRelative>
	currentZ = z;
 80023d4:	4a03      	ldr	r2, [pc, #12]	; (80023e4 <moveZAbsolute+0x3c>)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6013      	str	r3, [r2, #0]
}
 80023da:	bf00      	nop
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000010 	.word	0x20000010

080023e8 <calcDistance>:

float calcDistance(float time, float speed, float acceleration){
 80023e8:	b5b0      	push	{r4, r5, r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	ed87 0a03 	vstr	s0, [r7, #12]
 80023f2:	edc7 0a02 	vstr	s1, [r7, #8]
 80023f6:	ed87 1a01 	vstr	s2, [r7, #4]
	return (0.5 * acceleration * pow(time,2)) + (speed * time);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7fe f8a4 	bl	8000548 <__aeabi_f2d>
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	4b1e      	ldr	r3, [pc, #120]	; (8002480 <calcDistance+0x98>)
 8002406:	f7fe f8f7 	bl	80005f8 <__aeabi_dmul>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	4614      	mov	r4, r2
 8002410:	461d      	mov	r5, r3
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f7fe f898 	bl	8000548 <__aeabi_f2d>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8002478 <calcDistance+0x90>
 8002420:	ec43 2b10 	vmov	d0, r2, r3
 8002424:	f00a fe34 	bl	800d090 <pow>
 8002428:	ec53 2b10 	vmov	r2, r3, d0
 800242c:	4620      	mov	r0, r4
 800242e:	4629      	mov	r1, r5
 8002430:	f7fe f8e2 	bl	80005f8 <__aeabi_dmul>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4614      	mov	r4, r2
 800243a:	461d      	mov	r5, r3
 800243c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002440:	edd7 7a03 	vldr	s15, [r7, #12]
 8002444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002448:	ee17 0a90 	vmov	r0, s15
 800244c:	f7fe f87c 	bl	8000548 <__aeabi_f2d>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4620      	mov	r0, r4
 8002456:	4629      	mov	r1, r5
 8002458:	f7fd ff18 	bl	800028c <__adddf3>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	f7fe fbc0 	bl	8000be8 <__aeabi_d2f>
 8002468:	4603      	mov	r3, r0
 800246a:	ee07 3a90 	vmov	s15, r3
}
 800246e:	eeb0 0a67 	vmov.f32	s0, s15
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bdb0      	pop	{r4, r5, r7, pc}
 8002478:	00000000 	.word	0x00000000
 800247c:	40000000 	.word	0x40000000
 8002480:	3fe00000 	.word	0x3fe00000

08002484 <movePiece>:
        //  Send this to STM / Aurdino
    	moveXYAbsolute(whiteCaptured[i].x,whiteCaptured[i].y,80,300);
    }
}

void movePiece(float startX, float startY, float endX, float endY, float pieceZ){
 8002484:	b580      	push	{r7, lr}
 8002486:	b08a      	sub	sp, #40	; 0x28
 8002488:	af00      	add	r7, sp, #0
 800248a:	ed87 0a05 	vstr	s0, [r7, #20]
 800248e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002492:	ed87 1a03 	vstr	s2, [r7, #12]
 8002496:	edc7 1a02 	vstr	s3, [r7, #8]
 800249a:	ed87 2a01 	vstr	s4, [r7, #4]
	float XYSpeed = 700;
 800249e:	4b2a      	ldr	r3, [pc, #168]	; (8002548 <movePiece+0xc4>)
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
	float ZSpeed = 45;
 80024a2:	4b2a      	ldr	r3, [pc, #168]	; (800254c <movePiece+0xc8>)
 80024a4:	623b      	str	r3, [r7, #32]
	float XYAccel = 50000;
 80024a6:	4b2a      	ldr	r3, [pc, #168]	; (8002550 <movePiece+0xcc>)
 80024a8:	61fb      	str	r3, [r7, #28]

	// Move to the travel height, if not there already
	moveZAbsolute(TRAVEL_Z,ZSpeed,300);
 80024aa:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 8002554 <movePiece+0xd0>
 80024ae:	edd7 0a08 	vldr	s1, [r7, #32]
 80024b2:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8002558 <movePiece+0xd4>
 80024b6:	f7ff ff77 	bl	80023a8 <moveZAbsolute>

	// Move the the starting square
	moveXYAbsolute(startX,startY,XYSpeed,XYAccel);
 80024ba:	edd7 1a07 	vldr	s3, [r7, #28]
 80024be:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 80024c2:	edd7 0a04 	vldr	s1, [r7, #16]
 80024c6:	ed97 0a05 	vldr	s0, [r7, #20]
 80024ca:	f7ff fee1 	bl	8002290 <moveXYAbsolute>

	// Turn on the magnet
	setMagnet(0);
 80024ce:	2000      	movs	r0, #0
 80024d0:	f7fe fe44 	bl	800115c <setMagnet>

	// Move down to grab the piece
	moveZAbsolute(pieceZ,ZSpeed,300);
 80024d4:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8002554 <movePiece+0xd0>
 80024d8:	edd7 0a08 	vldr	s1, [r7, #32]
 80024dc:	ed97 0a01 	vldr	s0, [r7, #4]
 80024e0:	f7ff ff62 	bl	80023a8 <moveZAbsolute>

	delayMicro(1000);
 80024e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024e8:	f7fe fe52 	bl	8001190 <delayMicro>

	// Piece is now grabbed

	// Move up to be above the other pieces
	moveZAbsolute(TRAVEL_Z,ZSpeed,300);
 80024ec:	ed9f 1a19 	vldr	s2, [pc, #100]	; 8002554 <movePiece+0xd0>
 80024f0:	edd7 0a08 	vldr	s1, [r7, #32]
 80024f4:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8002558 <movePiece+0xd4>
 80024f8:	f7ff ff56 	bl	80023a8 <moveZAbsolute>

	// Move to target square
	moveXYAbsolute(endX,endY,XYSpeed,XYAccel);
 80024fc:	edd7 1a07 	vldr	s3, [r7, #28]
 8002500:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 8002504:	edd7 0a02 	vldr	s1, [r7, #8]
 8002508:	ed97 0a03 	vldr	s0, [r7, #12]
 800250c:	f7ff fec0 	bl	8002290 <moveXYAbsolute>

	// Move down to board
	moveZAbsolute(pieceZ,ZSpeed,300);
 8002510:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8002554 <movePiece+0xd0>
 8002514:	edd7 0a08 	vldr	s1, [r7, #32]
 8002518:	ed97 0a01 	vldr	s0, [r7, #4]
 800251c:	f7ff ff44 	bl	80023a8 <moveZAbsolute>

	// Release the piece
	setMagnet(1);
 8002520:	2001      	movs	r0, #1
 8002522:	f7fe fe1b 	bl	800115c <setMagnet>
	delayMicro(1000);
 8002526:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800252a:	f7fe fe31 	bl	8001190 <delayMicro>

	// Move back up to travel height
	moveZAbsolute(TRAVEL_Z,ZSpeed,300);
 800252e:	ed9f 1a09 	vldr	s2, [pc, #36]	; 8002554 <movePiece+0xd0>
 8002532:	edd7 0a08 	vldr	s1, [r7, #32]
 8002536:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8002558 <movePiece+0xd4>
 800253a:	f7ff ff35 	bl	80023a8 <moveZAbsolute>
}
 800253e:	bf00      	nop
 8002540:	3728      	adds	r7, #40	; 0x28
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	442f0000 	.word	0x442f0000
 800254c:	42340000 	.word	0x42340000
 8002550:	47435000 	.word	0x47435000
 8002554:	43960000 	.word	0x43960000
 8002558:	43160000 	.word	0x43160000

0800255c <moveToStandbyPosition>:

void moveToStandbyPosition(){
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
	// Move to the travel height, if not there already
	moveZAbsolute(TRAVEL_Z,60,300);
 8002560:	ed9f 1a09 	vldr	s2, [pc, #36]	; 8002588 <moveToStandbyPosition+0x2c>
 8002564:	eddf 0a09 	vldr	s1, [pc, #36]	; 800258c <moveToStandbyPosition+0x30>
 8002568:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8002590 <moveToStandbyPosition+0x34>
 800256c:	f7ff ff1c 	bl	80023a8 <moveZAbsolute>

	// Move to target square
	moveXYAbsolute(STANDBY_X,STANDBY_Y,700,50000);
 8002570:	eddf 1a08 	vldr	s3, [pc, #32]	; 8002594 <moveToStandbyPosition+0x38>
 8002574:	ed9f 1a08 	vldr	s2, [pc, #32]	; 8002598 <moveToStandbyPosition+0x3c>
 8002578:	eddf 0a08 	vldr	s1, [pc, #32]	; 800259c <moveToStandbyPosition+0x40>
 800257c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80025a0 <moveToStandbyPosition+0x44>
 8002580:	f7ff fe86 	bl	8002290 <moveXYAbsolute>
}
 8002584:	bf00      	nop
 8002586:	bd80      	pop	{r7, pc}
 8002588:	43960000 	.word	0x43960000
 800258c:	42700000 	.word	0x42700000
 8002590:	43160000 	.word	0x43160000
 8002594:	47435000 	.word	0x47435000
 8002598:	442f0000 	.word	0x442f0000
 800259c:	4411c000 	.word	0x4411c000
 80025a0:	43e40000 	.word	0x43e40000
 80025a4:	00000000 	.word	0x00000000

080025a8 <movePieceByIndex>:

void movePieceByIndex(int startIndex, int endIndex, int pieceIndex){
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08a      	sub	sp, #40	; 0x28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
	point startPoint = getCoordsFromIndex(startIndex);
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 f845 	bl	8002644 <getCoordsFromIndex>
 80025ba:	eeb0 7a40 	vmov.f32	s14, s0
 80025be:	eef0 7a60 	vmov.f32	s15, s1
 80025c2:	ed87 7a07 	vstr	s14, [r7, #28]
 80025c6:	edc7 7a08 	vstr	s15, [r7, #32]
	point endPoint = getCoordsFromIndex(endIndex);
 80025ca:	68b8      	ldr	r0, [r7, #8]
 80025cc:	f000 f83a 	bl	8002644 <getCoordsFromIndex>
 80025d0:	eeb0 7a40 	vmov.f32	s14, s0
 80025d4:	eef0 7a60 	vmov.f32	s15, s1
 80025d8:	ed87 7a05 	vstr	s14, [r7, #20]
 80025dc:	edc7 7a06 	vstr	s15, [r7, #24]
	float pieceHeight = arr[pieceIndex].value - 44.7;
 80025e0:	4a17      	ldr	r2, [pc, #92]	; (8002640 <movePieceByIndex+0x98>)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	4413      	add	r3, r2
 80025e8:	3308      	adds	r3, #8
 80025ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025ee:	a312      	add	r3, pc, #72	; (adr r3, 8002638 <movePieceByIndex+0x90>)
 80025f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f4:	f7fd fe48 	bl	8000288 <__aeabi_dsub>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	4610      	mov	r0, r2
 80025fe:	4619      	mov	r1, r3
 8002600:	f7fe faf2 	bl	8000be8 <__aeabi_d2f>
 8002604:	4603      	mov	r3, r0
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
	movePiece(startPoint.x, startPoint.y, endPoint.x, endPoint.y, pieceHeight);
 8002608:	edd7 7a07 	vldr	s15, [r7, #28]
 800260c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002610:	edd7 6a05 	vldr	s13, [r7, #20]
 8002614:	ed97 6a06 	vldr	s12, [r7, #24]
 8002618:	ed97 2a09 	vldr	s4, [r7, #36]	; 0x24
 800261c:	eef0 1a46 	vmov.f32	s3, s12
 8002620:	eeb0 1a66 	vmov.f32	s2, s13
 8002624:	eef0 0a47 	vmov.f32	s1, s14
 8002628:	eeb0 0a67 	vmov.f32	s0, s15
 800262c:	f7ff ff2a 	bl	8002484 <movePiece>

}
 8002630:	bf00      	nop
 8002632:	3728      	adds	r7, #40	; 0x28
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	9999999a 	.word	0x9999999a
 800263c:	40465999 	.word	0x40465999
 8002640:	20000018 	.word	0x20000018

08002644 <getCoordsFromIndex>:

point getCoordsFromIndex(int index){
 8002644:	b480      	push	{r7}
 8002646:	b087      	sub	sp, #28
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
	if(index > 63){
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2b3f      	cmp	r3, #63	; 0x3f
 8002650:	dd0b      	ble.n	800266a <getCoordsFromIndex+0x26>
		return whiteCaptured[index-63];
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	3b3f      	subs	r3, #63	; 0x3f
 8002656:	4911      	ldr	r1, [pc, #68]	; (800269c <getCoordsFromIndex+0x58>)
 8002658:	f107 0210 	add.w	r2, r7, #16
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	440b      	add	r3, r1
 8002660:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002664:	e882 0003 	stmia.w	r2, {r0, r1}
 8002668:	e009      	b.n	800267e <getCoordsFromIndex+0x3a>
	} else {
		return board[index];
 800266a:	490d      	ldr	r1, [pc, #52]	; (80026a0 <getCoordsFromIndex+0x5c>)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f107 0210 	add.w	r2, r7, #16
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	440b      	add	r3, r1
 8002676:	e893 0003 	ldmia.w	r3, {r0, r1}
 800267a:	e882 0003 	stmia.w	r2, {r0, r1}
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	ee07 2a10 	vmov	s14, r2
 8002686:	ee07 3a90 	vmov	s15, r3
	}
}
 800268a:	eeb0 0a47 	vmov.f32	s0, s14
 800268e:	eef0 0a67 	vmov.f32	s1, s15
 8002692:	371c      	adds	r7, #28
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	20000298 	.word	0x20000298
 80026a0:	20000098 	.word	0x20000098

080026a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	607b      	str	r3, [r7, #4]
 80026ae:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <HAL_MspInit+0x4c>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	4a0f      	ldr	r2, [pc, #60]	; (80026f0 <HAL_MspInit+0x4c>)
 80026b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026b8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ba:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <HAL_MspInit+0x4c>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c2:	607b      	str	r3, [r7, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	603b      	str	r3, [r7, #0]
 80026ca:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <HAL_MspInit+0x4c>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	4a08      	ldr	r2, [pc, #32]	; (80026f0 <HAL_MspInit+0x4c>)
 80026d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d4:	6413      	str	r3, [r2, #64]	; 0x40
 80026d6:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <HAL_MspInit+0x4c>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026de:	603b      	str	r3, [r7, #0]
 80026e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80026e2:	2007      	movs	r0, #7
 80026e4:	f000 fb6a 	bl	8002dbc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026e8:	bf00      	nop
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40023800 	.word	0x40023800

080026f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a0b      	ldr	r2, [pc, #44]	; (8002730 <HAL_TIM_Base_MspInit+0x3c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d10d      	bne.n	8002722 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	4b0a      	ldr	r3, [pc, #40]	; (8002734 <HAL_TIM_Base_MspInit+0x40>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	4a09      	ldr	r2, [pc, #36]	; (8002734 <HAL_TIM_Base_MspInit+0x40>)
 8002710:	f043 0310 	orr.w	r3, r3, #16
 8002714:	6413      	str	r3, [r2, #64]	; 0x40
 8002716:	4b07      	ldr	r3, [pc, #28]	; (8002734 <HAL_TIM_Base_MspInit+0x40>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f003 0310 	and.w	r3, r3, #16
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002722:	bf00      	nop
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40001000 	.word	0x40001000
 8002734:	40023800 	.word	0x40023800

08002738 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	; 0x28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
 800274e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a40      	ldr	r2, [pc, #256]	; (8002858 <HAL_UART_MspInit+0x120>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d17a      	bne.n	8002850 <HAL_UART_MspInit+0x118>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	4b3f      	ldr	r3, [pc, #252]	; (800285c <HAL_UART_MspInit+0x124>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	4a3e      	ldr	r2, [pc, #248]	; (800285c <HAL_UART_MspInit+0x124>)
 8002764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002768:	6413      	str	r3, [r2, #64]	; 0x40
 800276a:	4b3c      	ldr	r3, [pc, #240]	; (800285c <HAL_UART_MspInit+0x124>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	4b38      	ldr	r3, [pc, #224]	; (800285c <HAL_UART_MspInit+0x124>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	4a37      	ldr	r2, [pc, #220]	; (800285c <HAL_UART_MspInit+0x124>)
 8002780:	f043 0302 	orr.w	r3, r3, #2
 8002784:	6313      	str	r3, [r2, #48]	; 0x30
 8002786:	4b35      	ldr	r3, [pc, #212]	; (800285c <HAL_UART_MspInit+0x124>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	4b31      	ldr	r3, [pc, #196]	; (800285c <HAL_UART_MspInit+0x124>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a30      	ldr	r2, [pc, #192]	; (800285c <HAL_UART_MspInit+0x124>)
 800279c:	f043 0308 	orr.w	r3, r3, #8
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b2e      	ldr	r3, [pc, #184]	; (800285c <HAL_UART_MspInit+0x124>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80027ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b4:	2302      	movs	r3, #2
 80027b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027bc:	2303      	movs	r3, #3
 80027be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027c0:	2307      	movs	r3, #7
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c4:	f107 0314 	add.w	r3, r7, #20
 80027c8:	4619      	mov	r1, r3
 80027ca:	4825      	ldr	r0, [pc, #148]	; (8002860 <HAL_UART_MspInit+0x128>)
 80027cc:	f000 fe22 	bl	8003414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80027d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d6:	2302      	movs	r3, #2
 80027d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027de:	2303      	movs	r3, #3
 80027e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027e2:	2307      	movs	r3, #7
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027e6:	f107 0314 	add.w	r3, r7, #20
 80027ea:	4619      	mov	r1, r3
 80027ec:	481d      	ldr	r0, [pc, #116]	; (8002864 <HAL_UART_MspInit+0x12c>)
 80027ee:	f000 fe11 	bl	8003414 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80027f2:	4b1d      	ldr	r3, [pc, #116]	; (8002868 <HAL_UART_MspInit+0x130>)
 80027f4:	4a1d      	ldr	r2, [pc, #116]	; (800286c <HAL_UART_MspInit+0x134>)
 80027f6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80027f8:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <HAL_UART_MspInit+0x130>)
 80027fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027fe:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002800:	4b19      	ldr	r3, [pc, #100]	; (8002868 <HAL_UART_MspInit+0x130>)
 8002802:	2200      	movs	r2, #0
 8002804:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002806:	4b18      	ldr	r3, [pc, #96]	; (8002868 <HAL_UART_MspInit+0x130>)
 8002808:	2200      	movs	r2, #0
 800280a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800280c:	4b16      	ldr	r3, [pc, #88]	; (8002868 <HAL_UART_MspInit+0x130>)
 800280e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002812:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002814:	4b14      	ldr	r3, [pc, #80]	; (8002868 <HAL_UART_MspInit+0x130>)
 8002816:	2200      	movs	r2, #0
 8002818:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800281a:	4b13      	ldr	r3, [pc, #76]	; (8002868 <HAL_UART_MspInit+0x130>)
 800281c:	2200      	movs	r2, #0
 800281e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002820:	4b11      	ldr	r3, [pc, #68]	; (8002868 <HAL_UART_MspInit+0x130>)
 8002822:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002826:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002828:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <HAL_UART_MspInit+0x130>)
 800282a:	2200      	movs	r2, #0
 800282c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800282e:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <HAL_UART_MspInit+0x130>)
 8002830:	2200      	movs	r2, #0
 8002832:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002834:	480c      	ldr	r0, [pc, #48]	; (8002868 <HAL_UART_MspInit+0x130>)
 8002836:	f000 fb03 	bl	8002e40 <HAL_DMA_Init>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8002840:	f7ff f914 	bl	8001a6c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a08      	ldr	r2, [pc, #32]	; (8002868 <HAL_UART_MspInit+0x130>)
 8002848:	639a      	str	r2, [r3, #56]	; 0x38
 800284a:	4a07      	ldr	r2, [pc, #28]	; (8002868 <HAL_UART_MspInit+0x130>)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002850:	bf00      	nop
 8002852:	3728      	adds	r7, #40	; 0x28
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40004800 	.word	0x40004800
 800285c:	40023800 	.word	0x40023800
 8002860:	40020400 	.word	0x40020400
 8002864:	40020c00 	.word	0x40020c00
 8002868:	20000550 	.word	0x20000550
 800286c:	40026028 	.word	0x40026028

08002870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002874:	e7fe      	b.n	8002874 <NMI_Handler+0x4>

08002876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002876:	b480      	push	{r7}
 8002878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800287a:	e7fe      	b.n	800287a <HardFault_Handler+0x4>

0800287c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002880:	e7fe      	b.n	8002880 <MemManage_Handler+0x4>

08002882 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002886:	e7fe      	b.n	8002886 <BusFault_Handler+0x4>

08002888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800288c:	e7fe      	b.n	800288c <UsageFault_Handler+0x4>

0800288e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800288e:	b480      	push	{r7}
 8002890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028aa:	b480      	push	{r7}
 80028ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ae:	bf00      	nop
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028bc:	f000 f96a 	bl	8002b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028c0:	bf00      	nop
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80028c8:	4802      	ldr	r0, [pc, #8]	; (80028d4 <DMA1_Stream1_IRQHandler+0x10>)
 80028ca:	f000 fb67 	bl	8002f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000550 	.word	0x20000550

080028d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80028dc:	4802      	ldr	r0, [pc, #8]	; (80028e8 <OTG_FS_IRQHandler+0x10>)
 80028de:	f001 f9b9 	bl	8003c54 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000a2c 	.word	0x20000a2c

080028ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
	return 1;
 80028f0:	2301      	movs	r3, #1
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <_kill>:

int _kill(int pid, int sig)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002906:	f006 ffff 	bl	8009908 <__errno>
 800290a:	4603      	mov	r3, r0
 800290c:	2216      	movs	r2, #22
 800290e:	601a      	str	r2, [r3, #0]
	return -1;
 8002910:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002914:	4618      	mov	r0, r3
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <_exit>:

void _exit (int status)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002924:	f04f 31ff 	mov.w	r1, #4294967295
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7ff ffe7 	bl	80028fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800292e:	e7fe      	b.n	800292e <_exit+0x12>

08002930 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	e00a      	b.n	8002958 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002942:	f3af 8000 	nop.w
 8002946:	4601      	mov	r1, r0
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	60ba      	str	r2, [r7, #8]
 800294e:	b2ca      	uxtb	r2, r1
 8002950:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	3301      	adds	r3, #1
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	429a      	cmp	r2, r3
 800295e:	dbf0      	blt.n	8002942 <_read+0x12>
	}

return len;
 8002960:	687b      	ldr	r3, [r7, #4]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b086      	sub	sp, #24
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	e009      	b.n	8002990 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	60ba      	str	r2, [r7, #8]
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	3301      	adds	r3, #1
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	429a      	cmp	r2, r3
 8002996:	dbf1      	blt.n	800297c <_write+0x12>
	}
	return len;
 8002998:	687b      	ldr	r3, [r7, #4]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <_close>:

int _close(int file)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
	return -1;
 80029aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029ca:	605a      	str	r2, [r3, #4]
	return 0;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <_isatty>:

int _isatty(int file)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
	return 1;
 80029e2:	2301      	movs	r3, #1
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
	return 0;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a14:	4a14      	ldr	r2, [pc, #80]	; (8002a68 <_sbrk+0x5c>)
 8002a16:	4b15      	ldr	r3, [pc, #84]	; (8002a6c <_sbrk+0x60>)
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a20:	4b13      	ldr	r3, [pc, #76]	; (8002a70 <_sbrk+0x64>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d102      	bne.n	8002a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a28:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <_sbrk+0x64>)
 8002a2a:	4a12      	ldr	r2, [pc, #72]	; (8002a74 <_sbrk+0x68>)
 8002a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a2e:	4b10      	ldr	r3, [pc, #64]	; (8002a70 <_sbrk+0x64>)
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4413      	add	r3, r2
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d207      	bcs.n	8002a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a3c:	f006 ff64 	bl	8009908 <__errno>
 8002a40:	4603      	mov	r3, r0
 8002a42:	220c      	movs	r2, #12
 8002a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a46:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4a:	e009      	b.n	8002a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a4c:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <_sbrk+0x64>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a52:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <_sbrk+0x64>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	4a05      	ldr	r2, [pc, #20]	; (8002a70 <_sbrk+0x64>)
 8002a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	20020000 	.word	0x20020000
 8002a6c:	00000400 	.word	0x00000400
 8002a70:	20000540 	.word	0x20000540
 8002a74:	20000d40 	.word	0x20000d40

08002a78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a7c:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <SystemInit+0x20>)
 8002a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a82:	4a05      	ldr	r2, [pc, #20]	; (8002a98 <SystemInit+0x20>)
 8002a84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	e000ed00 	.word	0xe000ed00

08002a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ad4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002aa0:	480d      	ldr	r0, [pc, #52]	; (8002ad8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002aa2:	490e      	ldr	r1, [pc, #56]	; (8002adc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002aa4:	4a0e      	ldr	r2, [pc, #56]	; (8002ae0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002aa8:	e002      	b.n	8002ab0 <LoopCopyDataInit>

08002aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aae:	3304      	adds	r3, #4

08002ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ab4:	d3f9      	bcc.n	8002aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ab6:	4a0b      	ldr	r2, [pc, #44]	; (8002ae4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ab8:	4c0b      	ldr	r4, [pc, #44]	; (8002ae8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002abc:	e001      	b.n	8002ac2 <LoopFillZerobss>

08002abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ac0:	3204      	adds	r2, #4

08002ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ac4:	d3fb      	bcc.n	8002abe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ac6:	f7ff ffd7 	bl	8002a78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002aca:	f006 ff23 	bl	8009914 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ace:	f7fe fd25 	bl	800151c <main>
  bx  lr    
 8002ad2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ad4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002adc:	20000524 	.word	0x20000524
  ldr r2, =_sidata
 8002ae0:	0800f6b8 	.word	0x0800f6b8
  ldr r2, =_sbss
 8002ae4:	20000524 	.word	0x20000524
  ldr r4, =_ebss
 8002ae8:	20000d40 	.word	0x20000d40

08002aec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002aec:	e7fe      	b.n	8002aec <ADC_IRQHandler>
	...

08002af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002af4:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <HAL_Init+0x40>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a0d      	ldr	r2, [pc, #52]	; (8002b30 <HAL_Init+0x40>)
 8002afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002afe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_Init+0x40>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a0a      	ldr	r2, [pc, #40]	; (8002b30 <HAL_Init+0x40>)
 8002b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b0c:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <HAL_Init+0x40>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a07      	ldr	r2, [pc, #28]	; (8002b30 <HAL_Init+0x40>)
 8002b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b18:	2003      	movs	r0, #3
 8002b1a:	f000 f94f 	bl	8002dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b1e:	2000      	movs	r0, #0
 8002b20:	f000 f808 	bl	8002b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b24:	f7ff fdbe 	bl	80026a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40023c00 	.word	0x40023c00

08002b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b3c:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <HAL_InitTick+0x54>)
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_InitTick+0x58>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	4619      	mov	r1, r3
 8002b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 f967 	bl	8002e26 <HAL_SYSTICK_Config>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e00e      	b.n	8002b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b0f      	cmp	r3, #15
 8002b66:	d80a      	bhi.n	8002b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b68:	2200      	movs	r2, #0
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b70:	f000 f92f 	bl	8002dd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b74:	4a06      	ldr	r2, [pc, #24]	; (8002b90 <HAL_InitTick+0x5c>)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	e000      	b.n	8002b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	20000320 	.word	0x20000320
 8002b8c:	20000328 	.word	0x20000328
 8002b90:	20000324 	.word	0x20000324

08002b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b98:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <HAL_IncTick+0x20>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <HAL_IncTick+0x24>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	4a04      	ldr	r2, [pc, #16]	; (8002bb8 <HAL_IncTick+0x24>)
 8002ba6:	6013      	str	r3, [r2, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	20000328 	.word	0x20000328
 8002bb8:	20000650 	.word	0x20000650

08002bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8002bc0:	4b03      	ldr	r3, [pc, #12]	; (8002bd0 <HAL_GetTick+0x14>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	20000650 	.word	0x20000650

08002bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bdc:	f7ff ffee 	bl	8002bbc <HAL_GetTick>
 8002be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bec:	d005      	beq.n	8002bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bee:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <HAL_Delay+0x44>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bfa:	bf00      	nop
 8002bfc:	f7ff ffde 	bl	8002bbc <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d8f7      	bhi.n	8002bfc <HAL_Delay+0x28>
  {
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000328 	.word	0x20000328

08002c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <__NVIC_SetPriorityGrouping+0x44>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c38:	4013      	ands	r3, r2
 8002c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c4e:	4a04      	ldr	r2, [pc, #16]	; (8002c60 <__NVIC_SetPriorityGrouping+0x44>)
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	60d3      	str	r3, [r2, #12]
}
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	e000ed00 	.word	0xe000ed00

08002c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c68:	4b04      	ldr	r3, [pc, #16]	; (8002c7c <__NVIC_GetPriorityGrouping+0x18>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	0a1b      	lsrs	r3, r3, #8
 8002c6e:	f003 0307 	and.w	r3, r3, #7
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	e000ed00 	.word	0xe000ed00

08002c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	db0b      	blt.n	8002caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	f003 021f 	and.w	r2, r3, #31
 8002c98:	4907      	ldr	r1, [pc, #28]	; (8002cb8 <__NVIC_EnableIRQ+0x38>)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	e000e100 	.word	0xe000e100

08002cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	6039      	str	r1, [r7, #0]
 8002cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	db0a      	blt.n	8002ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	490c      	ldr	r1, [pc, #48]	; (8002d08 <__NVIC_SetPriority+0x4c>)
 8002cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cda:	0112      	lsls	r2, r2, #4
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	440b      	add	r3, r1
 8002ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ce4:	e00a      	b.n	8002cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	4908      	ldr	r1, [pc, #32]	; (8002d0c <__NVIC_SetPriority+0x50>)
 8002cec:	79fb      	ldrb	r3, [r7, #7]
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	3b04      	subs	r3, #4
 8002cf4:	0112      	lsls	r2, r2, #4
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	761a      	strb	r2, [r3, #24]
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	e000e100 	.word	0xe000e100
 8002d0c:	e000ed00 	.word	0xe000ed00

08002d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b089      	sub	sp, #36	; 0x24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f1c3 0307 	rsb	r3, r3, #7
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	bf28      	it	cs
 8002d2e:	2304      	movcs	r3, #4
 8002d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	3304      	adds	r3, #4
 8002d36:	2b06      	cmp	r3, #6
 8002d38:	d902      	bls.n	8002d40 <NVIC_EncodePriority+0x30>
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3b03      	subs	r3, #3
 8002d3e:	e000      	b.n	8002d42 <NVIC_EncodePriority+0x32>
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d44:	f04f 32ff 	mov.w	r2, #4294967295
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43da      	mvns	r2, r3
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	401a      	ands	r2, r3
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d58:	f04f 31ff 	mov.w	r1, #4294967295
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d62:	43d9      	mvns	r1, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d68:	4313      	orrs	r3, r2
         );
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3724      	adds	r7, #36	; 0x24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
	...

08002d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d88:	d301      	bcc.n	8002d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e00f      	b.n	8002dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d8e:	4a0a      	ldr	r2, [pc, #40]	; (8002db8 <SysTick_Config+0x40>)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d96:	210f      	movs	r1, #15
 8002d98:	f04f 30ff 	mov.w	r0, #4294967295
 8002d9c:	f7ff ff8e 	bl	8002cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <SysTick_Config+0x40>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002da6:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <SysTick_Config+0x40>)
 8002da8:	2207      	movs	r2, #7
 8002daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	e000e010 	.word	0xe000e010

08002dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7ff ff29 	bl	8002c1c <__NVIC_SetPriorityGrouping>
}
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b086      	sub	sp, #24
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	4603      	mov	r3, r0
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	607a      	str	r2, [r7, #4]
 8002dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002de4:	f7ff ff3e 	bl	8002c64 <__NVIC_GetPriorityGrouping>
 8002de8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	6978      	ldr	r0, [r7, #20]
 8002df0:	f7ff ff8e 	bl	8002d10 <NVIC_EncodePriority>
 8002df4:	4602      	mov	r2, r0
 8002df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff ff5d 	bl	8002cbc <__NVIC_SetPriority>
}
 8002e02:	bf00      	nop
 8002e04:	3718      	adds	r7, #24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b082      	sub	sp, #8
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	4603      	mov	r3, r0
 8002e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff ff31 	bl	8002c80 <__NVIC_EnableIRQ>
}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff ffa2 	bl	8002d78 <SysTick_Config>
 8002e34:	4603      	mov	r3, r0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e4c:	f7ff feb6 	bl	8002bbc <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e099      	b.n	8002f90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0201 	bic.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e7c:	e00f      	b.n	8002e9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e7e:	f7ff fe9d 	bl	8002bbc <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b05      	cmp	r3, #5
 8002e8a:	d908      	bls.n	8002e9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2203      	movs	r2, #3
 8002e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e078      	b.n	8002f90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1e8      	bne.n	8002e7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	4b38      	ldr	r3, [pc, #224]	; (8002f98 <HAL_DMA_Init+0x158>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d107      	bne.n	8002f08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f00:	4313      	orrs	r3, r2
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f023 0307 	bic.w	r3, r3, #7
 8002f1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d117      	bne.n	8002f62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00e      	beq.n	8002f62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f9e9 	bl	800331c <DMA_CheckFifoParam>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d008      	beq.n	8002f62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2240      	movs	r2, #64	; 0x40
 8002f54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e016      	b.n	8002f90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f9a0 	bl	80032b0 <DMA_CalcBaseAndBitshift>
 8002f70:	4603      	mov	r3, r0
 8002f72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f78:	223f      	movs	r2, #63	; 0x3f
 8002f7a:	409a      	lsls	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	f010803f 	.word	0xf010803f

08002f9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fa8:	4b92      	ldr	r3, [pc, #584]	; (80031f4 <HAL_DMA_IRQHandler+0x258>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a92      	ldr	r2, [pc, #584]	; (80031f8 <HAL_DMA_IRQHandler+0x25c>)
 8002fae:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb2:	0a9b      	lsrs	r3, r3, #10
 8002fb4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc6:	2208      	movs	r2, #8
 8002fc8:	409a      	lsls	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d01a      	beq.n	8003008 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d013      	beq.n	8003008 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0204 	bic.w	r2, r2, #4
 8002fee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff4:	2208      	movs	r2, #8
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003000:	f043 0201 	orr.w	r2, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300c:	2201      	movs	r2, #1
 800300e:	409a      	lsls	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d012      	beq.n	800303e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00b      	beq.n	800303e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800302a:	2201      	movs	r2, #1
 800302c:	409a      	lsls	r2, r3
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003036:	f043 0202 	orr.w	r2, r3, #2
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003042:	2204      	movs	r2, #4
 8003044:	409a      	lsls	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4013      	ands	r3, r2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d012      	beq.n	8003074 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00b      	beq.n	8003074 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003060:	2204      	movs	r2, #4
 8003062:	409a      	lsls	r2, r3
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306c:	f043 0204 	orr.w	r2, r3, #4
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003078:	2210      	movs	r2, #16
 800307a:	409a      	lsls	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4013      	ands	r3, r2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d043      	beq.n	800310c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d03c      	beq.n	800310c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003096:	2210      	movs	r2, #16
 8003098:	409a      	lsls	r2, r3
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d018      	beq.n	80030de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d108      	bne.n	80030cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d024      	beq.n	800310c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	4798      	blx	r3
 80030ca:	e01f      	b.n	800310c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d01b      	beq.n	800310c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	4798      	blx	r3
 80030dc:	e016      	b.n	800310c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d107      	bne.n	80030fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0208 	bic.w	r2, r2, #8
 80030fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003110:	2220      	movs	r2, #32
 8003112:	409a      	lsls	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4013      	ands	r3, r2
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 808e 	beq.w	800323a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0310 	and.w	r3, r3, #16
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 8086 	beq.w	800323a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003132:	2220      	movs	r2, #32
 8003134:	409a      	lsls	r2, r3
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b05      	cmp	r3, #5
 8003144:	d136      	bne.n	80031b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0216 	bic.w	r2, r2, #22
 8003154:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695a      	ldr	r2, [r3, #20]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003164:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	d103      	bne.n	8003176 <HAL_DMA_IRQHandler+0x1da>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003172:	2b00      	cmp	r3, #0
 8003174:	d007      	beq.n	8003186 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0208 	bic.w	r2, r2, #8
 8003184:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318a:	223f      	movs	r2, #63	; 0x3f
 800318c:	409a      	lsls	r2, r3
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d07d      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	4798      	blx	r3
        }
        return;
 80031b2:	e078      	b.n	80032a6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d01c      	beq.n	80031fc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d108      	bne.n	80031e2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d030      	beq.n	800323a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	4798      	blx	r3
 80031e0:	e02b      	b.n	800323a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d027      	beq.n	800323a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	4798      	blx	r3
 80031f2:	e022      	b.n	800323a <HAL_DMA_IRQHandler+0x29e>
 80031f4:	20000320 	.word	0x20000320
 80031f8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10f      	bne.n	800322a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0210 	bic.w	r2, r2, #16
 8003218:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323e:	2b00      	cmp	r3, #0
 8003240:	d032      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d022      	beq.n	8003294 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2205      	movs	r2, #5
 8003252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0201 	bic.w	r2, r2, #1
 8003264:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	3301      	adds	r3, #1
 800326a:	60bb      	str	r3, [r7, #8]
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	429a      	cmp	r2, r3
 8003270:	d307      	bcc.n	8003282 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1f2      	bne.n	8003266 <HAL_DMA_IRQHandler+0x2ca>
 8003280:	e000      	b.n	8003284 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003282:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	4798      	blx	r3
 80032a4:	e000      	b.n	80032a8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80032a6:	bf00      	nop
    }
  }
}
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop

080032b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	3b10      	subs	r3, #16
 80032c0:	4a14      	ldr	r2, [pc, #80]	; (8003314 <DMA_CalcBaseAndBitshift+0x64>)
 80032c2:	fba2 2303 	umull	r2, r3, r2, r3
 80032c6:	091b      	lsrs	r3, r3, #4
 80032c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032ca:	4a13      	ldr	r2, [pc, #76]	; (8003318 <DMA_CalcBaseAndBitshift+0x68>)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4413      	add	r3, r2
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2b03      	cmp	r3, #3
 80032dc:	d909      	bls.n	80032f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032e6:	f023 0303 	bic.w	r3, r3, #3
 80032ea:	1d1a      	adds	r2, r3, #4
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	659a      	str	r2, [r3, #88]	; 0x58
 80032f0:	e007      	b.n	8003302 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032fa:	f023 0303 	bic.w	r3, r3, #3
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003306:	4618      	mov	r0, r3
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	aaaaaaab 	.word	0xaaaaaaab
 8003318:	0800efac 	.word	0x0800efac

0800331c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d11f      	bne.n	8003376 <DMA_CheckFifoParam+0x5a>
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2b03      	cmp	r3, #3
 800333a:	d856      	bhi.n	80033ea <DMA_CheckFifoParam+0xce>
 800333c:	a201      	add	r2, pc, #4	; (adr r2, 8003344 <DMA_CheckFifoParam+0x28>)
 800333e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003342:	bf00      	nop
 8003344:	08003355 	.word	0x08003355
 8003348:	08003367 	.word	0x08003367
 800334c:	08003355 	.word	0x08003355
 8003350:	080033eb 	.word	0x080033eb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d046      	beq.n	80033ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003364:	e043      	b.n	80033ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800336e:	d140      	bne.n	80033f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003374:	e03d      	b.n	80033f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800337e:	d121      	bne.n	80033c4 <DMA_CheckFifoParam+0xa8>
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2b03      	cmp	r3, #3
 8003384:	d837      	bhi.n	80033f6 <DMA_CheckFifoParam+0xda>
 8003386:	a201      	add	r2, pc, #4	; (adr r2, 800338c <DMA_CheckFifoParam+0x70>)
 8003388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338c:	0800339d 	.word	0x0800339d
 8003390:	080033a3 	.word	0x080033a3
 8003394:	0800339d 	.word	0x0800339d
 8003398:	080033b5 	.word	0x080033b5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	73fb      	strb	r3, [r7, #15]
      break;
 80033a0:	e030      	b.n	8003404 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d025      	beq.n	80033fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033b2:	e022      	b.n	80033fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033bc:	d11f      	bne.n	80033fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033c2:	e01c      	b.n	80033fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d903      	bls.n	80033d2 <DMA_CheckFifoParam+0xb6>
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2b03      	cmp	r3, #3
 80033ce:	d003      	beq.n	80033d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033d0:	e018      	b.n	8003404 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	73fb      	strb	r3, [r7, #15]
      break;
 80033d6:	e015      	b.n	8003404 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00e      	beq.n	8003402 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	73fb      	strb	r3, [r7, #15]
      break;
 80033e8:	e00b      	b.n	8003402 <DMA_CheckFifoParam+0xe6>
      break;
 80033ea:	bf00      	nop
 80033ec:	e00a      	b.n	8003404 <DMA_CheckFifoParam+0xe8>
      break;
 80033ee:	bf00      	nop
 80033f0:	e008      	b.n	8003404 <DMA_CheckFifoParam+0xe8>
      break;
 80033f2:	bf00      	nop
 80033f4:	e006      	b.n	8003404 <DMA_CheckFifoParam+0xe8>
      break;
 80033f6:	bf00      	nop
 80033f8:	e004      	b.n	8003404 <DMA_CheckFifoParam+0xe8>
      break;
 80033fa:	bf00      	nop
 80033fc:	e002      	b.n	8003404 <DMA_CheckFifoParam+0xe8>
      break;   
 80033fe:	bf00      	nop
 8003400:	e000      	b.n	8003404 <DMA_CheckFifoParam+0xe8>
      break;
 8003402:	bf00      	nop
    }
  } 
  
  return status; 
 8003404:	7bfb      	ldrb	r3, [r7, #15]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop

08003414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003414:	b480      	push	{r7}
 8003416:	b089      	sub	sp, #36	; 0x24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003422:	2300      	movs	r3, #0
 8003424:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003426:	2300      	movs	r3, #0
 8003428:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800342a:	2300      	movs	r3, #0
 800342c:	61fb      	str	r3, [r7, #28]
 800342e:	e16b      	b.n	8003708 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003430:	2201      	movs	r2, #1
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	4013      	ands	r3, r2
 8003442:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	429a      	cmp	r2, r3
 800344a:	f040 815a 	bne.w	8003702 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	2b01      	cmp	r3, #1
 8003458:	d005      	beq.n	8003466 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003462:	2b02      	cmp	r3, #2
 8003464:	d130      	bne.n	80034c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	2203      	movs	r2, #3
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	43db      	mvns	r3, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4013      	ands	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4313      	orrs	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800349c:	2201      	movs	r2, #1
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	43db      	mvns	r3, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4013      	ands	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	091b      	lsrs	r3, r3, #4
 80034b2:	f003 0201 	and.w	r2, r3, #1
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	4313      	orrs	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d017      	beq.n	8003504 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	2203      	movs	r2, #3
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4013      	ands	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 0303 	and.w	r3, r3, #3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d123      	bne.n	8003558 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	08da      	lsrs	r2, r3, #3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3208      	adds	r2, #8
 8003518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800351c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	220f      	movs	r2, #15
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4013      	ands	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	691a      	ldr	r2, [r3, #16]
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	4313      	orrs	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	08da      	lsrs	r2, r3, #3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3208      	adds	r2, #8
 8003552:	69b9      	ldr	r1, [r7, #24]
 8003554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	2203      	movs	r2, #3
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4013      	ands	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f003 0203 	and.w	r2, r3, #3
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4313      	orrs	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80b4 	beq.w	8003702 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	4b60      	ldr	r3, [pc, #384]	; (8003720 <HAL_GPIO_Init+0x30c>)
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	4a5f      	ldr	r2, [pc, #380]	; (8003720 <HAL_GPIO_Init+0x30c>)
 80035a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035a8:	6453      	str	r3, [r2, #68]	; 0x44
 80035aa:	4b5d      	ldr	r3, [pc, #372]	; (8003720 <HAL_GPIO_Init+0x30c>)
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035b6:	4a5b      	ldr	r2, [pc, #364]	; (8003724 <HAL_GPIO_Init+0x310>)
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	089b      	lsrs	r3, r3, #2
 80035bc:	3302      	adds	r3, #2
 80035be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	220f      	movs	r2, #15
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	43db      	mvns	r3, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4013      	ands	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a52      	ldr	r2, [pc, #328]	; (8003728 <HAL_GPIO_Init+0x314>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d02b      	beq.n	800363a <HAL_GPIO_Init+0x226>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a51      	ldr	r2, [pc, #324]	; (800372c <HAL_GPIO_Init+0x318>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d025      	beq.n	8003636 <HAL_GPIO_Init+0x222>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a50      	ldr	r2, [pc, #320]	; (8003730 <HAL_GPIO_Init+0x31c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d01f      	beq.n	8003632 <HAL_GPIO_Init+0x21e>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a4f      	ldr	r2, [pc, #316]	; (8003734 <HAL_GPIO_Init+0x320>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d019      	beq.n	800362e <HAL_GPIO_Init+0x21a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a4e      	ldr	r2, [pc, #312]	; (8003738 <HAL_GPIO_Init+0x324>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d013      	beq.n	800362a <HAL_GPIO_Init+0x216>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a4d      	ldr	r2, [pc, #308]	; (800373c <HAL_GPIO_Init+0x328>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d00d      	beq.n	8003626 <HAL_GPIO_Init+0x212>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a4c      	ldr	r2, [pc, #304]	; (8003740 <HAL_GPIO_Init+0x32c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d007      	beq.n	8003622 <HAL_GPIO_Init+0x20e>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a4b      	ldr	r2, [pc, #300]	; (8003744 <HAL_GPIO_Init+0x330>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d101      	bne.n	800361e <HAL_GPIO_Init+0x20a>
 800361a:	2307      	movs	r3, #7
 800361c:	e00e      	b.n	800363c <HAL_GPIO_Init+0x228>
 800361e:	2308      	movs	r3, #8
 8003620:	e00c      	b.n	800363c <HAL_GPIO_Init+0x228>
 8003622:	2306      	movs	r3, #6
 8003624:	e00a      	b.n	800363c <HAL_GPIO_Init+0x228>
 8003626:	2305      	movs	r3, #5
 8003628:	e008      	b.n	800363c <HAL_GPIO_Init+0x228>
 800362a:	2304      	movs	r3, #4
 800362c:	e006      	b.n	800363c <HAL_GPIO_Init+0x228>
 800362e:	2303      	movs	r3, #3
 8003630:	e004      	b.n	800363c <HAL_GPIO_Init+0x228>
 8003632:	2302      	movs	r3, #2
 8003634:	e002      	b.n	800363c <HAL_GPIO_Init+0x228>
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <HAL_GPIO_Init+0x228>
 800363a:	2300      	movs	r3, #0
 800363c:	69fa      	ldr	r2, [r7, #28]
 800363e:	f002 0203 	and.w	r2, r2, #3
 8003642:	0092      	lsls	r2, r2, #2
 8003644:	4093      	lsls	r3, r2
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4313      	orrs	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800364c:	4935      	ldr	r1, [pc, #212]	; (8003724 <HAL_GPIO_Init+0x310>)
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	089b      	lsrs	r3, r3, #2
 8003652:	3302      	adds	r3, #2
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800365a:	4b3b      	ldr	r3, [pc, #236]	; (8003748 <HAL_GPIO_Init+0x334>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	43db      	mvns	r3, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4013      	ands	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800367e:	4a32      	ldr	r2, [pc, #200]	; (8003748 <HAL_GPIO_Init+0x334>)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003684:	4b30      	ldr	r3, [pc, #192]	; (8003748 <HAL_GPIO_Init+0x334>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	43db      	mvns	r3, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4013      	ands	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036a8:	4a27      	ldr	r2, [pc, #156]	; (8003748 <HAL_GPIO_Init+0x334>)
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036ae:	4b26      	ldr	r3, [pc, #152]	; (8003748 <HAL_GPIO_Init+0x334>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	43db      	mvns	r3, r3
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4013      	ands	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036d2:	4a1d      	ldr	r2, [pc, #116]	; (8003748 <HAL_GPIO_Init+0x334>)
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036d8:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <HAL_GPIO_Init+0x334>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	43db      	mvns	r3, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4013      	ands	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036fc:	4a12      	ldr	r2, [pc, #72]	; (8003748 <HAL_GPIO_Init+0x334>)
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	3301      	adds	r3, #1
 8003706:	61fb      	str	r3, [r7, #28]
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	2b0f      	cmp	r3, #15
 800370c:	f67f ae90 	bls.w	8003430 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003710:	bf00      	nop
 8003712:	bf00      	nop
 8003714:	3724      	adds	r7, #36	; 0x24
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	40023800 	.word	0x40023800
 8003724:	40013800 	.word	0x40013800
 8003728:	40020000 	.word	0x40020000
 800372c:	40020400 	.word	0x40020400
 8003730:	40020800 	.word	0x40020800
 8003734:	40020c00 	.word	0x40020c00
 8003738:	40021000 	.word	0x40021000
 800373c:	40021400 	.word	0x40021400
 8003740:	40021800 	.word	0x40021800
 8003744:	40021c00 	.word	0x40021c00
 8003748:	40013c00 	.word	0x40013c00

0800374c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	807b      	strh	r3, [r7, #2]
 8003758:	4613      	mov	r3, r2
 800375a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800375c:	787b      	ldrb	r3, [r7, #1]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003762:	887a      	ldrh	r2, [r7, #2]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003768:	e003      	b.n	8003772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800376a:	887b      	ldrh	r3, [r7, #2]
 800376c:	041a      	lsls	r2, r3, #16
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	619a      	str	r2, [r3, #24]
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800377e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003780:	b08f      	sub	sp, #60	; 0x3c
 8003782:	af0a      	add	r7, sp, #40	; 0x28
 8003784:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e054      	b.n	800383a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d106      	bne.n	80037b0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f005 fdfa 	bl	80093a4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2203      	movs	r2, #3
 80037b4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d102      	bne.n	80037ca <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f002 ff50 	bl	8006674 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	603b      	str	r3, [r7, #0]
 80037da:	687e      	ldr	r6, [r7, #4]
 80037dc:	466d      	mov	r5, sp
 80037de:	f106 0410 	add.w	r4, r6, #16
 80037e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80037f2:	1d33      	adds	r3, r6, #4
 80037f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037f6:	6838      	ldr	r0, [r7, #0]
 80037f8:	f002 feca 	bl	8006590 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2101      	movs	r1, #1
 8003802:	4618      	mov	r0, r3
 8003804:	f002 ff47 	bl	8006696 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	603b      	str	r3, [r7, #0]
 800380e:	687e      	ldr	r6, [r7, #4]
 8003810:	466d      	mov	r5, sp
 8003812:	f106 0410 	add.w	r4, r6, #16
 8003816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800381a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800381c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800381e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003822:	e885 0003 	stmia.w	r5, {r0, r1}
 8003826:	1d33      	adds	r3, r6, #4
 8003828:	cb0e      	ldmia	r3, {r1, r2, r3}
 800382a:	6838      	ldr	r0, [r7, #0]
 800382c:	f003 f8ae 	bl	800698c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003842 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003842:	b590      	push	{r4, r7, lr}
 8003844:	b089      	sub	sp, #36	; 0x24
 8003846:	af04      	add	r7, sp, #16
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	4608      	mov	r0, r1
 800384c:	4611      	mov	r1, r2
 800384e:	461a      	mov	r2, r3
 8003850:	4603      	mov	r3, r0
 8003852:	70fb      	strb	r3, [r7, #3]
 8003854:	460b      	mov	r3, r1
 8003856:	70bb      	strb	r3, [r7, #2]
 8003858:	4613      	mov	r3, r2
 800385a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_HCD_HC_Init+0x28>
 8003866:	2302      	movs	r3, #2
 8003868:	e076      	b.n	8003958 <HAL_HCD_HC_Init+0x116>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003872:	78fb      	ldrb	r3, [r7, #3]
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	212c      	movs	r1, #44	; 0x2c
 8003878:	fb01 f303 	mul.w	r3, r1, r3
 800387c:	4413      	add	r3, r2
 800387e:	333d      	adds	r3, #61	; 0x3d
 8003880:	2200      	movs	r2, #0
 8003882:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003884:	78fb      	ldrb	r3, [r7, #3]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	212c      	movs	r1, #44	; 0x2c
 800388a:	fb01 f303 	mul.w	r3, r1, r3
 800388e:	4413      	add	r3, r2
 8003890:	3338      	adds	r3, #56	; 0x38
 8003892:	787a      	ldrb	r2, [r7, #1]
 8003894:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003896:	78fb      	ldrb	r3, [r7, #3]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	212c      	movs	r1, #44	; 0x2c
 800389c:	fb01 f303 	mul.w	r3, r1, r3
 80038a0:	4413      	add	r3, r2
 80038a2:	3340      	adds	r3, #64	; 0x40
 80038a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80038a6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80038a8:	78fb      	ldrb	r3, [r7, #3]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	212c      	movs	r1, #44	; 0x2c
 80038ae:	fb01 f303 	mul.w	r3, r1, r3
 80038b2:	4413      	add	r3, r2
 80038b4:	3339      	adds	r3, #57	; 0x39
 80038b6:	78fa      	ldrb	r2, [r7, #3]
 80038b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80038ba:	78fb      	ldrb	r3, [r7, #3]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	212c      	movs	r1, #44	; 0x2c
 80038c0:	fb01 f303 	mul.w	r3, r1, r3
 80038c4:	4413      	add	r3, r2
 80038c6:	333f      	adds	r3, #63	; 0x3f
 80038c8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80038cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80038ce:	78fb      	ldrb	r3, [r7, #3]
 80038d0:	78ba      	ldrb	r2, [r7, #2]
 80038d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038d6:	b2d0      	uxtb	r0, r2
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	212c      	movs	r1, #44	; 0x2c
 80038dc:	fb01 f303 	mul.w	r3, r1, r3
 80038e0:	4413      	add	r3, r2
 80038e2:	333a      	adds	r3, #58	; 0x3a
 80038e4:	4602      	mov	r2, r0
 80038e6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80038e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	da09      	bge.n	8003904 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80038f0:	78fb      	ldrb	r3, [r7, #3]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	212c      	movs	r1, #44	; 0x2c
 80038f6:	fb01 f303 	mul.w	r3, r1, r3
 80038fa:	4413      	add	r3, r2
 80038fc:	333b      	adds	r3, #59	; 0x3b
 80038fe:	2201      	movs	r2, #1
 8003900:	701a      	strb	r2, [r3, #0]
 8003902:	e008      	b.n	8003916 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003904:	78fb      	ldrb	r3, [r7, #3]
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	212c      	movs	r1, #44	; 0x2c
 800390a:	fb01 f303 	mul.w	r3, r1, r3
 800390e:	4413      	add	r3, r2
 8003910:	333b      	adds	r3, #59	; 0x3b
 8003912:	2200      	movs	r2, #0
 8003914:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003916:	78fb      	ldrb	r3, [r7, #3]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	212c      	movs	r1, #44	; 0x2c
 800391c:	fb01 f303 	mul.w	r3, r1, r3
 8003920:	4413      	add	r3, r2
 8003922:	333c      	adds	r3, #60	; 0x3c
 8003924:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003928:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6818      	ldr	r0, [r3, #0]
 800392e:	787c      	ldrb	r4, [r7, #1]
 8003930:	78ba      	ldrb	r2, [r7, #2]
 8003932:	78f9      	ldrb	r1, [r7, #3]
 8003934:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003936:	9302      	str	r3, [sp, #8]
 8003938:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800393c:	9301      	str	r3, [sp, #4]
 800393e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	4623      	mov	r3, r4
 8003946:	f003 f99b 	bl	8006c80 <USB_HC_Init>
 800394a:	4603      	mov	r3, r0
 800394c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003956:	7bfb      	ldrb	r3, [r7, #15]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	bd90      	pop	{r4, r7, pc}

08003960 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003976:	2b01      	cmp	r3, #1
 8003978:	d101      	bne.n	800397e <HAL_HCD_HC_Halt+0x1e>
 800397a:	2302      	movs	r3, #2
 800397c:	e00f      	b.n	800399e <HAL_HCD_HC_Halt+0x3e>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	78fa      	ldrb	r2, [r7, #3]
 800398c:	4611      	mov	r1, r2
 800398e:	4618      	mov	r0, r3
 8003990:	f003 fbd7 	bl	8007142 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800399c:	7bfb      	ldrb	r3, [r7, #15]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	4608      	mov	r0, r1
 80039b2:	4611      	mov	r1, r2
 80039b4:	461a      	mov	r2, r3
 80039b6:	4603      	mov	r3, r0
 80039b8:	70fb      	strb	r3, [r7, #3]
 80039ba:	460b      	mov	r3, r1
 80039bc:	70bb      	strb	r3, [r7, #2]
 80039be:	4613      	mov	r3, r2
 80039c0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80039c2:	78fb      	ldrb	r3, [r7, #3]
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	212c      	movs	r1, #44	; 0x2c
 80039c8:	fb01 f303 	mul.w	r3, r1, r3
 80039cc:	4413      	add	r3, r2
 80039ce:	333b      	adds	r3, #59	; 0x3b
 80039d0:	78ba      	ldrb	r2, [r7, #2]
 80039d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80039d4:	78fb      	ldrb	r3, [r7, #3]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	212c      	movs	r1, #44	; 0x2c
 80039da:	fb01 f303 	mul.w	r3, r1, r3
 80039de:	4413      	add	r3, r2
 80039e0:	333f      	adds	r3, #63	; 0x3f
 80039e2:	787a      	ldrb	r2, [r7, #1]
 80039e4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80039e6:	7c3b      	ldrb	r3, [r7, #16]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d112      	bne.n	8003a12 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80039ec:	78fb      	ldrb	r3, [r7, #3]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	212c      	movs	r1, #44	; 0x2c
 80039f2:	fb01 f303 	mul.w	r3, r1, r3
 80039f6:	4413      	add	r3, r2
 80039f8:	3342      	adds	r3, #66	; 0x42
 80039fa:	2203      	movs	r2, #3
 80039fc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80039fe:	78fb      	ldrb	r3, [r7, #3]
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	212c      	movs	r1, #44	; 0x2c
 8003a04:	fb01 f303 	mul.w	r3, r1, r3
 8003a08:	4413      	add	r3, r2
 8003a0a:	333d      	adds	r3, #61	; 0x3d
 8003a0c:	7f3a      	ldrb	r2, [r7, #28]
 8003a0e:	701a      	strb	r2, [r3, #0]
 8003a10:	e008      	b.n	8003a24 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a12:	78fb      	ldrb	r3, [r7, #3]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	212c      	movs	r1, #44	; 0x2c
 8003a18:	fb01 f303 	mul.w	r3, r1, r3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	3342      	adds	r3, #66	; 0x42
 8003a20:	2202      	movs	r2, #2
 8003a22:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003a24:	787b      	ldrb	r3, [r7, #1]
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	f200 80c6 	bhi.w	8003bb8 <HAL_HCD_HC_SubmitRequest+0x210>
 8003a2c:	a201      	add	r2, pc, #4	; (adr r2, 8003a34 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a32:	bf00      	nop
 8003a34:	08003a45 	.word	0x08003a45
 8003a38:	08003ba5 	.word	0x08003ba5
 8003a3c:	08003aa9 	.word	0x08003aa9
 8003a40:	08003b27 	.word	0x08003b27
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003a44:	7c3b      	ldrb	r3, [r7, #16]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	f040 80b8 	bne.w	8003bbc <HAL_HCD_HC_SubmitRequest+0x214>
 8003a4c:	78bb      	ldrb	r3, [r7, #2]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f040 80b4 	bne.w	8003bbc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003a54:	8b3b      	ldrh	r3, [r7, #24]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d108      	bne.n	8003a6c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003a5a:	78fb      	ldrb	r3, [r7, #3]
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	212c      	movs	r1, #44	; 0x2c
 8003a60:	fb01 f303 	mul.w	r3, r1, r3
 8003a64:	4413      	add	r3, r2
 8003a66:	3355      	adds	r3, #85	; 0x55
 8003a68:	2201      	movs	r2, #1
 8003a6a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003a6c:	78fb      	ldrb	r3, [r7, #3]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	212c      	movs	r1, #44	; 0x2c
 8003a72:	fb01 f303 	mul.w	r3, r1, r3
 8003a76:	4413      	add	r3, r2
 8003a78:	3355      	adds	r3, #85	; 0x55
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d109      	bne.n	8003a94 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a80:	78fb      	ldrb	r3, [r7, #3]
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	212c      	movs	r1, #44	; 0x2c
 8003a86:	fb01 f303 	mul.w	r3, r1, r3
 8003a8a:	4413      	add	r3, r2
 8003a8c:	3342      	adds	r3, #66	; 0x42
 8003a8e:	2200      	movs	r2, #0
 8003a90:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003a92:	e093      	b.n	8003bbc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a94:	78fb      	ldrb	r3, [r7, #3]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	212c      	movs	r1, #44	; 0x2c
 8003a9a:	fb01 f303 	mul.w	r3, r1, r3
 8003a9e:	4413      	add	r3, r2
 8003aa0:	3342      	adds	r3, #66	; 0x42
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	701a      	strb	r2, [r3, #0]
      break;
 8003aa6:	e089      	b.n	8003bbc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003aa8:	78bb      	ldrb	r3, [r7, #2]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d11d      	bne.n	8003aea <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003aae:	78fb      	ldrb	r3, [r7, #3]
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	212c      	movs	r1, #44	; 0x2c
 8003ab4:	fb01 f303 	mul.w	r3, r1, r3
 8003ab8:	4413      	add	r3, r2
 8003aba:	3355      	adds	r3, #85	; 0x55
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d109      	bne.n	8003ad6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ac2:	78fb      	ldrb	r3, [r7, #3]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	212c      	movs	r1, #44	; 0x2c
 8003ac8:	fb01 f303 	mul.w	r3, r1, r3
 8003acc:	4413      	add	r3, r2
 8003ace:	3342      	adds	r3, #66	; 0x42
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003ad4:	e073      	b.n	8003bbe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ad6:	78fb      	ldrb	r3, [r7, #3]
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	212c      	movs	r1, #44	; 0x2c
 8003adc:	fb01 f303 	mul.w	r3, r1, r3
 8003ae0:	4413      	add	r3, r2
 8003ae2:	3342      	adds	r3, #66	; 0x42
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	701a      	strb	r2, [r3, #0]
      break;
 8003ae8:	e069      	b.n	8003bbe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003aea:	78fb      	ldrb	r3, [r7, #3]
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	212c      	movs	r1, #44	; 0x2c
 8003af0:	fb01 f303 	mul.w	r3, r1, r3
 8003af4:	4413      	add	r3, r2
 8003af6:	3354      	adds	r3, #84	; 0x54
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d109      	bne.n	8003b12 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003afe:	78fb      	ldrb	r3, [r7, #3]
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	212c      	movs	r1, #44	; 0x2c
 8003b04:	fb01 f303 	mul.w	r3, r1, r3
 8003b08:	4413      	add	r3, r2
 8003b0a:	3342      	adds	r3, #66	; 0x42
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	701a      	strb	r2, [r3, #0]
      break;
 8003b10:	e055      	b.n	8003bbe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b12:	78fb      	ldrb	r3, [r7, #3]
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	212c      	movs	r1, #44	; 0x2c
 8003b18:	fb01 f303 	mul.w	r3, r1, r3
 8003b1c:	4413      	add	r3, r2
 8003b1e:	3342      	adds	r3, #66	; 0x42
 8003b20:	2202      	movs	r2, #2
 8003b22:	701a      	strb	r2, [r3, #0]
      break;
 8003b24:	e04b      	b.n	8003bbe <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003b26:	78bb      	ldrb	r3, [r7, #2]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d11d      	bne.n	8003b68 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	212c      	movs	r1, #44	; 0x2c
 8003b32:	fb01 f303 	mul.w	r3, r1, r3
 8003b36:	4413      	add	r3, r2
 8003b38:	3355      	adds	r3, #85	; 0x55
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d109      	bne.n	8003b54 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b40:	78fb      	ldrb	r3, [r7, #3]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	212c      	movs	r1, #44	; 0x2c
 8003b46:	fb01 f303 	mul.w	r3, r1, r3
 8003b4a:	4413      	add	r3, r2
 8003b4c:	3342      	adds	r3, #66	; 0x42
 8003b4e:	2200      	movs	r2, #0
 8003b50:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003b52:	e034      	b.n	8003bbe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b54:	78fb      	ldrb	r3, [r7, #3]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	212c      	movs	r1, #44	; 0x2c
 8003b5a:	fb01 f303 	mul.w	r3, r1, r3
 8003b5e:	4413      	add	r3, r2
 8003b60:	3342      	adds	r3, #66	; 0x42
 8003b62:	2202      	movs	r2, #2
 8003b64:	701a      	strb	r2, [r3, #0]
      break;
 8003b66:	e02a      	b.n	8003bbe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003b68:	78fb      	ldrb	r3, [r7, #3]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	212c      	movs	r1, #44	; 0x2c
 8003b6e:	fb01 f303 	mul.w	r3, r1, r3
 8003b72:	4413      	add	r3, r2
 8003b74:	3354      	adds	r3, #84	; 0x54
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d109      	bne.n	8003b90 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	212c      	movs	r1, #44	; 0x2c
 8003b82:	fb01 f303 	mul.w	r3, r1, r3
 8003b86:	4413      	add	r3, r2
 8003b88:	3342      	adds	r3, #66	; 0x42
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	701a      	strb	r2, [r3, #0]
      break;
 8003b8e:	e016      	b.n	8003bbe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b90:	78fb      	ldrb	r3, [r7, #3]
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	212c      	movs	r1, #44	; 0x2c
 8003b96:	fb01 f303 	mul.w	r3, r1, r3
 8003b9a:	4413      	add	r3, r2
 8003b9c:	3342      	adds	r3, #66	; 0x42
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	701a      	strb	r2, [r3, #0]
      break;
 8003ba2:	e00c      	b.n	8003bbe <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ba4:	78fb      	ldrb	r3, [r7, #3]
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	212c      	movs	r1, #44	; 0x2c
 8003baa:	fb01 f303 	mul.w	r3, r1, r3
 8003bae:	4413      	add	r3, r2
 8003bb0:	3342      	adds	r3, #66	; 0x42
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	701a      	strb	r2, [r3, #0]
      break;
 8003bb6:	e002      	b.n	8003bbe <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003bb8:	bf00      	nop
 8003bba:	e000      	b.n	8003bbe <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003bbc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003bbe:	78fb      	ldrb	r3, [r7, #3]
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	212c      	movs	r1, #44	; 0x2c
 8003bc4:	fb01 f303 	mul.w	r3, r1, r3
 8003bc8:	4413      	add	r3, r2
 8003bca:	3344      	adds	r3, #68	; 0x44
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003bd0:	78fb      	ldrb	r3, [r7, #3]
 8003bd2:	8b3a      	ldrh	r2, [r7, #24]
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	202c      	movs	r0, #44	; 0x2c
 8003bd8:	fb00 f303 	mul.w	r3, r0, r3
 8003bdc:	440b      	add	r3, r1
 8003bde:	334c      	adds	r3, #76	; 0x4c
 8003be0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003be2:	78fb      	ldrb	r3, [r7, #3]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	212c      	movs	r1, #44	; 0x2c
 8003be8:	fb01 f303 	mul.w	r3, r1, r3
 8003bec:	4413      	add	r3, r2
 8003bee:	3360      	adds	r3, #96	; 0x60
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003bf4:	78fb      	ldrb	r3, [r7, #3]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	212c      	movs	r1, #44	; 0x2c
 8003bfa:	fb01 f303 	mul.w	r3, r1, r3
 8003bfe:	4413      	add	r3, r2
 8003c00:	3350      	adds	r3, #80	; 0x50
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003c06:	78fb      	ldrb	r3, [r7, #3]
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	212c      	movs	r1, #44	; 0x2c
 8003c0c:	fb01 f303 	mul.w	r3, r1, r3
 8003c10:	4413      	add	r3, r2
 8003c12:	3339      	adds	r3, #57	; 0x39
 8003c14:	78fa      	ldrb	r2, [r7, #3]
 8003c16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003c18:	78fb      	ldrb	r3, [r7, #3]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	212c      	movs	r1, #44	; 0x2c
 8003c1e:	fb01 f303 	mul.w	r3, r1, r3
 8003c22:	4413      	add	r3, r2
 8003c24:	3361      	adds	r3, #97	; 0x61
 8003c26:	2200      	movs	r2, #0
 8003c28:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6818      	ldr	r0, [r3, #0]
 8003c2e:	78fb      	ldrb	r3, [r7, #3]
 8003c30:	222c      	movs	r2, #44	; 0x2c
 8003c32:	fb02 f303 	mul.w	r3, r2, r3
 8003c36:	3338      	adds	r3, #56	; 0x38
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	18d1      	adds	r1, r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	461a      	mov	r2, r3
 8003c44:	f003 f92a 	bl	8006e9c <USB_HC_StartXfer>
 8003c48:	4603      	mov	r3, r0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop

08003c54 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f002 fe4d 	bl	800690a <USB_GetMode>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	f040 80f6 	bne.w	8003e64 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f002 fe31 	bl	80068e4 <USB_ReadInterrupts>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 80ec 	beq.w	8003e62 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f002 fe28 	bl	80068e4 <USB_ReadInterrupts>
 8003c94:	4603      	mov	r3, r0
 8003c96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c9e:	d104      	bne.n	8003caa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003ca8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f002 fe18 	bl	80068e4 <USB_ReadInterrupts>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cbe:	d104      	bne.n	8003cca <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003cc8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f002 fe08 	bl	80068e4 <USB_ReadInterrupts>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cde:	d104      	bne.n	8003cea <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003ce8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f002 fdf8 	bl	80068e4 <USB_ReadInterrupts>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d103      	bne.n	8003d06 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2202      	movs	r2, #2
 8003d04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f002 fdea 	bl	80068e4 <USB_ReadInterrupts>
 8003d10:	4603      	mov	r3, r0
 8003d12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d1a:	d11c      	bne.n	8003d56 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003d24:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10f      	bne.n	8003d56 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003d36:	2110      	movs	r1, #16
 8003d38:	6938      	ldr	r0, [r7, #16]
 8003d3a:	f002 fcf9 	bl	8006730 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003d3e:	6938      	ldr	r0, [r7, #16]
 8003d40:	f002 fd1a 	bl	8006778 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2101      	movs	r1, #1
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f002 fed2 	bl	8006af4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f005 fba5 	bl	80094a0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f002 fdc2 	bl	80068e4 <USB_ReadInterrupts>
 8003d60:	4603      	mov	r3, r0
 8003d62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d6a:	d102      	bne.n	8003d72 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f001 fa03 	bl	8005178 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f002 fdb4 	bl	80068e4 <USB_ReadInterrupts>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	2b08      	cmp	r3, #8
 8003d84:	d106      	bne.n	8003d94 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f005 fb6e 	bl	8009468 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2208      	movs	r2, #8
 8003d92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f002 fda3 	bl	80068e4 <USB_ReadInterrupts>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	f003 0310 	and.w	r3, r3, #16
 8003da4:	2b10      	cmp	r3, #16
 8003da6:	d101      	bne.n	8003dac <HAL_HCD_IRQHandler+0x158>
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <HAL_HCD_IRQHandler+0x15a>
 8003dac:	2300      	movs	r3, #0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d012      	beq.n	8003dd8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	699a      	ldr	r2, [r3, #24]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0210 	bic.w	r2, r2, #16
 8003dc0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f001 f906 	bl	8004fd4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699a      	ldr	r2, [r3, #24]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0210 	orr.w	r2, r2, #16
 8003dd6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f002 fd81 	bl	80068e4 <USB_ReadInterrupts>
 8003de2:	4603      	mov	r3, r0
 8003de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003dec:	d13a      	bne.n	8003e64 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f003 f994 	bl	8007120 <USB_HC_ReadInterrupt>
 8003df8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]
 8003dfe:	e025      	b.n	8003e4c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	fa22 f303 	lsr.w	r3, r2, r3
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d018      	beq.n	8003e46 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e2a:	d106      	bne.n	8003e3a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	4619      	mov	r1, r3
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f8ab 	bl	8003f8e <HCD_HC_IN_IRQHandler>
 8003e38:	e005      	b.n	8003e46 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	4619      	mov	r1, r3
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 fcc6 	bl	80047d2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d3d4      	bcc.n	8003e00 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e5e:	615a      	str	r2, [r3, #20]
 8003e60:	e000      	b.n	8003e64 <HAL_HCD_IRQHandler+0x210>
      return;
 8003e62:	bf00      	nop
    }
  }
}
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b082      	sub	sp, #8
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d101      	bne.n	8003e80 <HAL_HCD_Start+0x16>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	e013      	b.n	8003ea8 <HAL_HCD_Start+0x3e>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f002 fe94 	bl	8006bbc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f002 fbda 	bl	8006652 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3708      	adds	r7, #8
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d101      	bne.n	8003ec6 <HAL_HCD_Stop+0x16>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	e00d      	b.n	8003ee2 <HAL_HCD_Stop+0x32>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f003 fa8e 	bl	80073f4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b082      	sub	sp, #8
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f002 fe36 	bl	8006b68 <USB_ResetPort>
 8003efc:	4603      	mov	r3, r0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	460b      	mov	r3, r1
 8003f10:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003f12:	78fb      	ldrb	r3, [r7, #3]
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	212c      	movs	r1, #44	; 0x2c
 8003f18:	fb01 f303 	mul.w	r3, r1, r3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	3360      	adds	r3, #96	; 0x60
 8003f20:	781b      	ldrb	r3, [r3, #0]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b083      	sub	sp, #12
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
 8003f36:	460b      	mov	r3, r1
 8003f38:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003f3a:	78fb      	ldrb	r3, [r7, #3]
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	212c      	movs	r1, #44	; 0x2c
 8003f40:	fb01 f303 	mul.w	r3, r1, r3
 8003f44:	4413      	add	r3, r2
 8003f46:	3350      	adds	r3, #80	; 0x50
 8003f48:	681b      	ldr	r3, [r3, #0]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b082      	sub	sp, #8
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f002 fe7a 	bl	8006c5c <USB_GetCurrentFrame>
 8003f68:	4603      	mov	r3, r0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b082      	sub	sp, #8
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f002 fe55 	bl	8006c2e <USB_GetHostSpeed>
 8003f84:	4603      	mov	r3, r0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b086      	sub	sp, #24
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	460b      	mov	r3, r1
 8003f98:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003fa4:	78fb      	ldrb	r3, [r7, #3]
 8003fa6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 0304 	and.w	r3, r3, #4
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d119      	bne.n	8003ff2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	015a      	lsls	r2, r3, #5
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fca:	461a      	mov	r2, r3
 8003fcc:	2304      	movs	r3, #4
 8003fce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	0151      	lsls	r1, r2, #5
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	440a      	add	r2, r1
 8003fe6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fea:	f043 0302 	orr.w	r3, r3, #2
 8003fee:	60d3      	str	r3, [r2, #12]
 8003ff0:	e101      	b.n	80041f6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004004:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004008:	d12b      	bne.n	8004062 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	4413      	add	r3, r2
 8004012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004016:	461a      	mov	r2, r3
 8004018:	f44f 7380 	mov.w	r3, #256	; 0x100
 800401c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	212c      	movs	r1, #44	; 0x2c
 8004024:	fb01 f303 	mul.w	r3, r1, r3
 8004028:	4413      	add	r3, r2
 800402a:	3361      	adds	r3, #97	; 0x61
 800402c:	2207      	movs	r2, #7
 800402e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	4413      	add	r3, r2
 8004038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	0151      	lsls	r1, r2, #5
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	440a      	add	r2, r1
 8004046:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800404a:	f043 0302 	orr.w	r3, r3, #2
 800404e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	4611      	mov	r1, r2
 800405a:	4618      	mov	r0, r3
 800405c:	f003 f871 	bl	8007142 <USB_HC_Halt>
 8004060:	e0c9      	b.n	80041f6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	015a      	lsls	r2, r3, #5
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	4413      	add	r3, r2
 800406a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f003 0320 	and.w	r3, r3, #32
 8004074:	2b20      	cmp	r3, #32
 8004076:	d109      	bne.n	800408c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	4413      	add	r3, r2
 8004080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004084:	461a      	mov	r2, r3
 8004086:	2320      	movs	r3, #32
 8004088:	6093      	str	r3, [r2, #8]
 800408a:	e0b4      	b.n	80041f6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	015a      	lsls	r2, r3, #5
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	4413      	add	r3, r2
 8004094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d133      	bne.n	800410a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	0151      	lsls	r1, r2, #5
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	440a      	add	r2, r1
 80040b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040bc:	f043 0302 	orr.w	r3, r3, #2
 80040c0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	212c      	movs	r1, #44	; 0x2c
 80040c8:	fb01 f303 	mul.w	r3, r1, r3
 80040cc:	4413      	add	r3, r2
 80040ce:	3361      	adds	r3, #97	; 0x61
 80040d0:	2205      	movs	r2, #5
 80040d2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e0:	461a      	mov	r2, r3
 80040e2:	2310      	movs	r3, #16
 80040e4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f2:	461a      	mov	r2, r3
 80040f4:	2308      	movs	r3, #8
 80040f6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	4611      	mov	r1, r2
 8004102:	4618      	mov	r0, r3
 8004104:	f003 f81d 	bl	8007142 <USB_HC_Halt>
 8004108:	e075      	b.n	80041f6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4413      	add	r3, r2
 8004112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800411c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004120:	d134      	bne.n	800418c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	4413      	add	r3, r2
 800412a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	0151      	lsls	r1, r2, #5
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	440a      	add	r2, r1
 8004138:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800413c:	f043 0302 	orr.w	r3, r3, #2
 8004140:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	212c      	movs	r1, #44	; 0x2c
 8004148:	fb01 f303 	mul.w	r3, r1, r3
 800414c:	4413      	add	r3, r2
 800414e:	3361      	adds	r3, #97	; 0x61
 8004150:	2208      	movs	r2, #8
 8004152:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	4413      	add	r3, r2
 800415c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004160:	461a      	mov	r2, r3
 8004162:	2310      	movs	r3, #16
 8004164:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	4413      	add	r3, r2
 800416e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004172:	461a      	mov	r2, r3
 8004174:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004178:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	b2d2      	uxtb	r2, r2
 8004182:	4611      	mov	r1, r2
 8004184:	4618      	mov	r0, r3
 8004186:	f002 ffdc 	bl	8007142 <USB_HC_Halt>
 800418a:	e034      	b.n	80041f6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	4413      	add	r3, r2
 8004194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419e:	2b80      	cmp	r3, #128	; 0x80
 80041a0:	d129      	bne.n	80041f6 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	0151      	lsls	r1, r2, #5
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	440a      	add	r2, r1
 80041b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041bc:	f043 0302 	orr.w	r3, r3, #2
 80041c0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	212c      	movs	r1, #44	; 0x2c
 80041c8:	fb01 f303 	mul.w	r3, r1, r3
 80041cc:	4413      	add	r3, r2
 80041ce:	3361      	adds	r3, #97	; 0x61
 80041d0:	2206      	movs	r2, #6
 80041d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	4611      	mov	r1, r2
 80041de:	4618      	mov	r0, r3
 80041e0:	f002 ffaf 	bl	8007142 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f0:	461a      	mov	r2, r3
 80041f2:	2380      	movs	r3, #128	; 0x80
 80041f4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800420c:	d122      	bne.n	8004254 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	4413      	add	r3, r2
 8004216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	0151      	lsls	r1, r2, #5
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	440a      	add	r2, r1
 8004224:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004228:	f043 0302 	orr.w	r3, r3, #2
 800422c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	4611      	mov	r1, r2
 8004238:	4618      	mov	r0, r3
 800423a:	f002 ff82 	bl	8007142 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	4413      	add	r3, r2
 8004246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800424a:	461a      	mov	r2, r3
 800424c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004250:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004252:	e2ba      	b.n	80047ca <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	4413      	add	r3, r2
 800425c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b01      	cmp	r3, #1
 8004268:	f040 811b 	bne.w	80044a2 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d019      	beq.n	80042a8 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	212c      	movs	r1, #44	; 0x2c
 800427a:	fb01 f303 	mul.w	r3, r1, r3
 800427e:	4413      	add	r3, r2
 8004280:	3348      	adds	r3, #72	; 0x48
 8004282:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	0159      	lsls	r1, r3, #5
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	440b      	add	r3, r1
 800428c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004296:	1ad2      	subs	r2, r2, r3
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	202c      	movs	r0, #44	; 0x2c
 800429e:	fb00 f303 	mul.w	r3, r0, r3
 80042a2:	440b      	add	r3, r1
 80042a4:	3350      	adds	r3, #80	; 0x50
 80042a6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	212c      	movs	r1, #44	; 0x2c
 80042ae:	fb01 f303 	mul.w	r3, r1, r3
 80042b2:	4413      	add	r3, r2
 80042b4:	3361      	adds	r3, #97	; 0x61
 80042b6:	2201      	movs	r2, #1
 80042b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	212c      	movs	r1, #44	; 0x2c
 80042c0:	fb01 f303 	mul.w	r3, r1, r3
 80042c4:	4413      	add	r3, r2
 80042c6:	335c      	adds	r3, #92	; 0x5c
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042d8:	461a      	mov	r2, r3
 80042da:	2301      	movs	r3, #1
 80042dc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	212c      	movs	r1, #44	; 0x2c
 80042e4:	fb01 f303 	mul.w	r3, r1, r3
 80042e8:	4413      	add	r3, r2
 80042ea:	333f      	adds	r3, #63	; 0x3f
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d009      	beq.n	8004306 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	212c      	movs	r1, #44	; 0x2c
 80042f8:	fb01 f303 	mul.w	r3, r1, r3
 80042fc:	4413      	add	r3, r2
 80042fe:	333f      	adds	r3, #63	; 0x3f
 8004300:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004302:	2b02      	cmp	r3, #2
 8004304:	d121      	bne.n	800434a <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	4413      	add	r3, r2
 800430e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	0151      	lsls	r1, r2, #5
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	440a      	add	r2, r1
 800431c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004320:	f043 0302 	orr.w	r3, r3, #2
 8004324:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	4611      	mov	r1, r2
 8004330:	4618      	mov	r0, r3
 8004332:	f002 ff06 	bl	8007142 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	4413      	add	r3, r2
 800433e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004342:	461a      	mov	r2, r3
 8004344:	2310      	movs	r3, #16
 8004346:	6093      	str	r3, [r2, #8]
 8004348:	e066      	b.n	8004418 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	212c      	movs	r1, #44	; 0x2c
 8004350:	fb01 f303 	mul.w	r3, r1, r3
 8004354:	4413      	add	r3, r2
 8004356:	333f      	adds	r3, #63	; 0x3f
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	2b03      	cmp	r3, #3
 800435c:	d127      	bne.n	80043ae <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	4413      	add	r3, r2
 8004366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	0151      	lsls	r1, r2, #5
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	440a      	add	r2, r1
 8004374:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004378:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800437c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	212c      	movs	r1, #44	; 0x2c
 8004384:	fb01 f303 	mul.w	r3, r1, r3
 8004388:	4413      	add	r3, r2
 800438a:	3360      	adds	r3, #96	; 0x60
 800438c:	2201      	movs	r2, #1
 800438e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	b2d9      	uxtb	r1, r3
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	202c      	movs	r0, #44	; 0x2c
 800439a:	fb00 f303 	mul.w	r3, r0, r3
 800439e:	4413      	add	r3, r2
 80043a0:	3360      	adds	r3, #96	; 0x60
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	461a      	mov	r2, r3
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f005 f888 	bl	80094bc <HAL_HCD_HC_NotifyURBChange_Callback>
 80043ac:	e034      	b.n	8004418 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	212c      	movs	r1, #44	; 0x2c
 80043b4:	fb01 f303 	mul.w	r3, r1, r3
 80043b8:	4413      	add	r3, r2
 80043ba:	333f      	adds	r3, #63	; 0x3f
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d12a      	bne.n	8004418 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	212c      	movs	r1, #44	; 0x2c
 80043c8:	fb01 f303 	mul.w	r3, r1, r3
 80043cc:	4413      	add	r3, r2
 80043ce:	3360      	adds	r3, #96	; 0x60
 80043d0:	2201      	movs	r2, #1
 80043d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	212c      	movs	r1, #44	; 0x2c
 80043da:	fb01 f303 	mul.w	r3, r1, r3
 80043de:	4413      	add	r3, r2
 80043e0:	3354      	adds	r3, #84	; 0x54
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	f083 0301 	eor.w	r3, r3, #1
 80043e8:	b2d8      	uxtb	r0, r3
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	212c      	movs	r1, #44	; 0x2c
 80043f0:	fb01 f303 	mul.w	r3, r1, r3
 80043f4:	4413      	add	r3, r2
 80043f6:	3354      	adds	r3, #84	; 0x54
 80043f8:	4602      	mov	r2, r0
 80043fa:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	b2d9      	uxtb	r1, r3
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	202c      	movs	r0, #44	; 0x2c
 8004406:	fb00 f303 	mul.w	r3, r0, r3
 800440a:	4413      	add	r3, r2
 800440c:	3360      	adds	r3, #96	; 0x60
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	461a      	mov	r2, r3
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f005 f852 	bl	80094bc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d12b      	bne.n	8004478 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	212c      	movs	r1, #44	; 0x2c
 8004426:	fb01 f303 	mul.w	r3, r1, r3
 800442a:	4413      	add	r3, r2
 800442c:	3348      	adds	r3, #72	; 0x48
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	202c      	movs	r0, #44	; 0x2c
 8004436:	fb00 f202 	mul.w	r2, r0, r2
 800443a:	440a      	add	r2, r1
 800443c:	3240      	adds	r2, #64	; 0x40
 800443e:	8812      	ldrh	r2, [r2, #0]
 8004440:	fbb3 f3f2 	udiv	r3, r3, r2
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 81be 	beq.w	80047ca <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	212c      	movs	r1, #44	; 0x2c
 8004454:	fb01 f303 	mul.w	r3, r1, r3
 8004458:	4413      	add	r3, r2
 800445a:	3354      	adds	r3, #84	; 0x54
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	f083 0301 	eor.w	r3, r3, #1
 8004462:	b2d8      	uxtb	r0, r3
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	212c      	movs	r1, #44	; 0x2c
 800446a:	fb01 f303 	mul.w	r3, r1, r3
 800446e:	4413      	add	r3, r2
 8004470:	3354      	adds	r3, #84	; 0x54
 8004472:	4602      	mov	r2, r0
 8004474:	701a      	strb	r2, [r3, #0]
}
 8004476:	e1a8      	b.n	80047ca <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	212c      	movs	r1, #44	; 0x2c
 800447e:	fb01 f303 	mul.w	r3, r1, r3
 8004482:	4413      	add	r3, r2
 8004484:	3354      	adds	r3, #84	; 0x54
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	f083 0301 	eor.w	r3, r3, #1
 800448c:	b2d8      	uxtb	r0, r3
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	212c      	movs	r1, #44	; 0x2c
 8004494:	fb01 f303 	mul.w	r3, r1, r3
 8004498:	4413      	add	r3, r2
 800449a:	3354      	adds	r3, #84	; 0x54
 800449c:	4602      	mov	r2, r0
 800449e:	701a      	strb	r2, [r3, #0]
}
 80044a0:	e193      	b.n	80047ca <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	f040 8106 	bne.w	80046c6 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	0151      	lsls	r1, r2, #5
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	440a      	add	r2, r1
 80044d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044d4:	f023 0302 	bic.w	r3, r3, #2
 80044d8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	212c      	movs	r1, #44	; 0x2c
 80044e0:	fb01 f303 	mul.w	r3, r1, r3
 80044e4:	4413      	add	r3, r2
 80044e6:	3361      	adds	r3, #97	; 0x61
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d109      	bne.n	8004502 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	212c      	movs	r1, #44	; 0x2c
 80044f4:	fb01 f303 	mul.w	r3, r1, r3
 80044f8:	4413      	add	r3, r2
 80044fa:	3360      	adds	r3, #96	; 0x60
 80044fc:	2201      	movs	r2, #1
 80044fe:	701a      	strb	r2, [r3, #0]
 8004500:	e0c9      	b.n	8004696 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	212c      	movs	r1, #44	; 0x2c
 8004508:	fb01 f303 	mul.w	r3, r1, r3
 800450c:	4413      	add	r3, r2
 800450e:	3361      	adds	r3, #97	; 0x61
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b05      	cmp	r3, #5
 8004514:	d109      	bne.n	800452a <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	212c      	movs	r1, #44	; 0x2c
 800451c:	fb01 f303 	mul.w	r3, r1, r3
 8004520:	4413      	add	r3, r2
 8004522:	3360      	adds	r3, #96	; 0x60
 8004524:	2205      	movs	r2, #5
 8004526:	701a      	strb	r2, [r3, #0]
 8004528:	e0b5      	b.n	8004696 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	212c      	movs	r1, #44	; 0x2c
 8004530:	fb01 f303 	mul.w	r3, r1, r3
 8004534:	4413      	add	r3, r2
 8004536:	3361      	adds	r3, #97	; 0x61
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	2b06      	cmp	r3, #6
 800453c:	d009      	beq.n	8004552 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	212c      	movs	r1, #44	; 0x2c
 8004544:	fb01 f303 	mul.w	r3, r1, r3
 8004548:	4413      	add	r3, r2
 800454a:	3361      	adds	r3, #97	; 0x61
 800454c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800454e:	2b08      	cmp	r3, #8
 8004550:	d150      	bne.n	80045f4 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	212c      	movs	r1, #44	; 0x2c
 8004558:	fb01 f303 	mul.w	r3, r1, r3
 800455c:	4413      	add	r3, r2
 800455e:	335c      	adds	r3, #92	; 0x5c
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	1c5a      	adds	r2, r3, #1
 8004564:	6879      	ldr	r1, [r7, #4]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	202c      	movs	r0, #44	; 0x2c
 800456a:	fb00 f303 	mul.w	r3, r0, r3
 800456e:	440b      	add	r3, r1
 8004570:	335c      	adds	r3, #92	; 0x5c
 8004572:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	212c      	movs	r1, #44	; 0x2c
 800457a:	fb01 f303 	mul.w	r3, r1, r3
 800457e:	4413      	add	r3, r2
 8004580:	335c      	adds	r3, #92	; 0x5c
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b02      	cmp	r3, #2
 8004586:	d912      	bls.n	80045ae <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	212c      	movs	r1, #44	; 0x2c
 800458e:	fb01 f303 	mul.w	r3, r1, r3
 8004592:	4413      	add	r3, r2
 8004594:	335c      	adds	r3, #92	; 0x5c
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	212c      	movs	r1, #44	; 0x2c
 80045a0:	fb01 f303 	mul.w	r3, r1, r3
 80045a4:	4413      	add	r3, r2
 80045a6:	3360      	adds	r3, #96	; 0x60
 80045a8:	2204      	movs	r2, #4
 80045aa:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80045ac:	e073      	b.n	8004696 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	212c      	movs	r1, #44	; 0x2c
 80045b4:	fb01 f303 	mul.w	r3, r1, r3
 80045b8:	4413      	add	r3, r2
 80045ba:	3360      	adds	r3, #96	; 0x60
 80045bc:	2202      	movs	r2, #2
 80045be:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045d6:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045de:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ec:	461a      	mov	r2, r3
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80045f2:	e050      	b.n	8004696 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	212c      	movs	r1, #44	; 0x2c
 80045fa:	fb01 f303 	mul.w	r3, r1, r3
 80045fe:	4413      	add	r3, r2
 8004600:	3361      	adds	r3, #97	; 0x61
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b03      	cmp	r3, #3
 8004606:	d122      	bne.n	800464e <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	212c      	movs	r1, #44	; 0x2c
 800460e:	fb01 f303 	mul.w	r3, r1, r3
 8004612:	4413      	add	r3, r2
 8004614:	3360      	adds	r3, #96	; 0x60
 8004616:	2202      	movs	r2, #2
 8004618:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	4413      	add	r3, r2
 8004622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004630:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004638:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	4413      	add	r3, r2
 8004642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004646:	461a      	mov	r2, r3
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	6013      	str	r3, [r2, #0]
 800464c:	e023      	b.n	8004696 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	212c      	movs	r1, #44	; 0x2c
 8004654:	fb01 f303 	mul.w	r3, r1, r3
 8004658:	4413      	add	r3, r2
 800465a:	3361      	adds	r3, #97	; 0x61
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b07      	cmp	r3, #7
 8004660:	d119      	bne.n	8004696 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	212c      	movs	r1, #44	; 0x2c
 8004668:	fb01 f303 	mul.w	r3, r1, r3
 800466c:	4413      	add	r3, r2
 800466e:	335c      	adds	r3, #92	; 0x5c
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	6879      	ldr	r1, [r7, #4]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	202c      	movs	r0, #44	; 0x2c
 800467a:	fb00 f303 	mul.w	r3, r0, r3
 800467e:	440b      	add	r3, r1
 8004680:	335c      	adds	r3, #92	; 0x5c
 8004682:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	212c      	movs	r1, #44	; 0x2c
 800468a:	fb01 f303 	mul.w	r3, r1, r3
 800468e:	4413      	add	r3, r2
 8004690:	3360      	adds	r3, #96	; 0x60
 8004692:	2204      	movs	r2, #4
 8004694:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	4413      	add	r3, r2
 800469e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a2:	461a      	mov	r2, r3
 80046a4:	2302      	movs	r3, #2
 80046a6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	b2d9      	uxtb	r1, r3
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	202c      	movs	r0, #44	; 0x2c
 80046b2:	fb00 f303 	mul.w	r3, r0, r3
 80046b6:	4413      	add	r3, r2
 80046b8:	3360      	adds	r3, #96	; 0x60
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	461a      	mov	r2, r3
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f004 fefc 	bl	80094bc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80046c4:	e081      	b.n	80047ca <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	015a      	lsls	r2, r3, #5
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	4413      	add	r3, r2
 80046ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	2b10      	cmp	r3, #16
 80046da:	d176      	bne.n	80047ca <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	212c      	movs	r1, #44	; 0x2c
 80046e2:	fb01 f303 	mul.w	r3, r1, r3
 80046e6:	4413      	add	r3, r2
 80046e8:	333f      	adds	r3, #63	; 0x3f
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d121      	bne.n	8004734 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	212c      	movs	r1, #44	; 0x2c
 80046f6:	fb01 f303 	mul.w	r3, r1, r3
 80046fa:	4413      	add	r3, r2
 80046fc:	335c      	adds	r3, #92	; 0x5c
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	015a      	lsls	r2, r3, #5
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	4413      	add	r3, r2
 800470a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	0151      	lsls	r1, r2, #5
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	440a      	add	r2, r1
 8004718:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800471c:	f043 0302 	orr.w	r3, r3, #2
 8004720:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	4611      	mov	r1, r2
 800472c:	4618      	mov	r0, r3
 800472e:	f002 fd08 	bl	8007142 <USB_HC_Halt>
 8004732:	e041      	b.n	80047b8 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	212c      	movs	r1, #44	; 0x2c
 800473a:	fb01 f303 	mul.w	r3, r1, r3
 800473e:	4413      	add	r3, r2
 8004740:	333f      	adds	r3, #63	; 0x3f
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d009      	beq.n	800475c <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	212c      	movs	r1, #44	; 0x2c
 800474e:	fb01 f303 	mul.w	r3, r1, r3
 8004752:	4413      	add	r3, r2
 8004754:	333f      	adds	r3, #63	; 0x3f
 8004756:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004758:	2b02      	cmp	r3, #2
 800475a:	d12d      	bne.n	80047b8 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	212c      	movs	r1, #44	; 0x2c
 8004762:	fb01 f303 	mul.w	r3, r1, r3
 8004766:	4413      	add	r3, r2
 8004768:	335c      	adds	r3, #92	; 0x5c
 800476a:	2200      	movs	r2, #0
 800476c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d120      	bne.n	80047b8 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	212c      	movs	r1, #44	; 0x2c
 800477c:	fb01 f303 	mul.w	r3, r1, r3
 8004780:	4413      	add	r3, r2
 8004782:	3361      	adds	r3, #97	; 0x61
 8004784:	2203      	movs	r2, #3
 8004786:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	4413      	add	r3, r2
 8004790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	0151      	lsls	r1, r2, #5
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	440a      	add	r2, r1
 800479e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047a2:	f043 0302 	orr.w	r3, r3, #2
 80047a6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	b2d2      	uxtb	r2, r2
 80047b0:	4611      	mov	r1, r2
 80047b2:	4618      	mov	r0, r3
 80047b4:	f002 fcc5 	bl	8007142 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c4:	461a      	mov	r2, r3
 80047c6:	2310      	movs	r3, #16
 80047c8:	6093      	str	r3, [r2, #8]
}
 80047ca:	bf00      	nop
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b088      	sub	sp, #32
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
 80047da:	460b      	mov	r3, r1
 80047dc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d119      	bne.n	8004836 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	4413      	add	r3, r2
 800480a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800480e:	461a      	mov	r2, r3
 8004810:	2304      	movs	r3, #4
 8004812:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	4413      	add	r3, r2
 800481c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	0151      	lsls	r1, r2, #5
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	440a      	add	r2, r1
 800482a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800482e:	f043 0302 	orr.w	r3, r3, #2
 8004832:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004834:	e3ca      	b.n	8004fcc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	4413      	add	r3, r2
 800483e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 0320 	and.w	r3, r3, #32
 8004848:	2b20      	cmp	r3, #32
 800484a:	d13e      	bne.n	80048ca <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	4413      	add	r3, r2
 8004854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004858:	461a      	mov	r2, r3
 800485a:	2320      	movs	r3, #32
 800485c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	212c      	movs	r1, #44	; 0x2c
 8004864:	fb01 f303 	mul.w	r3, r1, r3
 8004868:	4413      	add	r3, r2
 800486a:	333d      	adds	r3, #61	; 0x3d
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	2b01      	cmp	r3, #1
 8004870:	f040 83ac 	bne.w	8004fcc <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	212c      	movs	r1, #44	; 0x2c
 800487a:	fb01 f303 	mul.w	r3, r1, r3
 800487e:	4413      	add	r3, r2
 8004880:	333d      	adds	r3, #61	; 0x3d
 8004882:	2200      	movs	r2, #0
 8004884:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	212c      	movs	r1, #44	; 0x2c
 800488c:	fb01 f303 	mul.w	r3, r1, r3
 8004890:	4413      	add	r3, r2
 8004892:	3360      	adds	r3, #96	; 0x60
 8004894:	2202      	movs	r2, #2
 8004896:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	0151      	lsls	r1, r2, #5
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	440a      	add	r2, r1
 80048ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048b2:	f043 0302 	orr.w	r3, r3, #2
 80048b6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	4611      	mov	r1, r2
 80048c2:	4618      	mov	r0, r3
 80048c4:	f002 fc3d 	bl	8007142 <USB_HC_Halt>
}
 80048c8:	e380      	b.n	8004fcc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048e0:	d122      	bne.n	8004928 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	0151      	lsls	r1, r2, #5
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	440a      	add	r2, r1
 80048f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048fc:	f043 0302 	orr.w	r3, r3, #2
 8004900:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	b2d2      	uxtb	r2, r2
 800490a:	4611      	mov	r1, r2
 800490c:	4618      	mov	r0, r3
 800490e:	f002 fc18 	bl	8007142 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	4413      	add	r3, r2
 800491a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800491e:	461a      	mov	r2, r3
 8004920:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004924:	6093      	str	r3, [r2, #8]
}
 8004926:	e351      	b.n	8004fcc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	4413      	add	r3, r2
 8004930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b01      	cmp	r3, #1
 800493c:	d150      	bne.n	80049e0 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	212c      	movs	r1, #44	; 0x2c
 8004944:	fb01 f303 	mul.w	r3, r1, r3
 8004948:	4413      	add	r3, r2
 800494a:	335c      	adds	r3, #92	; 0x5c
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	015a      	lsls	r2, r3, #5
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	4413      	add	r3, r2
 8004958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004962:	2b40      	cmp	r3, #64	; 0x40
 8004964:	d111      	bne.n	800498a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	212c      	movs	r1, #44	; 0x2c
 800496c:	fb01 f303 	mul.w	r3, r1, r3
 8004970:	4413      	add	r3, r2
 8004972:	333d      	adds	r3, #61	; 0x3d
 8004974:	2201      	movs	r2, #1
 8004976:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	4413      	add	r3, r2
 8004980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004984:	461a      	mov	r2, r3
 8004986:	2340      	movs	r3, #64	; 0x40
 8004988:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	4413      	add	r3, r2
 8004992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	0151      	lsls	r1, r2, #5
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	440a      	add	r2, r1
 80049a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049a4:	f043 0302 	orr.w	r3, r3, #2
 80049a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	b2d2      	uxtb	r2, r2
 80049b2:	4611      	mov	r1, r2
 80049b4:	4618      	mov	r0, r3
 80049b6:	f002 fbc4 	bl	8007142 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c6:	461a      	mov	r2, r3
 80049c8:	2301      	movs	r3, #1
 80049ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	212c      	movs	r1, #44	; 0x2c
 80049d2:	fb01 f303 	mul.w	r3, r1, r3
 80049d6:	4413      	add	r3, r2
 80049d8:	3361      	adds	r3, #97	; 0x61
 80049da:	2201      	movs	r2, #1
 80049dc:	701a      	strb	r2, [r3, #0]
}
 80049de:	e2f5      	b.n	8004fcc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	015a      	lsls	r2, r3, #5
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	4413      	add	r3, r2
 80049e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f2:	2b40      	cmp	r3, #64	; 0x40
 80049f4:	d13c      	bne.n	8004a70 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	212c      	movs	r1, #44	; 0x2c
 80049fc:	fb01 f303 	mul.w	r3, r1, r3
 8004a00:	4413      	add	r3, r2
 8004a02:	3361      	adds	r3, #97	; 0x61
 8004a04:	2204      	movs	r2, #4
 8004a06:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	212c      	movs	r1, #44	; 0x2c
 8004a0e:	fb01 f303 	mul.w	r3, r1, r3
 8004a12:	4413      	add	r3, r2
 8004a14:	333d      	adds	r3, #61	; 0x3d
 8004a16:	2201      	movs	r2, #1
 8004a18:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	212c      	movs	r1, #44	; 0x2c
 8004a20:	fb01 f303 	mul.w	r3, r1, r3
 8004a24:	4413      	add	r3, r2
 8004a26:	335c      	adds	r3, #92	; 0x5c
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	0151      	lsls	r1, r2, #5
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	440a      	add	r2, r1
 8004a42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a46:	f043 0302 	orr.w	r3, r3, #2
 8004a4a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	b2d2      	uxtb	r2, r2
 8004a54:	4611      	mov	r1, r2
 8004a56:	4618      	mov	r0, r3
 8004a58:	f002 fb73 	bl	8007142 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a68:	461a      	mov	r2, r3
 8004a6a:	2340      	movs	r3, #64	; 0x40
 8004a6c:	6093      	str	r3, [r2, #8]
}
 8004a6e:	e2ad      	b.n	8004fcc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d12a      	bne.n	8004adc <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a92:	461a      	mov	r2, r3
 8004a94:	2308      	movs	r3, #8
 8004a96:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	0151      	lsls	r1, r2, #5
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	440a      	add	r2, r1
 8004aae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ab2:	f043 0302 	orr.w	r3, r3, #2
 8004ab6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	b2d2      	uxtb	r2, r2
 8004ac0:	4611      	mov	r1, r2
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f002 fb3d 	bl	8007142 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	212c      	movs	r1, #44	; 0x2c
 8004ace:	fb01 f303 	mul.w	r3, r1, r3
 8004ad2:	4413      	add	r3, r2
 8004ad4:	3361      	adds	r3, #97	; 0x61
 8004ad6:	2205      	movs	r2, #5
 8004ad8:	701a      	strb	r2, [r3, #0]
}
 8004ada:	e277      	b.n	8004fcc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 0310 	and.w	r3, r3, #16
 8004aee:	2b10      	cmp	r3, #16
 8004af0:	d150      	bne.n	8004b94 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	212c      	movs	r1, #44	; 0x2c
 8004af8:	fb01 f303 	mul.w	r3, r1, r3
 8004afc:	4413      	add	r3, r2
 8004afe:	335c      	adds	r3, #92	; 0x5c
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	212c      	movs	r1, #44	; 0x2c
 8004b0a:	fb01 f303 	mul.w	r3, r1, r3
 8004b0e:	4413      	add	r3, r2
 8004b10:	3361      	adds	r3, #97	; 0x61
 8004b12:	2203      	movs	r2, #3
 8004b14:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	212c      	movs	r1, #44	; 0x2c
 8004b1c:	fb01 f303 	mul.w	r3, r1, r3
 8004b20:	4413      	add	r3, r2
 8004b22:	333d      	adds	r3, #61	; 0x3d
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d112      	bne.n	8004b50 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	212c      	movs	r1, #44	; 0x2c
 8004b30:	fb01 f303 	mul.w	r3, r1, r3
 8004b34:	4413      	add	r3, r2
 8004b36:	333c      	adds	r3, #60	; 0x3c
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d108      	bne.n	8004b50 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	212c      	movs	r1, #44	; 0x2c
 8004b44:	fb01 f303 	mul.w	r3, r1, r3
 8004b48:	4413      	add	r3, r2
 8004b4a:	333d      	adds	r3, #61	; 0x3d
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	0151      	lsls	r1, r2, #5
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	440a      	add	r2, r1
 8004b66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b6a:	f043 0302 	orr.w	r3, r3, #2
 8004b6e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	4611      	mov	r1, r2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f002 fae1 	bl	8007142 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	2310      	movs	r3, #16
 8004b90:	6093      	str	r3, [r2, #8]
}
 8004b92:	e21b      	b.n	8004fcc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba6:	2b80      	cmp	r3, #128	; 0x80
 8004ba8:	d174      	bne.n	8004c94 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d121      	bne.n	8004bf6 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	212c      	movs	r1, #44	; 0x2c
 8004bb8:	fb01 f303 	mul.w	r3, r1, r3
 8004bbc:	4413      	add	r3, r2
 8004bbe:	3361      	adds	r3, #97	; 0x61
 8004bc0:	2206      	movs	r2, #6
 8004bc2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	0151      	lsls	r1, r2, #5
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	440a      	add	r2, r1
 8004bda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bde:	f043 0302 	orr.w	r3, r3, #2
 8004be2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	b2d2      	uxtb	r2, r2
 8004bec:	4611      	mov	r1, r2
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f002 faa7 	bl	8007142 <USB_HC_Halt>
 8004bf4:	e044      	b.n	8004c80 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	212c      	movs	r1, #44	; 0x2c
 8004bfc:	fb01 f303 	mul.w	r3, r1, r3
 8004c00:	4413      	add	r3, r2
 8004c02:	335c      	adds	r3, #92	; 0x5c
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	202c      	movs	r0, #44	; 0x2c
 8004c0e:	fb00 f303 	mul.w	r3, r0, r3
 8004c12:	440b      	add	r3, r1
 8004c14:	335c      	adds	r3, #92	; 0x5c
 8004c16:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	212c      	movs	r1, #44	; 0x2c
 8004c1e:	fb01 f303 	mul.w	r3, r1, r3
 8004c22:	4413      	add	r3, r2
 8004c24:	335c      	adds	r3, #92	; 0x5c
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d920      	bls.n	8004c6e <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	212c      	movs	r1, #44	; 0x2c
 8004c32:	fb01 f303 	mul.w	r3, r1, r3
 8004c36:	4413      	add	r3, r2
 8004c38:	335c      	adds	r3, #92	; 0x5c
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	212c      	movs	r1, #44	; 0x2c
 8004c44:	fb01 f303 	mul.w	r3, r1, r3
 8004c48:	4413      	add	r3, r2
 8004c4a:	3360      	adds	r3, #96	; 0x60
 8004c4c:	2204      	movs	r2, #4
 8004c4e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	b2d9      	uxtb	r1, r3
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	202c      	movs	r0, #44	; 0x2c
 8004c5a:	fb00 f303 	mul.w	r3, r0, r3
 8004c5e:	4413      	add	r3, r2
 8004c60:	3360      	adds	r3, #96	; 0x60
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	461a      	mov	r2, r3
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f004 fc28 	bl	80094bc <HAL_HCD_HC_NotifyURBChange_Callback>
 8004c6c:	e008      	b.n	8004c80 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	212c      	movs	r1, #44	; 0x2c
 8004c74:	fb01 f303 	mul.w	r3, r1, r3
 8004c78:	4413      	add	r3, r2
 8004c7a:	3360      	adds	r3, #96	; 0x60
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	2380      	movs	r3, #128	; 0x80
 8004c90:	6093      	str	r3, [r2, #8]
}
 8004c92:	e19b      	b.n	8004fcc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004caa:	d134      	bne.n	8004d16 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	0151      	lsls	r1, r2, #5
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	440a      	add	r2, r1
 8004cc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cc6:	f043 0302 	orr.w	r3, r3, #2
 8004cca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	4611      	mov	r1, r2
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f002 fa33 	bl	8007142 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ce8:	461a      	mov	r2, r3
 8004cea:	2310      	movs	r3, #16
 8004cec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d00:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	212c      	movs	r1, #44	; 0x2c
 8004d08:	fb01 f303 	mul.w	r3, r1, r3
 8004d0c:	4413      	add	r3, r2
 8004d0e:	3361      	adds	r3, #97	; 0x61
 8004d10:	2208      	movs	r2, #8
 8004d12:	701a      	strb	r2, [r3, #0]
}
 8004d14:	e15a      	b.n	8004fcc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	f040 814f 	bne.w	8004fcc <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	015a      	lsls	r2, r3, #5
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	4413      	add	r3, r2
 8004d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	0151      	lsls	r1, r2, #5
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	440a      	add	r2, r1
 8004d44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d48:	f023 0302 	bic.w	r3, r3, #2
 8004d4c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	212c      	movs	r1, #44	; 0x2c
 8004d54:	fb01 f303 	mul.w	r3, r1, r3
 8004d58:	4413      	add	r3, r2
 8004d5a:	3361      	adds	r3, #97	; 0x61
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d17d      	bne.n	8004e5e <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	212c      	movs	r1, #44	; 0x2c
 8004d68:	fb01 f303 	mul.w	r3, r1, r3
 8004d6c:	4413      	add	r3, r2
 8004d6e:	3360      	adds	r3, #96	; 0x60
 8004d70:	2201      	movs	r2, #1
 8004d72:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	212c      	movs	r1, #44	; 0x2c
 8004d7a:	fb01 f303 	mul.w	r3, r1, r3
 8004d7e:	4413      	add	r3, r2
 8004d80:	333f      	adds	r3, #63	; 0x3f
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d00a      	beq.n	8004d9e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	212c      	movs	r1, #44	; 0x2c
 8004d8e:	fb01 f303 	mul.w	r3, r1, r3
 8004d92:	4413      	add	r3, r2
 8004d94:	333f      	adds	r3, #63	; 0x3f
 8004d96:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	f040 8100 	bne.w	8004f9e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d113      	bne.n	8004dce <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	212c      	movs	r1, #44	; 0x2c
 8004dac:	fb01 f303 	mul.w	r3, r1, r3
 8004db0:	4413      	add	r3, r2
 8004db2:	3355      	adds	r3, #85	; 0x55
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	f083 0301 	eor.w	r3, r3, #1
 8004dba:	b2d8      	uxtb	r0, r3
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	212c      	movs	r1, #44	; 0x2c
 8004dc2:	fb01 f303 	mul.w	r3, r1, r3
 8004dc6:	4413      	add	r3, r2
 8004dc8:	3355      	adds	r3, #85	; 0x55
 8004dca:	4602      	mov	r2, r0
 8004dcc:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	f040 80e3 	bne.w	8004f9e <HCD_HC_OUT_IRQHandler+0x7cc>
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	212c      	movs	r1, #44	; 0x2c
 8004dde:	fb01 f303 	mul.w	r3, r1, r3
 8004de2:	4413      	add	r3, r2
 8004de4:	334c      	adds	r3, #76	; 0x4c
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 80d8 	beq.w	8004f9e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	212c      	movs	r1, #44	; 0x2c
 8004df4:	fb01 f303 	mul.w	r3, r1, r3
 8004df8:	4413      	add	r3, r2
 8004dfa:	334c      	adds	r3, #76	; 0x4c
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	202c      	movs	r0, #44	; 0x2c
 8004e04:	fb00 f202 	mul.w	r2, r0, r2
 8004e08:	440a      	add	r2, r1
 8004e0a:	3240      	adds	r2, #64	; 0x40
 8004e0c:	8812      	ldrh	r2, [r2, #0]
 8004e0e:	4413      	add	r3, r2
 8004e10:	3b01      	subs	r3, #1
 8004e12:	6879      	ldr	r1, [r7, #4]
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	202c      	movs	r0, #44	; 0x2c
 8004e18:	fb00 f202 	mul.w	r2, r0, r2
 8004e1c:	440a      	add	r2, r1
 8004e1e:	3240      	adds	r2, #64	; 0x40
 8004e20:	8812      	ldrh	r2, [r2, #0]
 8004e22:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 80b5 	beq.w	8004f9e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	212c      	movs	r1, #44	; 0x2c
 8004e3a:	fb01 f303 	mul.w	r3, r1, r3
 8004e3e:	4413      	add	r3, r2
 8004e40:	3355      	adds	r3, #85	; 0x55
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	f083 0301 	eor.w	r3, r3, #1
 8004e48:	b2d8      	uxtb	r0, r3
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	212c      	movs	r1, #44	; 0x2c
 8004e50:	fb01 f303 	mul.w	r3, r1, r3
 8004e54:	4413      	add	r3, r2
 8004e56:	3355      	adds	r3, #85	; 0x55
 8004e58:	4602      	mov	r2, r0
 8004e5a:	701a      	strb	r2, [r3, #0]
 8004e5c:	e09f      	b.n	8004f9e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	212c      	movs	r1, #44	; 0x2c
 8004e64:	fb01 f303 	mul.w	r3, r1, r3
 8004e68:	4413      	add	r3, r2
 8004e6a:	3361      	adds	r3, #97	; 0x61
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	2b03      	cmp	r3, #3
 8004e70:	d109      	bne.n	8004e86 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	212c      	movs	r1, #44	; 0x2c
 8004e78:	fb01 f303 	mul.w	r3, r1, r3
 8004e7c:	4413      	add	r3, r2
 8004e7e:	3360      	adds	r3, #96	; 0x60
 8004e80:	2202      	movs	r2, #2
 8004e82:	701a      	strb	r2, [r3, #0]
 8004e84:	e08b      	b.n	8004f9e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	212c      	movs	r1, #44	; 0x2c
 8004e8c:	fb01 f303 	mul.w	r3, r1, r3
 8004e90:	4413      	add	r3, r2
 8004e92:	3361      	adds	r3, #97	; 0x61
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d109      	bne.n	8004eae <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	212c      	movs	r1, #44	; 0x2c
 8004ea0:	fb01 f303 	mul.w	r3, r1, r3
 8004ea4:	4413      	add	r3, r2
 8004ea6:	3360      	adds	r3, #96	; 0x60
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	701a      	strb	r2, [r3, #0]
 8004eac:	e077      	b.n	8004f9e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	212c      	movs	r1, #44	; 0x2c
 8004eb4:	fb01 f303 	mul.w	r3, r1, r3
 8004eb8:	4413      	add	r3, r2
 8004eba:	3361      	adds	r3, #97	; 0x61
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	2b05      	cmp	r3, #5
 8004ec0:	d109      	bne.n	8004ed6 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	212c      	movs	r1, #44	; 0x2c
 8004ec8:	fb01 f303 	mul.w	r3, r1, r3
 8004ecc:	4413      	add	r3, r2
 8004ece:	3360      	adds	r3, #96	; 0x60
 8004ed0:	2205      	movs	r2, #5
 8004ed2:	701a      	strb	r2, [r3, #0]
 8004ed4:	e063      	b.n	8004f9e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	212c      	movs	r1, #44	; 0x2c
 8004edc:	fb01 f303 	mul.w	r3, r1, r3
 8004ee0:	4413      	add	r3, r2
 8004ee2:	3361      	adds	r3, #97	; 0x61
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	2b06      	cmp	r3, #6
 8004ee8:	d009      	beq.n	8004efe <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	212c      	movs	r1, #44	; 0x2c
 8004ef0:	fb01 f303 	mul.w	r3, r1, r3
 8004ef4:	4413      	add	r3, r2
 8004ef6:	3361      	adds	r3, #97	; 0x61
 8004ef8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004efa:	2b08      	cmp	r3, #8
 8004efc:	d14f      	bne.n	8004f9e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	212c      	movs	r1, #44	; 0x2c
 8004f04:	fb01 f303 	mul.w	r3, r1, r3
 8004f08:	4413      	add	r3, r2
 8004f0a:	335c      	adds	r3, #92	; 0x5c
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	202c      	movs	r0, #44	; 0x2c
 8004f16:	fb00 f303 	mul.w	r3, r0, r3
 8004f1a:	440b      	add	r3, r1
 8004f1c:	335c      	adds	r3, #92	; 0x5c
 8004f1e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	212c      	movs	r1, #44	; 0x2c
 8004f26:	fb01 f303 	mul.w	r3, r1, r3
 8004f2a:	4413      	add	r3, r2
 8004f2c:	335c      	adds	r3, #92	; 0x5c
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d912      	bls.n	8004f5a <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	212c      	movs	r1, #44	; 0x2c
 8004f3a:	fb01 f303 	mul.w	r3, r1, r3
 8004f3e:	4413      	add	r3, r2
 8004f40:	335c      	adds	r3, #92	; 0x5c
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	212c      	movs	r1, #44	; 0x2c
 8004f4c:	fb01 f303 	mul.w	r3, r1, r3
 8004f50:	4413      	add	r3, r2
 8004f52:	3360      	adds	r3, #96	; 0x60
 8004f54:	2204      	movs	r2, #4
 8004f56:	701a      	strb	r2, [r3, #0]
 8004f58:	e021      	b.n	8004f9e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	212c      	movs	r1, #44	; 0x2c
 8004f60:	fb01 f303 	mul.w	r3, r1, r3
 8004f64:	4413      	add	r3, r2
 8004f66:	3360      	adds	r3, #96	; 0x60
 8004f68:	2202      	movs	r2, #2
 8004f6a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f82:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f8a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f98:	461a      	mov	r2, r3
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004faa:	461a      	mov	r2, r3
 8004fac:	2302      	movs	r3, #2
 8004fae:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	b2d9      	uxtb	r1, r3
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	202c      	movs	r0, #44	; 0x2c
 8004fba:	fb00 f303 	mul.w	r3, r0, r3
 8004fbe:	4413      	add	r3, r2
 8004fc0:	3360      	adds	r3, #96	; 0x60
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f004 fa78 	bl	80094bc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004fcc:	bf00      	nop
 8004fce:	3720      	adds	r7, #32
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b08a      	sub	sp, #40	; 0x28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	f003 030f 	and.w	r3, r3, #15
 8004ff4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	0c5b      	lsrs	r3, r3, #17
 8004ffa:	f003 030f 	and.w	r3, r3, #15
 8004ffe:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	091b      	lsrs	r3, r3, #4
 8005004:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005008:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	2b02      	cmp	r3, #2
 800500e:	d004      	beq.n	800501a <HCD_RXQLVL_IRQHandler+0x46>
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	2b05      	cmp	r3, #5
 8005014:	f000 80a9 	beq.w	800516a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005018:	e0aa      	b.n	8005170 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 80a6 	beq.w	800516e <HCD_RXQLVL_IRQHandler+0x19a>
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	212c      	movs	r1, #44	; 0x2c
 8005028:	fb01 f303 	mul.w	r3, r1, r3
 800502c:	4413      	add	r3, r2
 800502e:	3344      	adds	r3, #68	; 0x44
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 809b 	beq.w	800516e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	212c      	movs	r1, #44	; 0x2c
 800503e:	fb01 f303 	mul.w	r3, r1, r3
 8005042:	4413      	add	r3, r2
 8005044:	3350      	adds	r3, #80	; 0x50
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	441a      	add	r2, r3
 800504c:	6879      	ldr	r1, [r7, #4]
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	202c      	movs	r0, #44	; 0x2c
 8005052:	fb00 f303 	mul.w	r3, r0, r3
 8005056:	440b      	add	r3, r1
 8005058:	334c      	adds	r3, #76	; 0x4c
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	429a      	cmp	r2, r3
 800505e:	d87a      	bhi.n	8005156 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6818      	ldr	r0, [r3, #0]
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	212c      	movs	r1, #44	; 0x2c
 800506a:	fb01 f303 	mul.w	r3, r1, r3
 800506e:	4413      	add	r3, r2
 8005070:	3344      	adds	r3, #68	; 0x44
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	b292      	uxth	r2, r2
 8005078:	4619      	mov	r1, r3
 800507a:	f001 fbdb 	bl	8006834 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	212c      	movs	r1, #44	; 0x2c
 8005084:	fb01 f303 	mul.w	r3, r1, r3
 8005088:	4413      	add	r3, r2
 800508a:	3344      	adds	r3, #68	; 0x44
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	441a      	add	r2, r3
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	202c      	movs	r0, #44	; 0x2c
 8005098:	fb00 f303 	mul.w	r3, r0, r3
 800509c:	440b      	add	r3, r1
 800509e:	3344      	adds	r3, #68	; 0x44
 80050a0:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	212c      	movs	r1, #44	; 0x2c
 80050a8:	fb01 f303 	mul.w	r3, r1, r3
 80050ac:	4413      	add	r3, r2
 80050ae:	3350      	adds	r3, #80	; 0x50
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	441a      	add	r2, r3
 80050b6:	6879      	ldr	r1, [r7, #4]
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	202c      	movs	r0, #44	; 0x2c
 80050bc:	fb00 f303 	mul.w	r3, r0, r3
 80050c0:	440b      	add	r3, r1
 80050c2:	3350      	adds	r3, #80	; 0x50
 80050c4:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	015a      	lsls	r2, r3, #5
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	4413      	add	r3, r2
 80050ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	0cdb      	lsrs	r3, r3, #19
 80050d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050da:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	212c      	movs	r1, #44	; 0x2c
 80050e2:	fb01 f303 	mul.w	r3, r1, r3
 80050e6:	4413      	add	r3, r2
 80050e8:	3340      	adds	r3, #64	; 0x40
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	461a      	mov	r2, r3
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d13c      	bne.n	800516e <HCD_RXQLVL_IRQHandler+0x19a>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d039      	beq.n	800516e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	6a3b      	ldr	r3, [r7, #32]
 8005100:	4413      	add	r3, r2
 8005102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005110:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005118:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	4413      	add	r3, r2
 8005122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005126:	461a      	mov	r2, r3
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	212c      	movs	r1, #44	; 0x2c
 8005132:	fb01 f303 	mul.w	r3, r1, r3
 8005136:	4413      	add	r3, r2
 8005138:	3354      	adds	r3, #84	; 0x54
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	f083 0301 	eor.w	r3, r3, #1
 8005140:	b2d8      	uxtb	r0, r3
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	212c      	movs	r1, #44	; 0x2c
 8005148:	fb01 f303 	mul.w	r3, r1, r3
 800514c:	4413      	add	r3, r2
 800514e:	3354      	adds	r3, #84	; 0x54
 8005150:	4602      	mov	r2, r0
 8005152:	701a      	strb	r2, [r3, #0]
      break;
 8005154:	e00b      	b.n	800516e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	212c      	movs	r1, #44	; 0x2c
 800515c:	fb01 f303 	mul.w	r3, r1, r3
 8005160:	4413      	add	r3, r2
 8005162:	3360      	adds	r3, #96	; 0x60
 8005164:	2204      	movs	r2, #4
 8005166:	701a      	strb	r2, [r3, #0]
      break;
 8005168:	e001      	b.n	800516e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800516a:	bf00      	nop
 800516c:	e000      	b.n	8005170 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800516e:	bf00      	nop
  }
}
 8005170:	bf00      	nop
 8005172:	3728      	adds	r7, #40	; 0x28
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80051a4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d10b      	bne.n	80051c8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d102      	bne.n	80051c0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f004 f962 	bl	8009484 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	f043 0302 	orr.w	r3, r3, #2
 80051c6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b08      	cmp	r3, #8
 80051d0:	d132      	bne.n	8005238 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	f043 0308 	orr.w	r3, r3, #8
 80051d8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f003 0304 	and.w	r3, r3, #4
 80051e0:	2b04      	cmp	r3, #4
 80051e2:	d126      	bne.n	8005232 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d113      	bne.n	8005214 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80051f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051f6:	d106      	bne.n	8005206 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2102      	movs	r1, #2
 80051fe:	4618      	mov	r0, r3
 8005200:	f001 fc78 	bl	8006af4 <USB_InitFSLSPClkSel>
 8005204:	e011      	b.n	800522a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2101      	movs	r1, #1
 800520c:	4618      	mov	r0, r3
 800520e:	f001 fc71 	bl	8006af4 <USB_InitFSLSPClkSel>
 8005212:	e00a      	b.n	800522a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d106      	bne.n	800522a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005222:	461a      	mov	r2, r3
 8005224:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005228:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f004 f954 	bl	80094d8 <HAL_HCD_PortEnabled_Callback>
 8005230:	e002      	b.n	8005238 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f004 f95e 	bl	80094f4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f003 0320 	and.w	r3, r3, #32
 800523e:	2b20      	cmp	r3, #32
 8005240:	d103      	bne.n	800524a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	f043 0320 	orr.w	r3, r3, #32
 8005248:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005250:	461a      	mov	r2, r3
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	6013      	str	r3, [r2, #0]
}
 8005256:	bf00      	nop
 8005258:	3718      	adds	r7, #24
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e264      	b.n	800573c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	d075      	beq.n	800536a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800527e:	4ba3      	ldr	r3, [pc, #652]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f003 030c 	and.w	r3, r3, #12
 8005286:	2b04      	cmp	r3, #4
 8005288:	d00c      	beq.n	80052a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800528a:	4ba0      	ldr	r3, [pc, #640]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005292:	2b08      	cmp	r3, #8
 8005294:	d112      	bne.n	80052bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005296:	4b9d      	ldr	r3, [pc, #628]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800529e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052a2:	d10b      	bne.n	80052bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052a4:	4b99      	ldr	r3, [pc, #612]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d05b      	beq.n	8005368 <HAL_RCC_OscConfig+0x108>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d157      	bne.n	8005368 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e23f      	b.n	800573c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052c4:	d106      	bne.n	80052d4 <HAL_RCC_OscConfig+0x74>
 80052c6:	4b91      	ldr	r3, [pc, #580]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a90      	ldr	r2, [pc, #576]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 80052cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052d0:	6013      	str	r3, [r2, #0]
 80052d2:	e01d      	b.n	8005310 <HAL_RCC_OscConfig+0xb0>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052dc:	d10c      	bne.n	80052f8 <HAL_RCC_OscConfig+0x98>
 80052de:	4b8b      	ldr	r3, [pc, #556]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a8a      	ldr	r2, [pc, #552]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 80052e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052e8:	6013      	str	r3, [r2, #0]
 80052ea:	4b88      	ldr	r3, [pc, #544]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a87      	ldr	r2, [pc, #540]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 80052f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	e00b      	b.n	8005310 <HAL_RCC_OscConfig+0xb0>
 80052f8:	4b84      	ldr	r3, [pc, #528]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a83      	ldr	r2, [pc, #524]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 80052fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005302:	6013      	str	r3, [r2, #0]
 8005304:	4b81      	ldr	r3, [pc, #516]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a80      	ldr	r2, [pc, #512]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 800530a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800530e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d013      	beq.n	8005340 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005318:	f7fd fc50 	bl	8002bbc <HAL_GetTick>
 800531c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800531e:	e008      	b.n	8005332 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005320:	f7fd fc4c 	bl	8002bbc <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b64      	cmp	r3, #100	; 0x64
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e204      	b.n	800573c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005332:	4b76      	ldr	r3, [pc, #472]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0f0      	beq.n	8005320 <HAL_RCC_OscConfig+0xc0>
 800533e:	e014      	b.n	800536a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005340:	f7fd fc3c 	bl	8002bbc <HAL_GetTick>
 8005344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005348:	f7fd fc38 	bl	8002bbc <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b64      	cmp	r3, #100	; 0x64
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e1f0      	b.n	800573c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800535a:	4b6c      	ldr	r3, [pc, #432]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1f0      	bne.n	8005348 <HAL_RCC_OscConfig+0xe8>
 8005366:	e000      	b.n	800536a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d063      	beq.n	800543e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005376:	4b65      	ldr	r3, [pc, #404]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 030c 	and.w	r3, r3, #12
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00b      	beq.n	800539a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005382:	4b62      	ldr	r3, [pc, #392]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800538a:	2b08      	cmp	r3, #8
 800538c:	d11c      	bne.n	80053c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800538e:	4b5f      	ldr	r3, [pc, #380]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d116      	bne.n	80053c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800539a:	4b5c      	ldr	r3, [pc, #368]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d005      	beq.n	80053b2 <HAL_RCC_OscConfig+0x152>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d001      	beq.n	80053b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e1c4      	b.n	800573c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053b2:	4b56      	ldr	r3, [pc, #344]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	4952      	ldr	r1, [pc, #328]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053c6:	e03a      	b.n	800543e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d020      	beq.n	8005412 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053d0:	4b4f      	ldr	r3, [pc, #316]	; (8005510 <HAL_RCC_OscConfig+0x2b0>)
 80053d2:	2201      	movs	r2, #1
 80053d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d6:	f7fd fbf1 	bl	8002bbc <HAL_GetTick>
 80053da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053dc:	e008      	b.n	80053f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053de:	f7fd fbed 	bl	8002bbc <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d901      	bls.n	80053f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e1a5      	b.n	800573c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053f0:	4b46      	ldr	r3, [pc, #280]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d0f0      	beq.n	80053de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053fc:	4b43      	ldr	r3, [pc, #268]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	00db      	lsls	r3, r3, #3
 800540a:	4940      	ldr	r1, [pc, #256]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 800540c:	4313      	orrs	r3, r2
 800540e:	600b      	str	r3, [r1, #0]
 8005410:	e015      	b.n	800543e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005412:	4b3f      	ldr	r3, [pc, #252]	; (8005510 <HAL_RCC_OscConfig+0x2b0>)
 8005414:	2200      	movs	r2, #0
 8005416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005418:	f7fd fbd0 	bl	8002bbc <HAL_GetTick>
 800541c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800541e:	e008      	b.n	8005432 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005420:	f7fd fbcc 	bl	8002bbc <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b02      	cmp	r3, #2
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e184      	b.n	800573c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005432:	4b36      	ldr	r3, [pc, #216]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1f0      	bne.n	8005420 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0308 	and.w	r3, r3, #8
 8005446:	2b00      	cmp	r3, #0
 8005448:	d030      	beq.n	80054ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d016      	beq.n	8005480 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005452:	4b30      	ldr	r3, [pc, #192]	; (8005514 <HAL_RCC_OscConfig+0x2b4>)
 8005454:	2201      	movs	r2, #1
 8005456:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005458:	f7fd fbb0 	bl	8002bbc <HAL_GetTick>
 800545c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800545e:	e008      	b.n	8005472 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005460:	f7fd fbac 	bl	8002bbc <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d901      	bls.n	8005472 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e164      	b.n	800573c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005472:	4b26      	ldr	r3, [pc, #152]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 8005474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d0f0      	beq.n	8005460 <HAL_RCC_OscConfig+0x200>
 800547e:	e015      	b.n	80054ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005480:	4b24      	ldr	r3, [pc, #144]	; (8005514 <HAL_RCC_OscConfig+0x2b4>)
 8005482:	2200      	movs	r2, #0
 8005484:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005486:	f7fd fb99 	bl	8002bbc <HAL_GetTick>
 800548a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800548c:	e008      	b.n	80054a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800548e:	f7fd fb95 	bl	8002bbc <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d901      	bls.n	80054a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e14d      	b.n	800573c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054a0:	4b1a      	ldr	r3, [pc, #104]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 80054a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1f0      	bne.n	800548e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0304 	and.w	r3, r3, #4
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 80a0 	beq.w	80055fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054ba:	2300      	movs	r3, #0
 80054bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054be:	4b13      	ldr	r3, [pc, #76]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10f      	bne.n	80054ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054ca:	2300      	movs	r3, #0
 80054cc:	60bb      	str	r3, [r7, #8]
 80054ce:	4b0f      	ldr	r3, [pc, #60]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	4a0e      	ldr	r2, [pc, #56]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 80054d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054d8:	6413      	str	r3, [r2, #64]	; 0x40
 80054da:	4b0c      	ldr	r3, [pc, #48]	; (800550c <HAL_RCC_OscConfig+0x2ac>)
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e2:	60bb      	str	r3, [r7, #8]
 80054e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054e6:	2301      	movs	r3, #1
 80054e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ea:	4b0b      	ldr	r3, [pc, #44]	; (8005518 <HAL_RCC_OscConfig+0x2b8>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d121      	bne.n	800553a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054f6:	4b08      	ldr	r3, [pc, #32]	; (8005518 <HAL_RCC_OscConfig+0x2b8>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a07      	ldr	r2, [pc, #28]	; (8005518 <HAL_RCC_OscConfig+0x2b8>)
 80054fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005502:	f7fd fb5b 	bl	8002bbc <HAL_GetTick>
 8005506:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005508:	e011      	b.n	800552e <HAL_RCC_OscConfig+0x2ce>
 800550a:	bf00      	nop
 800550c:	40023800 	.word	0x40023800
 8005510:	42470000 	.word	0x42470000
 8005514:	42470e80 	.word	0x42470e80
 8005518:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800551c:	f7fd fb4e 	bl	8002bbc <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e106      	b.n	800573c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800552e:	4b85      	ldr	r3, [pc, #532]	; (8005744 <HAL_RCC_OscConfig+0x4e4>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005536:	2b00      	cmp	r3, #0
 8005538:	d0f0      	beq.n	800551c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d106      	bne.n	8005550 <HAL_RCC_OscConfig+0x2f0>
 8005542:	4b81      	ldr	r3, [pc, #516]	; (8005748 <HAL_RCC_OscConfig+0x4e8>)
 8005544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005546:	4a80      	ldr	r2, [pc, #512]	; (8005748 <HAL_RCC_OscConfig+0x4e8>)
 8005548:	f043 0301 	orr.w	r3, r3, #1
 800554c:	6713      	str	r3, [r2, #112]	; 0x70
 800554e:	e01c      	b.n	800558a <HAL_RCC_OscConfig+0x32a>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	2b05      	cmp	r3, #5
 8005556:	d10c      	bne.n	8005572 <HAL_RCC_OscConfig+0x312>
 8005558:	4b7b      	ldr	r3, [pc, #492]	; (8005748 <HAL_RCC_OscConfig+0x4e8>)
 800555a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555c:	4a7a      	ldr	r2, [pc, #488]	; (8005748 <HAL_RCC_OscConfig+0x4e8>)
 800555e:	f043 0304 	orr.w	r3, r3, #4
 8005562:	6713      	str	r3, [r2, #112]	; 0x70
 8005564:	4b78      	ldr	r3, [pc, #480]	; (8005748 <HAL_RCC_OscConfig+0x4e8>)
 8005566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005568:	4a77      	ldr	r2, [pc, #476]	; (8005748 <HAL_RCC_OscConfig+0x4e8>)
 800556a:	f043 0301 	orr.w	r3, r3, #1
 800556e:	6713      	str	r3, [r2, #112]	; 0x70
 8005570:	e00b      	b.n	800558a <HAL_RCC_OscConfig+0x32a>
 8005572:	4b75      	ldr	r3, [pc, #468]	; (8005748 <HAL_RCC_OscConfig+0x4e8>)
 8005574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005576:	4a74      	ldr	r2, [pc, #464]	; (8005748 <HAL_RCC_OscConfig+0x4e8>)
 8005578:	f023 0301 	bic.w	r3, r3, #1
 800557c:	6713      	str	r3, [r2, #112]	; 0x70
 800557e:	4b72      	ldr	r3, [pc, #456]	; (8005748 <HAL_RCC_OscConfig+0x4e8>)
 8005580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005582:	4a71      	ldr	r2, [pc, #452]	; (8005748 <HAL_RCC_OscConfig+0x4e8>)
 8005584:	f023 0304 	bic.w	r3, r3, #4
 8005588:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d015      	beq.n	80055be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005592:	f7fd fb13 	bl	8002bbc <HAL_GetTick>
 8005596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005598:	e00a      	b.n	80055b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800559a:	f7fd fb0f 	bl	8002bbc <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d901      	bls.n	80055b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e0c5      	b.n	800573c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055b0:	4b65      	ldr	r3, [pc, #404]	; (8005748 <HAL_RCC_OscConfig+0x4e8>)
 80055b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d0ee      	beq.n	800559a <HAL_RCC_OscConfig+0x33a>
 80055bc:	e014      	b.n	80055e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055be:	f7fd fafd 	bl	8002bbc <HAL_GetTick>
 80055c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055c4:	e00a      	b.n	80055dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055c6:	f7fd faf9 	bl	8002bbc <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d901      	bls.n	80055dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e0af      	b.n	800573c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055dc:	4b5a      	ldr	r3, [pc, #360]	; (8005748 <HAL_RCC_OscConfig+0x4e8>)
 80055de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1ee      	bne.n	80055c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055e8:	7dfb      	ldrb	r3, [r7, #23]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d105      	bne.n	80055fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055ee:	4b56      	ldr	r3, [pc, #344]	; (8005748 <HAL_RCC_OscConfig+0x4e8>)
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	4a55      	ldr	r2, [pc, #340]	; (8005748 <HAL_RCC_OscConfig+0x4e8>)
 80055f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 809b 	beq.w	800573a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005604:	4b50      	ldr	r3, [pc, #320]	; (8005748 <HAL_RCC_OscConfig+0x4e8>)
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f003 030c 	and.w	r3, r3, #12
 800560c:	2b08      	cmp	r3, #8
 800560e:	d05c      	beq.n	80056ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	2b02      	cmp	r3, #2
 8005616:	d141      	bne.n	800569c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005618:	4b4c      	ldr	r3, [pc, #304]	; (800574c <HAL_RCC_OscConfig+0x4ec>)
 800561a:	2200      	movs	r2, #0
 800561c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800561e:	f7fd facd 	bl	8002bbc <HAL_GetTick>
 8005622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005624:	e008      	b.n	8005638 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005626:	f7fd fac9 	bl	8002bbc <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	2b02      	cmp	r3, #2
 8005632:	d901      	bls.n	8005638 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e081      	b.n	800573c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005638:	4b43      	ldr	r3, [pc, #268]	; (8005748 <HAL_RCC_OscConfig+0x4e8>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1f0      	bne.n	8005626 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	69da      	ldr	r2, [r3, #28]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	431a      	orrs	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005652:	019b      	lsls	r3, r3, #6
 8005654:	431a      	orrs	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565a:	085b      	lsrs	r3, r3, #1
 800565c:	3b01      	subs	r3, #1
 800565e:	041b      	lsls	r3, r3, #16
 8005660:	431a      	orrs	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005666:	061b      	lsls	r3, r3, #24
 8005668:	4937      	ldr	r1, [pc, #220]	; (8005748 <HAL_RCC_OscConfig+0x4e8>)
 800566a:	4313      	orrs	r3, r2
 800566c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800566e:	4b37      	ldr	r3, [pc, #220]	; (800574c <HAL_RCC_OscConfig+0x4ec>)
 8005670:	2201      	movs	r2, #1
 8005672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005674:	f7fd faa2 	bl	8002bbc <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800567c:	f7fd fa9e 	bl	8002bbc <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e056      	b.n	800573c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800568e:	4b2e      	ldr	r3, [pc, #184]	; (8005748 <HAL_RCC_OscConfig+0x4e8>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d0f0      	beq.n	800567c <HAL_RCC_OscConfig+0x41c>
 800569a:	e04e      	b.n	800573a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800569c:	4b2b      	ldr	r3, [pc, #172]	; (800574c <HAL_RCC_OscConfig+0x4ec>)
 800569e:	2200      	movs	r2, #0
 80056a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a2:	f7fd fa8b 	bl	8002bbc <HAL_GetTick>
 80056a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056a8:	e008      	b.n	80056bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056aa:	f7fd fa87 	bl	8002bbc <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d901      	bls.n	80056bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e03f      	b.n	800573c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056bc:	4b22      	ldr	r3, [pc, #136]	; (8005748 <HAL_RCC_OscConfig+0x4e8>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1f0      	bne.n	80056aa <HAL_RCC_OscConfig+0x44a>
 80056c8:	e037      	b.n	800573a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d101      	bne.n	80056d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e032      	b.n	800573c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056d6:	4b1c      	ldr	r3, [pc, #112]	; (8005748 <HAL_RCC_OscConfig+0x4e8>)
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d028      	beq.n	8005736 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d121      	bne.n	8005736 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d11a      	bne.n	8005736 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005706:	4013      	ands	r3, r2
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800570c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800570e:	4293      	cmp	r3, r2
 8005710:	d111      	bne.n	8005736 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571c:	085b      	lsrs	r3, r3, #1
 800571e:	3b01      	subs	r3, #1
 8005720:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005722:	429a      	cmp	r2, r3
 8005724:	d107      	bne.n	8005736 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005730:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005732:	429a      	cmp	r2, r3
 8005734:	d001      	beq.n	800573a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e000      	b.n	800573c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3718      	adds	r7, #24
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	40007000 	.word	0x40007000
 8005748:	40023800 	.word	0x40023800
 800574c:	42470060 	.word	0x42470060

08005750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e0cc      	b.n	80058fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005764:	4b68      	ldr	r3, [pc, #416]	; (8005908 <HAL_RCC_ClockConfig+0x1b8>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0307 	and.w	r3, r3, #7
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	429a      	cmp	r2, r3
 8005770:	d90c      	bls.n	800578c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005772:	4b65      	ldr	r3, [pc, #404]	; (8005908 <HAL_RCC_ClockConfig+0x1b8>)
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800577a:	4b63      	ldr	r3, [pc, #396]	; (8005908 <HAL_RCC_ClockConfig+0x1b8>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0307 	and.w	r3, r3, #7
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	429a      	cmp	r2, r3
 8005786:	d001      	beq.n	800578c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e0b8      	b.n	80058fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d020      	beq.n	80057da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0304 	and.w	r3, r3, #4
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d005      	beq.n	80057b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057a4:	4b59      	ldr	r3, [pc, #356]	; (800590c <HAL_RCC_ClockConfig+0x1bc>)
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	4a58      	ldr	r2, [pc, #352]	; (800590c <HAL_RCC_ClockConfig+0x1bc>)
 80057aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0308 	and.w	r3, r3, #8
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d005      	beq.n	80057c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057bc:	4b53      	ldr	r3, [pc, #332]	; (800590c <HAL_RCC_ClockConfig+0x1bc>)
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	4a52      	ldr	r2, [pc, #328]	; (800590c <HAL_RCC_ClockConfig+0x1bc>)
 80057c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057c8:	4b50      	ldr	r3, [pc, #320]	; (800590c <HAL_RCC_ClockConfig+0x1bc>)
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	494d      	ldr	r1, [pc, #308]	; (800590c <HAL_RCC_ClockConfig+0x1bc>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d044      	beq.n	8005870 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d107      	bne.n	80057fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ee:	4b47      	ldr	r3, [pc, #284]	; (800590c <HAL_RCC_ClockConfig+0x1bc>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d119      	bne.n	800582e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e07f      	b.n	80058fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	2b02      	cmp	r3, #2
 8005804:	d003      	beq.n	800580e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800580a:	2b03      	cmp	r3, #3
 800580c:	d107      	bne.n	800581e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800580e:	4b3f      	ldr	r3, [pc, #252]	; (800590c <HAL_RCC_ClockConfig+0x1bc>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d109      	bne.n	800582e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e06f      	b.n	80058fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800581e:	4b3b      	ldr	r3, [pc, #236]	; (800590c <HAL_RCC_ClockConfig+0x1bc>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e067      	b.n	80058fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800582e:	4b37      	ldr	r3, [pc, #220]	; (800590c <HAL_RCC_ClockConfig+0x1bc>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f023 0203 	bic.w	r2, r3, #3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	4934      	ldr	r1, [pc, #208]	; (800590c <HAL_RCC_ClockConfig+0x1bc>)
 800583c:	4313      	orrs	r3, r2
 800583e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005840:	f7fd f9bc 	bl	8002bbc <HAL_GetTick>
 8005844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005846:	e00a      	b.n	800585e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005848:	f7fd f9b8 	bl	8002bbc <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	f241 3288 	movw	r2, #5000	; 0x1388
 8005856:	4293      	cmp	r3, r2
 8005858:	d901      	bls.n	800585e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e04f      	b.n	80058fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800585e:	4b2b      	ldr	r3, [pc, #172]	; (800590c <HAL_RCC_ClockConfig+0x1bc>)
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f003 020c 	and.w	r2, r3, #12
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	429a      	cmp	r2, r3
 800586e:	d1eb      	bne.n	8005848 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005870:	4b25      	ldr	r3, [pc, #148]	; (8005908 <HAL_RCC_ClockConfig+0x1b8>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0307 	and.w	r3, r3, #7
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	d20c      	bcs.n	8005898 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587e:	4b22      	ldr	r3, [pc, #136]	; (8005908 <HAL_RCC_ClockConfig+0x1b8>)
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005886:	4b20      	ldr	r3, [pc, #128]	; (8005908 <HAL_RCC_ClockConfig+0x1b8>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0307 	and.w	r3, r3, #7
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	429a      	cmp	r2, r3
 8005892:	d001      	beq.n	8005898 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e032      	b.n	80058fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d008      	beq.n	80058b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058a4:	4b19      	ldr	r3, [pc, #100]	; (800590c <HAL_RCC_ClockConfig+0x1bc>)
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	4916      	ldr	r1, [pc, #88]	; (800590c <HAL_RCC_ClockConfig+0x1bc>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0308 	and.w	r3, r3, #8
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d009      	beq.n	80058d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058c2:	4b12      	ldr	r3, [pc, #72]	; (800590c <HAL_RCC_ClockConfig+0x1bc>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	490e      	ldr	r1, [pc, #56]	; (800590c <HAL_RCC_ClockConfig+0x1bc>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058d6:	f000 f821 	bl	800591c <HAL_RCC_GetSysClockFreq>
 80058da:	4602      	mov	r2, r0
 80058dc:	4b0b      	ldr	r3, [pc, #44]	; (800590c <HAL_RCC_ClockConfig+0x1bc>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	091b      	lsrs	r3, r3, #4
 80058e2:	f003 030f 	and.w	r3, r3, #15
 80058e6:	490a      	ldr	r1, [pc, #40]	; (8005910 <HAL_RCC_ClockConfig+0x1c0>)
 80058e8:	5ccb      	ldrb	r3, [r1, r3]
 80058ea:	fa22 f303 	lsr.w	r3, r2, r3
 80058ee:	4a09      	ldr	r2, [pc, #36]	; (8005914 <HAL_RCC_ClockConfig+0x1c4>)
 80058f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80058f2:	4b09      	ldr	r3, [pc, #36]	; (8005918 <HAL_RCC_ClockConfig+0x1c8>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7fd f91c 	bl	8002b34 <HAL_InitTick>

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	40023c00 	.word	0x40023c00
 800590c:	40023800 	.word	0x40023800
 8005910:	0800ef94 	.word	0x0800ef94
 8005914:	20000320 	.word	0x20000320
 8005918:	20000324 	.word	0x20000324

0800591c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800591c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005920:	b084      	sub	sp, #16
 8005922:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005924:	2300      	movs	r3, #0
 8005926:	607b      	str	r3, [r7, #4]
 8005928:	2300      	movs	r3, #0
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	2300      	movs	r3, #0
 800592e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005934:	4b67      	ldr	r3, [pc, #412]	; (8005ad4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f003 030c 	and.w	r3, r3, #12
 800593c:	2b08      	cmp	r3, #8
 800593e:	d00d      	beq.n	800595c <HAL_RCC_GetSysClockFreq+0x40>
 8005940:	2b08      	cmp	r3, #8
 8005942:	f200 80bd 	bhi.w	8005ac0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005946:	2b00      	cmp	r3, #0
 8005948:	d002      	beq.n	8005950 <HAL_RCC_GetSysClockFreq+0x34>
 800594a:	2b04      	cmp	r3, #4
 800594c:	d003      	beq.n	8005956 <HAL_RCC_GetSysClockFreq+0x3a>
 800594e:	e0b7      	b.n	8005ac0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005950:	4b61      	ldr	r3, [pc, #388]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005952:	60bb      	str	r3, [r7, #8]
       break;
 8005954:	e0b7      	b.n	8005ac6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005956:	4b61      	ldr	r3, [pc, #388]	; (8005adc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005958:	60bb      	str	r3, [r7, #8]
      break;
 800595a:	e0b4      	b.n	8005ac6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800595c:	4b5d      	ldr	r3, [pc, #372]	; (8005ad4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005964:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005966:	4b5b      	ldr	r3, [pc, #364]	; (8005ad4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d04d      	beq.n	8005a0e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005972:	4b58      	ldr	r3, [pc, #352]	; (8005ad4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	099b      	lsrs	r3, r3, #6
 8005978:	461a      	mov	r2, r3
 800597a:	f04f 0300 	mov.w	r3, #0
 800597e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005982:	f04f 0100 	mov.w	r1, #0
 8005986:	ea02 0800 	and.w	r8, r2, r0
 800598a:	ea03 0901 	and.w	r9, r3, r1
 800598e:	4640      	mov	r0, r8
 8005990:	4649      	mov	r1, r9
 8005992:	f04f 0200 	mov.w	r2, #0
 8005996:	f04f 0300 	mov.w	r3, #0
 800599a:	014b      	lsls	r3, r1, #5
 800599c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80059a0:	0142      	lsls	r2, r0, #5
 80059a2:	4610      	mov	r0, r2
 80059a4:	4619      	mov	r1, r3
 80059a6:	ebb0 0008 	subs.w	r0, r0, r8
 80059aa:	eb61 0109 	sbc.w	r1, r1, r9
 80059ae:	f04f 0200 	mov.w	r2, #0
 80059b2:	f04f 0300 	mov.w	r3, #0
 80059b6:	018b      	lsls	r3, r1, #6
 80059b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80059bc:	0182      	lsls	r2, r0, #6
 80059be:	1a12      	subs	r2, r2, r0
 80059c0:	eb63 0301 	sbc.w	r3, r3, r1
 80059c4:	f04f 0000 	mov.w	r0, #0
 80059c8:	f04f 0100 	mov.w	r1, #0
 80059cc:	00d9      	lsls	r1, r3, #3
 80059ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059d2:	00d0      	lsls	r0, r2, #3
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	eb12 0208 	adds.w	r2, r2, r8
 80059dc:	eb43 0309 	adc.w	r3, r3, r9
 80059e0:	f04f 0000 	mov.w	r0, #0
 80059e4:	f04f 0100 	mov.w	r1, #0
 80059e8:	0259      	lsls	r1, r3, #9
 80059ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80059ee:	0250      	lsls	r0, r2, #9
 80059f0:	4602      	mov	r2, r0
 80059f2:	460b      	mov	r3, r1
 80059f4:	4610      	mov	r0, r2
 80059f6:	4619      	mov	r1, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	461a      	mov	r2, r3
 80059fc:	f04f 0300 	mov.w	r3, #0
 8005a00:	f7fb f942 	bl	8000c88 <__aeabi_uldivmod>
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	4613      	mov	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	e04a      	b.n	8005aa4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a0e:	4b31      	ldr	r3, [pc, #196]	; (8005ad4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	099b      	lsrs	r3, r3, #6
 8005a14:	461a      	mov	r2, r3
 8005a16:	f04f 0300 	mov.w	r3, #0
 8005a1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005a1e:	f04f 0100 	mov.w	r1, #0
 8005a22:	ea02 0400 	and.w	r4, r2, r0
 8005a26:	ea03 0501 	and.w	r5, r3, r1
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	4629      	mov	r1, r5
 8005a2e:	f04f 0200 	mov.w	r2, #0
 8005a32:	f04f 0300 	mov.w	r3, #0
 8005a36:	014b      	lsls	r3, r1, #5
 8005a38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005a3c:	0142      	lsls	r2, r0, #5
 8005a3e:	4610      	mov	r0, r2
 8005a40:	4619      	mov	r1, r3
 8005a42:	1b00      	subs	r0, r0, r4
 8005a44:	eb61 0105 	sbc.w	r1, r1, r5
 8005a48:	f04f 0200 	mov.w	r2, #0
 8005a4c:	f04f 0300 	mov.w	r3, #0
 8005a50:	018b      	lsls	r3, r1, #6
 8005a52:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005a56:	0182      	lsls	r2, r0, #6
 8005a58:	1a12      	subs	r2, r2, r0
 8005a5a:	eb63 0301 	sbc.w	r3, r3, r1
 8005a5e:	f04f 0000 	mov.w	r0, #0
 8005a62:	f04f 0100 	mov.w	r1, #0
 8005a66:	00d9      	lsls	r1, r3, #3
 8005a68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a6c:	00d0      	lsls	r0, r2, #3
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	1912      	adds	r2, r2, r4
 8005a74:	eb45 0303 	adc.w	r3, r5, r3
 8005a78:	f04f 0000 	mov.w	r0, #0
 8005a7c:	f04f 0100 	mov.w	r1, #0
 8005a80:	0299      	lsls	r1, r3, #10
 8005a82:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005a86:	0290      	lsls	r0, r2, #10
 8005a88:	4602      	mov	r2, r0
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	4610      	mov	r0, r2
 8005a8e:	4619      	mov	r1, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	461a      	mov	r2, r3
 8005a94:	f04f 0300 	mov.w	r3, #0
 8005a98:	f7fb f8f6 	bl	8000c88 <__aeabi_uldivmod>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005aa4:	4b0b      	ldr	r3, [pc, #44]	; (8005ad4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	0c1b      	lsrs	r3, r3, #16
 8005aaa:	f003 0303 	and.w	r3, r3, #3
 8005aae:	3301      	adds	r3, #1
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005abc:	60bb      	str	r3, [r7, #8]
      break;
 8005abe:	e002      	b.n	8005ac6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ac0:	4b05      	ldr	r3, [pc, #20]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005ac2:	60bb      	str	r3, [r7, #8]
      break;
 8005ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ac6:	68bb      	ldr	r3, [r7, #8]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005ad2:	bf00      	nop
 8005ad4:	40023800 	.word	0x40023800
 8005ad8:	00f42400 	.word	0x00f42400
 8005adc:	007a1200 	.word	0x007a1200

08005ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ae4:	4b03      	ldr	r3, [pc, #12]	; (8005af4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	20000320 	.word	0x20000320

08005af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005afc:	f7ff fff0 	bl	8005ae0 <HAL_RCC_GetHCLKFreq>
 8005b00:	4602      	mov	r2, r0
 8005b02:	4b05      	ldr	r3, [pc, #20]	; (8005b18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	0a9b      	lsrs	r3, r3, #10
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	4903      	ldr	r1, [pc, #12]	; (8005b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b0e:	5ccb      	ldrb	r3, [r1, r3]
 8005b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	40023800 	.word	0x40023800
 8005b1c:	0800efa4 	.word	0x0800efa4

08005b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b24:	f7ff ffdc 	bl	8005ae0 <HAL_RCC_GetHCLKFreq>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	4b05      	ldr	r3, [pc, #20]	; (8005b40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	0b5b      	lsrs	r3, r3, #13
 8005b30:	f003 0307 	and.w	r3, r3, #7
 8005b34:	4903      	ldr	r1, [pc, #12]	; (8005b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b36:	5ccb      	ldrb	r3, [r1, r3]
 8005b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	40023800 	.word	0x40023800
 8005b44:	0800efa4 	.word	0x0800efa4

08005b48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e041      	b.n	8005bde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d106      	bne.n	8005b74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7fc fdc0 	bl	80026f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	3304      	adds	r3, #4
 8005b84:	4619      	mov	r1, r3
 8005b86:	4610      	mov	r0, r2
 8005b88:	f000 f82e 	bl	8005be8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
	...

08005be8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a40      	ldr	r2, [pc, #256]	; (8005cfc <TIM_Base_SetConfig+0x114>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d013      	beq.n	8005c28 <TIM_Base_SetConfig+0x40>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c06:	d00f      	beq.n	8005c28 <TIM_Base_SetConfig+0x40>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a3d      	ldr	r2, [pc, #244]	; (8005d00 <TIM_Base_SetConfig+0x118>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d00b      	beq.n	8005c28 <TIM_Base_SetConfig+0x40>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a3c      	ldr	r2, [pc, #240]	; (8005d04 <TIM_Base_SetConfig+0x11c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d007      	beq.n	8005c28 <TIM_Base_SetConfig+0x40>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a3b      	ldr	r2, [pc, #236]	; (8005d08 <TIM_Base_SetConfig+0x120>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d003      	beq.n	8005c28 <TIM_Base_SetConfig+0x40>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a3a      	ldr	r2, [pc, #232]	; (8005d0c <TIM_Base_SetConfig+0x124>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d108      	bne.n	8005c3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a2f      	ldr	r2, [pc, #188]	; (8005cfc <TIM_Base_SetConfig+0x114>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d02b      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c48:	d027      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a2c      	ldr	r2, [pc, #176]	; (8005d00 <TIM_Base_SetConfig+0x118>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d023      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a2b      	ldr	r2, [pc, #172]	; (8005d04 <TIM_Base_SetConfig+0x11c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d01f      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a2a      	ldr	r2, [pc, #168]	; (8005d08 <TIM_Base_SetConfig+0x120>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d01b      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a29      	ldr	r2, [pc, #164]	; (8005d0c <TIM_Base_SetConfig+0x124>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d017      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a28      	ldr	r2, [pc, #160]	; (8005d10 <TIM_Base_SetConfig+0x128>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d013      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a27      	ldr	r2, [pc, #156]	; (8005d14 <TIM_Base_SetConfig+0x12c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d00f      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a26      	ldr	r2, [pc, #152]	; (8005d18 <TIM_Base_SetConfig+0x130>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d00b      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a25      	ldr	r2, [pc, #148]	; (8005d1c <TIM_Base_SetConfig+0x134>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d007      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a24      	ldr	r2, [pc, #144]	; (8005d20 <TIM_Base_SetConfig+0x138>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d003      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a23      	ldr	r2, [pc, #140]	; (8005d24 <TIM_Base_SetConfig+0x13c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d108      	bne.n	8005cac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a0a      	ldr	r2, [pc, #40]	; (8005cfc <TIM_Base_SetConfig+0x114>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d003      	beq.n	8005ce0 <TIM_Base_SetConfig+0xf8>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a0c      	ldr	r2, [pc, #48]	; (8005d0c <TIM_Base_SetConfig+0x124>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d103      	bne.n	8005ce8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	691a      	ldr	r2, [r3, #16]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	615a      	str	r2, [r3, #20]
}
 8005cee:	bf00      	nop
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	40010000 	.word	0x40010000
 8005d00:	40000400 	.word	0x40000400
 8005d04:	40000800 	.word	0x40000800
 8005d08:	40000c00 	.word	0x40000c00
 8005d0c:	40010400 	.word	0x40010400
 8005d10:	40014000 	.word	0x40014000
 8005d14:	40014400 	.word	0x40014400
 8005d18:	40014800 	.word	0x40014800
 8005d1c:	40001800 	.word	0x40001800
 8005d20:	40001c00 	.word	0x40001c00
 8005d24:	40002000 	.word	0x40002000

08005d28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d101      	bne.n	8005d40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	e05a      	b.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a21      	ldr	r2, [pc, #132]	; (8005e04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d022      	beq.n	8005dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d8c:	d01d      	beq.n	8005dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a1d      	ldr	r2, [pc, #116]	; (8005e08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d018      	beq.n	8005dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a1b      	ldr	r2, [pc, #108]	; (8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d013      	beq.n	8005dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a1a      	ldr	r2, [pc, #104]	; (8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d00e      	beq.n	8005dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a18      	ldr	r2, [pc, #96]	; (8005e14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d009      	beq.n	8005dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a17      	ldr	r2, [pc, #92]	; (8005e18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d004      	beq.n	8005dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a15      	ldr	r2, [pc, #84]	; (8005e1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d10c      	bne.n	8005de4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	40010000 	.word	0x40010000
 8005e08:	40000400 	.word	0x40000400
 8005e0c:	40000800 	.word	0x40000800
 8005e10:	40000c00 	.word	0x40000c00
 8005e14:	40010400 	.word	0x40010400
 8005e18:	40014000 	.word	0x40014000
 8005e1c:	40001800 	.word	0x40001800

08005e20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e03f      	b.n	8005eb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d106      	bne.n	8005e4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7fc fc76 	bl	8002738 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2224      	movs	r2, #36	; 0x24
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68da      	ldr	r2, [r3, #12]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 f9cb 	bl	8006200 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	691a      	ldr	r2, [r3, #16]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	695a      	ldr	r2, [r3, #20]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68da      	ldr	r2, [r3, #12]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3708      	adds	r7, #8
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b08a      	sub	sp, #40	; 0x28
 8005ebe:	af02      	add	r7, sp, #8
 8005ec0:	60f8      	str	r0, [r7, #12]
 8005ec2:	60b9      	str	r1, [r7, #8]
 8005ec4:	603b      	str	r3, [r7, #0]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b20      	cmp	r3, #32
 8005ed8:	d17c      	bne.n	8005fd4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <HAL_UART_Transmit+0x2c>
 8005ee0:	88fb      	ldrh	r3, [r7, #6]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e075      	b.n	8005fd6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d101      	bne.n	8005ef8 <HAL_UART_Transmit+0x3e>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	e06e      	b.n	8005fd6 <HAL_UART_Transmit+0x11c>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2221      	movs	r2, #33	; 0x21
 8005f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f0e:	f7fc fe55 	bl	8002bbc <HAL_GetTick>
 8005f12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	88fa      	ldrh	r2, [r7, #6]
 8005f18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	88fa      	ldrh	r2, [r7, #6]
 8005f1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f28:	d108      	bne.n	8005f3c <HAL_UART_Transmit+0x82>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d104      	bne.n	8005f3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005f32:	2300      	movs	r3, #0
 8005f34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	61bb      	str	r3, [r7, #24]
 8005f3a:	e003      	b.n	8005f44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f40:	2300      	movs	r3, #0
 8005f42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005f4c:	e02a      	b.n	8005fa4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2200      	movs	r2, #0
 8005f56:	2180      	movs	r1, #128	; 0x80
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 f8e2 	bl	8006122 <UART_WaitOnFlagUntilTimeout>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e036      	b.n	8005fd6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10b      	bne.n	8005f86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	461a      	mov	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	3302      	adds	r3, #2
 8005f82:	61bb      	str	r3, [r7, #24]
 8005f84:	e007      	b.n	8005f96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	781a      	ldrb	r2, [r3, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	3301      	adds	r3, #1
 8005f94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1cf      	bne.n	8005f4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	2140      	movs	r1, #64	; 0x40
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 f8b2 	bl	8006122 <UART_WaitOnFlagUntilTimeout>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e006      	b.n	8005fd6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	e000      	b.n	8005fd6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005fd4:	2302      	movs	r3, #2
  }
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3720      	adds	r7, #32
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b08a      	sub	sp, #40	; 0x28
 8005fe2:	af02      	add	r7, sp, #8
 8005fe4:	60f8      	str	r0, [r7, #12]
 8005fe6:	60b9      	str	r1, [r7, #8]
 8005fe8:	603b      	str	r3, [r7, #0]
 8005fea:	4613      	mov	r3, r2
 8005fec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b20      	cmp	r3, #32
 8005ffc:	f040 808c 	bne.w	8006118 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d002      	beq.n	800600c <HAL_UART_Receive+0x2e>
 8006006:	88fb      	ldrh	r3, [r7, #6]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e084      	b.n	800611a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006016:	2b01      	cmp	r3, #1
 8006018:	d101      	bne.n	800601e <HAL_UART_Receive+0x40>
 800601a:	2302      	movs	r3, #2
 800601c:	e07d      	b.n	800611a <HAL_UART_Receive+0x13c>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2222      	movs	r2, #34	; 0x22
 8006030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800603a:	f7fc fdbf 	bl	8002bbc <HAL_GetTick>
 800603e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	88fa      	ldrh	r2, [r7, #6]
 8006044:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	88fa      	ldrh	r2, [r7, #6]
 800604a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006054:	d108      	bne.n	8006068 <HAL_UART_Receive+0x8a>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d104      	bne.n	8006068 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800605e:	2300      	movs	r3, #0
 8006060:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	61bb      	str	r3, [r7, #24]
 8006066:	e003      	b.n	8006070 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800606c:	2300      	movs	r3, #0
 800606e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006078:	e043      	b.n	8006102 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2200      	movs	r2, #0
 8006082:	2120      	movs	r1, #32
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 f84c 	bl	8006122 <UART_WaitOnFlagUntilTimeout>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e042      	b.n	800611a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10c      	bne.n	80060b4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	3302      	adds	r3, #2
 80060b0:	61bb      	str	r3, [r7, #24]
 80060b2:	e01f      	b.n	80060f4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060bc:	d007      	beq.n	80060ce <HAL_UART_Receive+0xf0>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10a      	bne.n	80060dc <HAL_UART_Receive+0xfe>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d106      	bne.n	80060dc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	b2da      	uxtb	r2, r3
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	701a      	strb	r2, [r3, #0]
 80060da:	e008      	b.n	80060ee <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	3301      	adds	r3, #1
 80060f2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	3b01      	subs	r3, #1
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006106:	b29b      	uxth	r3, r3
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1b6      	bne.n	800607a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2220      	movs	r2, #32
 8006110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006114:	2300      	movs	r3, #0
 8006116:	e000      	b.n	800611a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006118:	2302      	movs	r3, #2
  }
}
 800611a:	4618      	mov	r0, r3
 800611c:	3720      	adds	r7, #32
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b090      	sub	sp, #64	; 0x40
 8006126:	af00      	add	r7, sp, #0
 8006128:	60f8      	str	r0, [r7, #12]
 800612a:	60b9      	str	r1, [r7, #8]
 800612c:	603b      	str	r3, [r7, #0]
 800612e:	4613      	mov	r3, r2
 8006130:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006132:	e050      	b.n	80061d6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613a:	d04c      	beq.n	80061d6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800613c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800613e:	2b00      	cmp	r3, #0
 8006140:	d007      	beq.n	8006152 <UART_WaitOnFlagUntilTimeout+0x30>
 8006142:	f7fc fd3b 	bl	8002bbc <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800614e:	429a      	cmp	r2, r3
 8006150:	d241      	bcs.n	80061d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	330c      	adds	r3, #12
 8006158:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615c:	e853 3f00 	ldrex	r3, [r3]
 8006160:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006164:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	330c      	adds	r3, #12
 8006170:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006172:	637a      	str	r2, [r7, #52]	; 0x34
 8006174:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006176:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006178:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800617a:	e841 2300 	strex	r3, r2, [r1]
 800617e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1e5      	bne.n	8006152 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3314      	adds	r3, #20
 800618c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	e853 3f00 	ldrex	r3, [r3]
 8006194:	613b      	str	r3, [r7, #16]
   return(result);
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f023 0301 	bic.w	r3, r3, #1
 800619c:	63bb      	str	r3, [r7, #56]	; 0x38
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3314      	adds	r3, #20
 80061a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061a6:	623a      	str	r2, [r7, #32]
 80061a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061aa:	69f9      	ldr	r1, [r7, #28]
 80061ac:	6a3a      	ldr	r2, [r7, #32]
 80061ae:	e841 2300 	strex	r3, r2, [r1]
 80061b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1e5      	bne.n	8006186 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2220      	movs	r2, #32
 80061be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2220      	movs	r2, #32
 80061c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e00f      	b.n	80061f6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	4013      	ands	r3, r2
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	bf0c      	ite	eq
 80061e6:	2301      	moveq	r3, #1
 80061e8:	2300      	movne	r3, #0
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	461a      	mov	r2, r3
 80061ee:	79fb      	ldrb	r3, [r7, #7]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d09f      	beq.n	8006134 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3740      	adds	r7, #64	; 0x40
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
	...

08006200 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006204:	b09f      	sub	sp, #124	; 0x7c
 8006206:	af00      	add	r7, sp, #0
 8006208:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800620a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006216:	68d9      	ldr	r1, [r3, #12]
 8006218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	ea40 0301 	orr.w	r3, r0, r1
 8006220:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006224:	689a      	ldr	r2, [r3, #8]
 8006226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	431a      	orrs	r2, r3
 800622c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	431a      	orrs	r2, r3
 8006232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006234:	69db      	ldr	r3, [r3, #28]
 8006236:	4313      	orrs	r3, r2
 8006238:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800623a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006244:	f021 010c 	bic.w	r1, r1, #12
 8006248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800624e:	430b      	orrs	r3, r1
 8006250:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800625c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800625e:	6999      	ldr	r1, [r3, #24]
 8006260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	ea40 0301 	orr.w	r3, r0, r1
 8006268:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800626a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	4bc5      	ldr	r3, [pc, #788]	; (8006584 <UART_SetConfig+0x384>)
 8006270:	429a      	cmp	r2, r3
 8006272:	d004      	beq.n	800627e <UART_SetConfig+0x7e>
 8006274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	4bc3      	ldr	r3, [pc, #780]	; (8006588 <UART_SetConfig+0x388>)
 800627a:	429a      	cmp	r2, r3
 800627c:	d103      	bne.n	8006286 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800627e:	f7ff fc4f 	bl	8005b20 <HAL_RCC_GetPCLK2Freq>
 8006282:	6778      	str	r0, [r7, #116]	; 0x74
 8006284:	e002      	b.n	800628c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006286:	f7ff fc37 	bl	8005af8 <HAL_RCC_GetPCLK1Freq>
 800628a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800628c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800628e:	69db      	ldr	r3, [r3, #28]
 8006290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006294:	f040 80b6 	bne.w	8006404 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006298:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800629a:	461c      	mov	r4, r3
 800629c:	f04f 0500 	mov.w	r5, #0
 80062a0:	4622      	mov	r2, r4
 80062a2:	462b      	mov	r3, r5
 80062a4:	1891      	adds	r1, r2, r2
 80062a6:	6439      	str	r1, [r7, #64]	; 0x40
 80062a8:	415b      	adcs	r3, r3
 80062aa:	647b      	str	r3, [r7, #68]	; 0x44
 80062ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80062b0:	1912      	adds	r2, r2, r4
 80062b2:	eb45 0303 	adc.w	r3, r5, r3
 80062b6:	f04f 0000 	mov.w	r0, #0
 80062ba:	f04f 0100 	mov.w	r1, #0
 80062be:	00d9      	lsls	r1, r3, #3
 80062c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062c4:	00d0      	lsls	r0, r2, #3
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	1911      	adds	r1, r2, r4
 80062cc:	6639      	str	r1, [r7, #96]	; 0x60
 80062ce:	416b      	adcs	r3, r5
 80062d0:	667b      	str	r3, [r7, #100]	; 0x64
 80062d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	461a      	mov	r2, r3
 80062d8:	f04f 0300 	mov.w	r3, #0
 80062dc:	1891      	adds	r1, r2, r2
 80062de:	63b9      	str	r1, [r7, #56]	; 0x38
 80062e0:	415b      	adcs	r3, r3
 80062e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80062e8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80062ec:	f7fa fccc 	bl	8000c88 <__aeabi_uldivmod>
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	4ba5      	ldr	r3, [pc, #660]	; (800658c <UART_SetConfig+0x38c>)
 80062f6:	fba3 2302 	umull	r2, r3, r3, r2
 80062fa:	095b      	lsrs	r3, r3, #5
 80062fc:	011e      	lsls	r6, r3, #4
 80062fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006300:	461c      	mov	r4, r3
 8006302:	f04f 0500 	mov.w	r5, #0
 8006306:	4622      	mov	r2, r4
 8006308:	462b      	mov	r3, r5
 800630a:	1891      	adds	r1, r2, r2
 800630c:	6339      	str	r1, [r7, #48]	; 0x30
 800630e:	415b      	adcs	r3, r3
 8006310:	637b      	str	r3, [r7, #52]	; 0x34
 8006312:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006316:	1912      	adds	r2, r2, r4
 8006318:	eb45 0303 	adc.w	r3, r5, r3
 800631c:	f04f 0000 	mov.w	r0, #0
 8006320:	f04f 0100 	mov.w	r1, #0
 8006324:	00d9      	lsls	r1, r3, #3
 8006326:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800632a:	00d0      	lsls	r0, r2, #3
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	1911      	adds	r1, r2, r4
 8006332:	65b9      	str	r1, [r7, #88]	; 0x58
 8006334:	416b      	adcs	r3, r5
 8006336:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	461a      	mov	r2, r3
 800633e:	f04f 0300 	mov.w	r3, #0
 8006342:	1891      	adds	r1, r2, r2
 8006344:	62b9      	str	r1, [r7, #40]	; 0x28
 8006346:	415b      	adcs	r3, r3
 8006348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800634a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800634e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006352:	f7fa fc99 	bl	8000c88 <__aeabi_uldivmod>
 8006356:	4602      	mov	r2, r0
 8006358:	460b      	mov	r3, r1
 800635a:	4b8c      	ldr	r3, [pc, #560]	; (800658c <UART_SetConfig+0x38c>)
 800635c:	fba3 1302 	umull	r1, r3, r3, r2
 8006360:	095b      	lsrs	r3, r3, #5
 8006362:	2164      	movs	r1, #100	; 0x64
 8006364:	fb01 f303 	mul.w	r3, r1, r3
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	00db      	lsls	r3, r3, #3
 800636c:	3332      	adds	r3, #50	; 0x32
 800636e:	4a87      	ldr	r2, [pc, #540]	; (800658c <UART_SetConfig+0x38c>)
 8006370:	fba2 2303 	umull	r2, r3, r2, r3
 8006374:	095b      	lsrs	r3, r3, #5
 8006376:	005b      	lsls	r3, r3, #1
 8006378:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800637c:	441e      	add	r6, r3
 800637e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006380:	4618      	mov	r0, r3
 8006382:	f04f 0100 	mov.w	r1, #0
 8006386:	4602      	mov	r2, r0
 8006388:	460b      	mov	r3, r1
 800638a:	1894      	adds	r4, r2, r2
 800638c:	623c      	str	r4, [r7, #32]
 800638e:	415b      	adcs	r3, r3
 8006390:	627b      	str	r3, [r7, #36]	; 0x24
 8006392:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006396:	1812      	adds	r2, r2, r0
 8006398:	eb41 0303 	adc.w	r3, r1, r3
 800639c:	f04f 0400 	mov.w	r4, #0
 80063a0:	f04f 0500 	mov.w	r5, #0
 80063a4:	00dd      	lsls	r5, r3, #3
 80063a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80063aa:	00d4      	lsls	r4, r2, #3
 80063ac:	4622      	mov	r2, r4
 80063ae:	462b      	mov	r3, r5
 80063b0:	1814      	adds	r4, r2, r0
 80063b2:	653c      	str	r4, [r7, #80]	; 0x50
 80063b4:	414b      	adcs	r3, r1
 80063b6:	657b      	str	r3, [r7, #84]	; 0x54
 80063b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	461a      	mov	r2, r3
 80063be:	f04f 0300 	mov.w	r3, #0
 80063c2:	1891      	adds	r1, r2, r2
 80063c4:	61b9      	str	r1, [r7, #24]
 80063c6:	415b      	adcs	r3, r3
 80063c8:	61fb      	str	r3, [r7, #28]
 80063ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063ce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80063d2:	f7fa fc59 	bl	8000c88 <__aeabi_uldivmod>
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	4b6c      	ldr	r3, [pc, #432]	; (800658c <UART_SetConfig+0x38c>)
 80063dc:	fba3 1302 	umull	r1, r3, r3, r2
 80063e0:	095b      	lsrs	r3, r3, #5
 80063e2:	2164      	movs	r1, #100	; 0x64
 80063e4:	fb01 f303 	mul.w	r3, r1, r3
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	00db      	lsls	r3, r3, #3
 80063ec:	3332      	adds	r3, #50	; 0x32
 80063ee:	4a67      	ldr	r2, [pc, #412]	; (800658c <UART_SetConfig+0x38c>)
 80063f0:	fba2 2303 	umull	r2, r3, r2, r3
 80063f4:	095b      	lsrs	r3, r3, #5
 80063f6:	f003 0207 	and.w	r2, r3, #7
 80063fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4432      	add	r2, r6
 8006400:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006402:	e0b9      	b.n	8006578 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006404:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006406:	461c      	mov	r4, r3
 8006408:	f04f 0500 	mov.w	r5, #0
 800640c:	4622      	mov	r2, r4
 800640e:	462b      	mov	r3, r5
 8006410:	1891      	adds	r1, r2, r2
 8006412:	6139      	str	r1, [r7, #16]
 8006414:	415b      	adcs	r3, r3
 8006416:	617b      	str	r3, [r7, #20]
 8006418:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800641c:	1912      	adds	r2, r2, r4
 800641e:	eb45 0303 	adc.w	r3, r5, r3
 8006422:	f04f 0000 	mov.w	r0, #0
 8006426:	f04f 0100 	mov.w	r1, #0
 800642a:	00d9      	lsls	r1, r3, #3
 800642c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006430:	00d0      	lsls	r0, r2, #3
 8006432:	4602      	mov	r2, r0
 8006434:	460b      	mov	r3, r1
 8006436:	eb12 0804 	adds.w	r8, r2, r4
 800643a:	eb43 0905 	adc.w	r9, r3, r5
 800643e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	4618      	mov	r0, r3
 8006444:	f04f 0100 	mov.w	r1, #0
 8006448:	f04f 0200 	mov.w	r2, #0
 800644c:	f04f 0300 	mov.w	r3, #0
 8006450:	008b      	lsls	r3, r1, #2
 8006452:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006456:	0082      	lsls	r2, r0, #2
 8006458:	4640      	mov	r0, r8
 800645a:	4649      	mov	r1, r9
 800645c:	f7fa fc14 	bl	8000c88 <__aeabi_uldivmod>
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	4b49      	ldr	r3, [pc, #292]	; (800658c <UART_SetConfig+0x38c>)
 8006466:	fba3 2302 	umull	r2, r3, r3, r2
 800646a:	095b      	lsrs	r3, r3, #5
 800646c:	011e      	lsls	r6, r3, #4
 800646e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006470:	4618      	mov	r0, r3
 8006472:	f04f 0100 	mov.w	r1, #0
 8006476:	4602      	mov	r2, r0
 8006478:	460b      	mov	r3, r1
 800647a:	1894      	adds	r4, r2, r2
 800647c:	60bc      	str	r4, [r7, #8]
 800647e:	415b      	adcs	r3, r3
 8006480:	60fb      	str	r3, [r7, #12]
 8006482:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006486:	1812      	adds	r2, r2, r0
 8006488:	eb41 0303 	adc.w	r3, r1, r3
 800648c:	f04f 0400 	mov.w	r4, #0
 8006490:	f04f 0500 	mov.w	r5, #0
 8006494:	00dd      	lsls	r5, r3, #3
 8006496:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800649a:	00d4      	lsls	r4, r2, #3
 800649c:	4622      	mov	r2, r4
 800649e:	462b      	mov	r3, r5
 80064a0:	1814      	adds	r4, r2, r0
 80064a2:	64bc      	str	r4, [r7, #72]	; 0x48
 80064a4:	414b      	adcs	r3, r1
 80064a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f04f 0100 	mov.w	r1, #0
 80064b2:	f04f 0200 	mov.w	r2, #0
 80064b6:	f04f 0300 	mov.w	r3, #0
 80064ba:	008b      	lsls	r3, r1, #2
 80064bc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80064c0:	0082      	lsls	r2, r0, #2
 80064c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80064c6:	f7fa fbdf 	bl	8000c88 <__aeabi_uldivmod>
 80064ca:	4602      	mov	r2, r0
 80064cc:	460b      	mov	r3, r1
 80064ce:	4b2f      	ldr	r3, [pc, #188]	; (800658c <UART_SetConfig+0x38c>)
 80064d0:	fba3 1302 	umull	r1, r3, r3, r2
 80064d4:	095b      	lsrs	r3, r3, #5
 80064d6:	2164      	movs	r1, #100	; 0x64
 80064d8:	fb01 f303 	mul.w	r3, r1, r3
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	011b      	lsls	r3, r3, #4
 80064e0:	3332      	adds	r3, #50	; 0x32
 80064e2:	4a2a      	ldr	r2, [pc, #168]	; (800658c <UART_SetConfig+0x38c>)
 80064e4:	fba2 2303 	umull	r2, r3, r2, r3
 80064e8:	095b      	lsrs	r3, r3, #5
 80064ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064ee:	441e      	add	r6, r3
 80064f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064f2:	4618      	mov	r0, r3
 80064f4:	f04f 0100 	mov.w	r1, #0
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	1894      	adds	r4, r2, r2
 80064fe:	603c      	str	r4, [r7, #0]
 8006500:	415b      	adcs	r3, r3
 8006502:	607b      	str	r3, [r7, #4]
 8006504:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006508:	1812      	adds	r2, r2, r0
 800650a:	eb41 0303 	adc.w	r3, r1, r3
 800650e:	f04f 0400 	mov.w	r4, #0
 8006512:	f04f 0500 	mov.w	r5, #0
 8006516:	00dd      	lsls	r5, r3, #3
 8006518:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800651c:	00d4      	lsls	r4, r2, #3
 800651e:	4622      	mov	r2, r4
 8006520:	462b      	mov	r3, r5
 8006522:	eb12 0a00 	adds.w	sl, r2, r0
 8006526:	eb43 0b01 	adc.w	fp, r3, r1
 800652a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	4618      	mov	r0, r3
 8006530:	f04f 0100 	mov.w	r1, #0
 8006534:	f04f 0200 	mov.w	r2, #0
 8006538:	f04f 0300 	mov.w	r3, #0
 800653c:	008b      	lsls	r3, r1, #2
 800653e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006542:	0082      	lsls	r2, r0, #2
 8006544:	4650      	mov	r0, sl
 8006546:	4659      	mov	r1, fp
 8006548:	f7fa fb9e 	bl	8000c88 <__aeabi_uldivmod>
 800654c:	4602      	mov	r2, r0
 800654e:	460b      	mov	r3, r1
 8006550:	4b0e      	ldr	r3, [pc, #56]	; (800658c <UART_SetConfig+0x38c>)
 8006552:	fba3 1302 	umull	r1, r3, r3, r2
 8006556:	095b      	lsrs	r3, r3, #5
 8006558:	2164      	movs	r1, #100	; 0x64
 800655a:	fb01 f303 	mul.w	r3, r1, r3
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	011b      	lsls	r3, r3, #4
 8006562:	3332      	adds	r3, #50	; 0x32
 8006564:	4a09      	ldr	r2, [pc, #36]	; (800658c <UART_SetConfig+0x38c>)
 8006566:	fba2 2303 	umull	r2, r3, r2, r3
 800656a:	095b      	lsrs	r3, r3, #5
 800656c:	f003 020f 	and.w	r2, r3, #15
 8006570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4432      	add	r2, r6
 8006576:	609a      	str	r2, [r3, #8]
}
 8006578:	bf00      	nop
 800657a:	377c      	adds	r7, #124	; 0x7c
 800657c:	46bd      	mov	sp, r7
 800657e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006582:	bf00      	nop
 8006584:	40011000 	.word	0x40011000
 8006588:	40011400 	.word	0x40011400
 800658c:	51eb851f 	.word	0x51eb851f

08006590 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006590:	b084      	sub	sp, #16
 8006592:	b580      	push	{r7, lr}
 8006594:	b084      	sub	sp, #16
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	f107 001c 	add.w	r0, r7, #28
 800659e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d122      	bne.n	80065ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80065bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80065d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d105      	bne.n	80065e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f9a0 	bl	8006928 <USB_CoreReset>
 80065e8:	4603      	mov	r3, r0
 80065ea:	73fb      	strb	r3, [r7, #15]
 80065ec:	e01a      	b.n	8006624 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f994 	bl	8006928 <USB_CoreReset>
 8006600:	4603      	mov	r3, r0
 8006602:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006606:	2b00      	cmp	r3, #0
 8006608:	d106      	bne.n	8006618 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	639a      	str	r2, [r3, #56]	; 0x38
 8006616:	e005      	b.n	8006624 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006626:	2b01      	cmp	r3, #1
 8006628:	d10b      	bne.n	8006642 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f043 0206 	orr.w	r2, r3, #6
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f043 0220 	orr.w	r2, r3, #32
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006642:	7bfb      	ldrb	r3, [r7, #15]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800664e:	b004      	add	sp, #16
 8006650:	4770      	bx	lr

08006652 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006652:	b480      	push	{r7}
 8006654:	b083      	sub	sp, #12
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f043 0201 	orr.w	r2, r3, #1
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f023 0201 	bic.w	r2, r3, #1
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	370c      	adds	r7, #12
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr

08006696 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b084      	sub	sp, #16
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
 800669e:	460b      	mov	r3, r1
 80066a0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80066a2:	2300      	movs	r3, #0
 80066a4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80066b2:	78fb      	ldrb	r3, [r7, #3]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d115      	bne.n	80066e4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80066c4:	2001      	movs	r0, #1
 80066c6:	f7fc fa85 	bl	8002bd4 <HAL_Delay>
      ms++;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	3301      	adds	r3, #1
 80066ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 f91a 	bl	800690a <USB_GetMode>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d01e      	beq.n	800671a <USB_SetCurrentMode+0x84>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2b31      	cmp	r3, #49	; 0x31
 80066e0:	d9f0      	bls.n	80066c4 <USB_SetCurrentMode+0x2e>
 80066e2:	e01a      	b.n	800671a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80066e4:	78fb      	ldrb	r3, [r7, #3]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d115      	bne.n	8006716 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80066f6:	2001      	movs	r0, #1
 80066f8:	f7fc fa6c 	bl	8002bd4 <HAL_Delay>
      ms++;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	3301      	adds	r3, #1
 8006700:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f901 	bl	800690a <USB_GetMode>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d005      	beq.n	800671a <USB_SetCurrentMode+0x84>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2b31      	cmp	r3, #49	; 0x31
 8006712:	d9f0      	bls.n	80066f6 <USB_SetCurrentMode+0x60>
 8006714:	e001      	b.n	800671a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e005      	b.n	8006726 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2b32      	cmp	r3, #50	; 0x32
 800671e:	d101      	bne.n	8006724 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e000      	b.n	8006726 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
	...

08006730 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800673a:	2300      	movs	r3, #0
 800673c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	019b      	lsls	r3, r3, #6
 8006742:	f043 0220 	orr.w	r2, r3, #32
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	3301      	adds	r3, #1
 800674e:	60fb      	str	r3, [r7, #12]
 8006750:	4a08      	ldr	r2, [pc, #32]	; (8006774 <USB_FlushTxFifo+0x44>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d901      	bls.n	800675a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e006      	b.n	8006768 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	f003 0320 	and.w	r3, r3, #32
 8006762:	2b20      	cmp	r3, #32
 8006764:	d0f1      	beq.n	800674a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	00030d40 	.word	0x00030d40

08006778 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006780:	2300      	movs	r3, #0
 8006782:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2210      	movs	r2, #16
 8006788:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	3301      	adds	r3, #1
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	4a08      	ldr	r2, [pc, #32]	; (80067b4 <USB_FlushRxFifo+0x3c>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d901      	bls.n	800679a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e006      	b.n	80067a8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	f003 0310 	and.w	r3, r3, #16
 80067a2:	2b10      	cmp	r3, #16
 80067a4:	d0f1      	beq.n	800678a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr
 80067b4:	00030d40 	.word	0x00030d40

080067b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b089      	sub	sp, #36	; 0x24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	4611      	mov	r1, r2
 80067c4:	461a      	mov	r2, r3
 80067c6:	460b      	mov	r3, r1
 80067c8:	71fb      	strb	r3, [r7, #7]
 80067ca:	4613      	mov	r3, r2
 80067cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80067d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d123      	bne.n	8006826 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80067de:	88bb      	ldrh	r3, [r7, #4]
 80067e0:	3303      	adds	r3, #3
 80067e2:	089b      	lsrs	r3, r3, #2
 80067e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80067e6:	2300      	movs	r3, #0
 80067e8:	61bb      	str	r3, [r7, #24]
 80067ea:	e018      	b.n	800681e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80067ec:	79fb      	ldrb	r3, [r7, #7]
 80067ee:	031a      	lsls	r2, r3, #12
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067f8:	461a      	mov	r2, r3
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	3301      	adds	r3, #1
 8006804:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	3301      	adds	r3, #1
 800680a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	3301      	adds	r3, #1
 8006810:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	3301      	adds	r3, #1
 8006816:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	3301      	adds	r3, #1
 800681c:	61bb      	str	r3, [r7, #24]
 800681e:	69ba      	ldr	r2, [r7, #24]
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	429a      	cmp	r2, r3
 8006824:	d3e2      	bcc.n	80067ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3724      	adds	r7, #36	; 0x24
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006834:	b480      	push	{r7}
 8006836:	b08b      	sub	sp, #44	; 0x2c
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	4613      	mov	r3, r2
 8006840:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800684a:	88fb      	ldrh	r3, [r7, #6]
 800684c:	089b      	lsrs	r3, r3, #2
 800684e:	b29b      	uxth	r3, r3
 8006850:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006852:	88fb      	ldrh	r3, [r7, #6]
 8006854:	f003 0303 	and.w	r3, r3, #3
 8006858:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800685a:	2300      	movs	r3, #0
 800685c:	623b      	str	r3, [r7, #32]
 800685e:	e014      	b.n	800688a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686a:	601a      	str	r2, [r3, #0]
    pDest++;
 800686c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686e:	3301      	adds	r3, #1
 8006870:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006874:	3301      	adds	r3, #1
 8006876:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	3301      	adds	r3, #1
 800687c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800687e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006880:	3301      	adds	r3, #1
 8006882:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	3301      	adds	r3, #1
 8006888:	623b      	str	r3, [r7, #32]
 800688a:	6a3a      	ldr	r2, [r7, #32]
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	429a      	cmp	r2, r3
 8006890:	d3e6      	bcc.n	8006860 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006892:	8bfb      	ldrh	r3, [r7, #30]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d01e      	beq.n	80068d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006898:	2300      	movs	r3, #0
 800689a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068a2:	461a      	mov	r2, r3
 80068a4:	f107 0310 	add.w	r3, r7, #16
 80068a8:	6812      	ldr	r2, [r2, #0]
 80068aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	00db      	lsls	r3, r3, #3
 80068b4:	fa22 f303 	lsr.w	r3, r2, r3
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	701a      	strb	r2, [r3, #0]
      i++;
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	3301      	adds	r3, #1
 80068c2:	623b      	str	r3, [r7, #32]
      pDest++;
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	3301      	adds	r3, #1
 80068c8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80068ca:	8bfb      	ldrh	r3, [r7, #30]
 80068cc:	3b01      	subs	r3, #1
 80068ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80068d0:	8bfb      	ldrh	r3, [r7, #30]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1ea      	bne.n	80068ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80068d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80068d8:	4618      	mov	r0, r3
 80068da:	372c      	adds	r7, #44	; 0x2c
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	4013      	ands	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80068fc:	68fb      	ldr	r3, [r7, #12]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3714      	adds	r7, #20
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800690a:	b480      	push	{r7}
 800690c:	b083      	sub	sp, #12
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	f003 0301 	and.w	r3, r3, #1
}
 800691a:	4618      	mov	r0, r3
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
	...

08006928 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006930:	2300      	movs	r3, #0
 8006932:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	3301      	adds	r3, #1
 8006938:	60fb      	str	r3, [r7, #12]
 800693a:	4a13      	ldr	r2, [pc, #76]	; (8006988 <USB_CoreReset+0x60>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d901      	bls.n	8006944 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e01a      	b.n	800697a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	2b00      	cmp	r3, #0
 800694a:	daf3      	bge.n	8006934 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800694c:	2300      	movs	r3, #0
 800694e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	f043 0201 	orr.w	r2, r3, #1
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	3301      	adds	r3, #1
 8006960:	60fb      	str	r3, [r7, #12]
 8006962:	4a09      	ldr	r2, [pc, #36]	; (8006988 <USB_CoreReset+0x60>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d901      	bls.n	800696c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e006      	b.n	800697a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	2b01      	cmp	r3, #1
 8006976:	d0f1      	beq.n	800695c <USB_CoreReset+0x34>

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	00030d40 	.word	0x00030d40

0800698c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800698c:	b084      	sub	sp, #16
 800698e:	b580      	push	{r7, lr}
 8006990:	b084      	sub	sp, #16
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
 8006996:	f107 001c 	add.w	r0, r7, #28
 800699a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069a8:	461a      	mov	r2, r3
 80069aa:	2300      	movs	r3, #0
 80069ac:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069be:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ca:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d018      	beq.n	8006a10 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d10a      	bne.n	80069fa <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069f2:	f043 0304 	orr.w	r3, r3, #4
 80069f6:	6013      	str	r3, [r2, #0]
 80069f8:	e014      	b.n	8006a24 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a08:	f023 0304 	bic.w	r3, r3, #4
 8006a0c:	6013      	str	r3, [r2, #0]
 8006a0e:	e009      	b.n	8006a24 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a1e:	f023 0304 	bic.w	r3, r3, #4
 8006a22:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006a24:	2110      	movs	r1, #16
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7ff fe82 	bl	8006730 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7ff fea3 	bl	8006778 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006a32:	2300      	movs	r3, #0
 8006a34:	60fb      	str	r3, [r7, #12]
 8006a36:	e015      	b.n	8006a64 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	015a      	lsls	r2, r3, #5
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	4413      	add	r3, r2
 8006a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a44:	461a      	mov	r2, r3
 8006a46:	f04f 33ff 	mov.w	r3, #4294967295
 8006a4a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a58:	461a      	mov	r2, r3
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	3301      	adds	r3, #1
 8006a62:	60fb      	str	r3, [r7, #12]
 8006a64:	6a3b      	ldr	r3, [r7, #32]
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d3e5      	bcc.n	8006a38 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f04f 32ff 	mov.w	r2, #4294967295
 8006a78:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00b      	beq.n	8006a9e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a8c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a13      	ldr	r2, [pc, #76]	; (8006ae0 <USB_HostInit+0x154>)
 8006a92:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a13      	ldr	r2, [pc, #76]	; (8006ae4 <USB_HostInit+0x158>)
 8006a98:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006a9c:	e009      	b.n	8006ab2 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2280      	movs	r2, #128	; 0x80
 8006aa2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a10      	ldr	r2, [pc, #64]	; (8006ae8 <USB_HostInit+0x15c>)
 8006aa8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a0f      	ldr	r2, [pc, #60]	; (8006aec <USB_HostInit+0x160>)
 8006aae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d105      	bne.n	8006ac4 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	f043 0210 	orr.w	r2, r3, #16
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	699a      	ldr	r2, [r3, #24]
 8006ac8:	4b09      	ldr	r3, [pc, #36]	; (8006af0 <USB_HostInit+0x164>)
 8006aca:	4313      	orrs	r3, r2
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006adc:	b004      	add	sp, #16
 8006ade:	4770      	bx	lr
 8006ae0:	01000200 	.word	0x01000200
 8006ae4:	00e00300 	.word	0x00e00300
 8006ae8:	00600080 	.word	0x00600080
 8006aec:	004000e0 	.word	0x004000e0
 8006af0:	a3200008 	.word	0xa3200008

08006af4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	460b      	mov	r3, r1
 8006afe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b12:	f023 0303 	bic.w	r3, r3, #3
 8006b16:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	78fb      	ldrb	r3, [r7, #3]
 8006b22:	f003 0303 	and.w	r3, r3, #3
 8006b26:	68f9      	ldr	r1, [r7, #12]
 8006b28:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006b30:	78fb      	ldrb	r3, [r7, #3]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d107      	bne.n	8006b46 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006b42:	6053      	str	r3, [r2, #4]
 8006b44:	e009      	b.n	8006b5a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006b46:	78fb      	ldrb	r3, [r7, #3]
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d106      	bne.n	8006b5a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b52:	461a      	mov	r2, r3
 8006b54:	f241 7370 	movw	r3, #6000	; 0x1770
 8006b58:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3714      	adds	r7, #20
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006b88:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b96:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006b98:	2064      	movs	r0, #100	; 0x64
 8006b9a:	f7fc f81b 	bl	8002bd4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ba6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006baa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006bac:	200a      	movs	r0, #10
 8006bae:	f7fc f811 	bl	8002bd4 <HAL_Delay>

  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006be0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d109      	bne.n	8006c00 <USB_DriveVbus+0x44>
 8006bec:	78fb      	ldrb	r3, [r7, #3]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d106      	bne.n	8006c00 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006bfa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006bfe:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c0a:	d109      	bne.n	8006c20 <USB_DriveVbus+0x64>
 8006c0c:	78fb      	ldrb	r3, [r7, #3]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d106      	bne.n	8006c20 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006c1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c1e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b085      	sub	sp, #20
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	0c5b      	lsrs	r3, r3, #17
 8006c4c:	f003 0303 	and.w	r3, r3, #3
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3714      	adds	r7, #20
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	b29b      	uxth	r3, r3
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3714      	adds	r7, #20
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
	...

08006c80 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b088      	sub	sp, #32
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	4608      	mov	r0, r1
 8006c8a:	4611      	mov	r1, r2
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	4603      	mov	r3, r0
 8006c90:	70fb      	strb	r3, [r7, #3]
 8006c92:	460b      	mov	r3, r1
 8006c94:	70bb      	strb	r3, [r7, #2]
 8006c96:	4613      	mov	r3, r2
 8006c98:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006ca2:	78fb      	ldrb	r3, [r7, #3]
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cae:	461a      	mov	r2, r3
 8006cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8006cb4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006cb6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006cba:	2b03      	cmp	r3, #3
 8006cbc:	d87e      	bhi.n	8006dbc <USB_HC_Init+0x13c>
 8006cbe:	a201      	add	r2, pc, #4	; (adr r2, 8006cc4 <USB_HC_Init+0x44>)
 8006cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc4:	08006cd5 	.word	0x08006cd5
 8006cc8:	08006d7f 	.word	0x08006d7f
 8006ccc:	08006cd5 	.word	0x08006cd5
 8006cd0:	08006d41 	.word	0x08006d41
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006cd4:	78fb      	ldrb	r3, [r7, #3]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	f240 439d 	movw	r3, #1181	; 0x49d
 8006ce6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006ce8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	da10      	bge.n	8006d12 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006cf0:	78fb      	ldrb	r3, [r7, #3]
 8006cf2:	015a      	lsls	r2, r3, #5
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	78fa      	ldrb	r2, [r7, #3]
 8006d00:	0151      	lsls	r1, r2, #5
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	440a      	add	r2, r1
 8006d06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d0e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006d10:	e057      	b.n	8006dc2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d051      	beq.n	8006dc2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006d1e:	78fb      	ldrb	r3, [r7, #3]
 8006d20:	015a      	lsls	r2, r3, #5
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	78fa      	ldrb	r2, [r7, #3]
 8006d2e:	0151      	lsls	r1, r2, #5
 8006d30:	693a      	ldr	r2, [r7, #16]
 8006d32:	440a      	add	r2, r1
 8006d34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d38:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006d3c:	60d3      	str	r3, [r2, #12]
      break;
 8006d3e:	e040      	b.n	8006dc2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d40:	78fb      	ldrb	r3, [r7, #3]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	f240 639d 	movw	r3, #1693	; 0x69d
 8006d52:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006d54:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	da34      	bge.n	8006dc6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006d5c:	78fb      	ldrb	r3, [r7, #3]
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	78fa      	ldrb	r2, [r7, #3]
 8006d6c:	0151      	lsls	r1, r2, #5
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	440a      	add	r2, r1
 8006d72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d7a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006d7c:	e023      	b.n	8006dc6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d7e:	78fb      	ldrb	r3, [r7, #3]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	f240 2325 	movw	r3, #549	; 0x225
 8006d90:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006d92:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	da17      	bge.n	8006dca <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006d9a:	78fb      	ldrb	r3, [r7, #3]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	78fa      	ldrb	r2, [r7, #3]
 8006daa:	0151      	lsls	r1, r2, #5
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	440a      	add	r2, r1
 8006db0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006db4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006db8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006dba:	e006      	b.n	8006dca <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	77fb      	strb	r3, [r7, #31]
      break;
 8006dc0:	e004      	b.n	8006dcc <USB_HC_Init+0x14c>
      break;
 8006dc2:	bf00      	nop
 8006dc4:	e002      	b.n	8006dcc <USB_HC_Init+0x14c>
      break;
 8006dc6:	bf00      	nop
 8006dc8:	e000      	b.n	8006dcc <USB_HC_Init+0x14c>
      break;
 8006dca:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dd2:	699a      	ldr	r2, [r3, #24]
 8006dd4:	78fb      	ldrb	r3, [r7, #3]
 8006dd6:	f003 030f 	and.w	r3, r3, #15
 8006dda:	2101      	movs	r1, #1
 8006ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8006de0:	6939      	ldr	r1, [r7, #16]
 8006de2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006de6:	4313      	orrs	r3, r2
 8006de8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006df6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	da03      	bge.n	8006e06 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e02:	61bb      	str	r3, [r7, #24]
 8006e04:	e001      	b.n	8006e0a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006e06:	2300      	movs	r3, #0
 8006e08:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7ff ff0f 	bl	8006c2e <USB_GetHostSpeed>
 8006e10:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006e12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d106      	bne.n	8006e28 <USB_HC_Init+0x1a8>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d003      	beq.n	8006e28 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006e20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006e24:	617b      	str	r3, [r7, #20]
 8006e26:	e001      	b.n	8006e2c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e2c:	787b      	ldrb	r3, [r7, #1]
 8006e2e:	059b      	lsls	r3, r3, #22
 8006e30:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006e34:	78bb      	ldrb	r3, [r7, #2]
 8006e36:	02db      	lsls	r3, r3, #11
 8006e38:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e3c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006e3e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006e42:	049b      	lsls	r3, r3, #18
 8006e44:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006e48:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006e4a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006e4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006e50:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e56:	78fb      	ldrb	r3, [r7, #3]
 8006e58:	0159      	lsls	r1, r3, #5
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	440b      	add	r3, r1
 8006e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e62:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e68:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006e6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	d10f      	bne.n	8006e92 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006e72:	78fb      	ldrb	r3, [r7, #3]
 8006e74:	015a      	lsls	r2, r3, #5
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	78fa      	ldrb	r2, [r7, #3]
 8006e82:	0151      	lsls	r1, r2, #5
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	440a      	add	r2, r1
 8006e88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e90:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006e92:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3720      	adds	r7, #32
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b08c      	sub	sp, #48	; 0x30
 8006ea0:	af02      	add	r7, sp, #8
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	785b      	ldrb	r3, [r3, #1]
 8006eb2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006eb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006eb8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d02d      	beq.n	8006f22 <USB_HC_StartXfer+0x86>
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	791b      	ldrb	r3, [r3, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d129      	bne.n	8006f22 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006ece:	79fb      	ldrb	r3, [r7, #7]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d117      	bne.n	8006f04 <USB_HC_StartXfer+0x68>
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	79db      	ldrb	r3, [r3, #7]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d003      	beq.n	8006ee4 <USB_HC_StartXfer+0x48>
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	79db      	ldrb	r3, [r3, #7]
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d10f      	bne.n	8006f04 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	6a3b      	ldr	r3, [r7, #32]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	69fa      	ldr	r2, [r7, #28]
 8006ef4:	0151      	lsls	r1, r2, #5
 8006ef6:	6a3a      	ldr	r2, [r7, #32]
 8006ef8:	440a      	add	r2, r1
 8006efa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f02:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006f04:	79fb      	ldrb	r3, [r7, #7]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10b      	bne.n	8006f22 <USB_HC_StartXfer+0x86>
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	795b      	ldrb	r3, [r3, #5]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d107      	bne.n	8006f22 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	785b      	ldrb	r3, [r3, #1]
 8006f16:	4619      	mov	r1, r3
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f000 fa2f 	bl	800737c <USB_DoPing>
      return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	e0f8      	b.n	8007114 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d018      	beq.n	8006f5c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	8912      	ldrh	r2, [r2, #8]
 8006f32:	4413      	add	r3, r2
 8006f34:	3b01      	subs	r3, #1
 8006f36:	68ba      	ldr	r2, [r7, #8]
 8006f38:	8912      	ldrh	r2, [r2, #8]
 8006f3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f3e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006f40:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006f42:	8b7b      	ldrh	r3, [r7, #26]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d90b      	bls.n	8006f60 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006f48:	8b7b      	ldrh	r3, [r7, #26]
 8006f4a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006f4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	8912      	ldrh	r2, [r2, #8]
 8006f52:	fb02 f203 	mul.w	r2, r2, r3
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	611a      	str	r2, [r3, #16]
 8006f5a:	e001      	b.n	8006f60 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	78db      	ldrb	r3, [r3, #3]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d007      	beq.n	8006f78 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006f68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	8912      	ldrh	r2, [r2, #8]
 8006f6e:	fb02 f203 	mul.w	r2, r2, r3
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	611a      	str	r2, [r3, #16]
 8006f76:	e003      	b.n	8006f80 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	695a      	ldr	r2, [r3, #20]
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f8a:	04d9      	lsls	r1, r3, #19
 8006f8c:	4b63      	ldr	r3, [pc, #396]	; (800711c <USB_HC_StartXfer+0x280>)
 8006f8e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f90:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	7a9b      	ldrb	r3, [r3, #10]
 8006f96:	075b      	lsls	r3, r3, #29
 8006f98:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f9c:	69f9      	ldr	r1, [r7, #28]
 8006f9e:	0148      	lsls	r0, r1, #5
 8006fa0:	6a39      	ldr	r1, [r7, #32]
 8006fa2:	4401      	add	r1, r0
 8006fa4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006fa8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006faa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006fac:	79fb      	ldrb	r3, [r7, #7]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d009      	beq.n	8006fc6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	68d9      	ldr	r1, [r3, #12]
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fc2:	460a      	mov	r2, r1
 8006fc4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	bf0c      	ite	eq
 8006fd6:	2301      	moveq	r3, #1
 8006fd8:	2300      	movne	r3, #0
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	6a3b      	ldr	r3, [r7, #32]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	69fa      	ldr	r2, [r7, #28]
 8006fee:	0151      	lsls	r1, r2, #5
 8006ff0:	6a3a      	ldr	r2, [r7, #32]
 8006ff2:	440a      	add	r2, r1
 8006ff4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ff8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006ffc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	015a      	lsls	r2, r3, #5
 8007002:	6a3b      	ldr	r3, [r7, #32]
 8007004:	4413      	add	r3, r2
 8007006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	7e7b      	ldrb	r3, [r7, #25]
 800700e:	075b      	lsls	r3, r3, #29
 8007010:	69f9      	ldr	r1, [r7, #28]
 8007012:	0148      	lsls	r0, r1, #5
 8007014:	6a39      	ldr	r1, [r7, #32]
 8007016:	4401      	add	r1, r0
 8007018:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800701c:	4313      	orrs	r3, r2
 800701e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	015a      	lsls	r2, r3, #5
 8007024:	6a3b      	ldr	r3, [r7, #32]
 8007026:	4413      	add	r3, r2
 8007028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007036:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	78db      	ldrb	r3, [r3, #3]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d004      	beq.n	800704a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007046:	613b      	str	r3, [r7, #16]
 8007048:	e003      	b.n	8007052 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007050:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007058:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	015a      	lsls	r2, r3, #5
 800705e:	6a3b      	ldr	r3, [r7, #32]
 8007060:	4413      	add	r3, r2
 8007062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007066:	461a      	mov	r2, r3
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800706c:	79fb      	ldrb	r3, [r7, #7]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d001      	beq.n	8007076 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	e04e      	b.n	8007114 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	78db      	ldrb	r3, [r3, #3]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d149      	bne.n	8007112 <USB_HC_StartXfer+0x276>
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d045      	beq.n	8007112 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	79db      	ldrb	r3, [r3, #7]
 800708a:	2b03      	cmp	r3, #3
 800708c:	d830      	bhi.n	80070f0 <USB_HC_StartXfer+0x254>
 800708e:	a201      	add	r2, pc, #4	; (adr r2, 8007094 <USB_HC_StartXfer+0x1f8>)
 8007090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007094:	080070a5 	.word	0x080070a5
 8007098:	080070c9 	.word	0x080070c9
 800709c:	080070a5 	.word	0x080070a5
 80070a0:	080070c9 	.word	0x080070c9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	695b      	ldr	r3, [r3, #20]
 80070a8:	3303      	adds	r3, #3
 80070aa:	089b      	lsrs	r3, r3, #2
 80070ac:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80070ae:	8afa      	ldrh	r2, [r7, #22]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d91c      	bls.n	80070f4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	f043 0220 	orr.w	r2, r3, #32
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	619a      	str	r2, [r3, #24]
        }
        break;
 80070c6:	e015      	b.n	80070f4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	695b      	ldr	r3, [r3, #20]
 80070cc:	3303      	adds	r3, #3
 80070ce:	089b      	lsrs	r3, r3, #2
 80070d0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80070d2:	8afa      	ldrh	r2, [r7, #22]
 80070d4:	6a3b      	ldr	r3, [r7, #32]
 80070d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	429a      	cmp	r2, r3
 80070e0:	d90a      	bls.n	80070f8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	619a      	str	r2, [r3, #24]
        }
        break;
 80070ee:	e003      	b.n	80070f8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80070f0:	bf00      	nop
 80070f2:	e002      	b.n	80070fa <USB_HC_StartXfer+0x25e>
        break;
 80070f4:	bf00      	nop
 80070f6:	e000      	b.n	80070fa <USB_HC_StartXfer+0x25e>
        break;
 80070f8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	68d9      	ldr	r1, [r3, #12]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	785a      	ldrb	r2, [r3, #1]
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	b29b      	uxth	r3, r3
 8007108:	2000      	movs	r0, #0
 800710a:	9000      	str	r0, [sp, #0]
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f7ff fb53 	bl	80067b8 <USB_WritePacket>
  }

  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3728      	adds	r7, #40	; 0x28
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	1ff80000 	.word	0x1ff80000

08007120 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007132:	695b      	ldr	r3, [r3, #20]
 8007134:	b29b      	uxth	r3, r3
}
 8007136:	4618      	mov	r0, r3
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr

08007142 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007142:	b480      	push	{r7}
 8007144:	b089      	sub	sp, #36	; 0x24
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	460b      	mov	r3, r1
 800714c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8007152:	78fb      	ldrb	r3, [r7, #3]
 8007154:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8007156:	2300      	movs	r3, #0
 8007158:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	4413      	add	r3, r2
 8007162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	0c9b      	lsrs	r3, r3, #18
 800716a:	f003 0303 	and.w	r3, r3, #3
 800716e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	015a      	lsls	r2, r3, #5
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	4413      	add	r3, r2
 8007178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	0fdb      	lsrs	r3, r3, #31
 8007180:	f003 0301 	and.w	r3, r3, #1
 8007184:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f003 0320 	and.w	r3, r3, #32
 800718e:	2b20      	cmp	r3, #32
 8007190:	d104      	bne.n	800719c <USB_HC_Halt+0x5a>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007198:	2300      	movs	r3, #0
 800719a:	e0e8      	b.n	800736e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d002      	beq.n	80071a8 <USB_HC_Halt+0x66>
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d173      	bne.n	8007290 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	015a      	lsls	r2, r3, #5
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	4413      	add	r3, r2
 80071b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	0151      	lsls	r1, r2, #5
 80071ba:	69ba      	ldr	r2, [r7, #24]
 80071bc:	440a      	add	r2, r1
 80071be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071c6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f003 0320 	and.w	r3, r3, #32
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f040 80cb 	bne.w	800736c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d143      	bne.n	800726a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	697a      	ldr	r2, [r7, #20]
 80071f2:	0151      	lsls	r1, r2, #5
 80071f4:	69ba      	ldr	r2, [r7, #24]
 80071f6:	440a      	add	r2, r1
 80071f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007200:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	015a      	lsls	r2, r3, #5
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	4413      	add	r3, r2
 800720a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	0151      	lsls	r1, r2, #5
 8007214:	69ba      	ldr	r2, [r7, #24]
 8007216:	440a      	add	r2, r1
 8007218:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800721c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007220:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	015a      	lsls	r2, r3, #5
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	4413      	add	r3, r2
 800722a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	697a      	ldr	r2, [r7, #20]
 8007232:	0151      	lsls	r1, r2, #5
 8007234:	69ba      	ldr	r2, [r7, #24]
 8007236:	440a      	add	r2, r1
 8007238:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800723c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007240:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	3301      	adds	r3, #1
 8007246:	61fb      	str	r3, [r7, #28]
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800724e:	d81d      	bhi.n	800728c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	015a      	lsls	r2, r3, #5
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	4413      	add	r3, r2
 8007258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007262:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007266:	d0ec      	beq.n	8007242 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007268:	e080      	b.n	800736c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	015a      	lsls	r2, r3, #5
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	4413      	add	r3, r2
 8007272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	0151      	lsls	r1, r2, #5
 800727c:	69ba      	ldr	r2, [r7, #24]
 800727e:	440a      	add	r2, r1
 8007280:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007284:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007288:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800728a:	e06f      	b.n	800736c <USB_HC_Halt+0x22a>
            break;
 800728c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800728e:	e06d      	b.n	800736c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	015a      	lsls	r2, r3, #5
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	4413      	add	r3, r2
 8007298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	0151      	lsls	r1, r2, #5
 80072a2:	69ba      	ldr	r2, [r7, #24]
 80072a4:	440a      	add	r2, r1
 80072a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072ae:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d143      	bne.n	8007348 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	015a      	lsls	r2, r3, #5
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	0151      	lsls	r1, r2, #5
 80072d2:	69ba      	ldr	r2, [r7, #24]
 80072d4:	440a      	add	r2, r1
 80072d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072de:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	015a      	lsls	r2, r3, #5
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	4413      	add	r3, r2
 80072e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	0151      	lsls	r1, r2, #5
 80072f2:	69ba      	ldr	r2, [r7, #24]
 80072f4:	440a      	add	r2, r1
 80072f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072fe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	015a      	lsls	r2, r3, #5
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	4413      	add	r3, r2
 8007308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	0151      	lsls	r1, r2, #5
 8007312:	69ba      	ldr	r2, [r7, #24]
 8007314:	440a      	add	r2, r1
 8007316:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800731a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800731e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	3301      	adds	r3, #1
 8007324:	61fb      	str	r3, [r7, #28]
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800732c:	d81d      	bhi.n	800736a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	015a      	lsls	r2, r3, #5
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	4413      	add	r3, r2
 8007336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007340:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007344:	d0ec      	beq.n	8007320 <USB_HC_Halt+0x1de>
 8007346:	e011      	b.n	800736c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	015a      	lsls	r2, r3, #5
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	4413      	add	r3, r2
 8007350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	0151      	lsls	r1, r2, #5
 800735a:	69ba      	ldr	r2, [r7, #24]
 800735c:	440a      	add	r2, r1
 800735e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007362:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007366:	6013      	str	r3, [r2, #0]
 8007368:	e000      	b.n	800736c <USB_HC_Halt+0x22a>
          break;
 800736a:	bf00      	nop
    }
  }

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3724      	adds	r7, #36	; 0x24
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
	...

0800737c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800737c:	b480      	push	{r7}
 800737e:	b087      	sub	sp, #28
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	460b      	mov	r3, r1
 8007386:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800738c:	78fb      	ldrb	r3, [r7, #3]
 800738e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007390:	2301      	movs	r3, #1
 8007392:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	04da      	lsls	r2, r3, #19
 8007398:	4b15      	ldr	r3, [pc, #84]	; (80073f0 <USB_DoPing+0x74>)
 800739a:	4013      	ands	r3, r2
 800739c:	693a      	ldr	r2, [r7, #16]
 800739e:	0151      	lsls	r1, r2, #5
 80073a0:	697a      	ldr	r2, [r7, #20]
 80073a2:	440a      	add	r2, r1
 80073a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073ac:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80073c4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073cc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073da:	461a      	mov	r2, r3
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	371c      	adds	r7, #28
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	1ff80000 	.word	0x1ff80000

080073f4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007400:	2300      	movs	r3, #0
 8007402:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f7ff f935 	bl	8006674 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800740a:	2110      	movs	r1, #16
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f7ff f98f 	bl	8006730 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f7ff f9b0 	bl	8006778 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007418:	2300      	movs	r3, #0
 800741a:	613b      	str	r3, [r7, #16]
 800741c:	e01f      	b.n	800745e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	015a      	lsls	r2, r3, #5
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	4413      	add	r3, r2
 8007426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007434:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800743c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007444:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	015a      	lsls	r2, r3, #5
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	4413      	add	r3, r2
 800744e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007452:	461a      	mov	r2, r3
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	3301      	adds	r3, #1
 800745c:	613b      	str	r3, [r7, #16]
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	2b0f      	cmp	r3, #15
 8007462:	d9dc      	bls.n	800741e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007464:	2300      	movs	r3, #0
 8007466:	613b      	str	r3, [r7, #16]
 8007468:	e034      	b.n	80074d4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	015a      	lsls	r2, r3, #5
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	4413      	add	r3, r2
 8007472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007480:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007488:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007490:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	015a      	lsls	r2, r3, #5
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	4413      	add	r3, r2
 800749a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800749e:	461a      	mov	r2, r3
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	3301      	adds	r3, #1
 80074a8:	617b      	str	r3, [r7, #20]
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074b0:	d80c      	bhi.n	80074cc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	015a      	lsls	r2, r3, #5
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	4413      	add	r3, r2
 80074ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074c8:	d0ec      	beq.n	80074a4 <USB_StopHost+0xb0>
 80074ca:	e000      	b.n	80074ce <USB_StopHost+0xda>
        break;
 80074cc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	3301      	adds	r3, #1
 80074d2:	613b      	str	r3, [r7, #16]
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	2b0f      	cmp	r3, #15
 80074d8:	d9c7      	bls.n	800746a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074e0:	461a      	mov	r2, r3
 80074e2:	f04f 33ff 	mov.w	r3, #4294967295
 80074e6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f04f 32ff 	mov.w	r2, #4294967295
 80074ee:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f7ff f8ae 	bl	8006652 <USB_EnableGlobalInt>

  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3718      	adds	r7, #24
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007500:	b590      	push	{r4, r7, lr}
 8007502:	b089      	sub	sp, #36	; 0x24
 8007504:	af04      	add	r7, sp, #16
 8007506:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007508:	2301      	movs	r3, #1
 800750a:	2202      	movs	r2, #2
 800750c:	2102      	movs	r1, #2
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fc66 	bl	8007de0 <USBH_FindInterface>
 8007514:	4603      	mov	r3, r0
 8007516:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007518:	7bfb      	ldrb	r3, [r7, #15]
 800751a:	2bff      	cmp	r3, #255	; 0xff
 800751c:	d002      	beq.n	8007524 <USBH_CDC_InterfaceInit+0x24>
 800751e:	7bfb      	ldrb	r3, [r7, #15]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d901      	bls.n	8007528 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007524:	2302      	movs	r3, #2
 8007526:	e13d      	b.n	80077a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007528:	7bfb      	ldrb	r3, [r7, #15]
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fc3b 	bl	8007da8 <USBH_SelectInterface>
 8007532:	4603      	mov	r3, r0
 8007534:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007536:	7bbb      	ldrb	r3, [r7, #14]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d001      	beq.n	8007540 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800753c:	2302      	movs	r3, #2
 800753e:	e131      	b.n	80077a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007546:	2050      	movs	r0, #80	; 0x50
 8007548:	f002 fa08 	bl	800995c <malloc>
 800754c:	4603      	mov	r3, r0
 800754e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007556:	69db      	ldr	r3, [r3, #28]
 8007558:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d101      	bne.n	8007564 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007560:	2302      	movs	r3, #2
 8007562:	e11f      	b.n	80077a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007564:	2250      	movs	r2, #80	; 0x50
 8007566:	2100      	movs	r1, #0
 8007568:	68b8      	ldr	r0, [r7, #8]
 800756a:	f002 fa07 	bl	800997c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800756e:	7bfb      	ldrb	r3, [r7, #15]
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	211a      	movs	r1, #26
 8007574:	fb01 f303 	mul.w	r3, r1, r3
 8007578:	4413      	add	r3, r2
 800757a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	b25b      	sxtb	r3, r3
 8007582:	2b00      	cmp	r3, #0
 8007584:	da15      	bge.n	80075b2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007586:	7bfb      	ldrb	r3, [r7, #15]
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	211a      	movs	r1, #26
 800758c:	fb01 f303 	mul.w	r3, r1, r3
 8007590:	4413      	add	r3, r2
 8007592:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007596:	781a      	ldrb	r2, [r3, #0]
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800759c:	7bfb      	ldrb	r3, [r7, #15]
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	211a      	movs	r1, #26
 80075a2:	fb01 f303 	mul.w	r3, r1, r3
 80075a6:	4413      	add	r3, r2
 80075a8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80075ac:	881a      	ldrh	r2, [r3, #0]
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	785b      	ldrb	r3, [r3, #1]
 80075b6:	4619      	mov	r1, r3
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f001 fe32 	bl	8009222 <USBH_AllocPipe>
 80075be:	4603      	mov	r3, r0
 80075c0:	461a      	mov	r2, r3
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	7819      	ldrb	r1, [r3, #0]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	7858      	ldrb	r0, [r3, #1]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	8952      	ldrh	r2, [r2, #10]
 80075de:	9202      	str	r2, [sp, #8]
 80075e0:	2203      	movs	r2, #3
 80075e2:	9201      	str	r2, [sp, #4]
 80075e4:	9300      	str	r3, [sp, #0]
 80075e6:	4623      	mov	r3, r4
 80075e8:	4602      	mov	r2, r0
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f001 fdea 	bl	80091c4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	2200      	movs	r2, #0
 80075f6:	4619      	mov	r1, r3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f002 f8f9 	bl	80097f0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80075fe:	2300      	movs	r3, #0
 8007600:	2200      	movs	r2, #0
 8007602:	210a      	movs	r1, #10
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 fbeb 	bl	8007de0 <USBH_FindInterface>
 800760a:	4603      	mov	r3, r0
 800760c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800760e:	7bfb      	ldrb	r3, [r7, #15]
 8007610:	2bff      	cmp	r3, #255	; 0xff
 8007612:	d002      	beq.n	800761a <USBH_CDC_InterfaceInit+0x11a>
 8007614:	7bfb      	ldrb	r3, [r7, #15]
 8007616:	2b01      	cmp	r3, #1
 8007618:	d901      	bls.n	800761e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800761a:	2302      	movs	r3, #2
 800761c:	e0c2      	b.n	80077a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800761e:	7bfb      	ldrb	r3, [r7, #15]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	211a      	movs	r1, #26
 8007624:	fb01 f303 	mul.w	r3, r1, r3
 8007628:	4413      	add	r3, r2
 800762a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	b25b      	sxtb	r3, r3
 8007632:	2b00      	cmp	r3, #0
 8007634:	da16      	bge.n	8007664 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007636:	7bfb      	ldrb	r3, [r7, #15]
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	211a      	movs	r1, #26
 800763c:	fb01 f303 	mul.w	r3, r1, r3
 8007640:	4413      	add	r3, r2
 8007642:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007646:	781a      	ldrb	r2, [r3, #0]
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800764c:	7bfb      	ldrb	r3, [r7, #15]
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	211a      	movs	r1, #26
 8007652:	fb01 f303 	mul.w	r3, r1, r3
 8007656:	4413      	add	r3, r2
 8007658:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800765c:	881a      	ldrh	r2, [r3, #0]
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	835a      	strh	r2, [r3, #26]
 8007662:	e015      	b.n	8007690 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007664:	7bfb      	ldrb	r3, [r7, #15]
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	211a      	movs	r1, #26
 800766a:	fb01 f303 	mul.w	r3, r1, r3
 800766e:	4413      	add	r3, r2
 8007670:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007674:	781a      	ldrb	r2, [r3, #0]
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800767a:	7bfb      	ldrb	r3, [r7, #15]
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	211a      	movs	r1, #26
 8007680:	fb01 f303 	mul.w	r3, r1, r3
 8007684:	4413      	add	r3, r2
 8007686:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800768a:	881a      	ldrh	r2, [r3, #0]
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007690:	7bfb      	ldrb	r3, [r7, #15]
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	211a      	movs	r1, #26
 8007696:	fb01 f303 	mul.w	r3, r1, r3
 800769a:	4413      	add	r3, r2
 800769c:	f203 3356 	addw	r3, r3, #854	; 0x356
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	b25b      	sxtb	r3, r3
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	da16      	bge.n	80076d6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80076a8:	7bfb      	ldrb	r3, [r7, #15]
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	211a      	movs	r1, #26
 80076ae:	fb01 f303 	mul.w	r3, r1, r3
 80076b2:	4413      	add	r3, r2
 80076b4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80076b8:	781a      	ldrb	r2, [r3, #0]
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80076be:	7bfb      	ldrb	r3, [r7, #15]
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	211a      	movs	r1, #26
 80076c4:	fb01 f303 	mul.w	r3, r1, r3
 80076c8:	4413      	add	r3, r2
 80076ca:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80076ce:	881a      	ldrh	r2, [r3, #0]
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	835a      	strh	r2, [r3, #26]
 80076d4:	e015      	b.n	8007702 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80076d6:	7bfb      	ldrb	r3, [r7, #15]
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	211a      	movs	r1, #26
 80076dc:	fb01 f303 	mul.w	r3, r1, r3
 80076e0:	4413      	add	r3, r2
 80076e2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80076e6:	781a      	ldrb	r2, [r3, #0]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	211a      	movs	r1, #26
 80076f2:	fb01 f303 	mul.w	r3, r1, r3
 80076f6:	4413      	add	r3, r2
 80076f8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80076fc:	881a      	ldrh	r2, [r3, #0]
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	7b9b      	ldrb	r3, [r3, #14]
 8007706:	4619      	mov	r1, r3
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f001 fd8a 	bl	8009222 <USBH_AllocPipe>
 800770e:	4603      	mov	r3, r0
 8007710:	461a      	mov	r2, r3
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	7bdb      	ldrb	r3, [r3, #15]
 800771a:	4619      	mov	r1, r3
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f001 fd80 	bl	8009222 <USBH_AllocPipe>
 8007722:	4603      	mov	r3, r0
 8007724:	461a      	mov	r2, r3
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	7b59      	ldrb	r1, [r3, #13]
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	7b98      	ldrb	r0, [r3, #14]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	8b12      	ldrh	r2, [r2, #24]
 8007742:	9202      	str	r2, [sp, #8]
 8007744:	2202      	movs	r2, #2
 8007746:	9201      	str	r2, [sp, #4]
 8007748:	9300      	str	r3, [sp, #0]
 800774a:	4623      	mov	r3, r4
 800774c:	4602      	mov	r2, r0
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f001 fd38 	bl	80091c4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	7b19      	ldrb	r1, [r3, #12]
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	7bd8      	ldrb	r0, [r3, #15]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	8b52      	ldrh	r2, [r2, #26]
 800776c:	9202      	str	r2, [sp, #8]
 800776e:	2202      	movs	r2, #2
 8007770:	9201      	str	r2, [sp, #4]
 8007772:	9300      	str	r3, [sp, #0]
 8007774:	4623      	mov	r3, r4
 8007776:	4602      	mov	r2, r0
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f001 fd23 	bl	80091c4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	7b5b      	ldrb	r3, [r3, #13]
 800778a:	2200      	movs	r2, #0
 800778c:	4619      	mov	r1, r3
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f002 f82e 	bl	80097f0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	7b1b      	ldrb	r3, [r3, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	4619      	mov	r1, r3
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f002 f827 	bl	80097f0 <USBH_LL_SetToggle>

  return USBH_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd90      	pop	{r4, r7, pc}

080077ac <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077ba:	69db      	ldr	r3, [r3, #28]
 80077bc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00e      	beq.n	80077e4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	4619      	mov	r1, r3
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f001 fd18 	bl	8009202 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	4619      	mov	r1, r3
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f001 fd43 	bl	8009264 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	7b1b      	ldrb	r3, [r3, #12]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00e      	beq.n	800780a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	7b1b      	ldrb	r3, [r3, #12]
 80077f0:	4619      	mov	r1, r3
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f001 fd05 	bl	8009202 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	7b1b      	ldrb	r3, [r3, #12]
 80077fc:	4619      	mov	r1, r3
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f001 fd30 	bl	8009264 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	7b5b      	ldrb	r3, [r3, #13]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00e      	beq.n	8007830 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	7b5b      	ldrb	r3, [r3, #13]
 8007816:	4619      	mov	r1, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f001 fcf2 	bl	8009202 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	7b5b      	ldrb	r3, [r3, #13]
 8007822:	4619      	mov	r1, r3
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f001 fd1d 	bl	8009264 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007836:	69db      	ldr	r3, [r3, #28]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00b      	beq.n	8007854 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007842:	69db      	ldr	r3, [r3, #28]
 8007844:	4618      	mov	r0, r3
 8007846:	f002 f891 	bl	800996c <free>
    phost->pActiveClass->pData = 0U;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007850:	2200      	movs	r2, #0
 8007852:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b084      	sub	sp, #16
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800786c:	69db      	ldr	r3, [r3, #28]
 800786e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	3340      	adds	r3, #64	; 0x40
 8007874:	4619      	mov	r1, r3
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f8b1 	bl	80079de <GetLineCoding>
 800787c:	4603      	mov	r3, r0
 800787e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007880:	7afb      	ldrb	r3, [r7, #11]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d105      	bne.n	8007892 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800788c:	2102      	movs	r1, #2
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007892:	7afb      	ldrb	r3, [r7, #11]
}
 8007894:	4618      	mov	r0, r3
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80078a4:	2301      	movs	r3, #1
 80078a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078b2:	69db      	ldr	r3, [r3, #28]
 80078b4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80078bc:	2b04      	cmp	r3, #4
 80078be:	d877      	bhi.n	80079b0 <USBH_CDC_Process+0x114>
 80078c0:	a201      	add	r2, pc, #4	; (adr r2, 80078c8 <USBH_CDC_Process+0x2c>)
 80078c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c6:	bf00      	nop
 80078c8:	080078dd 	.word	0x080078dd
 80078cc:	080078e3 	.word	0x080078e3
 80078d0:	08007913 	.word	0x08007913
 80078d4:	08007987 	.word	0x08007987
 80078d8:	08007995 	.word	0x08007995
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80078dc:	2300      	movs	r3, #0
 80078de:	73fb      	strb	r3, [r7, #15]
      break;
 80078e0:	e06d      	b.n	80079be <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078e6:	4619      	mov	r1, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f897 	bl	8007a1c <SetLineCoding>
 80078ee:	4603      	mov	r3, r0
 80078f0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80078f2:	7bbb      	ldrb	r3, [r7, #14]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d104      	bne.n	8007902 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2202      	movs	r2, #2
 80078fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007900:	e058      	b.n	80079b4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007902:	7bbb      	ldrb	r3, [r7, #14]
 8007904:	2b01      	cmp	r3, #1
 8007906:	d055      	beq.n	80079b4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2204      	movs	r2, #4
 800790c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007910:	e050      	b.n	80079b4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	3340      	adds	r3, #64	; 0x40
 8007916:	4619      	mov	r1, r3
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 f860 	bl	80079de <GetLineCoding>
 800791e:	4603      	mov	r3, r0
 8007920:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007922:	7bbb      	ldrb	r3, [r7, #14]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d126      	bne.n	8007976 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800793a:	791b      	ldrb	r3, [r3, #4]
 800793c:	429a      	cmp	r2, r3
 800793e:	d13b      	bne.n	80079b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800794a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800794c:	429a      	cmp	r2, r3
 800794e:	d133      	bne.n	80079b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800795a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800795c:	429a      	cmp	r2, r3
 800795e:	d12b      	bne.n	80079b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007968:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800796a:	429a      	cmp	r2, r3
 800796c:	d124      	bne.n	80079b8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 f958 	bl	8007c24 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007974:	e020      	b.n	80079b8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007976:	7bbb      	ldrb	r3, [r7, #14]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d01d      	beq.n	80079b8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	2204      	movs	r2, #4
 8007980:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007984:	e018      	b.n	80079b8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f867 	bl	8007a5a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f8da 	bl	8007b46 <CDC_ProcessReception>
      break;
 8007992:	e014      	b.n	80079be <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007994:	2100      	movs	r1, #0
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 ffe3 	bl	8008962 <USBH_ClrFeature>
 800799c:	4603      	mov	r3, r0
 800799e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80079a0:	7bbb      	ldrb	r3, [r7, #14]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10a      	bne.n	80079bc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80079ae:	e005      	b.n	80079bc <USBH_CDC_Process+0x120>

    default:
      break;
 80079b0:	bf00      	nop
 80079b2:	e004      	b.n	80079be <USBH_CDC_Process+0x122>
      break;
 80079b4:	bf00      	nop
 80079b6:	e002      	b.n	80079be <USBH_CDC_Process+0x122>
      break;
 80079b8:	bf00      	nop
 80079ba:	e000      	b.n	80079be <USBH_CDC_Process+0x122>
      break;
 80079bc:	bf00      	nop

  }

  return status;
 80079be:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	370c      	adds	r7, #12
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b082      	sub	sp, #8
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	22a1      	movs	r2, #161	; 0xa1
 80079ec:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2221      	movs	r2, #33	; 0x21
 80079f2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2207      	movs	r2, #7
 8007a04:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	2207      	movs	r2, #7
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f001 f988 	bl	8008d22 <USBH_CtlReq>
 8007a12:	4603      	mov	r3, r0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2221      	movs	r2, #33	; 0x21
 8007a2a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2220      	movs	r2, #32
 8007a30:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2207      	movs	r2, #7
 8007a42:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	2207      	movs	r2, #7
 8007a48:	4619      	mov	r1, r3
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f001 f969 	bl	8008d22 <USBH_CtlReq>
 8007a50:	4603      	mov	r3, r0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b086      	sub	sp, #24
 8007a5e:	af02      	add	r7, sp, #8
 8007a60:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a68:	69db      	ldr	r3, [r3, #28]
 8007a6a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d002      	beq.n	8007a80 <CDC_ProcessTransmission+0x26>
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d023      	beq.n	8007ac6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007a7e:	e05e      	b.n	8007b3e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	8b12      	ldrh	r2, [r2, #24]
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d90b      	bls.n	8007aa4 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	69d9      	ldr	r1, [r3, #28]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	8b1a      	ldrh	r2, [r3, #24]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	7b5b      	ldrb	r3, [r3, #13]
 8007a98:	2001      	movs	r0, #1
 8007a9a:	9000      	str	r0, [sp, #0]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f001 fb4e 	bl	800913e <USBH_BulkSendData>
 8007aa2:	e00b      	b.n	8007abc <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	7b5b      	ldrb	r3, [r3, #13]
 8007ab2:	2001      	movs	r0, #1
 8007ab4:	9000      	str	r0, [sp, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f001 fb41 	bl	800913e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2202      	movs	r2, #2
 8007ac0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007ac4:	e03b      	b.n	8007b3e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	7b5b      	ldrb	r3, [r3, #13]
 8007aca:	4619      	mov	r1, r3
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f001 fe65 	bl	800979c <USBH_LL_GetURBState>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007ad6:	7afb      	ldrb	r3, [r7, #11]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d128      	bne.n	8007b2e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	8b12      	ldrh	r2, [r2, #24]
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d90e      	bls.n	8007b06 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	8b12      	ldrh	r2, [r2, #24]
 8007af0:	1a9a      	subs	r2, r3, r2
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	69db      	ldr	r3, [r3, #28]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	8b12      	ldrh	r2, [r2, #24]
 8007afe:	441a      	add	r2, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	61da      	str	r2, [r3, #28]
 8007b04:	e002      	b.n	8007b0c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d004      	beq.n	8007b1e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007b1c:	e00e      	b.n	8007b3c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f868 	bl	8007bfc <USBH_CDC_TransmitCallback>
      break;
 8007b2c:	e006      	b.n	8007b3c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007b2e:	7afb      	ldrb	r3, [r7, #11]
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d103      	bne.n	8007b3c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007b3c:	bf00      	nop
  }
}
 8007b3e:	bf00      	nop
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b086      	sub	sp, #24
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b54:	69db      	ldr	r3, [r3, #28]
 8007b56:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007b62:	2b03      	cmp	r3, #3
 8007b64:	d002      	beq.n	8007b6c <CDC_ProcessReception+0x26>
 8007b66:	2b04      	cmp	r3, #4
 8007b68:	d00e      	beq.n	8007b88 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007b6a:	e043      	b.n	8007bf4 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	6a19      	ldr	r1, [r3, #32]
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	8b5a      	ldrh	r2, [r3, #26]
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	7b1b      	ldrb	r3, [r3, #12]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f001 fb05 	bl	8009188 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	2204      	movs	r2, #4
 8007b82:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007b86:	e035      	b.n	8007bf4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	7b1b      	ldrb	r3, [r3, #12]
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f001 fe04 	bl	800979c <USBH_LL_GetURBState>
 8007b94:	4603      	mov	r3, r0
 8007b96:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007b98:	7cfb      	ldrb	r3, [r7, #19]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d129      	bne.n	8007bf2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	7b1b      	ldrb	r3, [r3, #12]
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f001 fd67 	bl	8009678 <USBH_LL_GetLastXferSize>
 8007baa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d016      	beq.n	8007be4 <CDC_ProcessReception+0x9e>
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	8b5b      	ldrh	r3, [r3, #26]
 8007bba:	461a      	mov	r2, r3
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d910      	bls.n	8007be4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	1ad2      	subs	r2, r2, r3
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	6a1a      	ldr	r2, [r3, #32]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	441a      	add	r2, r3
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	2203      	movs	r2, #3
 8007bde:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007be2:	e006      	b.n	8007bf2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 f80f 	bl	8007c10 <USBH_CDC_ReceiveCallback>
      break;
 8007bf2:	bf00      	nop
  }
}
 8007bf4:	bf00      	nop
 8007bf6:	3718      	adds	r7, #24
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007c18:	bf00      	nop
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	4613      	mov	r3, r2
 8007c44:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d101      	bne.n	8007c50 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007c4c:	2302      	movs	r3, #2
 8007c4e:	e029      	b.n	8007ca4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	79fa      	ldrb	r2, [r7, #7]
 8007c54:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f000 f81f 	bl	8007cac <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d003      	beq.n	8007c9c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f001 fc37 	bl	8009510 <USBH_LL_Init>

  return USBH_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007cb8:	2300      	movs	r3, #0
 8007cba:	60fb      	str	r3, [r7, #12]
 8007cbc:	e009      	b.n	8007cd2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	33e0      	adds	r3, #224	; 0xe0
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	4413      	add	r3, r2
 8007cc8:	2200      	movs	r2, #0
 8007cca:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	60fb      	str	r3, [r7, #12]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2b0e      	cmp	r3, #14
 8007cd6:	d9f2      	bls.n	8007cbe <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007cd8:	2300      	movs	r3, #0
 8007cda:	60fb      	str	r3, [r7, #12]
 8007cdc:	e009      	b.n	8007cf2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007ce8:	2200      	movs	r2, #0
 8007cea:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	60fb      	str	r3, [r7, #12]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cf8:	d3f1      	bcc.n	8007cde <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2240      	movs	r2, #64	; 0x40
 8007d1e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3714      	adds	r7, #20
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b085      	sub	sp, #20
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d016      	beq.n	8007d96 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10e      	bne.n	8007d90 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007d78:	1c59      	adds	r1, r3, #1
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	33de      	adds	r3, #222	; 0xde
 8007d84:	6839      	ldr	r1, [r7, #0]
 8007d86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	73fb      	strb	r3, [r7, #15]
 8007d8e:	e004      	b.n	8007d9a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007d90:	2302      	movs	r3, #2
 8007d92:	73fb      	strb	r3, [r7, #15]
 8007d94:	e001      	b.n	8007d9a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007d96:	2302      	movs	r3, #2
 8007d98:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3714      	adds	r7, #20
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	460b      	mov	r3, r1
 8007db2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007db4:	2300      	movs	r3, #0
 8007db6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007dbe:	78fa      	ldrb	r2, [r7, #3]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d204      	bcs.n	8007dce <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	78fa      	ldrb	r2, [r7, #3]
 8007dc8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007dcc:	e001      	b.n	8007dd2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007dce:	2302      	movs	r3, #2
 8007dd0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3714      	adds	r7, #20
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b087      	sub	sp, #28
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	4608      	mov	r0, r1
 8007dea:	4611      	mov	r1, r2
 8007dec:	461a      	mov	r2, r3
 8007dee:	4603      	mov	r3, r0
 8007df0:	70fb      	strb	r3, [r7, #3]
 8007df2:	460b      	mov	r3, r1
 8007df4:	70bb      	strb	r3, [r7, #2]
 8007df6:	4613      	mov	r3, r2
 8007df8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007e08:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007e0a:	e025      	b.n	8007e58 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007e0c:	7dfb      	ldrb	r3, [r7, #23]
 8007e0e:	221a      	movs	r2, #26
 8007e10:	fb02 f303 	mul.w	r3, r2, r3
 8007e14:	3308      	adds	r3, #8
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	4413      	add	r3, r2
 8007e1a:	3302      	adds	r3, #2
 8007e1c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	795b      	ldrb	r3, [r3, #5]
 8007e22:	78fa      	ldrb	r2, [r7, #3]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d002      	beq.n	8007e2e <USBH_FindInterface+0x4e>
 8007e28:	78fb      	ldrb	r3, [r7, #3]
 8007e2a:	2bff      	cmp	r3, #255	; 0xff
 8007e2c:	d111      	bne.n	8007e52 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007e32:	78ba      	ldrb	r2, [r7, #2]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d002      	beq.n	8007e3e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e38:	78bb      	ldrb	r3, [r7, #2]
 8007e3a:	2bff      	cmp	r3, #255	; 0xff
 8007e3c:	d109      	bne.n	8007e52 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e42:	787a      	ldrb	r2, [r7, #1]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d002      	beq.n	8007e4e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007e48:	787b      	ldrb	r3, [r7, #1]
 8007e4a:	2bff      	cmp	r3, #255	; 0xff
 8007e4c:	d101      	bne.n	8007e52 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007e4e:	7dfb      	ldrb	r3, [r7, #23]
 8007e50:	e006      	b.n	8007e60 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007e52:	7dfb      	ldrb	r3, [r7, #23]
 8007e54:	3301      	adds	r3, #1
 8007e56:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007e58:	7dfb      	ldrb	r3, [r7, #23]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d9d6      	bls.n	8007e0c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007e5e:	23ff      	movs	r3, #255	; 0xff
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	371c      	adds	r7, #28
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f001 fb87 	bl	8009588 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007e7a:	2101      	movs	r1, #1
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f001 fca0 	bl	80097c2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b088      	sub	sp, #32
 8007e90:	af04      	add	r7, sp, #16
 8007e92:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007e94:	2302      	movs	r3, #2
 8007e96:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d102      	bne.n	8007eae <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2203      	movs	r2, #3
 8007eac:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b0b      	cmp	r3, #11
 8007eb6:	f200 81b3 	bhi.w	8008220 <USBH_Process+0x394>
 8007eba:	a201      	add	r2, pc, #4	; (adr r2, 8007ec0 <USBH_Process+0x34>)
 8007ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec0:	08007ef1 	.word	0x08007ef1
 8007ec4:	08007f23 	.word	0x08007f23
 8007ec8:	08007f8b 	.word	0x08007f8b
 8007ecc:	080081bb 	.word	0x080081bb
 8007ed0:	08008221 	.word	0x08008221
 8007ed4:	0800802f 	.word	0x0800802f
 8007ed8:	08008161 	.word	0x08008161
 8007edc:	08008065 	.word	0x08008065
 8007ee0:	08008085 	.word	0x08008085
 8007ee4:	080080a5 	.word	0x080080a5
 8007ee8:	080080d3 	.word	0x080080d3
 8007eec:	080081a3 	.word	0x080081a3
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f000 8193 	beq.w	8008224 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2201      	movs	r2, #1
 8007f02:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007f04:	20c8      	movs	r0, #200	; 0xc8
 8007f06:	f001 fca3 	bl	8009850 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f001 fb99 	bl	8009642 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007f20:	e180      	b.n	8008224 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d107      	bne.n	8007f3c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2202      	movs	r2, #2
 8007f38:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007f3a:	e182      	b.n	8008242 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007f42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f46:	d914      	bls.n	8007f72 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007f4e:	3301      	adds	r3, #1
 8007f50:	b2da      	uxtb	r2, r3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007f5e:	2b03      	cmp	r3, #3
 8007f60:	d903      	bls.n	8007f6a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	220d      	movs	r2, #13
 8007f66:	701a      	strb	r2, [r3, #0]
      break;
 8007f68:	e16b      	b.n	8008242 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	701a      	strb	r2, [r3, #0]
      break;
 8007f70:	e167      	b.n	8008242 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007f78:	f103 020a 	add.w	r2, r3, #10
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007f82:	200a      	movs	r0, #10
 8007f84:	f001 fc64 	bl	8009850 <USBH_Delay>
      break;
 8007f88:	e15b      	b.n	8008242 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d005      	beq.n	8007fa0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f9a:	2104      	movs	r1, #4
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007fa0:	2064      	movs	r0, #100	; 0x64
 8007fa2:	f001 fc55 	bl	8009850 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f001 fb24 	bl	80095f4 <USBH_LL_GetSpeed>
 8007fac:	4603      	mov	r3, r0
 8007fae:	461a      	mov	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2205      	movs	r2, #5
 8007fba:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f001 f92f 	bl	8009222 <USBH_AllocPipe>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007fcc:	2180      	movs	r1, #128	; 0x80
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f001 f927 	bl	8009222 <USBH_AllocPipe>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	7919      	ldrb	r1, [r3, #4]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007ff0:	b292      	uxth	r2, r2
 8007ff2:	9202      	str	r2, [sp, #8]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	9201      	str	r2, [sp, #4]
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2280      	movs	r2, #128	; 0x80
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f001 f8e0 	bl	80091c4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	7959      	ldrb	r1, [r3, #5]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008018:	b292      	uxth	r2, r2
 800801a:	9202      	str	r2, [sp, #8]
 800801c:	2200      	movs	r2, #0
 800801e:	9201      	str	r2, [sp, #4]
 8008020:	9300      	str	r3, [sp, #0]
 8008022:	4603      	mov	r3, r0
 8008024:	2200      	movs	r2, #0
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f001 f8cc 	bl	80091c4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800802c:	e109      	b.n	8008242 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f90c 	bl	800824c <USBH_HandleEnum>
 8008034:	4603      	mov	r3, r0
 8008036:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008038:	7bbb      	ldrb	r3, [r7, #14]
 800803a:	b2db      	uxtb	r3, r3
 800803c:	2b00      	cmp	r3, #0
 800803e:	f040 80f3 	bne.w	8008228 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008050:	2b01      	cmp	r3, #1
 8008052:	d103      	bne.n	800805c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2208      	movs	r2, #8
 8008058:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800805a:	e0e5      	b.n	8008228 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2207      	movs	r2, #7
 8008060:	701a      	strb	r2, [r3, #0]
      break;
 8008062:	e0e1      	b.n	8008228 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800806a:	2b00      	cmp	r3, #0
 800806c:	f000 80de 	beq.w	800822c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008076:	2101      	movs	r1, #1
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2208      	movs	r2, #8
 8008080:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008082:	e0d3      	b.n	800822c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800808a:	b29b      	uxth	r3, r3
 800808c:	4619      	mov	r1, r3
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fc20 	bl	80088d4 <USBH_SetCfg>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	f040 80ca 	bne.w	8008230 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2209      	movs	r2, #9
 80080a0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80080a2:	e0c5      	b.n	8008230 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80080aa:	f003 0320 	and.w	r3, r3, #32
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00b      	beq.n	80080ca <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80080b2:	2101      	movs	r1, #1
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fc30 	bl	800891a <USBH_SetFeature>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f040 80b9 	bne.w	8008234 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	220a      	movs	r2, #10
 80080c6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80080c8:	e0b4      	b.n	8008234 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	220a      	movs	r2, #10
 80080ce:	701a      	strb	r2, [r3, #0]
      break;
 80080d0:	e0b0      	b.n	8008234 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f000 80ad 	beq.w	8008238 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80080e6:	2300      	movs	r3, #0
 80080e8:	73fb      	strb	r3, [r7, #15]
 80080ea:	e016      	b.n	800811a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80080ec:	7bfa      	ldrb	r2, [r7, #15]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	32de      	adds	r2, #222	; 0xde
 80080f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080f6:	791a      	ldrb	r2, [r3, #4]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80080fe:	429a      	cmp	r2, r3
 8008100:	d108      	bne.n	8008114 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008102:	7bfa      	ldrb	r2, [r7, #15]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	32de      	adds	r2, #222	; 0xde
 8008108:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008112:	e005      	b.n	8008120 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008114:	7bfb      	ldrb	r3, [r7, #15]
 8008116:	3301      	adds	r3, #1
 8008118:	73fb      	strb	r3, [r7, #15]
 800811a:	7bfb      	ldrb	r3, [r7, #15]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d0e5      	beq.n	80080ec <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008126:	2b00      	cmp	r3, #0
 8008128:	d016      	beq.n	8008158 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	4798      	blx	r3
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d109      	bne.n	8008150 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2206      	movs	r2, #6
 8008140:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008148:	2103      	movs	r1, #3
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800814e:	e073      	b.n	8008238 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	220d      	movs	r2, #13
 8008154:	701a      	strb	r2, [r3, #0]
      break;
 8008156:	e06f      	b.n	8008238 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	220d      	movs	r2, #13
 800815c:	701a      	strb	r2, [r3, #0]
      break;
 800815e:	e06b      	b.n	8008238 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008166:	2b00      	cmp	r3, #0
 8008168:	d017      	beq.n	800819a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	4798      	blx	r3
 8008176:	4603      	mov	r3, r0
 8008178:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800817a:	7bbb      	ldrb	r3, [r7, #14]
 800817c:	b2db      	uxtb	r3, r3
 800817e:	2b00      	cmp	r3, #0
 8008180:	d103      	bne.n	800818a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	220b      	movs	r2, #11
 8008186:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008188:	e058      	b.n	800823c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800818a:	7bbb      	ldrb	r3, [r7, #14]
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b02      	cmp	r3, #2
 8008190:	d154      	bne.n	800823c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	220d      	movs	r2, #13
 8008196:	701a      	strb	r2, [r3, #0]
      break;
 8008198:	e050      	b.n	800823c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	220d      	movs	r2, #13
 800819e:	701a      	strb	r2, [r3, #0]
      break;
 80081a0:	e04c      	b.n	800823c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d049      	beq.n	8008240 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081b2:	695b      	ldr	r3, [r3, #20]
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	4798      	blx	r3
      }
      break;
 80081b8:	e042      	b.n	8008240 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f7ff fd72 	bl	8007cac <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d009      	beq.n	80081e6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d005      	beq.n	80081fc <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081f6:	2105      	movs	r1, #5
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008202:	b2db      	uxtb	r3, r3
 8008204:	2b01      	cmp	r3, #1
 8008206:	d107      	bne.n	8008218 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7ff fe2b 	bl	8007e6c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008216:	e014      	b.n	8008242 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f001 f9b5 	bl	8009588 <USBH_LL_Start>
      break;
 800821e:	e010      	b.n	8008242 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008220:	bf00      	nop
 8008222:	e00e      	b.n	8008242 <USBH_Process+0x3b6>
      break;
 8008224:	bf00      	nop
 8008226:	e00c      	b.n	8008242 <USBH_Process+0x3b6>
      break;
 8008228:	bf00      	nop
 800822a:	e00a      	b.n	8008242 <USBH_Process+0x3b6>
    break;
 800822c:	bf00      	nop
 800822e:	e008      	b.n	8008242 <USBH_Process+0x3b6>
      break;
 8008230:	bf00      	nop
 8008232:	e006      	b.n	8008242 <USBH_Process+0x3b6>
      break;
 8008234:	bf00      	nop
 8008236:	e004      	b.n	8008242 <USBH_Process+0x3b6>
      break;
 8008238:	bf00      	nop
 800823a:	e002      	b.n	8008242 <USBH_Process+0x3b6>
      break;
 800823c:	bf00      	nop
 800823e:	e000      	b.n	8008242 <USBH_Process+0x3b6>
      break;
 8008240:	bf00      	nop
  }
  return USBH_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b088      	sub	sp, #32
 8008250:	af04      	add	r7, sp, #16
 8008252:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008254:	2301      	movs	r3, #1
 8008256:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008258:	2301      	movs	r3, #1
 800825a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	785b      	ldrb	r3, [r3, #1]
 8008260:	2b07      	cmp	r3, #7
 8008262:	f200 81c1 	bhi.w	80085e8 <USBH_HandleEnum+0x39c>
 8008266:	a201      	add	r2, pc, #4	; (adr r2, 800826c <USBH_HandleEnum+0x20>)
 8008268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826c:	0800828d 	.word	0x0800828d
 8008270:	0800834b 	.word	0x0800834b
 8008274:	080083b5 	.word	0x080083b5
 8008278:	08008443 	.word	0x08008443
 800827c:	080084ad 	.word	0x080084ad
 8008280:	0800851d 	.word	0x0800851d
 8008284:	08008563 	.word	0x08008563
 8008288:	080085a9 	.word	0x080085a9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800828c:	2108      	movs	r1, #8
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fa50 	bl	8008734 <USBH_Get_DevDesc>
 8008294:	4603      	mov	r3, r0
 8008296:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008298:	7bbb      	ldrb	r3, [r7, #14]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d130      	bne.n	8008300 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	7919      	ldrb	r1, [r3, #4]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80082c2:	b292      	uxth	r2, r2
 80082c4:	9202      	str	r2, [sp, #8]
 80082c6:	2200      	movs	r2, #0
 80082c8:	9201      	str	r2, [sp, #4]
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	4603      	mov	r3, r0
 80082ce:	2280      	movs	r2, #128	; 0x80
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 ff77 	bl	80091c4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	7959      	ldrb	r1, [r3, #5]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80082ea:	b292      	uxth	r2, r2
 80082ec:	9202      	str	r2, [sp, #8]
 80082ee:	2200      	movs	r2, #0
 80082f0:	9201      	str	r2, [sp, #4]
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	4603      	mov	r3, r0
 80082f6:	2200      	movs	r2, #0
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 ff63 	bl	80091c4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80082fe:	e175      	b.n	80085ec <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008300:	7bbb      	ldrb	r3, [r7, #14]
 8008302:	2b03      	cmp	r3, #3
 8008304:	f040 8172 	bne.w	80085ec <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800830e:	3301      	adds	r3, #1
 8008310:	b2da      	uxtb	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800831e:	2b03      	cmp	r3, #3
 8008320:	d903      	bls.n	800832a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	220d      	movs	r2, #13
 8008326:	701a      	strb	r2, [r3, #0]
      break;
 8008328:	e160      	b.n	80085ec <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	795b      	ldrb	r3, [r3, #5]
 800832e:	4619      	mov	r1, r3
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 ff97 	bl	8009264 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	791b      	ldrb	r3, [r3, #4]
 800833a:	4619      	mov	r1, r3
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 ff91 	bl	8009264 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	701a      	strb	r2, [r3, #0]
      break;
 8008348:	e150      	b.n	80085ec <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800834a:	2112      	movs	r1, #18
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f9f1 	bl	8008734 <USBH_Get_DevDesc>
 8008352:	4603      	mov	r3, r0
 8008354:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008356:	7bbb      	ldrb	r3, [r7, #14]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d103      	bne.n	8008364 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2202      	movs	r2, #2
 8008360:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008362:	e145      	b.n	80085f0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008364:	7bbb      	ldrb	r3, [r7, #14]
 8008366:	2b03      	cmp	r3, #3
 8008368:	f040 8142 	bne.w	80085f0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008372:	3301      	adds	r3, #1
 8008374:	b2da      	uxtb	r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008382:	2b03      	cmp	r3, #3
 8008384:	d903      	bls.n	800838e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	220d      	movs	r2, #13
 800838a:	701a      	strb	r2, [r3, #0]
      break;
 800838c:	e130      	b.n	80085f0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	795b      	ldrb	r3, [r3, #5]
 8008392:	4619      	mov	r1, r3
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 ff65 	bl	8009264 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	791b      	ldrb	r3, [r3, #4]
 800839e:	4619      	mov	r1, r3
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 ff5f 	bl	8009264 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	701a      	strb	r2, [r3, #0]
      break;
 80083b2:	e11d      	b.n	80085f0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80083b4:	2101      	movs	r1, #1
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fa68 	bl	800888c <USBH_SetAddress>
 80083bc:	4603      	mov	r3, r0
 80083be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80083c0:	7bbb      	ldrb	r3, [r7, #14]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d132      	bne.n	800842c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80083c6:	2002      	movs	r0, #2
 80083c8:	f001 fa42 	bl	8009850 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2203      	movs	r2, #3
 80083d8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	7919      	ldrb	r1, [r3, #4]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80083ee:	b292      	uxth	r2, r2
 80083f0:	9202      	str	r2, [sp, #8]
 80083f2:	2200      	movs	r2, #0
 80083f4:	9201      	str	r2, [sp, #4]
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	4603      	mov	r3, r0
 80083fa:	2280      	movs	r2, #128	; 0x80
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fee1 	bl	80091c4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	7959      	ldrb	r1, [r3, #5]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008416:	b292      	uxth	r2, r2
 8008418:	9202      	str	r2, [sp, #8]
 800841a:	2200      	movs	r2, #0
 800841c:	9201      	str	r2, [sp, #4]
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	4603      	mov	r3, r0
 8008422:	2200      	movs	r2, #0
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fecd 	bl	80091c4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800842a:	e0e3      	b.n	80085f4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800842c:	7bbb      	ldrb	r3, [r7, #14]
 800842e:	2b03      	cmp	r3, #3
 8008430:	f040 80e0 	bne.w	80085f4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	220d      	movs	r2, #13
 8008438:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	705a      	strb	r2, [r3, #1]
      break;
 8008440:	e0d8      	b.n	80085f4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008442:	2109      	movs	r1, #9
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f99d 	bl	8008784 <USBH_Get_CfgDesc>
 800844a:	4603      	mov	r3, r0
 800844c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800844e:	7bbb      	ldrb	r3, [r7, #14]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d103      	bne.n	800845c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2204      	movs	r2, #4
 8008458:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800845a:	e0cd      	b.n	80085f8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800845c:	7bbb      	ldrb	r3, [r7, #14]
 800845e:	2b03      	cmp	r3, #3
 8008460:	f040 80ca 	bne.w	80085f8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800846a:	3301      	adds	r3, #1
 800846c:	b2da      	uxtb	r2, r3
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800847a:	2b03      	cmp	r3, #3
 800847c:	d903      	bls.n	8008486 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	220d      	movs	r2, #13
 8008482:	701a      	strb	r2, [r3, #0]
      break;
 8008484:	e0b8      	b.n	80085f8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	795b      	ldrb	r3, [r3, #5]
 800848a:	4619      	mov	r1, r3
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fee9 	bl	8009264 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	791b      	ldrb	r3, [r3, #4]
 8008496:	4619      	mov	r1, r3
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 fee3 	bl	8009264 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	701a      	strb	r2, [r3, #0]
      break;
 80084aa:	e0a5      	b.n	80085f8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80084b2:	4619      	mov	r1, r3
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 f965 	bl	8008784 <USBH_Get_CfgDesc>
 80084ba:	4603      	mov	r3, r0
 80084bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80084be:	7bbb      	ldrb	r3, [r7, #14]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d103      	bne.n	80084cc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2205      	movs	r2, #5
 80084c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80084ca:	e097      	b.n	80085fc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084cc:	7bbb      	ldrb	r3, [r7, #14]
 80084ce:	2b03      	cmp	r3, #3
 80084d0:	f040 8094 	bne.w	80085fc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80084da:	3301      	adds	r3, #1
 80084dc:	b2da      	uxtb	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80084ea:	2b03      	cmp	r3, #3
 80084ec:	d903      	bls.n	80084f6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	220d      	movs	r2, #13
 80084f2:	701a      	strb	r2, [r3, #0]
      break;
 80084f4:	e082      	b.n	80085fc <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	795b      	ldrb	r3, [r3, #5]
 80084fa:	4619      	mov	r1, r3
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 feb1 	bl	8009264 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	791b      	ldrb	r3, [r3, #4]
 8008506:	4619      	mov	r1, r3
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 feab 	bl	8009264 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	701a      	strb	r2, [r3, #0]
      break;
 800851a:	e06f      	b.n	80085fc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008522:	2b00      	cmp	r3, #0
 8008524:	d019      	beq.n	800855a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008532:	23ff      	movs	r3, #255	; 0xff
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 f949 	bl	80087cc <USBH_Get_StringDesc>
 800853a:	4603      	mov	r3, r0
 800853c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800853e:	7bbb      	ldrb	r3, [r7, #14]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d103      	bne.n	800854c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2206      	movs	r2, #6
 8008548:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800854a:	e059      	b.n	8008600 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800854c:	7bbb      	ldrb	r3, [r7, #14]
 800854e:	2b03      	cmp	r3, #3
 8008550:	d156      	bne.n	8008600 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2206      	movs	r2, #6
 8008556:	705a      	strb	r2, [r3, #1]
      break;
 8008558:	e052      	b.n	8008600 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2206      	movs	r2, #6
 800855e:	705a      	strb	r2, [r3, #1]
      break;
 8008560:	e04e      	b.n	8008600 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008568:	2b00      	cmp	r3, #0
 800856a:	d019      	beq.n	80085a0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008578:	23ff      	movs	r3, #255	; 0xff
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f926 	bl	80087cc <USBH_Get_StringDesc>
 8008580:	4603      	mov	r3, r0
 8008582:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008584:	7bbb      	ldrb	r3, [r7, #14]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d103      	bne.n	8008592 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2207      	movs	r2, #7
 800858e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008590:	e038      	b.n	8008604 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008592:	7bbb      	ldrb	r3, [r7, #14]
 8008594:	2b03      	cmp	r3, #3
 8008596:	d135      	bne.n	8008604 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2207      	movs	r2, #7
 800859c:	705a      	strb	r2, [r3, #1]
      break;
 800859e:	e031      	b.n	8008604 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2207      	movs	r2, #7
 80085a4:	705a      	strb	r2, [r3, #1]
      break;
 80085a6:	e02d      	b.n	8008604 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d017      	beq.n	80085e2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80085be:	23ff      	movs	r3, #255	; 0xff
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 f903 	bl	80087cc <USBH_Get_StringDesc>
 80085c6:	4603      	mov	r3, r0
 80085c8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80085ca:	7bbb      	ldrb	r3, [r7, #14]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d102      	bne.n	80085d6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80085d0:	2300      	movs	r3, #0
 80085d2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80085d4:	e018      	b.n	8008608 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085d6:	7bbb      	ldrb	r3, [r7, #14]
 80085d8:	2b03      	cmp	r3, #3
 80085da:	d115      	bne.n	8008608 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80085dc:	2300      	movs	r3, #0
 80085de:	73fb      	strb	r3, [r7, #15]
      break;
 80085e0:	e012      	b.n	8008608 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80085e2:	2300      	movs	r3, #0
 80085e4:	73fb      	strb	r3, [r7, #15]
      break;
 80085e6:	e00f      	b.n	8008608 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80085e8:	bf00      	nop
 80085ea:	e00e      	b.n	800860a <USBH_HandleEnum+0x3be>
      break;
 80085ec:	bf00      	nop
 80085ee:	e00c      	b.n	800860a <USBH_HandleEnum+0x3be>
      break;
 80085f0:	bf00      	nop
 80085f2:	e00a      	b.n	800860a <USBH_HandleEnum+0x3be>
      break;
 80085f4:	bf00      	nop
 80085f6:	e008      	b.n	800860a <USBH_HandleEnum+0x3be>
      break;
 80085f8:	bf00      	nop
 80085fa:	e006      	b.n	800860a <USBH_HandleEnum+0x3be>
      break;
 80085fc:	bf00      	nop
 80085fe:	e004      	b.n	800860a <USBH_HandleEnum+0x3be>
      break;
 8008600:	bf00      	nop
 8008602:	e002      	b.n	800860a <USBH_HandleEnum+0x3be>
      break;
 8008604:	bf00      	nop
 8008606:	e000      	b.n	800860a <USBH_HandleEnum+0x3be>
      break;
 8008608:	bf00      	nop
  }
  return Status;
 800860a:	7bfb      	ldrb	r3, [r7, #15]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	683a      	ldr	r2, [r7, #0]
 8008622:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008626:	bf00      	nop
 8008628:	370c      	adds	r7, #12
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr

08008632 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b082      	sub	sp, #8
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008640:	1c5a      	adds	r2, r3, #1
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f804 	bl	8008656 <USBH_HandleSof>
}
 800864e:	bf00      	nop
 8008650:	3708      	adds	r7, #8
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b082      	sub	sp, #8
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	b2db      	uxtb	r3, r3
 8008664:	2b0b      	cmp	r3, #11
 8008666:	d10a      	bne.n	800867e <USBH_HandleSof+0x28>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800866e:	2b00      	cmp	r3, #0
 8008670:	d005      	beq.n	800867e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008678:	699b      	ldr	r3, [r3, #24]
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	4798      	blx	r3
  }
}
 800867e:	bf00      	nop
 8008680:	3708      	adds	r7, #8
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008686:	b480      	push	{r7}
 8008688:	b083      	sub	sp, #12
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008696:	bf00      	nop
}
 8008698:	370c      	adds	r7, #12
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr

080086a2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80086a2:	b480      	push	{r7}
 80086a4:	b083      	sub	sp, #12
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80086b2:	bf00      	nop
}
 80086b4:	370c      	adds	r7, #12
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr

080086be <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80086be:	b480      	push	{r7}
 80086c0:	b083      	sub	sp, #12
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 ff56 	bl	80095be <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	791b      	ldrb	r3, [r3, #4]
 8008716:	4619      	mov	r1, r3
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fda3 	bl	8009264 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	795b      	ldrb	r3, [r3, #5]
 8008722:	4619      	mov	r1, r3
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 fd9d 	bl	8009264 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3708      	adds	r7, #8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b086      	sub	sp, #24
 8008738:	af02      	add	r7, sp, #8
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	460b      	mov	r3, r1
 800873e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008746:	78fb      	ldrb	r3, [r7, #3]
 8008748:	b29b      	uxth	r3, r3
 800874a:	9300      	str	r3, [sp, #0]
 800874c:	4613      	mov	r3, r2
 800874e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008752:	2100      	movs	r1, #0
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 f864 	bl	8008822 <USBH_GetDescriptor>
 800875a:	4603      	mov	r3, r0
 800875c:	73fb      	strb	r3, [r7, #15]
 800875e:	7bfb      	ldrb	r3, [r7, #15]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10a      	bne.n	800877a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f203 3026 	addw	r0, r3, #806	; 0x326
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008770:	78fa      	ldrb	r2, [r7, #3]
 8008772:	b292      	uxth	r2, r2
 8008774:	4619      	mov	r1, r3
 8008776:	f000 f918 	bl	80089aa <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800877a:	7bfb      	ldrb	r3, [r7, #15]
}
 800877c:	4618      	mov	r0, r3
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008784:	b580      	push	{r7, lr}
 8008786:	b086      	sub	sp, #24
 8008788:	af02      	add	r7, sp, #8
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	460b      	mov	r3, r1
 800878e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	331c      	adds	r3, #28
 8008794:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008796:	887b      	ldrh	r3, [r7, #2]
 8008798:	9300      	str	r3, [sp, #0]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087a0:	2100      	movs	r1, #0
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f83d 	bl	8008822 <USBH_GetDescriptor>
 80087a8:	4603      	mov	r3, r0
 80087aa:	72fb      	strb	r3, [r7, #11]
 80087ac:	7afb      	ldrb	r3, [r7, #11]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d107      	bne.n	80087c2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80087b8:	887a      	ldrh	r2, [r7, #2]
 80087ba:	68f9      	ldr	r1, [r7, #12]
 80087bc:	4618      	mov	r0, r3
 80087be:	f000 f964 	bl	8008a8a <USBH_ParseCfgDesc>
  }

  return status;
 80087c2:	7afb      	ldrb	r3, [r7, #11]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b088      	sub	sp, #32
 80087d0:	af02      	add	r7, sp, #8
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	607a      	str	r2, [r7, #4]
 80087d6:	461a      	mov	r2, r3
 80087d8:	460b      	mov	r3, r1
 80087da:	72fb      	strb	r3, [r7, #11]
 80087dc:	4613      	mov	r3, r2
 80087de:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80087e0:	7afb      	ldrb	r3, [r7, #11]
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80087e8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80087f0:	893b      	ldrh	r3, [r7, #8]
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	460b      	mov	r3, r1
 80087f6:	2100      	movs	r1, #0
 80087f8:	68f8      	ldr	r0, [r7, #12]
 80087fa:	f000 f812 	bl	8008822 <USBH_GetDescriptor>
 80087fe:	4603      	mov	r3, r0
 8008800:	75fb      	strb	r3, [r7, #23]
 8008802:	7dfb      	ldrb	r3, [r7, #23]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d107      	bne.n	8008818 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800880e:	893a      	ldrh	r2, [r7, #8]
 8008810:	6879      	ldr	r1, [r7, #4]
 8008812:	4618      	mov	r0, r3
 8008814:	f000 fa37 	bl	8008c86 <USBH_ParseStringDesc>
  }

  return status;
 8008818:	7dfb      	ldrb	r3, [r7, #23]
}
 800881a:	4618      	mov	r0, r3
 800881c:	3718      	adds	r7, #24
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b084      	sub	sp, #16
 8008826:	af00      	add	r7, sp, #0
 8008828:	60f8      	str	r0, [r7, #12]
 800882a:	607b      	str	r3, [r7, #4]
 800882c:	460b      	mov	r3, r1
 800882e:	72fb      	strb	r3, [r7, #11]
 8008830:	4613      	mov	r3, r2
 8008832:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	789b      	ldrb	r3, [r3, #2]
 8008838:	2b01      	cmp	r3, #1
 800883a:	d11c      	bne.n	8008876 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800883c:	7afb      	ldrb	r3, [r7, #11]
 800883e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008842:	b2da      	uxtb	r2, r3
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2206      	movs	r2, #6
 800884c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	893a      	ldrh	r2, [r7, #8]
 8008852:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008854:	893b      	ldrh	r3, [r7, #8]
 8008856:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800885a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800885e:	d104      	bne.n	800886a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f240 4209 	movw	r2, #1033	; 0x409
 8008866:	829a      	strh	r2, [r3, #20]
 8008868:	e002      	b.n	8008870 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	8b3a      	ldrh	r2, [r7, #24]
 8008874:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008876:	8b3b      	ldrh	r3, [r7, #24]
 8008878:	461a      	mov	r2, r3
 800887a:	6879      	ldr	r1, [r7, #4]
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f000 fa50 	bl	8008d22 <USBH_CtlReq>
 8008882:	4603      	mov	r3, r0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3710      	adds	r7, #16
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	460b      	mov	r3, r1
 8008896:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	789b      	ldrb	r3, [r3, #2]
 800889c:	2b01      	cmp	r3, #1
 800889e:	d10f      	bne.n	80088c0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2205      	movs	r2, #5
 80088aa:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80088ac:	78fb      	ldrb	r3, [r7, #3]
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80088c0:	2200      	movs	r2, #0
 80088c2:	2100      	movs	r1, #0
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 fa2c 	bl	8008d22 <USBH_CtlReq>
 80088ca:	4603      	mov	r3, r0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3708      	adds	r7, #8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	460b      	mov	r3, r1
 80088de:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	789b      	ldrb	r3, [r3, #2]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d10e      	bne.n	8008906 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2209      	movs	r2, #9
 80088f2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	887a      	ldrh	r2, [r7, #2]
 80088f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008906:	2200      	movs	r2, #0
 8008908:	2100      	movs	r1, #0
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fa09 	bl	8008d22 <USBH_CtlReq>
 8008910:	4603      	mov	r3, r0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3708      	adds	r7, #8
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b082      	sub	sp, #8
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
 8008922:	460b      	mov	r3, r1
 8008924:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	789b      	ldrb	r3, [r3, #2]
 800892a:	2b01      	cmp	r3, #1
 800892c:	d10f      	bne.n	800894e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2203      	movs	r2, #3
 8008938:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800893a:	78fb      	ldrb	r3, [r7, #3]
 800893c:	b29a      	uxth	r2, r3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800894e:	2200      	movs	r2, #0
 8008950:	2100      	movs	r1, #0
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 f9e5 	bl	8008d22 <USBH_CtlReq>
 8008958:	4603      	mov	r3, r0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b082      	sub	sp, #8
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	460b      	mov	r3, r1
 800896c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	789b      	ldrb	r3, [r3, #2]
 8008972:	2b01      	cmp	r3, #1
 8008974:	d10f      	bne.n	8008996 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2202      	movs	r2, #2
 800897a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008988:	78fb      	ldrb	r3, [r7, #3]
 800898a:	b29a      	uxth	r2, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008996:	2200      	movs	r2, #0
 8008998:	2100      	movs	r1, #0
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f9c1 	bl	8008d22 <USBH_CtlReq>
 80089a0:	4603      	mov	r3, r0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3708      	adds	r7, #8
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80089aa:	b480      	push	{r7}
 80089ac:	b085      	sub	sp, #20
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	60f8      	str	r0, [r7, #12]
 80089b2:	60b9      	str	r1, [r7, #8]
 80089b4:	4613      	mov	r3, r2
 80089b6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	781a      	ldrb	r2, [r3, #0]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	785a      	ldrb	r2, [r3, #1]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	3302      	adds	r3, #2
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	3303      	adds	r3, #3
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	021b      	lsls	r3, r3, #8
 80089da:	b29b      	uxth	r3, r3
 80089dc:	4313      	orrs	r3, r2
 80089de:	b29a      	uxth	r2, r3
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	791a      	ldrb	r2, [r3, #4]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	795a      	ldrb	r2, [r3, #5]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	799a      	ldrb	r2, [r3, #6]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	79da      	ldrb	r2, [r3, #7]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008a04:	88fb      	ldrh	r3, [r7, #6]
 8008a06:	2b08      	cmp	r3, #8
 8008a08:	d939      	bls.n	8008a7e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	3308      	adds	r3, #8
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	3309      	adds	r3, #9
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	021b      	lsls	r3, r3, #8
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	b29a      	uxth	r2, r3
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	330a      	adds	r3, #10
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	330b      	adds	r3, #11
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	021b      	lsls	r3, r3, #8
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	330c      	adds	r3, #12
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	b29a      	uxth	r2, r3
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	330d      	adds	r3, #13
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	021b      	lsls	r3, r3, #8
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	4313      	orrs	r3, r2
 8008a58:	b29a      	uxth	r2, r3
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	7b9a      	ldrb	r2, [r3, #14]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	7bda      	ldrb	r2, [r3, #15]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	7c1a      	ldrb	r2, [r3, #16]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	7c5a      	ldrb	r2, [r3, #17]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	745a      	strb	r2, [r3, #17]
  }
}
 8008a7e:	bf00      	nop
 8008a80:	3714      	adds	r7, #20
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr

08008a8a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b08a      	sub	sp, #40	; 0x28
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	60f8      	str	r0, [r7, #12]
 8008a92:	60b9      	str	r1, [r7, #8]
 8008a94:	4613      	mov	r3, r2
 8008a96:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	781a      	ldrb	r2, [r3, #0]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	785a      	ldrb	r2, [r3, #1]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	3302      	adds	r3, #2
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	b29a      	uxth	r2, r3
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	3303      	adds	r3, #3
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	021b      	lsls	r3, r3, #8
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	b29a      	uxth	r2, r3
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	791a      	ldrb	r2, [r3, #4]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	795a      	ldrb	r2, [r3, #5]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	799a      	ldrb	r2, [r3, #6]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	79da      	ldrb	r2, [r3, #7]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	7a1a      	ldrb	r2, [r3, #8]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008b00:	88fb      	ldrh	r3, [r7, #6]
 8008b02:	2b09      	cmp	r3, #9
 8008b04:	d95f      	bls.n	8008bc6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008b06:	2309      	movs	r3, #9
 8008b08:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008b0e:	e051      	b.n	8008bb4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008b10:	f107 0316 	add.w	r3, r7, #22
 8008b14:	4619      	mov	r1, r3
 8008b16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b18:	f000 f8e8 	bl	8008cec <USBH_GetNextDesc>
 8008b1c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b20:	785b      	ldrb	r3, [r3, #1]
 8008b22:	2b04      	cmp	r3, #4
 8008b24:	d146      	bne.n	8008bb4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008b26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b2a:	221a      	movs	r2, #26
 8008b2c:	fb02 f303 	mul.w	r3, r2, r3
 8008b30:	3308      	adds	r3, #8
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	4413      	add	r3, r2
 8008b36:	3302      	adds	r3, #2
 8008b38:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008b3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b3c:	69f8      	ldr	r0, [r7, #28]
 8008b3e:	f000 f846 	bl	8008bce <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008b42:	2300      	movs	r3, #0
 8008b44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008b4c:	e022      	b.n	8008b94 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008b4e:	f107 0316 	add.w	r3, r7, #22
 8008b52:	4619      	mov	r1, r3
 8008b54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b56:	f000 f8c9 	bl	8008cec <USBH_GetNextDesc>
 8008b5a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5e:	785b      	ldrb	r3, [r3, #1]
 8008b60:	2b05      	cmp	r3, #5
 8008b62:	d117      	bne.n	8008b94 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008b64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b68:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008b6c:	3201      	adds	r2, #1
 8008b6e:	00d2      	lsls	r2, r2, #3
 8008b70:	211a      	movs	r1, #26
 8008b72:	fb01 f303 	mul.w	r3, r1, r3
 8008b76:	4413      	add	r3, r2
 8008b78:	3308      	adds	r3, #8
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	3304      	adds	r3, #4
 8008b80:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008b82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b84:	69b8      	ldr	r0, [r7, #24]
 8008b86:	f000 f851 	bl	8008c2c <USBH_ParseEPDesc>
            ep_ix++;
 8008b8a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008b8e:	3301      	adds	r3, #1
 8008b90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	791b      	ldrb	r3, [r3, #4]
 8008b98:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d204      	bcs.n	8008baa <USBH_ParseCfgDesc+0x120>
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	885a      	ldrh	r2, [r3, #2]
 8008ba4:	8afb      	ldrh	r3, [r7, #22]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d8d1      	bhi.n	8008b4e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008baa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008bae:	3301      	adds	r3, #1
 8008bb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008bb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d804      	bhi.n	8008bc6 <USBH_ParseCfgDesc+0x13c>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	885a      	ldrh	r2, [r3, #2]
 8008bc0:	8afb      	ldrh	r3, [r7, #22]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d8a4      	bhi.n	8008b10 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008bc6:	bf00      	nop
 8008bc8:	3728      	adds	r7, #40	; 0x28
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008bce:	b480      	push	{r7}
 8008bd0:	b083      	sub	sp, #12
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
 8008bd6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	781a      	ldrb	r2, [r3, #0]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	785a      	ldrb	r2, [r3, #1]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	789a      	ldrb	r2, [r3, #2]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	78da      	ldrb	r2, [r3, #3]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	791a      	ldrb	r2, [r3, #4]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	795a      	ldrb	r2, [r3, #5]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	799a      	ldrb	r2, [r3, #6]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	79da      	ldrb	r2, [r3, #7]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	7a1a      	ldrb	r2, [r3, #8]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	721a      	strb	r2, [r3, #8]
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	781a      	ldrb	r2, [r3, #0]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	785a      	ldrb	r2, [r3, #1]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	789a      	ldrb	r2, [r3, #2]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	78da      	ldrb	r2, [r3, #3]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	3304      	adds	r3, #4
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	3305      	adds	r3, #5
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	021b      	lsls	r3, r3, #8
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	799a      	ldrb	r2, [r3, #6]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	719a      	strb	r2, [r3, #6]
}
 8008c7a:	bf00      	nop
 8008c7c:	370c      	adds	r7, #12
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr

08008c86 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008c86:	b480      	push	{r7}
 8008c88:	b087      	sub	sp, #28
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	60f8      	str	r0, [r7, #12]
 8008c8e:	60b9      	str	r1, [r7, #8]
 8008c90:	4613      	mov	r3, r2
 8008c92:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	3301      	adds	r3, #1
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	2b03      	cmp	r3, #3
 8008c9c:	d120      	bne.n	8008ce0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	1e9a      	subs	r2, r3, #2
 8008ca4:	88fb      	ldrh	r3, [r7, #6]
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	bf28      	it	cs
 8008caa:	4613      	movcs	r3, r2
 8008cac:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	3302      	adds	r3, #2
 8008cb2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	82fb      	strh	r3, [r7, #22]
 8008cb8:	e00b      	b.n	8008cd2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008cba:	8afb      	ldrh	r3, [r7, #22]
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	781a      	ldrb	r2, [r3, #0]
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008ccc:	8afb      	ldrh	r3, [r7, #22]
 8008cce:	3302      	adds	r3, #2
 8008cd0:	82fb      	strh	r3, [r7, #22]
 8008cd2:	8afa      	ldrh	r2, [r7, #22]
 8008cd4:	8abb      	ldrh	r3, [r7, #20]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d3ef      	bcc.n	8008cba <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	701a      	strb	r2, [r3, #0]
  }
}
 8008ce0:	bf00      	nop
 8008ce2:	371c      	adds	r7, #28
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	881a      	ldrh	r2, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	4413      	add	r3, r2
 8008d02:	b29a      	uxth	r2, r3
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4413      	add	r3, r2
 8008d12:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008d14:	68fb      	ldr	r3, [r7, #12]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3714      	adds	r7, #20
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr

08008d22 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b086      	sub	sp, #24
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	60f8      	str	r0, [r7, #12]
 8008d2a:	60b9      	str	r1, [r7, #8]
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008d30:	2301      	movs	r3, #1
 8008d32:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	789b      	ldrb	r3, [r3, #2]
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d002      	beq.n	8008d42 <USBH_CtlReq+0x20>
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d00f      	beq.n	8008d60 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008d40:	e027      	b.n	8008d92 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	68ba      	ldr	r2, [r7, #8]
 8008d46:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	88fa      	ldrh	r2, [r7, #6]
 8008d4c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2201      	movs	r2, #1
 8008d52:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2202      	movs	r2, #2
 8008d58:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8008d5e:	e018      	b.n	8008d92 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008d60:	68f8      	ldr	r0, [r7, #12]
 8008d62:	f000 f81b 	bl	8008d9c <USBH_HandleControl>
 8008d66:	4603      	mov	r3, r0
 8008d68:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008d6a:	7dfb      	ldrb	r3, [r7, #23]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d002      	beq.n	8008d76 <USBH_CtlReq+0x54>
 8008d70:	7dfb      	ldrb	r3, [r7, #23]
 8008d72:	2b03      	cmp	r3, #3
 8008d74:	d106      	bne.n	8008d84 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2201      	movs	r2, #1
 8008d7a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	761a      	strb	r2, [r3, #24]
      break;
 8008d82:	e005      	b.n	8008d90 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008d84:	7dfb      	ldrb	r3, [r7, #23]
 8008d86:	2b02      	cmp	r3, #2
 8008d88:	d102      	bne.n	8008d90 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	709a      	strb	r2, [r3, #2]
      break;
 8008d90:	bf00      	nop
  }
  return status;
 8008d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3718      	adds	r7, #24
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b086      	sub	sp, #24
 8008da0:	af02      	add	r7, sp, #8
 8008da2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008da4:	2301      	movs	r3, #1
 8008da6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008da8:	2300      	movs	r3, #0
 8008daa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	7e1b      	ldrb	r3, [r3, #24]
 8008db0:	3b01      	subs	r3, #1
 8008db2:	2b0a      	cmp	r3, #10
 8008db4:	f200 8156 	bhi.w	8009064 <USBH_HandleControl+0x2c8>
 8008db8:	a201      	add	r2, pc, #4	; (adr r2, 8008dc0 <USBH_HandleControl+0x24>)
 8008dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dbe:	bf00      	nop
 8008dc0:	08008ded 	.word	0x08008ded
 8008dc4:	08008e07 	.word	0x08008e07
 8008dc8:	08008e71 	.word	0x08008e71
 8008dcc:	08008e97 	.word	0x08008e97
 8008dd0:	08008ecf 	.word	0x08008ecf
 8008dd4:	08008ef9 	.word	0x08008ef9
 8008dd8:	08008f4b 	.word	0x08008f4b
 8008ddc:	08008f6d 	.word	0x08008f6d
 8008de0:	08008fa9 	.word	0x08008fa9
 8008de4:	08008fcf 	.word	0x08008fcf
 8008de8:	0800900d 	.word	0x0800900d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f103 0110 	add.w	r1, r3, #16
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	795b      	ldrb	r3, [r3, #5]
 8008df6:	461a      	mov	r2, r3
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 f943 	bl	8009084 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2202      	movs	r2, #2
 8008e02:	761a      	strb	r2, [r3, #24]
      break;
 8008e04:	e139      	b.n	800907a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	795b      	ldrb	r3, [r3, #5]
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 fcc5 	bl	800979c <USBH_LL_GetURBState>
 8008e12:	4603      	mov	r3, r0
 8008e14:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008e16:	7bbb      	ldrb	r3, [r7, #14]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d11e      	bne.n	8008e5a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	7c1b      	ldrb	r3, [r3, #16]
 8008e20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008e24:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	8adb      	ldrh	r3, [r3, #22]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00a      	beq.n	8008e44 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008e2e:	7b7b      	ldrb	r3, [r7, #13]
 8008e30:	2b80      	cmp	r3, #128	; 0x80
 8008e32:	d103      	bne.n	8008e3c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2203      	movs	r2, #3
 8008e38:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008e3a:	e115      	b.n	8009068 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2205      	movs	r2, #5
 8008e40:	761a      	strb	r2, [r3, #24]
      break;
 8008e42:	e111      	b.n	8009068 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008e44:	7b7b      	ldrb	r3, [r7, #13]
 8008e46:	2b80      	cmp	r3, #128	; 0x80
 8008e48:	d103      	bne.n	8008e52 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2209      	movs	r2, #9
 8008e4e:	761a      	strb	r2, [r3, #24]
      break;
 8008e50:	e10a      	b.n	8009068 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2207      	movs	r2, #7
 8008e56:	761a      	strb	r2, [r3, #24]
      break;
 8008e58:	e106      	b.n	8009068 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008e5a:	7bbb      	ldrb	r3, [r7, #14]
 8008e5c:	2b04      	cmp	r3, #4
 8008e5e:	d003      	beq.n	8008e68 <USBH_HandleControl+0xcc>
 8008e60:	7bbb      	ldrb	r3, [r7, #14]
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	f040 8100 	bne.w	8009068 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	220b      	movs	r2, #11
 8008e6c:	761a      	strb	r2, [r3, #24]
      break;
 8008e6e:	e0fb      	b.n	8009068 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e76:	b29a      	uxth	r2, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6899      	ldr	r1, [r3, #8]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	899a      	ldrh	r2, [r3, #12]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	791b      	ldrb	r3, [r3, #4]
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 f93a 	bl	8009102 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2204      	movs	r2, #4
 8008e92:	761a      	strb	r2, [r3, #24]
      break;
 8008e94:	e0f1      	b.n	800907a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	791b      	ldrb	r3, [r3, #4]
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 fc7d 	bl	800979c <USBH_LL_GetURBState>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008ea6:	7bbb      	ldrb	r3, [r7, #14]
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d102      	bne.n	8008eb2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2209      	movs	r2, #9
 8008eb0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008eb2:	7bbb      	ldrb	r3, [r7, #14]
 8008eb4:	2b05      	cmp	r3, #5
 8008eb6:	d102      	bne.n	8008ebe <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008ebc:	e0d6      	b.n	800906c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008ebe:	7bbb      	ldrb	r3, [r7, #14]
 8008ec0:	2b04      	cmp	r3, #4
 8008ec2:	f040 80d3 	bne.w	800906c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	220b      	movs	r2, #11
 8008eca:	761a      	strb	r2, [r3, #24]
      break;
 8008ecc:	e0ce      	b.n	800906c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6899      	ldr	r1, [r3, #8]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	899a      	ldrh	r2, [r3, #12]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	795b      	ldrb	r3, [r3, #5]
 8008eda:	2001      	movs	r0, #1
 8008edc:	9000      	str	r0, [sp, #0]
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f8ea 	bl	80090b8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008eea:	b29a      	uxth	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2206      	movs	r2, #6
 8008ef4:	761a      	strb	r2, [r3, #24]
      break;
 8008ef6:	e0c0      	b.n	800907a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	795b      	ldrb	r3, [r3, #5]
 8008efc:	4619      	mov	r1, r3
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fc4c 	bl	800979c <USBH_LL_GetURBState>
 8008f04:	4603      	mov	r3, r0
 8008f06:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008f08:	7bbb      	ldrb	r3, [r7, #14]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d103      	bne.n	8008f16 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2207      	movs	r2, #7
 8008f12:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008f14:	e0ac      	b.n	8009070 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008f16:	7bbb      	ldrb	r3, [r7, #14]
 8008f18:	2b05      	cmp	r3, #5
 8008f1a:	d105      	bne.n	8008f28 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	220c      	movs	r2, #12
 8008f20:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008f22:	2303      	movs	r3, #3
 8008f24:	73fb      	strb	r3, [r7, #15]
      break;
 8008f26:	e0a3      	b.n	8009070 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008f28:	7bbb      	ldrb	r3, [r7, #14]
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d103      	bne.n	8008f36 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2205      	movs	r2, #5
 8008f32:	761a      	strb	r2, [r3, #24]
      break;
 8008f34:	e09c      	b.n	8009070 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008f36:	7bbb      	ldrb	r3, [r7, #14]
 8008f38:	2b04      	cmp	r3, #4
 8008f3a:	f040 8099 	bne.w	8009070 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	220b      	movs	r2, #11
 8008f42:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008f44:	2302      	movs	r3, #2
 8008f46:	73fb      	strb	r3, [r7, #15]
      break;
 8008f48:	e092      	b.n	8009070 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	791b      	ldrb	r3, [r3, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	2100      	movs	r1, #0
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f8d5 	bl	8009102 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008f5e:	b29a      	uxth	r2, r3
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2208      	movs	r2, #8
 8008f68:	761a      	strb	r2, [r3, #24]

      break;
 8008f6a:	e086      	b.n	800907a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	791b      	ldrb	r3, [r3, #4]
 8008f70:	4619      	mov	r1, r3
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fc12 	bl	800979c <USBH_LL_GetURBState>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008f7c:	7bbb      	ldrb	r3, [r7, #14]
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d105      	bne.n	8008f8e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	220d      	movs	r2, #13
 8008f86:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008f8c:	e072      	b.n	8009074 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008f8e:	7bbb      	ldrb	r3, [r7, #14]
 8008f90:	2b04      	cmp	r3, #4
 8008f92:	d103      	bne.n	8008f9c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	220b      	movs	r2, #11
 8008f98:	761a      	strb	r2, [r3, #24]
      break;
 8008f9a:	e06b      	b.n	8009074 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008f9c:	7bbb      	ldrb	r3, [r7, #14]
 8008f9e:	2b05      	cmp	r3, #5
 8008fa0:	d168      	bne.n	8009074 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008fa2:	2303      	movs	r3, #3
 8008fa4:	73fb      	strb	r3, [r7, #15]
      break;
 8008fa6:	e065      	b.n	8009074 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	795b      	ldrb	r3, [r3, #5]
 8008fac:	2201      	movs	r2, #1
 8008fae:	9200      	str	r2, [sp, #0]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 f87f 	bl	80090b8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	220a      	movs	r2, #10
 8008fca:	761a      	strb	r2, [r3, #24]
      break;
 8008fcc:	e055      	b.n	800907a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	795b      	ldrb	r3, [r3, #5]
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 fbe1 	bl	800979c <USBH_LL_GetURBState>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008fde:	7bbb      	ldrb	r3, [r7, #14]
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d105      	bne.n	8008ff0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	220d      	movs	r2, #13
 8008fec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008fee:	e043      	b.n	8009078 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008ff0:	7bbb      	ldrb	r3, [r7, #14]
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d103      	bne.n	8008ffe <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2209      	movs	r2, #9
 8008ffa:	761a      	strb	r2, [r3, #24]
      break;
 8008ffc:	e03c      	b.n	8009078 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008ffe:	7bbb      	ldrb	r3, [r7, #14]
 8009000:	2b04      	cmp	r3, #4
 8009002:	d139      	bne.n	8009078 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	220b      	movs	r2, #11
 8009008:	761a      	strb	r2, [r3, #24]
      break;
 800900a:	e035      	b.n	8009078 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	7e5b      	ldrb	r3, [r3, #25]
 8009010:	3301      	adds	r3, #1
 8009012:	b2da      	uxtb	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	765a      	strb	r2, [r3, #25]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	7e5b      	ldrb	r3, [r3, #25]
 800901c:	2b02      	cmp	r3, #2
 800901e:	d806      	bhi.n	800902e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2201      	movs	r2, #1
 800902a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800902c:	e025      	b.n	800907a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009034:	2106      	movs	r1, #6
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	795b      	ldrb	r3, [r3, #5]
 8009044:	4619      	mov	r1, r3
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 f90c 	bl	8009264 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	791b      	ldrb	r3, [r3, #4]
 8009050:	4619      	mov	r1, r3
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f906 	bl	8009264 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800905e:	2302      	movs	r3, #2
 8009060:	73fb      	strb	r3, [r7, #15]
      break;
 8009062:	e00a      	b.n	800907a <USBH_HandleControl+0x2de>

    default:
      break;
 8009064:	bf00      	nop
 8009066:	e008      	b.n	800907a <USBH_HandleControl+0x2de>
      break;
 8009068:	bf00      	nop
 800906a:	e006      	b.n	800907a <USBH_HandleControl+0x2de>
      break;
 800906c:	bf00      	nop
 800906e:	e004      	b.n	800907a <USBH_HandleControl+0x2de>
      break;
 8009070:	bf00      	nop
 8009072:	e002      	b.n	800907a <USBH_HandleControl+0x2de>
      break;
 8009074:	bf00      	nop
 8009076:	e000      	b.n	800907a <USBH_HandleControl+0x2de>
      break;
 8009078:	bf00      	nop
  }

  return status;
 800907a:	7bfb      	ldrb	r3, [r7, #15]
}
 800907c:	4618      	mov	r0, r3
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b088      	sub	sp, #32
 8009088:	af04      	add	r7, sp, #16
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	4613      	mov	r3, r2
 8009090:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009092:	79f9      	ldrb	r1, [r7, #7]
 8009094:	2300      	movs	r3, #0
 8009096:	9303      	str	r3, [sp, #12]
 8009098:	2308      	movs	r3, #8
 800909a:	9302      	str	r3, [sp, #8]
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	9301      	str	r3, [sp, #4]
 80090a0:	2300      	movs	r3, #0
 80090a2:	9300      	str	r3, [sp, #0]
 80090a4:	2300      	movs	r3, #0
 80090a6:	2200      	movs	r2, #0
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	f000 fb46 	bl	800973a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3710      	adds	r7, #16
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b088      	sub	sp, #32
 80090bc:	af04      	add	r7, sp, #16
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	4611      	mov	r1, r2
 80090c4:	461a      	mov	r2, r3
 80090c6:	460b      	mov	r3, r1
 80090c8:	80fb      	strh	r3, [r7, #6]
 80090ca:	4613      	mov	r3, r2
 80090cc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d001      	beq.n	80090dc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80090d8:	2300      	movs	r3, #0
 80090da:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80090dc:	7979      	ldrb	r1, [r7, #5]
 80090de:	7e3b      	ldrb	r3, [r7, #24]
 80090e0:	9303      	str	r3, [sp, #12]
 80090e2:	88fb      	ldrh	r3, [r7, #6]
 80090e4:	9302      	str	r3, [sp, #8]
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	9301      	str	r3, [sp, #4]
 80090ea:	2301      	movs	r3, #1
 80090ec:	9300      	str	r3, [sp, #0]
 80090ee:	2300      	movs	r3, #0
 80090f0:	2200      	movs	r2, #0
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f000 fb21 	bl	800973a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80090f8:	2300      	movs	r3, #0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b088      	sub	sp, #32
 8009106:	af04      	add	r7, sp, #16
 8009108:	60f8      	str	r0, [r7, #12]
 800910a:	60b9      	str	r1, [r7, #8]
 800910c:	4611      	mov	r1, r2
 800910e:	461a      	mov	r2, r3
 8009110:	460b      	mov	r3, r1
 8009112:	80fb      	strh	r3, [r7, #6]
 8009114:	4613      	mov	r3, r2
 8009116:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009118:	7979      	ldrb	r1, [r7, #5]
 800911a:	2300      	movs	r3, #0
 800911c:	9303      	str	r3, [sp, #12]
 800911e:	88fb      	ldrh	r3, [r7, #6]
 8009120:	9302      	str	r3, [sp, #8]
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	9301      	str	r3, [sp, #4]
 8009126:	2301      	movs	r3, #1
 8009128:	9300      	str	r3, [sp, #0]
 800912a:	2300      	movs	r3, #0
 800912c:	2201      	movs	r2, #1
 800912e:	68f8      	ldr	r0, [r7, #12]
 8009130:	f000 fb03 	bl	800973a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009134:	2300      	movs	r3, #0

}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b088      	sub	sp, #32
 8009142:	af04      	add	r7, sp, #16
 8009144:	60f8      	str	r0, [r7, #12]
 8009146:	60b9      	str	r1, [r7, #8]
 8009148:	4611      	mov	r1, r2
 800914a:	461a      	mov	r2, r3
 800914c:	460b      	mov	r3, r1
 800914e:	80fb      	strh	r3, [r7, #6]
 8009150:	4613      	mov	r3, r2
 8009152:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800915a:	2b00      	cmp	r3, #0
 800915c:	d001      	beq.n	8009162 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800915e:	2300      	movs	r3, #0
 8009160:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009162:	7979      	ldrb	r1, [r7, #5]
 8009164:	7e3b      	ldrb	r3, [r7, #24]
 8009166:	9303      	str	r3, [sp, #12]
 8009168:	88fb      	ldrh	r3, [r7, #6]
 800916a:	9302      	str	r3, [sp, #8]
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	9301      	str	r3, [sp, #4]
 8009170:	2301      	movs	r3, #1
 8009172:	9300      	str	r3, [sp, #0]
 8009174:	2302      	movs	r3, #2
 8009176:	2200      	movs	r2, #0
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	f000 fade 	bl	800973a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800917e:	2300      	movs	r3, #0
}
 8009180:	4618      	mov	r0, r3
 8009182:	3710      	adds	r7, #16
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b088      	sub	sp, #32
 800918c:	af04      	add	r7, sp, #16
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	4611      	mov	r1, r2
 8009194:	461a      	mov	r2, r3
 8009196:	460b      	mov	r3, r1
 8009198:	80fb      	strh	r3, [r7, #6]
 800919a:	4613      	mov	r3, r2
 800919c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800919e:	7979      	ldrb	r1, [r7, #5]
 80091a0:	2300      	movs	r3, #0
 80091a2:	9303      	str	r3, [sp, #12]
 80091a4:	88fb      	ldrh	r3, [r7, #6]
 80091a6:	9302      	str	r3, [sp, #8]
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	9301      	str	r3, [sp, #4]
 80091ac:	2301      	movs	r3, #1
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	2302      	movs	r3, #2
 80091b2:	2201      	movs	r2, #1
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f000 fac0 	bl	800973a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80091ba:	2300      	movs	r3, #0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b086      	sub	sp, #24
 80091c8:	af04      	add	r7, sp, #16
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	4608      	mov	r0, r1
 80091ce:	4611      	mov	r1, r2
 80091d0:	461a      	mov	r2, r3
 80091d2:	4603      	mov	r3, r0
 80091d4:	70fb      	strb	r3, [r7, #3]
 80091d6:	460b      	mov	r3, r1
 80091d8:	70bb      	strb	r3, [r7, #2]
 80091da:	4613      	mov	r3, r2
 80091dc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80091de:	7878      	ldrb	r0, [r7, #1]
 80091e0:	78ba      	ldrb	r2, [r7, #2]
 80091e2:	78f9      	ldrb	r1, [r7, #3]
 80091e4:	8b3b      	ldrh	r3, [r7, #24]
 80091e6:	9302      	str	r3, [sp, #8]
 80091e8:	7d3b      	ldrb	r3, [r7, #20]
 80091ea:	9301      	str	r3, [sp, #4]
 80091ec:	7c3b      	ldrb	r3, [r7, #16]
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	4603      	mov	r3, r0
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 fa53 	bl	800969e <USBH_LL_OpenPipe>

  return USBH_OK;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3708      	adds	r7, #8
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009202:	b580      	push	{r7, lr}
 8009204:	b082      	sub	sp, #8
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
 800920a:	460b      	mov	r3, r1
 800920c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800920e:	78fb      	ldrb	r3, [r7, #3]
 8009210:	4619      	mov	r1, r3
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 fa72 	bl	80096fc <USBH_LL_ClosePipe>

  return USBH_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3708      	adds	r7, #8
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b084      	sub	sp, #16
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
 800922a:	460b      	mov	r3, r1
 800922c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f836 	bl	80092a0 <USBH_GetFreePipe>
 8009234:	4603      	mov	r3, r0
 8009236:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009238:	89fb      	ldrh	r3, [r7, #14]
 800923a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800923e:	4293      	cmp	r3, r2
 8009240:	d00a      	beq.n	8009258 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8009242:	78fa      	ldrb	r2, [r7, #3]
 8009244:	89fb      	ldrh	r3, [r7, #14]
 8009246:	f003 030f 	and.w	r3, r3, #15
 800924a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800924e:	6879      	ldr	r1, [r7, #4]
 8009250:	33e0      	adds	r3, #224	; 0xe0
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	440b      	add	r3, r1
 8009256:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009258:	89fb      	ldrh	r3, [r7, #14]
 800925a:	b2db      	uxtb	r3, r3
}
 800925c:	4618      	mov	r0, r3
 800925e:	3710      	adds	r7, #16
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	460b      	mov	r3, r1
 800926e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009270:	78fb      	ldrb	r3, [r7, #3]
 8009272:	2b0a      	cmp	r3, #10
 8009274:	d80d      	bhi.n	8009292 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009276:	78fb      	ldrb	r3, [r7, #3]
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	33e0      	adds	r3, #224	; 0xe0
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	4413      	add	r3, r2
 8009280:	685a      	ldr	r2, [r3, #4]
 8009282:	78fb      	ldrb	r3, [r7, #3]
 8009284:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009288:	6879      	ldr	r1, [r7, #4]
 800928a:	33e0      	adds	r3, #224	; 0xe0
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	440b      	add	r3, r1
 8009290:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80092a8:	2300      	movs	r3, #0
 80092aa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80092ac:	2300      	movs	r3, #0
 80092ae:	73fb      	strb	r3, [r7, #15]
 80092b0:	e00f      	b.n	80092d2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80092b2:	7bfb      	ldrb	r3, [r7, #15]
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	33e0      	adds	r3, #224	; 0xe0
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	4413      	add	r3, r2
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d102      	bne.n	80092cc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80092c6:	7bfb      	ldrb	r3, [r7, #15]
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	e007      	b.n	80092dc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80092cc:	7bfb      	ldrb	r3, [r7, #15]
 80092ce:	3301      	adds	r3, #1
 80092d0:	73fb      	strb	r3, [r7, #15]
 80092d2:	7bfb      	ldrb	r3, [r7, #15]
 80092d4:	2b0a      	cmp	r3, #10
 80092d6:	d9ec      	bls.n	80092b2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80092d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3714      	adds	r7, #20
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80092ec:	2201      	movs	r2, #1
 80092ee:	490e      	ldr	r1, [pc, #56]	; (8009328 <MX_USB_HOST_Init+0x40>)
 80092f0:	480e      	ldr	r0, [pc, #56]	; (800932c <MX_USB_HOST_Init+0x44>)
 80092f2:	f7fe fca1 	bl	8007c38 <USBH_Init>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d001      	beq.n	8009300 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80092fc:	f7f8 fbb6 	bl	8001a6c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009300:	490b      	ldr	r1, [pc, #44]	; (8009330 <MX_USB_HOST_Init+0x48>)
 8009302:	480a      	ldr	r0, [pc, #40]	; (800932c <MX_USB_HOST_Init+0x44>)
 8009304:	f7fe fd26 	bl	8007d54 <USBH_RegisterClass>
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d001      	beq.n	8009312 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800930e:	f7f8 fbad 	bl	8001a6c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009312:	4806      	ldr	r0, [pc, #24]	; (800932c <MX_USB_HOST_Init+0x44>)
 8009314:	f7fe fdaa 	bl	8007e6c <USBH_Start>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d001      	beq.n	8009322 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800931e:	f7f8 fba5 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009322:	bf00      	nop
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	08009349 	.word	0x08009349
 800932c:	20000654 	.word	0x20000654
 8009330:	2000032c 	.word	0x2000032c

08009334 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009338:	4802      	ldr	r0, [pc, #8]	; (8009344 <MX_USB_HOST_Process+0x10>)
 800933a:	f7fe fda7 	bl	8007e8c <USBH_Process>
}
 800933e:	bf00      	nop
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	20000654 	.word	0x20000654

08009348 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	460b      	mov	r3, r1
 8009352:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009354:	78fb      	ldrb	r3, [r7, #3]
 8009356:	3b01      	subs	r3, #1
 8009358:	2b04      	cmp	r3, #4
 800935a:	d819      	bhi.n	8009390 <USBH_UserProcess+0x48>
 800935c:	a201      	add	r2, pc, #4	; (adr r2, 8009364 <USBH_UserProcess+0x1c>)
 800935e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009362:	bf00      	nop
 8009364:	08009391 	.word	0x08009391
 8009368:	08009381 	.word	0x08009381
 800936c:	08009391 	.word	0x08009391
 8009370:	08009389 	.word	0x08009389
 8009374:	08009379 	.word	0x08009379
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009378:	4b09      	ldr	r3, [pc, #36]	; (80093a0 <USBH_UserProcess+0x58>)
 800937a:	2203      	movs	r2, #3
 800937c:	701a      	strb	r2, [r3, #0]
  break;
 800937e:	e008      	b.n	8009392 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009380:	4b07      	ldr	r3, [pc, #28]	; (80093a0 <USBH_UserProcess+0x58>)
 8009382:	2202      	movs	r2, #2
 8009384:	701a      	strb	r2, [r3, #0]
  break;
 8009386:	e004      	b.n	8009392 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009388:	4b05      	ldr	r3, [pc, #20]	; (80093a0 <USBH_UserProcess+0x58>)
 800938a:	2201      	movs	r2, #1
 800938c:	701a      	strb	r2, [r3, #0]
  break;
 800938e:	e000      	b.n	8009392 <USBH_UserProcess+0x4a>

  default:
  break;
 8009390:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009392:	bf00      	nop
 8009394:	370c      	adds	r7, #12
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop
 80093a0:	20000544 	.word	0x20000544

080093a4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b08a      	sub	sp, #40	; 0x28
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093ac:	f107 0314 	add.w	r3, r7, #20
 80093b0:	2200      	movs	r2, #0
 80093b2:	601a      	str	r2, [r3, #0]
 80093b4:	605a      	str	r2, [r3, #4]
 80093b6:	609a      	str	r2, [r3, #8]
 80093b8:	60da      	str	r2, [r3, #12]
 80093ba:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093c4:	d147      	bne.n	8009456 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093c6:	2300      	movs	r3, #0
 80093c8:	613b      	str	r3, [r7, #16]
 80093ca:	4b25      	ldr	r3, [pc, #148]	; (8009460 <HAL_HCD_MspInit+0xbc>)
 80093cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ce:	4a24      	ldr	r2, [pc, #144]	; (8009460 <HAL_HCD_MspInit+0xbc>)
 80093d0:	f043 0301 	orr.w	r3, r3, #1
 80093d4:	6313      	str	r3, [r2, #48]	; 0x30
 80093d6:	4b22      	ldr	r3, [pc, #136]	; (8009460 <HAL_HCD_MspInit+0xbc>)
 80093d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093da:	f003 0301 	and.w	r3, r3, #1
 80093de:	613b      	str	r3, [r7, #16]
 80093e0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80093e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80093e8:	2300      	movs	r3, #0
 80093ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093ec:	2300      	movs	r3, #0
 80093ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80093f0:	f107 0314 	add.w	r3, r7, #20
 80093f4:	4619      	mov	r1, r3
 80093f6:	481b      	ldr	r0, [pc, #108]	; (8009464 <HAL_HCD_MspInit+0xc0>)
 80093f8:	f7fa f80c 	bl	8003414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80093fc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009402:	2302      	movs	r3, #2
 8009404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009406:	2300      	movs	r3, #0
 8009408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800940a:	2300      	movs	r3, #0
 800940c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800940e:	230a      	movs	r3, #10
 8009410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009412:	f107 0314 	add.w	r3, r7, #20
 8009416:	4619      	mov	r1, r3
 8009418:	4812      	ldr	r0, [pc, #72]	; (8009464 <HAL_HCD_MspInit+0xc0>)
 800941a:	f7f9 fffb 	bl	8003414 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800941e:	4b10      	ldr	r3, [pc, #64]	; (8009460 <HAL_HCD_MspInit+0xbc>)
 8009420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009422:	4a0f      	ldr	r2, [pc, #60]	; (8009460 <HAL_HCD_MspInit+0xbc>)
 8009424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009428:	6353      	str	r3, [r2, #52]	; 0x34
 800942a:	2300      	movs	r3, #0
 800942c:	60fb      	str	r3, [r7, #12]
 800942e:	4b0c      	ldr	r3, [pc, #48]	; (8009460 <HAL_HCD_MspInit+0xbc>)
 8009430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009432:	4a0b      	ldr	r2, [pc, #44]	; (8009460 <HAL_HCD_MspInit+0xbc>)
 8009434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009438:	6453      	str	r3, [r2, #68]	; 0x44
 800943a:	4b09      	ldr	r3, [pc, #36]	; (8009460 <HAL_HCD_MspInit+0xbc>)
 800943c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800943e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009442:	60fb      	str	r3, [r7, #12]
 8009444:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009446:	2200      	movs	r2, #0
 8009448:	2100      	movs	r1, #0
 800944a:	2043      	movs	r0, #67	; 0x43
 800944c:	f7f9 fcc1 	bl	8002dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009450:	2043      	movs	r0, #67	; 0x43
 8009452:	f7f9 fcda 	bl	8002e0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009456:	bf00      	nop
 8009458:	3728      	adds	r7, #40	; 0x28
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	40023800 	.word	0x40023800
 8009464:	40020000 	.word	0x40020000

08009468 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009476:	4618      	mov	r0, r3
 8009478:	f7ff f8db 	bl	8008632 <USBH_LL_IncTimer>
}
 800947c:	bf00      	nop
 800947e:	3708      	adds	r7, #8
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009492:	4618      	mov	r0, r3
 8009494:	f7ff f913 	bl	80086be <USBH_LL_Connect>
}
 8009498:	bf00      	nop
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7ff f91c 	bl	80086ec <USBH_LL_Disconnect>
}
 80094b4:	bf00      	nop
 80094b6:	3708      	adds	r7, #8
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	460b      	mov	r3, r1
 80094c6:	70fb      	strb	r3, [r7, #3]
 80094c8:	4613      	mov	r3, r2
 80094ca:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80094cc:	bf00      	nop
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b082      	sub	sp, #8
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7ff f8cd 	bl	8008686 <USBH_LL_PortEnabled>
}
 80094ec:	bf00      	nop
 80094ee:	3708      	adds	r7, #8
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009502:	4618      	mov	r0, r3
 8009504:	f7ff f8cd 	bl	80086a2 <USBH_LL_PortDisabled>
}
 8009508:	bf00      	nop
 800950a:	3708      	adds	r7, #8
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800951e:	2b01      	cmp	r3, #1
 8009520:	d12a      	bne.n	8009578 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009522:	4a18      	ldr	r2, [pc, #96]	; (8009584 <USBH_LL_Init+0x74>)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4a15      	ldr	r2, [pc, #84]	; (8009584 <USBH_LL_Init+0x74>)
 800952e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009532:	4b14      	ldr	r3, [pc, #80]	; (8009584 <USBH_LL_Init+0x74>)
 8009534:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009538:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800953a:	4b12      	ldr	r3, [pc, #72]	; (8009584 <USBH_LL_Init+0x74>)
 800953c:	2208      	movs	r2, #8
 800953e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009540:	4b10      	ldr	r3, [pc, #64]	; (8009584 <USBH_LL_Init+0x74>)
 8009542:	2201      	movs	r2, #1
 8009544:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009546:	4b0f      	ldr	r3, [pc, #60]	; (8009584 <USBH_LL_Init+0x74>)
 8009548:	2200      	movs	r2, #0
 800954a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800954c:	4b0d      	ldr	r3, [pc, #52]	; (8009584 <USBH_LL_Init+0x74>)
 800954e:	2202      	movs	r2, #2
 8009550:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009552:	4b0c      	ldr	r3, [pc, #48]	; (8009584 <USBH_LL_Init+0x74>)
 8009554:	2200      	movs	r2, #0
 8009556:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009558:	480a      	ldr	r0, [pc, #40]	; (8009584 <USBH_LL_Init+0x74>)
 800955a:	f7fa f910 	bl	800377e <HAL_HCD_Init>
 800955e:	4603      	mov	r3, r0
 8009560:	2b00      	cmp	r3, #0
 8009562:	d001      	beq.n	8009568 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009564:	f7f8 fa82 	bl	8001a6c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009568:	4806      	ldr	r0, [pc, #24]	; (8009584 <USBH_LL_Init+0x74>)
 800956a:	f7fa fcf4 	bl	8003f56 <HAL_HCD_GetCurrentFrame>
 800956e:	4603      	mov	r3, r0
 8009570:	4619      	mov	r1, r3
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f7ff f84e 	bl	8008614 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009578:	2300      	movs	r3, #0
}
 800957a:	4618      	mov	r0, r3
 800957c:	3708      	adds	r7, #8
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	20000a2c 	.word	0x20000a2c

08009588 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009590:	2300      	movs	r3, #0
 8009592:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009594:	2300      	movs	r3, #0
 8009596:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800959e:	4618      	mov	r0, r3
 80095a0:	f7fa fc63 	bl	8003e6a <HAL_HCD_Start>
 80095a4:	4603      	mov	r3, r0
 80095a6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80095a8:	7bfb      	ldrb	r3, [r7, #15]
 80095aa:	4618      	mov	r0, r3
 80095ac:	f000 f95c 	bl	8009868 <USBH_Get_USB_Status>
 80095b0:	4603      	mov	r3, r0
 80095b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b084      	sub	sp, #16
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095c6:	2300      	movs	r3, #0
 80095c8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80095ca:	2300      	movs	r3, #0
 80095cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7fa fc6b 	bl	8003eb0 <HAL_HCD_Stop>
 80095da:	4603      	mov	r3, r0
 80095dc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80095de:	7bfb      	ldrb	r3, [r7, #15]
 80095e0:	4618      	mov	r0, r3
 80095e2:	f000 f941 	bl	8009868 <USBH_Get_USB_Status>
 80095e6:	4603      	mov	r3, r0
 80095e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3710      	adds	r7, #16
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80095fc:	2301      	movs	r3, #1
 80095fe:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009606:	4618      	mov	r0, r3
 8009608:	f7fa fcb3 	bl	8003f72 <HAL_HCD_GetCurrentSpeed>
 800960c:	4603      	mov	r3, r0
 800960e:	2b02      	cmp	r3, #2
 8009610:	d00c      	beq.n	800962c <USBH_LL_GetSpeed+0x38>
 8009612:	2b02      	cmp	r3, #2
 8009614:	d80d      	bhi.n	8009632 <USBH_LL_GetSpeed+0x3e>
 8009616:	2b00      	cmp	r3, #0
 8009618:	d002      	beq.n	8009620 <USBH_LL_GetSpeed+0x2c>
 800961a:	2b01      	cmp	r3, #1
 800961c:	d003      	beq.n	8009626 <USBH_LL_GetSpeed+0x32>
 800961e:	e008      	b.n	8009632 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009620:	2300      	movs	r3, #0
 8009622:	73fb      	strb	r3, [r7, #15]
    break;
 8009624:	e008      	b.n	8009638 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009626:	2301      	movs	r3, #1
 8009628:	73fb      	strb	r3, [r7, #15]
    break;
 800962a:	e005      	b.n	8009638 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800962c:	2302      	movs	r3, #2
 800962e:	73fb      	strb	r3, [r7, #15]
    break;
 8009630:	e002      	b.n	8009638 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009632:	2301      	movs	r3, #1
 8009634:	73fb      	strb	r3, [r7, #15]
    break;
 8009636:	bf00      	nop
  }
  return  speed;
 8009638:	7bfb      	ldrb	r3, [r7, #15]
}
 800963a:	4618      	mov	r0, r3
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b084      	sub	sp, #16
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800964a:	2300      	movs	r3, #0
 800964c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800964e:	2300      	movs	r3, #0
 8009650:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009658:	4618      	mov	r0, r3
 800965a:	f7fa fc46 	bl	8003eea <HAL_HCD_ResetPort>
 800965e:	4603      	mov	r3, r0
 8009660:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009662:	7bfb      	ldrb	r3, [r7, #15]
 8009664:	4618      	mov	r0, r3
 8009666:	f000 f8ff 	bl	8009868 <USBH_Get_USB_Status>
 800966a:	4603      	mov	r3, r0
 800966c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800966e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	460b      	mov	r3, r1
 8009682:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800968a:	78fa      	ldrb	r2, [r7, #3]
 800968c:	4611      	mov	r1, r2
 800968e:	4618      	mov	r0, r3
 8009690:	f7fa fc4d 	bl	8003f2e <HAL_HCD_HC_GetXferCount>
 8009694:	4603      	mov	r3, r0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3708      	adds	r7, #8
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800969e:	b590      	push	{r4, r7, lr}
 80096a0:	b089      	sub	sp, #36	; 0x24
 80096a2:	af04      	add	r7, sp, #16
 80096a4:	6078      	str	r0, [r7, #4]
 80096a6:	4608      	mov	r0, r1
 80096a8:	4611      	mov	r1, r2
 80096aa:	461a      	mov	r2, r3
 80096ac:	4603      	mov	r3, r0
 80096ae:	70fb      	strb	r3, [r7, #3]
 80096b0:	460b      	mov	r3, r1
 80096b2:	70bb      	strb	r3, [r7, #2]
 80096b4:	4613      	mov	r3, r2
 80096b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096b8:	2300      	movs	r3, #0
 80096ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096bc:	2300      	movs	r3, #0
 80096be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80096c6:	787c      	ldrb	r4, [r7, #1]
 80096c8:	78ba      	ldrb	r2, [r7, #2]
 80096ca:	78f9      	ldrb	r1, [r7, #3]
 80096cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80096ce:	9302      	str	r3, [sp, #8]
 80096d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80096d4:	9301      	str	r3, [sp, #4]
 80096d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80096da:	9300      	str	r3, [sp, #0]
 80096dc:	4623      	mov	r3, r4
 80096de:	f7fa f8b0 	bl	8003842 <HAL_HCD_HC_Init>
 80096e2:	4603      	mov	r3, r0
 80096e4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80096e6:	7bfb      	ldrb	r3, [r7, #15]
 80096e8:	4618      	mov	r0, r3
 80096ea:	f000 f8bd 	bl	8009868 <USBH_Get_USB_Status>
 80096ee:	4603      	mov	r3, r0
 80096f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3714      	adds	r7, #20
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd90      	pop	{r4, r7, pc}

080096fc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	460b      	mov	r3, r1
 8009706:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009708:	2300      	movs	r3, #0
 800970a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800970c:	2300      	movs	r3, #0
 800970e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009716:	78fa      	ldrb	r2, [r7, #3]
 8009718:	4611      	mov	r1, r2
 800971a:	4618      	mov	r0, r3
 800971c:	f7fa f920 	bl	8003960 <HAL_HCD_HC_Halt>
 8009720:	4603      	mov	r3, r0
 8009722:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009724:	7bfb      	ldrb	r3, [r7, #15]
 8009726:	4618      	mov	r0, r3
 8009728:	f000 f89e 	bl	8009868 <USBH_Get_USB_Status>
 800972c:	4603      	mov	r3, r0
 800972e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009730:	7bbb      	ldrb	r3, [r7, #14]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800973a:	b590      	push	{r4, r7, lr}
 800973c:	b089      	sub	sp, #36	; 0x24
 800973e:	af04      	add	r7, sp, #16
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	4608      	mov	r0, r1
 8009744:	4611      	mov	r1, r2
 8009746:	461a      	mov	r2, r3
 8009748:	4603      	mov	r3, r0
 800974a:	70fb      	strb	r3, [r7, #3]
 800974c:	460b      	mov	r3, r1
 800974e:	70bb      	strb	r3, [r7, #2]
 8009750:	4613      	mov	r3, r2
 8009752:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009754:	2300      	movs	r3, #0
 8009756:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009758:	2300      	movs	r3, #0
 800975a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009762:	787c      	ldrb	r4, [r7, #1]
 8009764:	78ba      	ldrb	r2, [r7, #2]
 8009766:	78f9      	ldrb	r1, [r7, #3]
 8009768:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800976c:	9303      	str	r3, [sp, #12]
 800976e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009770:	9302      	str	r3, [sp, #8]
 8009772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009774:	9301      	str	r3, [sp, #4]
 8009776:	f897 3020 	ldrb.w	r3, [r7, #32]
 800977a:	9300      	str	r3, [sp, #0]
 800977c:	4623      	mov	r3, r4
 800977e:	f7fa f913 	bl	80039a8 <HAL_HCD_HC_SubmitRequest>
 8009782:	4603      	mov	r3, r0
 8009784:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009786:	7bfb      	ldrb	r3, [r7, #15]
 8009788:	4618      	mov	r0, r3
 800978a:	f000 f86d 	bl	8009868 <USBH_Get_USB_Status>
 800978e:	4603      	mov	r3, r0
 8009790:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009792:	7bbb      	ldrb	r3, [r7, #14]
}
 8009794:	4618      	mov	r0, r3
 8009796:	3714      	adds	r7, #20
 8009798:	46bd      	mov	sp, r7
 800979a:	bd90      	pop	{r4, r7, pc}

0800979c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	460b      	mov	r3, r1
 80097a6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80097ae:	78fa      	ldrb	r2, [r7, #3]
 80097b0:	4611      	mov	r1, r2
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7fa fba7 	bl	8003f06 <HAL_HCD_HC_GetURBState>
 80097b8:	4603      	mov	r3, r0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3708      	adds	r7, #8
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b082      	sub	sp, #8
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
 80097ca:	460b      	mov	r3, r1
 80097cc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d103      	bne.n	80097e0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80097d8:	78fb      	ldrb	r3, [r7, #3]
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 f870 	bl	80098c0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80097e0:	20c8      	movs	r0, #200	; 0xc8
 80097e2:	f7f9 f9f7 	bl	8002bd4 <HAL_Delay>
  return USBH_OK;
 80097e6:	2300      	movs	r3, #0
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3708      	adds	r7, #8
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b085      	sub	sp, #20
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	460b      	mov	r3, r1
 80097fa:	70fb      	strb	r3, [r7, #3]
 80097fc:	4613      	mov	r3, r2
 80097fe:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009806:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009808:	78fb      	ldrb	r3, [r7, #3]
 800980a:	68fa      	ldr	r2, [r7, #12]
 800980c:	212c      	movs	r1, #44	; 0x2c
 800980e:	fb01 f303 	mul.w	r3, r1, r3
 8009812:	4413      	add	r3, r2
 8009814:	333b      	adds	r3, #59	; 0x3b
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d009      	beq.n	8009830 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800981c:	78fb      	ldrb	r3, [r7, #3]
 800981e:	68fa      	ldr	r2, [r7, #12]
 8009820:	212c      	movs	r1, #44	; 0x2c
 8009822:	fb01 f303 	mul.w	r3, r1, r3
 8009826:	4413      	add	r3, r2
 8009828:	3354      	adds	r3, #84	; 0x54
 800982a:	78ba      	ldrb	r2, [r7, #2]
 800982c:	701a      	strb	r2, [r3, #0]
 800982e:	e008      	b.n	8009842 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009830:	78fb      	ldrb	r3, [r7, #3]
 8009832:	68fa      	ldr	r2, [r7, #12]
 8009834:	212c      	movs	r1, #44	; 0x2c
 8009836:	fb01 f303 	mul.w	r3, r1, r3
 800983a:	4413      	add	r3, r2
 800983c:	3355      	adds	r3, #85	; 0x55
 800983e:	78ba      	ldrb	r2, [r7, #2]
 8009840:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009842:	2300      	movs	r3, #0
}
 8009844:	4618      	mov	r0, r3
 8009846:	3714      	adds	r7, #20
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f7f9 f9bb 	bl	8002bd4 <HAL_Delay>
}
 800985e:	bf00      	nop
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
	...

08009868 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	4603      	mov	r3, r0
 8009870:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009872:	2300      	movs	r3, #0
 8009874:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009876:	79fb      	ldrb	r3, [r7, #7]
 8009878:	2b03      	cmp	r3, #3
 800987a:	d817      	bhi.n	80098ac <USBH_Get_USB_Status+0x44>
 800987c:	a201      	add	r2, pc, #4	; (adr r2, 8009884 <USBH_Get_USB_Status+0x1c>)
 800987e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009882:	bf00      	nop
 8009884:	08009895 	.word	0x08009895
 8009888:	0800989b 	.word	0x0800989b
 800988c:	080098a1 	.word	0x080098a1
 8009890:	080098a7 	.word	0x080098a7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009894:	2300      	movs	r3, #0
 8009896:	73fb      	strb	r3, [r7, #15]
    break;
 8009898:	e00b      	b.n	80098b2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800989a:	2302      	movs	r3, #2
 800989c:	73fb      	strb	r3, [r7, #15]
    break;
 800989e:	e008      	b.n	80098b2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80098a0:	2301      	movs	r3, #1
 80098a2:	73fb      	strb	r3, [r7, #15]
    break;
 80098a4:	e005      	b.n	80098b2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80098a6:	2302      	movs	r3, #2
 80098a8:	73fb      	strb	r3, [r7, #15]
    break;
 80098aa:	e002      	b.n	80098b2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80098ac:	2302      	movs	r3, #2
 80098ae:	73fb      	strb	r3, [r7, #15]
    break;
 80098b0:	bf00      	nop
  }
  return usb_status;
 80098b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3714      	adds	r7, #20
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	4603      	mov	r3, r0
 80098c8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80098ca:	79fb      	ldrb	r3, [r7, #7]
 80098cc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80098ce:	79fb      	ldrb	r3, [r7, #7]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d102      	bne.n	80098da <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80098d4:	2300      	movs	r3, #0
 80098d6:	73fb      	strb	r3, [r7, #15]
 80098d8:	e001      	b.n	80098de <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80098da:	2301      	movs	r3, #1
 80098dc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80098de:	7bfb      	ldrb	r3, [r7, #15]
 80098e0:	461a      	mov	r2, r3
 80098e2:	2101      	movs	r1, #1
 80098e4:	4803      	ldr	r0, [pc, #12]	; (80098f4 <MX_DriverVbusFS+0x34>)
 80098e6:	f7f9 ff31 	bl	800374c <HAL_GPIO_WritePin>
}
 80098ea:	bf00      	nop
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop
 80098f4:	40020800 	.word	0x40020800

080098f8 <atof>:
 80098f8:	2100      	movs	r1, #0
 80098fa:	f000 bf5b 	b.w	800a7b4 <strtod>

080098fe <atoi>:
 80098fe:	220a      	movs	r2, #10
 8009900:	2100      	movs	r1, #0
 8009902:	f001 b843 	b.w	800a98c <strtol>
	...

08009908 <__errno>:
 8009908:	4b01      	ldr	r3, [pc, #4]	; (8009910 <__errno+0x8>)
 800990a:	6818      	ldr	r0, [r3, #0]
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	2000034c 	.word	0x2000034c

08009914 <__libc_init_array>:
 8009914:	b570      	push	{r4, r5, r6, lr}
 8009916:	4d0d      	ldr	r5, [pc, #52]	; (800994c <__libc_init_array+0x38>)
 8009918:	4c0d      	ldr	r4, [pc, #52]	; (8009950 <__libc_init_array+0x3c>)
 800991a:	1b64      	subs	r4, r4, r5
 800991c:	10a4      	asrs	r4, r4, #2
 800991e:	2600      	movs	r6, #0
 8009920:	42a6      	cmp	r6, r4
 8009922:	d109      	bne.n	8009938 <__libc_init_array+0x24>
 8009924:	4d0b      	ldr	r5, [pc, #44]	; (8009954 <__libc_init_array+0x40>)
 8009926:	4c0c      	ldr	r4, [pc, #48]	; (8009958 <__libc_init_array+0x44>)
 8009928:	f005 fae0 	bl	800eeec <_init>
 800992c:	1b64      	subs	r4, r4, r5
 800992e:	10a4      	asrs	r4, r4, #2
 8009930:	2600      	movs	r6, #0
 8009932:	42a6      	cmp	r6, r4
 8009934:	d105      	bne.n	8009942 <__libc_init_array+0x2e>
 8009936:	bd70      	pop	{r4, r5, r6, pc}
 8009938:	f855 3b04 	ldr.w	r3, [r5], #4
 800993c:	4798      	blx	r3
 800993e:	3601      	adds	r6, #1
 8009940:	e7ee      	b.n	8009920 <__libc_init_array+0xc>
 8009942:	f855 3b04 	ldr.w	r3, [r5], #4
 8009946:	4798      	blx	r3
 8009948:	3601      	adds	r6, #1
 800994a:	e7f2      	b.n	8009932 <__libc_init_array+0x1e>
 800994c:	0800f6b0 	.word	0x0800f6b0
 8009950:	0800f6b0 	.word	0x0800f6b0
 8009954:	0800f6b0 	.word	0x0800f6b0
 8009958:	0800f6b4 	.word	0x0800f6b4

0800995c <malloc>:
 800995c:	4b02      	ldr	r3, [pc, #8]	; (8009968 <malloc+0xc>)
 800995e:	4601      	mov	r1, r0
 8009960:	6818      	ldr	r0, [r3, #0]
 8009962:	f000 b863 	b.w	8009a2c <_malloc_r>
 8009966:	bf00      	nop
 8009968:	2000034c 	.word	0x2000034c

0800996c <free>:
 800996c:	4b02      	ldr	r3, [pc, #8]	; (8009978 <free+0xc>)
 800996e:	4601      	mov	r1, r0
 8009970:	6818      	ldr	r0, [r3, #0]
 8009972:	f000 b80b 	b.w	800998c <_free_r>
 8009976:	bf00      	nop
 8009978:	2000034c 	.word	0x2000034c

0800997c <memset>:
 800997c:	4402      	add	r2, r0
 800997e:	4603      	mov	r3, r0
 8009980:	4293      	cmp	r3, r2
 8009982:	d100      	bne.n	8009986 <memset+0xa>
 8009984:	4770      	bx	lr
 8009986:	f803 1b01 	strb.w	r1, [r3], #1
 800998a:	e7f9      	b.n	8009980 <memset+0x4>

0800998c <_free_r>:
 800998c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800998e:	2900      	cmp	r1, #0
 8009990:	d048      	beq.n	8009a24 <_free_r+0x98>
 8009992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009996:	9001      	str	r0, [sp, #4]
 8009998:	2b00      	cmp	r3, #0
 800999a:	f1a1 0404 	sub.w	r4, r1, #4
 800999e:	bfb8      	it	lt
 80099a0:	18e4      	addlt	r4, r4, r3
 80099a2:	f001 fbbd 	bl	800b120 <__malloc_lock>
 80099a6:	4a20      	ldr	r2, [pc, #128]	; (8009a28 <_free_r+0x9c>)
 80099a8:	9801      	ldr	r0, [sp, #4]
 80099aa:	6813      	ldr	r3, [r2, #0]
 80099ac:	4615      	mov	r5, r2
 80099ae:	b933      	cbnz	r3, 80099be <_free_r+0x32>
 80099b0:	6063      	str	r3, [r4, #4]
 80099b2:	6014      	str	r4, [r2, #0]
 80099b4:	b003      	add	sp, #12
 80099b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099ba:	f001 bbb7 	b.w	800b12c <__malloc_unlock>
 80099be:	42a3      	cmp	r3, r4
 80099c0:	d90b      	bls.n	80099da <_free_r+0x4e>
 80099c2:	6821      	ldr	r1, [r4, #0]
 80099c4:	1862      	adds	r2, r4, r1
 80099c6:	4293      	cmp	r3, r2
 80099c8:	bf04      	itt	eq
 80099ca:	681a      	ldreq	r2, [r3, #0]
 80099cc:	685b      	ldreq	r3, [r3, #4]
 80099ce:	6063      	str	r3, [r4, #4]
 80099d0:	bf04      	itt	eq
 80099d2:	1852      	addeq	r2, r2, r1
 80099d4:	6022      	streq	r2, [r4, #0]
 80099d6:	602c      	str	r4, [r5, #0]
 80099d8:	e7ec      	b.n	80099b4 <_free_r+0x28>
 80099da:	461a      	mov	r2, r3
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	b10b      	cbz	r3, 80099e4 <_free_r+0x58>
 80099e0:	42a3      	cmp	r3, r4
 80099e2:	d9fa      	bls.n	80099da <_free_r+0x4e>
 80099e4:	6811      	ldr	r1, [r2, #0]
 80099e6:	1855      	adds	r5, r2, r1
 80099e8:	42a5      	cmp	r5, r4
 80099ea:	d10b      	bne.n	8009a04 <_free_r+0x78>
 80099ec:	6824      	ldr	r4, [r4, #0]
 80099ee:	4421      	add	r1, r4
 80099f0:	1854      	adds	r4, r2, r1
 80099f2:	42a3      	cmp	r3, r4
 80099f4:	6011      	str	r1, [r2, #0]
 80099f6:	d1dd      	bne.n	80099b4 <_free_r+0x28>
 80099f8:	681c      	ldr	r4, [r3, #0]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	6053      	str	r3, [r2, #4]
 80099fe:	4421      	add	r1, r4
 8009a00:	6011      	str	r1, [r2, #0]
 8009a02:	e7d7      	b.n	80099b4 <_free_r+0x28>
 8009a04:	d902      	bls.n	8009a0c <_free_r+0x80>
 8009a06:	230c      	movs	r3, #12
 8009a08:	6003      	str	r3, [r0, #0]
 8009a0a:	e7d3      	b.n	80099b4 <_free_r+0x28>
 8009a0c:	6825      	ldr	r5, [r4, #0]
 8009a0e:	1961      	adds	r1, r4, r5
 8009a10:	428b      	cmp	r3, r1
 8009a12:	bf04      	itt	eq
 8009a14:	6819      	ldreq	r1, [r3, #0]
 8009a16:	685b      	ldreq	r3, [r3, #4]
 8009a18:	6063      	str	r3, [r4, #4]
 8009a1a:	bf04      	itt	eq
 8009a1c:	1949      	addeq	r1, r1, r5
 8009a1e:	6021      	streq	r1, [r4, #0]
 8009a20:	6054      	str	r4, [r2, #4]
 8009a22:	e7c7      	b.n	80099b4 <_free_r+0x28>
 8009a24:	b003      	add	sp, #12
 8009a26:	bd30      	pop	{r4, r5, pc}
 8009a28:	20000548 	.word	0x20000548

08009a2c <_malloc_r>:
 8009a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a2e:	1ccd      	adds	r5, r1, #3
 8009a30:	f025 0503 	bic.w	r5, r5, #3
 8009a34:	3508      	adds	r5, #8
 8009a36:	2d0c      	cmp	r5, #12
 8009a38:	bf38      	it	cc
 8009a3a:	250c      	movcc	r5, #12
 8009a3c:	2d00      	cmp	r5, #0
 8009a3e:	4606      	mov	r6, r0
 8009a40:	db01      	blt.n	8009a46 <_malloc_r+0x1a>
 8009a42:	42a9      	cmp	r1, r5
 8009a44:	d903      	bls.n	8009a4e <_malloc_r+0x22>
 8009a46:	230c      	movs	r3, #12
 8009a48:	6033      	str	r3, [r6, #0]
 8009a4a:	2000      	movs	r0, #0
 8009a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a4e:	f001 fb67 	bl	800b120 <__malloc_lock>
 8009a52:	4921      	ldr	r1, [pc, #132]	; (8009ad8 <_malloc_r+0xac>)
 8009a54:	680a      	ldr	r2, [r1, #0]
 8009a56:	4614      	mov	r4, r2
 8009a58:	b99c      	cbnz	r4, 8009a82 <_malloc_r+0x56>
 8009a5a:	4f20      	ldr	r7, [pc, #128]	; (8009adc <_malloc_r+0xb0>)
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	b923      	cbnz	r3, 8009a6a <_malloc_r+0x3e>
 8009a60:	4621      	mov	r1, r4
 8009a62:	4630      	mov	r0, r6
 8009a64:	f000 f83c 	bl	8009ae0 <_sbrk_r>
 8009a68:	6038      	str	r0, [r7, #0]
 8009a6a:	4629      	mov	r1, r5
 8009a6c:	4630      	mov	r0, r6
 8009a6e:	f000 f837 	bl	8009ae0 <_sbrk_r>
 8009a72:	1c43      	adds	r3, r0, #1
 8009a74:	d123      	bne.n	8009abe <_malloc_r+0x92>
 8009a76:	230c      	movs	r3, #12
 8009a78:	6033      	str	r3, [r6, #0]
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	f001 fb56 	bl	800b12c <__malloc_unlock>
 8009a80:	e7e3      	b.n	8009a4a <_malloc_r+0x1e>
 8009a82:	6823      	ldr	r3, [r4, #0]
 8009a84:	1b5b      	subs	r3, r3, r5
 8009a86:	d417      	bmi.n	8009ab8 <_malloc_r+0x8c>
 8009a88:	2b0b      	cmp	r3, #11
 8009a8a:	d903      	bls.n	8009a94 <_malloc_r+0x68>
 8009a8c:	6023      	str	r3, [r4, #0]
 8009a8e:	441c      	add	r4, r3
 8009a90:	6025      	str	r5, [r4, #0]
 8009a92:	e004      	b.n	8009a9e <_malloc_r+0x72>
 8009a94:	6863      	ldr	r3, [r4, #4]
 8009a96:	42a2      	cmp	r2, r4
 8009a98:	bf0c      	ite	eq
 8009a9a:	600b      	streq	r3, [r1, #0]
 8009a9c:	6053      	strne	r3, [r2, #4]
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	f001 fb44 	bl	800b12c <__malloc_unlock>
 8009aa4:	f104 000b 	add.w	r0, r4, #11
 8009aa8:	1d23      	adds	r3, r4, #4
 8009aaa:	f020 0007 	bic.w	r0, r0, #7
 8009aae:	1ac2      	subs	r2, r0, r3
 8009ab0:	d0cc      	beq.n	8009a4c <_malloc_r+0x20>
 8009ab2:	1a1b      	subs	r3, r3, r0
 8009ab4:	50a3      	str	r3, [r4, r2]
 8009ab6:	e7c9      	b.n	8009a4c <_malloc_r+0x20>
 8009ab8:	4622      	mov	r2, r4
 8009aba:	6864      	ldr	r4, [r4, #4]
 8009abc:	e7cc      	b.n	8009a58 <_malloc_r+0x2c>
 8009abe:	1cc4      	adds	r4, r0, #3
 8009ac0:	f024 0403 	bic.w	r4, r4, #3
 8009ac4:	42a0      	cmp	r0, r4
 8009ac6:	d0e3      	beq.n	8009a90 <_malloc_r+0x64>
 8009ac8:	1a21      	subs	r1, r4, r0
 8009aca:	4630      	mov	r0, r6
 8009acc:	f000 f808 	bl	8009ae0 <_sbrk_r>
 8009ad0:	3001      	adds	r0, #1
 8009ad2:	d1dd      	bne.n	8009a90 <_malloc_r+0x64>
 8009ad4:	e7cf      	b.n	8009a76 <_malloc_r+0x4a>
 8009ad6:	bf00      	nop
 8009ad8:	20000548 	.word	0x20000548
 8009adc:	2000054c 	.word	0x2000054c

08009ae0 <_sbrk_r>:
 8009ae0:	b538      	push	{r3, r4, r5, lr}
 8009ae2:	4d06      	ldr	r5, [pc, #24]	; (8009afc <_sbrk_r+0x1c>)
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	4604      	mov	r4, r0
 8009ae8:	4608      	mov	r0, r1
 8009aea:	602b      	str	r3, [r5, #0]
 8009aec:	f7f8 ff8e 	bl	8002a0c <_sbrk>
 8009af0:	1c43      	adds	r3, r0, #1
 8009af2:	d102      	bne.n	8009afa <_sbrk_r+0x1a>
 8009af4:	682b      	ldr	r3, [r5, #0]
 8009af6:	b103      	cbz	r3, 8009afa <_sbrk_r+0x1a>
 8009af8:	6023      	str	r3, [r4, #0]
 8009afa:	bd38      	pop	{r3, r4, r5, pc}
 8009afc:	20000d30 	.word	0x20000d30

08009b00 <siprintf>:
 8009b00:	b40e      	push	{r1, r2, r3}
 8009b02:	b500      	push	{lr}
 8009b04:	b09c      	sub	sp, #112	; 0x70
 8009b06:	ab1d      	add	r3, sp, #116	; 0x74
 8009b08:	9002      	str	r0, [sp, #8]
 8009b0a:	9006      	str	r0, [sp, #24]
 8009b0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b10:	4809      	ldr	r0, [pc, #36]	; (8009b38 <siprintf+0x38>)
 8009b12:	9107      	str	r1, [sp, #28]
 8009b14:	9104      	str	r1, [sp, #16]
 8009b16:	4909      	ldr	r1, [pc, #36]	; (8009b3c <siprintf+0x3c>)
 8009b18:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b1c:	9105      	str	r1, [sp, #20]
 8009b1e:	6800      	ldr	r0, [r0, #0]
 8009b20:	9301      	str	r3, [sp, #4]
 8009b22:	a902      	add	r1, sp, #8
 8009b24:	f002 f82e 	bl	800bb84 <_svfiprintf_r>
 8009b28:	9b02      	ldr	r3, [sp, #8]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	701a      	strb	r2, [r3, #0]
 8009b2e:	b01c      	add	sp, #112	; 0x70
 8009b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b34:	b003      	add	sp, #12
 8009b36:	4770      	bx	lr
 8009b38:	2000034c 	.word	0x2000034c
 8009b3c:	ffff0208 	.word	0xffff0208

08009b40 <strncat>:
 8009b40:	b530      	push	{r4, r5, lr}
 8009b42:	4604      	mov	r4, r0
 8009b44:	7825      	ldrb	r5, [r4, #0]
 8009b46:	4623      	mov	r3, r4
 8009b48:	3401      	adds	r4, #1
 8009b4a:	2d00      	cmp	r5, #0
 8009b4c:	d1fa      	bne.n	8009b44 <strncat+0x4>
 8009b4e:	3a01      	subs	r2, #1
 8009b50:	d304      	bcc.n	8009b5c <strncat+0x1c>
 8009b52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b56:	f803 4b01 	strb.w	r4, [r3], #1
 8009b5a:	b904      	cbnz	r4, 8009b5e <strncat+0x1e>
 8009b5c:	bd30      	pop	{r4, r5, pc}
 8009b5e:	2a00      	cmp	r2, #0
 8009b60:	d1f5      	bne.n	8009b4e <strncat+0xe>
 8009b62:	701a      	strb	r2, [r3, #0]
 8009b64:	e7f3      	b.n	8009b4e <strncat+0xe>

08009b66 <sulp>:
 8009b66:	b570      	push	{r4, r5, r6, lr}
 8009b68:	4604      	mov	r4, r0
 8009b6a:	460d      	mov	r5, r1
 8009b6c:	ec45 4b10 	vmov	d0, r4, r5
 8009b70:	4616      	mov	r6, r2
 8009b72:	f001 fe4d 	bl	800b810 <__ulp>
 8009b76:	ec51 0b10 	vmov	r0, r1, d0
 8009b7a:	b17e      	cbz	r6, 8009b9c <sulp+0x36>
 8009b7c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009b80:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	dd09      	ble.n	8009b9c <sulp+0x36>
 8009b88:	051b      	lsls	r3, r3, #20
 8009b8a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009b8e:	2400      	movs	r4, #0
 8009b90:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009b94:	4622      	mov	r2, r4
 8009b96:	462b      	mov	r3, r5
 8009b98:	f7f6 fd2e 	bl	80005f8 <__aeabi_dmul>
 8009b9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009ba0 <_strtod_l>:
 8009ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba4:	b0a3      	sub	sp, #140	; 0x8c
 8009ba6:	461f      	mov	r7, r3
 8009ba8:	2300      	movs	r3, #0
 8009baa:	931e      	str	r3, [sp, #120]	; 0x78
 8009bac:	4ba4      	ldr	r3, [pc, #656]	; (8009e40 <_strtod_l+0x2a0>)
 8009bae:	9219      	str	r2, [sp, #100]	; 0x64
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	9307      	str	r3, [sp, #28]
 8009bb4:	4604      	mov	r4, r0
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	4688      	mov	r8, r1
 8009bba:	f7f6 fb09 	bl	80001d0 <strlen>
 8009bbe:	f04f 0a00 	mov.w	sl, #0
 8009bc2:	4605      	mov	r5, r0
 8009bc4:	f04f 0b00 	mov.w	fp, #0
 8009bc8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009bcc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009bce:	781a      	ldrb	r2, [r3, #0]
 8009bd0:	2a2b      	cmp	r2, #43	; 0x2b
 8009bd2:	d04c      	beq.n	8009c6e <_strtod_l+0xce>
 8009bd4:	d839      	bhi.n	8009c4a <_strtod_l+0xaa>
 8009bd6:	2a0d      	cmp	r2, #13
 8009bd8:	d832      	bhi.n	8009c40 <_strtod_l+0xa0>
 8009bda:	2a08      	cmp	r2, #8
 8009bdc:	d832      	bhi.n	8009c44 <_strtod_l+0xa4>
 8009bde:	2a00      	cmp	r2, #0
 8009be0:	d03c      	beq.n	8009c5c <_strtod_l+0xbc>
 8009be2:	2300      	movs	r3, #0
 8009be4:	930e      	str	r3, [sp, #56]	; 0x38
 8009be6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009be8:	7833      	ldrb	r3, [r6, #0]
 8009bea:	2b30      	cmp	r3, #48	; 0x30
 8009bec:	f040 80b4 	bne.w	8009d58 <_strtod_l+0x1b8>
 8009bf0:	7873      	ldrb	r3, [r6, #1]
 8009bf2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009bf6:	2b58      	cmp	r3, #88	; 0x58
 8009bf8:	d16c      	bne.n	8009cd4 <_strtod_l+0x134>
 8009bfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bfc:	9301      	str	r3, [sp, #4]
 8009bfe:	ab1e      	add	r3, sp, #120	; 0x78
 8009c00:	9702      	str	r7, [sp, #8]
 8009c02:	9300      	str	r3, [sp, #0]
 8009c04:	4a8f      	ldr	r2, [pc, #572]	; (8009e44 <_strtod_l+0x2a4>)
 8009c06:	ab1f      	add	r3, sp, #124	; 0x7c
 8009c08:	a91d      	add	r1, sp, #116	; 0x74
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	f000 ff60 	bl	800aad0 <__gethex>
 8009c10:	f010 0707 	ands.w	r7, r0, #7
 8009c14:	4605      	mov	r5, r0
 8009c16:	d005      	beq.n	8009c24 <_strtod_l+0x84>
 8009c18:	2f06      	cmp	r7, #6
 8009c1a:	d12a      	bne.n	8009c72 <_strtod_l+0xd2>
 8009c1c:	3601      	adds	r6, #1
 8009c1e:	2300      	movs	r3, #0
 8009c20:	961d      	str	r6, [sp, #116]	; 0x74
 8009c22:	930e      	str	r3, [sp, #56]	; 0x38
 8009c24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f040 8596 	bne.w	800a758 <_strtod_l+0xbb8>
 8009c2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c2e:	b1db      	cbz	r3, 8009c68 <_strtod_l+0xc8>
 8009c30:	4652      	mov	r2, sl
 8009c32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009c36:	ec43 2b10 	vmov	d0, r2, r3
 8009c3a:	b023      	add	sp, #140	; 0x8c
 8009c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c40:	2a20      	cmp	r2, #32
 8009c42:	d1ce      	bne.n	8009be2 <_strtod_l+0x42>
 8009c44:	3301      	adds	r3, #1
 8009c46:	931d      	str	r3, [sp, #116]	; 0x74
 8009c48:	e7c0      	b.n	8009bcc <_strtod_l+0x2c>
 8009c4a:	2a2d      	cmp	r2, #45	; 0x2d
 8009c4c:	d1c9      	bne.n	8009be2 <_strtod_l+0x42>
 8009c4e:	2201      	movs	r2, #1
 8009c50:	920e      	str	r2, [sp, #56]	; 0x38
 8009c52:	1c5a      	adds	r2, r3, #1
 8009c54:	921d      	str	r2, [sp, #116]	; 0x74
 8009c56:	785b      	ldrb	r3, [r3, #1]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1c4      	bne.n	8009be6 <_strtod_l+0x46>
 8009c5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c5e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	f040 8576 	bne.w	800a754 <_strtod_l+0xbb4>
 8009c68:	4652      	mov	r2, sl
 8009c6a:	465b      	mov	r3, fp
 8009c6c:	e7e3      	b.n	8009c36 <_strtod_l+0x96>
 8009c6e:	2200      	movs	r2, #0
 8009c70:	e7ee      	b.n	8009c50 <_strtod_l+0xb0>
 8009c72:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009c74:	b13a      	cbz	r2, 8009c86 <_strtod_l+0xe6>
 8009c76:	2135      	movs	r1, #53	; 0x35
 8009c78:	a820      	add	r0, sp, #128	; 0x80
 8009c7a:	f001 fed4 	bl	800ba26 <__copybits>
 8009c7e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009c80:	4620      	mov	r0, r4
 8009c82:	f001 fa99 	bl	800b1b8 <_Bfree>
 8009c86:	3f01      	subs	r7, #1
 8009c88:	2f05      	cmp	r7, #5
 8009c8a:	d807      	bhi.n	8009c9c <_strtod_l+0xfc>
 8009c8c:	e8df f007 	tbb	[pc, r7]
 8009c90:	1d180b0e 	.word	0x1d180b0e
 8009c94:	030e      	.short	0x030e
 8009c96:	f04f 0b00 	mov.w	fp, #0
 8009c9a:	46da      	mov	sl, fp
 8009c9c:	0728      	lsls	r0, r5, #28
 8009c9e:	d5c1      	bpl.n	8009c24 <_strtod_l+0x84>
 8009ca0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009ca4:	e7be      	b.n	8009c24 <_strtod_l+0x84>
 8009ca6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8009caa:	e7f7      	b.n	8009c9c <_strtod_l+0xfc>
 8009cac:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8009cb0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009cb2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009cb6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009cba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009cbe:	e7ed      	b.n	8009c9c <_strtod_l+0xfc>
 8009cc0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8009e48 <_strtod_l+0x2a8>
 8009cc4:	f04f 0a00 	mov.w	sl, #0
 8009cc8:	e7e8      	b.n	8009c9c <_strtod_l+0xfc>
 8009cca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009cce:	f04f 3aff 	mov.w	sl, #4294967295
 8009cd2:	e7e3      	b.n	8009c9c <_strtod_l+0xfc>
 8009cd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009cd6:	1c5a      	adds	r2, r3, #1
 8009cd8:	921d      	str	r2, [sp, #116]	; 0x74
 8009cda:	785b      	ldrb	r3, [r3, #1]
 8009cdc:	2b30      	cmp	r3, #48	; 0x30
 8009cde:	d0f9      	beq.n	8009cd4 <_strtod_l+0x134>
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d09f      	beq.n	8009c24 <_strtod_l+0x84>
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	f04f 0900 	mov.w	r9, #0
 8009cea:	9304      	str	r3, [sp, #16]
 8009cec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009cee:	930a      	str	r3, [sp, #40]	; 0x28
 8009cf0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009cf4:	464f      	mov	r7, r9
 8009cf6:	220a      	movs	r2, #10
 8009cf8:	981d      	ldr	r0, [sp, #116]	; 0x74
 8009cfa:	7806      	ldrb	r6, [r0, #0]
 8009cfc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009d00:	b2d9      	uxtb	r1, r3
 8009d02:	2909      	cmp	r1, #9
 8009d04:	d92a      	bls.n	8009d5c <_strtod_l+0x1bc>
 8009d06:	9907      	ldr	r1, [sp, #28]
 8009d08:	462a      	mov	r2, r5
 8009d0a:	f002 fb31 	bl	800c370 <strncmp>
 8009d0e:	b398      	cbz	r0, 8009d78 <_strtod_l+0x1d8>
 8009d10:	2000      	movs	r0, #0
 8009d12:	4633      	mov	r3, r6
 8009d14:	463d      	mov	r5, r7
 8009d16:	9007      	str	r0, [sp, #28]
 8009d18:	4602      	mov	r2, r0
 8009d1a:	2b65      	cmp	r3, #101	; 0x65
 8009d1c:	d001      	beq.n	8009d22 <_strtod_l+0x182>
 8009d1e:	2b45      	cmp	r3, #69	; 0x45
 8009d20:	d118      	bne.n	8009d54 <_strtod_l+0x1b4>
 8009d22:	b91d      	cbnz	r5, 8009d2c <_strtod_l+0x18c>
 8009d24:	9b04      	ldr	r3, [sp, #16]
 8009d26:	4303      	orrs	r3, r0
 8009d28:	d098      	beq.n	8009c5c <_strtod_l+0xbc>
 8009d2a:	2500      	movs	r5, #0
 8009d2c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8009d30:	f108 0301 	add.w	r3, r8, #1
 8009d34:	931d      	str	r3, [sp, #116]	; 0x74
 8009d36:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009d3a:	2b2b      	cmp	r3, #43	; 0x2b
 8009d3c:	d075      	beq.n	8009e2a <_strtod_l+0x28a>
 8009d3e:	2b2d      	cmp	r3, #45	; 0x2d
 8009d40:	d07b      	beq.n	8009e3a <_strtod_l+0x29a>
 8009d42:	f04f 0c00 	mov.w	ip, #0
 8009d46:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009d4a:	2909      	cmp	r1, #9
 8009d4c:	f240 8082 	bls.w	8009e54 <_strtod_l+0x2b4>
 8009d50:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009d54:	2600      	movs	r6, #0
 8009d56:	e09d      	b.n	8009e94 <_strtod_l+0x2f4>
 8009d58:	2300      	movs	r3, #0
 8009d5a:	e7c4      	b.n	8009ce6 <_strtod_l+0x146>
 8009d5c:	2f08      	cmp	r7, #8
 8009d5e:	bfd8      	it	le
 8009d60:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009d62:	f100 0001 	add.w	r0, r0, #1
 8009d66:	bfda      	itte	le
 8009d68:	fb02 3301 	mlale	r3, r2, r1, r3
 8009d6c:	9309      	strle	r3, [sp, #36]	; 0x24
 8009d6e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009d72:	3701      	adds	r7, #1
 8009d74:	901d      	str	r0, [sp, #116]	; 0x74
 8009d76:	e7bf      	b.n	8009cf8 <_strtod_l+0x158>
 8009d78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009d7a:	195a      	adds	r2, r3, r5
 8009d7c:	921d      	str	r2, [sp, #116]	; 0x74
 8009d7e:	5d5b      	ldrb	r3, [r3, r5]
 8009d80:	2f00      	cmp	r7, #0
 8009d82:	d037      	beq.n	8009df4 <_strtod_l+0x254>
 8009d84:	9007      	str	r0, [sp, #28]
 8009d86:	463d      	mov	r5, r7
 8009d88:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009d8c:	2a09      	cmp	r2, #9
 8009d8e:	d912      	bls.n	8009db6 <_strtod_l+0x216>
 8009d90:	2201      	movs	r2, #1
 8009d92:	e7c2      	b.n	8009d1a <_strtod_l+0x17a>
 8009d94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009d96:	1c5a      	adds	r2, r3, #1
 8009d98:	921d      	str	r2, [sp, #116]	; 0x74
 8009d9a:	785b      	ldrb	r3, [r3, #1]
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	2b30      	cmp	r3, #48	; 0x30
 8009da0:	d0f8      	beq.n	8009d94 <_strtod_l+0x1f4>
 8009da2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009da6:	2a08      	cmp	r2, #8
 8009da8:	f200 84db 	bhi.w	800a762 <_strtod_l+0xbc2>
 8009dac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009dae:	9007      	str	r0, [sp, #28]
 8009db0:	2000      	movs	r0, #0
 8009db2:	920a      	str	r2, [sp, #40]	; 0x28
 8009db4:	4605      	mov	r5, r0
 8009db6:	3b30      	subs	r3, #48	; 0x30
 8009db8:	f100 0201 	add.w	r2, r0, #1
 8009dbc:	d014      	beq.n	8009de8 <_strtod_l+0x248>
 8009dbe:	9907      	ldr	r1, [sp, #28]
 8009dc0:	4411      	add	r1, r2
 8009dc2:	9107      	str	r1, [sp, #28]
 8009dc4:	462a      	mov	r2, r5
 8009dc6:	eb00 0e05 	add.w	lr, r0, r5
 8009dca:	210a      	movs	r1, #10
 8009dcc:	4572      	cmp	r2, lr
 8009dce:	d113      	bne.n	8009df8 <_strtod_l+0x258>
 8009dd0:	182a      	adds	r2, r5, r0
 8009dd2:	2a08      	cmp	r2, #8
 8009dd4:	f105 0501 	add.w	r5, r5, #1
 8009dd8:	4405      	add	r5, r0
 8009dda:	dc1c      	bgt.n	8009e16 <_strtod_l+0x276>
 8009ddc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009dde:	220a      	movs	r2, #10
 8009de0:	fb02 3301 	mla	r3, r2, r1, r3
 8009de4:	9309      	str	r3, [sp, #36]	; 0x24
 8009de6:	2200      	movs	r2, #0
 8009de8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009dea:	1c59      	adds	r1, r3, #1
 8009dec:	911d      	str	r1, [sp, #116]	; 0x74
 8009dee:	785b      	ldrb	r3, [r3, #1]
 8009df0:	4610      	mov	r0, r2
 8009df2:	e7c9      	b.n	8009d88 <_strtod_l+0x1e8>
 8009df4:	4638      	mov	r0, r7
 8009df6:	e7d2      	b.n	8009d9e <_strtod_l+0x1fe>
 8009df8:	2a08      	cmp	r2, #8
 8009dfa:	dc04      	bgt.n	8009e06 <_strtod_l+0x266>
 8009dfc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009dfe:	434e      	muls	r6, r1
 8009e00:	9609      	str	r6, [sp, #36]	; 0x24
 8009e02:	3201      	adds	r2, #1
 8009e04:	e7e2      	b.n	8009dcc <_strtod_l+0x22c>
 8009e06:	f102 0c01 	add.w	ip, r2, #1
 8009e0a:	f1bc 0f10 	cmp.w	ip, #16
 8009e0e:	bfd8      	it	le
 8009e10:	fb01 f909 	mulle.w	r9, r1, r9
 8009e14:	e7f5      	b.n	8009e02 <_strtod_l+0x262>
 8009e16:	2d10      	cmp	r5, #16
 8009e18:	bfdc      	itt	le
 8009e1a:	220a      	movle	r2, #10
 8009e1c:	fb02 3909 	mlale	r9, r2, r9, r3
 8009e20:	e7e1      	b.n	8009de6 <_strtod_l+0x246>
 8009e22:	2300      	movs	r3, #0
 8009e24:	9307      	str	r3, [sp, #28]
 8009e26:	2201      	movs	r2, #1
 8009e28:	e77c      	b.n	8009d24 <_strtod_l+0x184>
 8009e2a:	f04f 0c00 	mov.w	ip, #0
 8009e2e:	f108 0302 	add.w	r3, r8, #2
 8009e32:	931d      	str	r3, [sp, #116]	; 0x74
 8009e34:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009e38:	e785      	b.n	8009d46 <_strtod_l+0x1a6>
 8009e3a:	f04f 0c01 	mov.w	ip, #1
 8009e3e:	e7f6      	b.n	8009e2e <_strtod_l+0x28e>
 8009e40:	0800f248 	.word	0x0800f248
 8009e44:	0800efc4 	.word	0x0800efc4
 8009e48:	7ff00000 	.word	0x7ff00000
 8009e4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e4e:	1c59      	adds	r1, r3, #1
 8009e50:	911d      	str	r1, [sp, #116]	; 0x74
 8009e52:	785b      	ldrb	r3, [r3, #1]
 8009e54:	2b30      	cmp	r3, #48	; 0x30
 8009e56:	d0f9      	beq.n	8009e4c <_strtod_l+0x2ac>
 8009e58:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009e5c:	2908      	cmp	r1, #8
 8009e5e:	f63f af79 	bhi.w	8009d54 <_strtod_l+0x1b4>
 8009e62:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009e66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e68:	9308      	str	r3, [sp, #32]
 8009e6a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e6c:	1c59      	adds	r1, r3, #1
 8009e6e:	911d      	str	r1, [sp, #116]	; 0x74
 8009e70:	785b      	ldrb	r3, [r3, #1]
 8009e72:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009e76:	2e09      	cmp	r6, #9
 8009e78:	d937      	bls.n	8009eea <_strtod_l+0x34a>
 8009e7a:	9e08      	ldr	r6, [sp, #32]
 8009e7c:	1b89      	subs	r1, r1, r6
 8009e7e:	2908      	cmp	r1, #8
 8009e80:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009e84:	dc02      	bgt.n	8009e8c <_strtod_l+0x2ec>
 8009e86:	4576      	cmp	r6, lr
 8009e88:	bfa8      	it	ge
 8009e8a:	4676      	movge	r6, lr
 8009e8c:	f1bc 0f00 	cmp.w	ip, #0
 8009e90:	d000      	beq.n	8009e94 <_strtod_l+0x2f4>
 8009e92:	4276      	negs	r6, r6
 8009e94:	2d00      	cmp	r5, #0
 8009e96:	d14f      	bne.n	8009f38 <_strtod_l+0x398>
 8009e98:	9904      	ldr	r1, [sp, #16]
 8009e9a:	4301      	orrs	r1, r0
 8009e9c:	f47f aec2 	bne.w	8009c24 <_strtod_l+0x84>
 8009ea0:	2a00      	cmp	r2, #0
 8009ea2:	f47f aedb 	bne.w	8009c5c <_strtod_l+0xbc>
 8009ea6:	2b69      	cmp	r3, #105	; 0x69
 8009ea8:	d027      	beq.n	8009efa <_strtod_l+0x35a>
 8009eaa:	dc24      	bgt.n	8009ef6 <_strtod_l+0x356>
 8009eac:	2b49      	cmp	r3, #73	; 0x49
 8009eae:	d024      	beq.n	8009efa <_strtod_l+0x35a>
 8009eb0:	2b4e      	cmp	r3, #78	; 0x4e
 8009eb2:	f47f aed3 	bne.w	8009c5c <_strtod_l+0xbc>
 8009eb6:	499e      	ldr	r1, [pc, #632]	; (800a130 <_strtod_l+0x590>)
 8009eb8:	a81d      	add	r0, sp, #116	; 0x74
 8009eba:	f001 f861 	bl	800af80 <__match>
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	f43f aecc 	beq.w	8009c5c <_strtod_l+0xbc>
 8009ec4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	2b28      	cmp	r3, #40	; 0x28
 8009eca:	d12d      	bne.n	8009f28 <_strtod_l+0x388>
 8009ecc:	4999      	ldr	r1, [pc, #612]	; (800a134 <_strtod_l+0x594>)
 8009ece:	aa20      	add	r2, sp, #128	; 0x80
 8009ed0:	a81d      	add	r0, sp, #116	; 0x74
 8009ed2:	f001 f869 	bl	800afa8 <__hexnan>
 8009ed6:	2805      	cmp	r0, #5
 8009ed8:	d126      	bne.n	8009f28 <_strtod_l+0x388>
 8009eda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009edc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8009ee0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009ee4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009ee8:	e69c      	b.n	8009c24 <_strtod_l+0x84>
 8009eea:	210a      	movs	r1, #10
 8009eec:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009ef0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009ef4:	e7b9      	b.n	8009e6a <_strtod_l+0x2ca>
 8009ef6:	2b6e      	cmp	r3, #110	; 0x6e
 8009ef8:	e7db      	b.n	8009eb2 <_strtod_l+0x312>
 8009efa:	498f      	ldr	r1, [pc, #572]	; (800a138 <_strtod_l+0x598>)
 8009efc:	a81d      	add	r0, sp, #116	; 0x74
 8009efe:	f001 f83f 	bl	800af80 <__match>
 8009f02:	2800      	cmp	r0, #0
 8009f04:	f43f aeaa 	beq.w	8009c5c <_strtod_l+0xbc>
 8009f08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f0a:	498c      	ldr	r1, [pc, #560]	; (800a13c <_strtod_l+0x59c>)
 8009f0c:	3b01      	subs	r3, #1
 8009f0e:	a81d      	add	r0, sp, #116	; 0x74
 8009f10:	931d      	str	r3, [sp, #116]	; 0x74
 8009f12:	f001 f835 	bl	800af80 <__match>
 8009f16:	b910      	cbnz	r0, 8009f1e <_strtod_l+0x37e>
 8009f18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	931d      	str	r3, [sp, #116]	; 0x74
 8009f1e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800a14c <_strtod_l+0x5ac>
 8009f22:	f04f 0a00 	mov.w	sl, #0
 8009f26:	e67d      	b.n	8009c24 <_strtod_l+0x84>
 8009f28:	4885      	ldr	r0, [pc, #532]	; (800a140 <_strtod_l+0x5a0>)
 8009f2a:	f002 fa19 	bl	800c360 <nan>
 8009f2e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009f32:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009f36:	e675      	b.n	8009c24 <_strtod_l+0x84>
 8009f38:	9b07      	ldr	r3, [sp, #28]
 8009f3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f3c:	1af3      	subs	r3, r6, r3
 8009f3e:	2f00      	cmp	r7, #0
 8009f40:	bf08      	it	eq
 8009f42:	462f      	moveq	r7, r5
 8009f44:	2d10      	cmp	r5, #16
 8009f46:	9308      	str	r3, [sp, #32]
 8009f48:	46a8      	mov	r8, r5
 8009f4a:	bfa8      	it	ge
 8009f4c:	f04f 0810 	movge.w	r8, #16
 8009f50:	f7f6 fad8 	bl	8000504 <__aeabi_ui2d>
 8009f54:	2d09      	cmp	r5, #9
 8009f56:	4682      	mov	sl, r0
 8009f58:	468b      	mov	fp, r1
 8009f5a:	dd13      	ble.n	8009f84 <_strtod_l+0x3e4>
 8009f5c:	4b79      	ldr	r3, [pc, #484]	; (800a144 <_strtod_l+0x5a4>)
 8009f5e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009f62:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009f66:	f7f6 fb47 	bl	80005f8 <__aeabi_dmul>
 8009f6a:	4682      	mov	sl, r0
 8009f6c:	4648      	mov	r0, r9
 8009f6e:	468b      	mov	fp, r1
 8009f70:	f7f6 fac8 	bl	8000504 <__aeabi_ui2d>
 8009f74:	4602      	mov	r2, r0
 8009f76:	460b      	mov	r3, r1
 8009f78:	4650      	mov	r0, sl
 8009f7a:	4659      	mov	r1, fp
 8009f7c:	f7f6 f986 	bl	800028c <__adddf3>
 8009f80:	4682      	mov	sl, r0
 8009f82:	468b      	mov	fp, r1
 8009f84:	2d0f      	cmp	r5, #15
 8009f86:	dc38      	bgt.n	8009ffa <_strtod_l+0x45a>
 8009f88:	9b08      	ldr	r3, [sp, #32]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	f43f ae4a 	beq.w	8009c24 <_strtod_l+0x84>
 8009f90:	dd24      	ble.n	8009fdc <_strtod_l+0x43c>
 8009f92:	2b16      	cmp	r3, #22
 8009f94:	dc0b      	bgt.n	8009fae <_strtod_l+0x40e>
 8009f96:	4d6b      	ldr	r5, [pc, #428]	; (800a144 <_strtod_l+0x5a4>)
 8009f98:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8009f9c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009fa0:	4652      	mov	r2, sl
 8009fa2:	465b      	mov	r3, fp
 8009fa4:	f7f6 fb28 	bl	80005f8 <__aeabi_dmul>
 8009fa8:	4682      	mov	sl, r0
 8009faa:	468b      	mov	fp, r1
 8009fac:	e63a      	b.n	8009c24 <_strtod_l+0x84>
 8009fae:	9a08      	ldr	r2, [sp, #32]
 8009fb0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	db20      	blt.n	8009ffa <_strtod_l+0x45a>
 8009fb8:	4c62      	ldr	r4, [pc, #392]	; (800a144 <_strtod_l+0x5a4>)
 8009fba:	f1c5 050f 	rsb	r5, r5, #15
 8009fbe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009fc2:	4652      	mov	r2, sl
 8009fc4:	465b      	mov	r3, fp
 8009fc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fca:	f7f6 fb15 	bl	80005f8 <__aeabi_dmul>
 8009fce:	9b08      	ldr	r3, [sp, #32]
 8009fd0:	1b5d      	subs	r5, r3, r5
 8009fd2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009fd6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009fda:	e7e3      	b.n	8009fa4 <_strtod_l+0x404>
 8009fdc:	9b08      	ldr	r3, [sp, #32]
 8009fde:	3316      	adds	r3, #22
 8009fe0:	db0b      	blt.n	8009ffa <_strtod_l+0x45a>
 8009fe2:	9b07      	ldr	r3, [sp, #28]
 8009fe4:	4a57      	ldr	r2, [pc, #348]	; (800a144 <_strtod_l+0x5a4>)
 8009fe6:	1b9e      	subs	r6, r3, r6
 8009fe8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009fec:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ff0:	4650      	mov	r0, sl
 8009ff2:	4659      	mov	r1, fp
 8009ff4:	f7f6 fc2a 	bl	800084c <__aeabi_ddiv>
 8009ff8:	e7d6      	b.n	8009fa8 <_strtod_l+0x408>
 8009ffa:	9b08      	ldr	r3, [sp, #32]
 8009ffc:	eba5 0808 	sub.w	r8, r5, r8
 800a000:	4498      	add	r8, r3
 800a002:	f1b8 0f00 	cmp.w	r8, #0
 800a006:	dd71      	ble.n	800a0ec <_strtod_l+0x54c>
 800a008:	f018 030f 	ands.w	r3, r8, #15
 800a00c:	d00a      	beq.n	800a024 <_strtod_l+0x484>
 800a00e:	494d      	ldr	r1, [pc, #308]	; (800a144 <_strtod_l+0x5a4>)
 800a010:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a014:	4652      	mov	r2, sl
 800a016:	465b      	mov	r3, fp
 800a018:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a01c:	f7f6 faec 	bl	80005f8 <__aeabi_dmul>
 800a020:	4682      	mov	sl, r0
 800a022:	468b      	mov	fp, r1
 800a024:	f038 080f 	bics.w	r8, r8, #15
 800a028:	d04d      	beq.n	800a0c6 <_strtod_l+0x526>
 800a02a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a02e:	dd22      	ble.n	800a076 <_strtod_l+0x4d6>
 800a030:	2500      	movs	r5, #0
 800a032:	462e      	mov	r6, r5
 800a034:	9509      	str	r5, [sp, #36]	; 0x24
 800a036:	9507      	str	r5, [sp, #28]
 800a038:	2322      	movs	r3, #34	; 0x22
 800a03a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800a14c <_strtod_l+0x5ac>
 800a03e:	6023      	str	r3, [r4, #0]
 800a040:	f04f 0a00 	mov.w	sl, #0
 800a044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a046:	2b00      	cmp	r3, #0
 800a048:	f43f adec 	beq.w	8009c24 <_strtod_l+0x84>
 800a04c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a04e:	4620      	mov	r0, r4
 800a050:	f001 f8b2 	bl	800b1b8 <_Bfree>
 800a054:	9907      	ldr	r1, [sp, #28]
 800a056:	4620      	mov	r0, r4
 800a058:	f001 f8ae 	bl	800b1b8 <_Bfree>
 800a05c:	4631      	mov	r1, r6
 800a05e:	4620      	mov	r0, r4
 800a060:	f001 f8aa 	bl	800b1b8 <_Bfree>
 800a064:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a066:	4620      	mov	r0, r4
 800a068:	f001 f8a6 	bl	800b1b8 <_Bfree>
 800a06c:	4629      	mov	r1, r5
 800a06e:	4620      	mov	r0, r4
 800a070:	f001 f8a2 	bl	800b1b8 <_Bfree>
 800a074:	e5d6      	b.n	8009c24 <_strtod_l+0x84>
 800a076:	2300      	movs	r3, #0
 800a078:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a07c:	4650      	mov	r0, sl
 800a07e:	4659      	mov	r1, fp
 800a080:	4699      	mov	r9, r3
 800a082:	f1b8 0f01 	cmp.w	r8, #1
 800a086:	dc21      	bgt.n	800a0cc <_strtod_l+0x52c>
 800a088:	b10b      	cbz	r3, 800a08e <_strtod_l+0x4ee>
 800a08a:	4682      	mov	sl, r0
 800a08c:	468b      	mov	fp, r1
 800a08e:	4b2e      	ldr	r3, [pc, #184]	; (800a148 <_strtod_l+0x5a8>)
 800a090:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a094:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a098:	4652      	mov	r2, sl
 800a09a:	465b      	mov	r3, fp
 800a09c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a0a0:	f7f6 faaa 	bl	80005f8 <__aeabi_dmul>
 800a0a4:	4b29      	ldr	r3, [pc, #164]	; (800a14c <_strtod_l+0x5ac>)
 800a0a6:	460a      	mov	r2, r1
 800a0a8:	400b      	ands	r3, r1
 800a0aa:	4929      	ldr	r1, [pc, #164]	; (800a150 <_strtod_l+0x5b0>)
 800a0ac:	428b      	cmp	r3, r1
 800a0ae:	4682      	mov	sl, r0
 800a0b0:	d8be      	bhi.n	800a030 <_strtod_l+0x490>
 800a0b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a0b6:	428b      	cmp	r3, r1
 800a0b8:	bf86      	itte	hi
 800a0ba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800a154 <_strtod_l+0x5b4>
 800a0be:	f04f 3aff 	movhi.w	sl, #4294967295
 800a0c2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	9304      	str	r3, [sp, #16]
 800a0ca:	e081      	b.n	800a1d0 <_strtod_l+0x630>
 800a0cc:	f018 0f01 	tst.w	r8, #1
 800a0d0:	d007      	beq.n	800a0e2 <_strtod_l+0x542>
 800a0d2:	4b1d      	ldr	r3, [pc, #116]	; (800a148 <_strtod_l+0x5a8>)
 800a0d4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0dc:	f7f6 fa8c 	bl	80005f8 <__aeabi_dmul>
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	f109 0901 	add.w	r9, r9, #1
 800a0e6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a0ea:	e7ca      	b.n	800a082 <_strtod_l+0x4e2>
 800a0ec:	d0eb      	beq.n	800a0c6 <_strtod_l+0x526>
 800a0ee:	f1c8 0800 	rsb	r8, r8, #0
 800a0f2:	f018 020f 	ands.w	r2, r8, #15
 800a0f6:	d00a      	beq.n	800a10e <_strtod_l+0x56e>
 800a0f8:	4b12      	ldr	r3, [pc, #72]	; (800a144 <_strtod_l+0x5a4>)
 800a0fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0fe:	4650      	mov	r0, sl
 800a100:	4659      	mov	r1, fp
 800a102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a106:	f7f6 fba1 	bl	800084c <__aeabi_ddiv>
 800a10a:	4682      	mov	sl, r0
 800a10c:	468b      	mov	fp, r1
 800a10e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a112:	d0d8      	beq.n	800a0c6 <_strtod_l+0x526>
 800a114:	f1b8 0f1f 	cmp.w	r8, #31
 800a118:	dd1e      	ble.n	800a158 <_strtod_l+0x5b8>
 800a11a:	2500      	movs	r5, #0
 800a11c:	462e      	mov	r6, r5
 800a11e:	9509      	str	r5, [sp, #36]	; 0x24
 800a120:	9507      	str	r5, [sp, #28]
 800a122:	2322      	movs	r3, #34	; 0x22
 800a124:	f04f 0a00 	mov.w	sl, #0
 800a128:	f04f 0b00 	mov.w	fp, #0
 800a12c:	6023      	str	r3, [r4, #0]
 800a12e:	e789      	b.n	800a044 <_strtod_l+0x4a4>
 800a130:	0800efc1 	.word	0x0800efc1
 800a134:	0800efd8 	.word	0x0800efd8
 800a138:	0800efb8 	.word	0x0800efb8
 800a13c:	0800efbb 	.word	0x0800efbb
 800a140:	0800f0cb 	.word	0x0800f0cb
 800a144:	0800f2e8 	.word	0x0800f2e8
 800a148:	0800f2c0 	.word	0x0800f2c0
 800a14c:	7ff00000 	.word	0x7ff00000
 800a150:	7ca00000 	.word	0x7ca00000
 800a154:	7fefffff 	.word	0x7fefffff
 800a158:	f018 0310 	ands.w	r3, r8, #16
 800a15c:	bf18      	it	ne
 800a15e:	236a      	movne	r3, #106	; 0x6a
 800a160:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800a518 <_strtod_l+0x978>
 800a164:	9304      	str	r3, [sp, #16]
 800a166:	4650      	mov	r0, sl
 800a168:	4659      	mov	r1, fp
 800a16a:	2300      	movs	r3, #0
 800a16c:	f018 0f01 	tst.w	r8, #1
 800a170:	d004      	beq.n	800a17c <_strtod_l+0x5dc>
 800a172:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a176:	f7f6 fa3f 	bl	80005f8 <__aeabi_dmul>
 800a17a:	2301      	movs	r3, #1
 800a17c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a180:	f109 0908 	add.w	r9, r9, #8
 800a184:	d1f2      	bne.n	800a16c <_strtod_l+0x5cc>
 800a186:	b10b      	cbz	r3, 800a18c <_strtod_l+0x5ec>
 800a188:	4682      	mov	sl, r0
 800a18a:	468b      	mov	fp, r1
 800a18c:	9b04      	ldr	r3, [sp, #16]
 800a18e:	b1bb      	cbz	r3, 800a1c0 <_strtod_l+0x620>
 800a190:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800a194:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a198:	2b00      	cmp	r3, #0
 800a19a:	4659      	mov	r1, fp
 800a19c:	dd10      	ble.n	800a1c0 <_strtod_l+0x620>
 800a19e:	2b1f      	cmp	r3, #31
 800a1a0:	f340 8128 	ble.w	800a3f4 <_strtod_l+0x854>
 800a1a4:	2b34      	cmp	r3, #52	; 0x34
 800a1a6:	bfde      	ittt	le
 800a1a8:	3b20      	suble	r3, #32
 800a1aa:	f04f 32ff 	movle.w	r2, #4294967295
 800a1ae:	fa02 f303 	lslle.w	r3, r2, r3
 800a1b2:	f04f 0a00 	mov.w	sl, #0
 800a1b6:	bfcc      	ite	gt
 800a1b8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a1bc:	ea03 0b01 	andle.w	fp, r3, r1
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	4650      	mov	r0, sl
 800a1c6:	4659      	mov	r1, fp
 800a1c8:	f7f6 fc7e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	d1a4      	bne.n	800a11a <_strtod_l+0x57a>
 800a1d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1d2:	9300      	str	r3, [sp, #0]
 800a1d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a1d6:	462b      	mov	r3, r5
 800a1d8:	463a      	mov	r2, r7
 800a1da:	4620      	mov	r0, r4
 800a1dc:	f001 f858 	bl	800b290 <__s2b>
 800a1e0:	9009      	str	r0, [sp, #36]	; 0x24
 800a1e2:	2800      	cmp	r0, #0
 800a1e4:	f43f af24 	beq.w	800a030 <_strtod_l+0x490>
 800a1e8:	9b07      	ldr	r3, [sp, #28]
 800a1ea:	1b9e      	subs	r6, r3, r6
 800a1ec:	9b08      	ldr	r3, [sp, #32]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	bfb4      	ite	lt
 800a1f2:	4633      	movlt	r3, r6
 800a1f4:	2300      	movge	r3, #0
 800a1f6:	9310      	str	r3, [sp, #64]	; 0x40
 800a1f8:	9b08      	ldr	r3, [sp, #32]
 800a1fa:	2500      	movs	r5, #0
 800a1fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a200:	9318      	str	r3, [sp, #96]	; 0x60
 800a202:	462e      	mov	r6, r5
 800a204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a206:	4620      	mov	r0, r4
 800a208:	6859      	ldr	r1, [r3, #4]
 800a20a:	f000 ff95 	bl	800b138 <_Balloc>
 800a20e:	9007      	str	r0, [sp, #28]
 800a210:	2800      	cmp	r0, #0
 800a212:	f43f af11 	beq.w	800a038 <_strtod_l+0x498>
 800a216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a218:	691a      	ldr	r2, [r3, #16]
 800a21a:	3202      	adds	r2, #2
 800a21c:	f103 010c 	add.w	r1, r3, #12
 800a220:	0092      	lsls	r2, r2, #2
 800a222:	300c      	adds	r0, #12
 800a224:	f000 ff6e 	bl	800b104 <memcpy>
 800a228:	ec4b ab10 	vmov	d0, sl, fp
 800a22c:	aa20      	add	r2, sp, #128	; 0x80
 800a22e:	a91f      	add	r1, sp, #124	; 0x7c
 800a230:	4620      	mov	r0, r4
 800a232:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800a236:	f001 fb67 	bl	800b908 <__d2b>
 800a23a:	901e      	str	r0, [sp, #120]	; 0x78
 800a23c:	2800      	cmp	r0, #0
 800a23e:	f43f aefb 	beq.w	800a038 <_strtod_l+0x498>
 800a242:	2101      	movs	r1, #1
 800a244:	4620      	mov	r0, r4
 800a246:	f001 f8bd 	bl	800b3c4 <__i2b>
 800a24a:	4606      	mov	r6, r0
 800a24c:	2800      	cmp	r0, #0
 800a24e:	f43f aef3 	beq.w	800a038 <_strtod_l+0x498>
 800a252:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a254:	9904      	ldr	r1, [sp, #16]
 800a256:	2b00      	cmp	r3, #0
 800a258:	bfab      	itete	ge
 800a25a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800a25c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800a25e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800a260:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800a264:	bfac      	ite	ge
 800a266:	eb03 0902 	addge.w	r9, r3, r2
 800a26a:	1ad7      	sublt	r7, r2, r3
 800a26c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a26e:	eba3 0801 	sub.w	r8, r3, r1
 800a272:	4490      	add	r8, r2
 800a274:	4ba3      	ldr	r3, [pc, #652]	; (800a504 <_strtod_l+0x964>)
 800a276:	f108 38ff 	add.w	r8, r8, #4294967295
 800a27a:	4598      	cmp	r8, r3
 800a27c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a280:	f280 80cc 	bge.w	800a41c <_strtod_l+0x87c>
 800a284:	eba3 0308 	sub.w	r3, r3, r8
 800a288:	2b1f      	cmp	r3, #31
 800a28a:	eba2 0203 	sub.w	r2, r2, r3
 800a28e:	f04f 0101 	mov.w	r1, #1
 800a292:	f300 80b6 	bgt.w	800a402 <_strtod_l+0x862>
 800a296:	fa01 f303 	lsl.w	r3, r1, r3
 800a29a:	9311      	str	r3, [sp, #68]	; 0x44
 800a29c:	2300      	movs	r3, #0
 800a29e:	930c      	str	r3, [sp, #48]	; 0x30
 800a2a0:	eb09 0802 	add.w	r8, r9, r2
 800a2a4:	9b04      	ldr	r3, [sp, #16]
 800a2a6:	45c1      	cmp	r9, r8
 800a2a8:	4417      	add	r7, r2
 800a2aa:	441f      	add	r7, r3
 800a2ac:	464b      	mov	r3, r9
 800a2ae:	bfa8      	it	ge
 800a2b0:	4643      	movge	r3, r8
 800a2b2:	42bb      	cmp	r3, r7
 800a2b4:	bfa8      	it	ge
 800a2b6:	463b      	movge	r3, r7
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	bfc2      	ittt	gt
 800a2bc:	eba8 0803 	subgt.w	r8, r8, r3
 800a2c0:	1aff      	subgt	r7, r7, r3
 800a2c2:	eba9 0903 	subgt.w	r9, r9, r3
 800a2c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	dd17      	ble.n	800a2fc <_strtod_l+0x75c>
 800a2cc:	4631      	mov	r1, r6
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	4620      	mov	r0, r4
 800a2d2:	f001 f933 	bl	800b53c <__pow5mult>
 800a2d6:	4606      	mov	r6, r0
 800a2d8:	2800      	cmp	r0, #0
 800a2da:	f43f aead 	beq.w	800a038 <_strtod_l+0x498>
 800a2de:	4601      	mov	r1, r0
 800a2e0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a2e2:	4620      	mov	r0, r4
 800a2e4:	f001 f884 	bl	800b3f0 <__multiply>
 800a2e8:	900f      	str	r0, [sp, #60]	; 0x3c
 800a2ea:	2800      	cmp	r0, #0
 800a2ec:	f43f aea4 	beq.w	800a038 <_strtod_l+0x498>
 800a2f0:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	f000 ff60 	bl	800b1b8 <_Bfree>
 800a2f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2fa:	931e      	str	r3, [sp, #120]	; 0x78
 800a2fc:	f1b8 0f00 	cmp.w	r8, #0
 800a300:	f300 8091 	bgt.w	800a426 <_strtod_l+0x886>
 800a304:	9b08      	ldr	r3, [sp, #32]
 800a306:	2b00      	cmp	r3, #0
 800a308:	dd08      	ble.n	800a31c <_strtod_l+0x77c>
 800a30a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a30c:	9907      	ldr	r1, [sp, #28]
 800a30e:	4620      	mov	r0, r4
 800a310:	f001 f914 	bl	800b53c <__pow5mult>
 800a314:	9007      	str	r0, [sp, #28]
 800a316:	2800      	cmp	r0, #0
 800a318:	f43f ae8e 	beq.w	800a038 <_strtod_l+0x498>
 800a31c:	2f00      	cmp	r7, #0
 800a31e:	dd08      	ble.n	800a332 <_strtod_l+0x792>
 800a320:	9907      	ldr	r1, [sp, #28]
 800a322:	463a      	mov	r2, r7
 800a324:	4620      	mov	r0, r4
 800a326:	f001 f963 	bl	800b5f0 <__lshift>
 800a32a:	9007      	str	r0, [sp, #28]
 800a32c:	2800      	cmp	r0, #0
 800a32e:	f43f ae83 	beq.w	800a038 <_strtod_l+0x498>
 800a332:	f1b9 0f00 	cmp.w	r9, #0
 800a336:	dd08      	ble.n	800a34a <_strtod_l+0x7aa>
 800a338:	4631      	mov	r1, r6
 800a33a:	464a      	mov	r2, r9
 800a33c:	4620      	mov	r0, r4
 800a33e:	f001 f957 	bl	800b5f0 <__lshift>
 800a342:	4606      	mov	r6, r0
 800a344:	2800      	cmp	r0, #0
 800a346:	f43f ae77 	beq.w	800a038 <_strtod_l+0x498>
 800a34a:	9a07      	ldr	r2, [sp, #28]
 800a34c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a34e:	4620      	mov	r0, r4
 800a350:	f001 f9d6 	bl	800b700 <__mdiff>
 800a354:	4605      	mov	r5, r0
 800a356:	2800      	cmp	r0, #0
 800a358:	f43f ae6e 	beq.w	800a038 <_strtod_l+0x498>
 800a35c:	68c3      	ldr	r3, [r0, #12]
 800a35e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a360:	2300      	movs	r3, #0
 800a362:	60c3      	str	r3, [r0, #12]
 800a364:	4631      	mov	r1, r6
 800a366:	f001 f9af 	bl	800b6c8 <__mcmp>
 800a36a:	2800      	cmp	r0, #0
 800a36c:	da65      	bge.n	800a43a <_strtod_l+0x89a>
 800a36e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a370:	ea53 030a 	orrs.w	r3, r3, sl
 800a374:	f040 8087 	bne.w	800a486 <_strtod_l+0x8e6>
 800a378:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	f040 8082 	bne.w	800a486 <_strtod_l+0x8e6>
 800a382:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a386:	0d1b      	lsrs	r3, r3, #20
 800a388:	051b      	lsls	r3, r3, #20
 800a38a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a38e:	d97a      	bls.n	800a486 <_strtod_l+0x8e6>
 800a390:	696b      	ldr	r3, [r5, #20]
 800a392:	b913      	cbnz	r3, 800a39a <_strtod_l+0x7fa>
 800a394:	692b      	ldr	r3, [r5, #16]
 800a396:	2b01      	cmp	r3, #1
 800a398:	dd75      	ble.n	800a486 <_strtod_l+0x8e6>
 800a39a:	4629      	mov	r1, r5
 800a39c:	2201      	movs	r2, #1
 800a39e:	4620      	mov	r0, r4
 800a3a0:	f001 f926 	bl	800b5f0 <__lshift>
 800a3a4:	4631      	mov	r1, r6
 800a3a6:	4605      	mov	r5, r0
 800a3a8:	f001 f98e 	bl	800b6c8 <__mcmp>
 800a3ac:	2800      	cmp	r0, #0
 800a3ae:	dd6a      	ble.n	800a486 <_strtod_l+0x8e6>
 800a3b0:	9904      	ldr	r1, [sp, #16]
 800a3b2:	4a55      	ldr	r2, [pc, #340]	; (800a508 <_strtod_l+0x968>)
 800a3b4:	465b      	mov	r3, fp
 800a3b6:	2900      	cmp	r1, #0
 800a3b8:	f000 8085 	beq.w	800a4c6 <_strtod_l+0x926>
 800a3bc:	ea02 010b 	and.w	r1, r2, fp
 800a3c0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a3c4:	dc7f      	bgt.n	800a4c6 <_strtod_l+0x926>
 800a3c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a3ca:	f77f aeaa 	ble.w	800a122 <_strtod_l+0x582>
 800a3ce:	4a4f      	ldr	r2, [pc, #316]	; (800a50c <_strtod_l+0x96c>)
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800a3d6:	4650      	mov	r0, sl
 800a3d8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800a3dc:	4659      	mov	r1, fp
 800a3de:	f7f6 f90b 	bl	80005f8 <__aeabi_dmul>
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	4303      	orrs	r3, r0
 800a3e6:	bf08      	it	eq
 800a3e8:	2322      	moveq	r3, #34	; 0x22
 800a3ea:	4682      	mov	sl, r0
 800a3ec:	468b      	mov	fp, r1
 800a3ee:	bf08      	it	eq
 800a3f0:	6023      	streq	r3, [r4, #0]
 800a3f2:	e62b      	b.n	800a04c <_strtod_l+0x4ac>
 800a3f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a3f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a3fc:	ea03 0a0a 	and.w	sl, r3, sl
 800a400:	e6de      	b.n	800a1c0 <_strtod_l+0x620>
 800a402:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a406:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a40a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a40e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a412:	fa01 f308 	lsl.w	r3, r1, r8
 800a416:	930c      	str	r3, [sp, #48]	; 0x30
 800a418:	9111      	str	r1, [sp, #68]	; 0x44
 800a41a:	e741      	b.n	800a2a0 <_strtod_l+0x700>
 800a41c:	2300      	movs	r3, #0
 800a41e:	930c      	str	r3, [sp, #48]	; 0x30
 800a420:	2301      	movs	r3, #1
 800a422:	9311      	str	r3, [sp, #68]	; 0x44
 800a424:	e73c      	b.n	800a2a0 <_strtod_l+0x700>
 800a426:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a428:	4642      	mov	r2, r8
 800a42a:	4620      	mov	r0, r4
 800a42c:	f001 f8e0 	bl	800b5f0 <__lshift>
 800a430:	901e      	str	r0, [sp, #120]	; 0x78
 800a432:	2800      	cmp	r0, #0
 800a434:	f47f af66 	bne.w	800a304 <_strtod_l+0x764>
 800a438:	e5fe      	b.n	800a038 <_strtod_l+0x498>
 800a43a:	465f      	mov	r7, fp
 800a43c:	d16e      	bne.n	800a51c <_strtod_l+0x97c>
 800a43e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a440:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a444:	b342      	cbz	r2, 800a498 <_strtod_l+0x8f8>
 800a446:	4a32      	ldr	r2, [pc, #200]	; (800a510 <_strtod_l+0x970>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d128      	bne.n	800a49e <_strtod_l+0x8fe>
 800a44c:	9b04      	ldr	r3, [sp, #16]
 800a44e:	4650      	mov	r0, sl
 800a450:	b1eb      	cbz	r3, 800a48e <_strtod_l+0x8ee>
 800a452:	4a2d      	ldr	r2, [pc, #180]	; (800a508 <_strtod_l+0x968>)
 800a454:	403a      	ands	r2, r7
 800a456:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a45a:	f04f 31ff 	mov.w	r1, #4294967295
 800a45e:	d819      	bhi.n	800a494 <_strtod_l+0x8f4>
 800a460:	0d12      	lsrs	r2, r2, #20
 800a462:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a466:	fa01 f303 	lsl.w	r3, r1, r3
 800a46a:	4298      	cmp	r0, r3
 800a46c:	d117      	bne.n	800a49e <_strtod_l+0x8fe>
 800a46e:	4b29      	ldr	r3, [pc, #164]	; (800a514 <_strtod_l+0x974>)
 800a470:	429f      	cmp	r7, r3
 800a472:	d102      	bne.n	800a47a <_strtod_l+0x8da>
 800a474:	3001      	adds	r0, #1
 800a476:	f43f addf 	beq.w	800a038 <_strtod_l+0x498>
 800a47a:	4b23      	ldr	r3, [pc, #140]	; (800a508 <_strtod_l+0x968>)
 800a47c:	403b      	ands	r3, r7
 800a47e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a482:	f04f 0a00 	mov.w	sl, #0
 800a486:	9b04      	ldr	r3, [sp, #16]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d1a0      	bne.n	800a3ce <_strtod_l+0x82e>
 800a48c:	e5de      	b.n	800a04c <_strtod_l+0x4ac>
 800a48e:	f04f 33ff 	mov.w	r3, #4294967295
 800a492:	e7ea      	b.n	800a46a <_strtod_l+0x8ca>
 800a494:	460b      	mov	r3, r1
 800a496:	e7e8      	b.n	800a46a <_strtod_l+0x8ca>
 800a498:	ea53 030a 	orrs.w	r3, r3, sl
 800a49c:	d088      	beq.n	800a3b0 <_strtod_l+0x810>
 800a49e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4a0:	b1db      	cbz	r3, 800a4da <_strtod_l+0x93a>
 800a4a2:	423b      	tst	r3, r7
 800a4a4:	d0ef      	beq.n	800a486 <_strtod_l+0x8e6>
 800a4a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4a8:	9a04      	ldr	r2, [sp, #16]
 800a4aa:	4650      	mov	r0, sl
 800a4ac:	4659      	mov	r1, fp
 800a4ae:	b1c3      	cbz	r3, 800a4e2 <_strtod_l+0x942>
 800a4b0:	f7ff fb59 	bl	8009b66 <sulp>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a4bc:	f7f5 fee6 	bl	800028c <__adddf3>
 800a4c0:	4682      	mov	sl, r0
 800a4c2:	468b      	mov	fp, r1
 800a4c4:	e7df      	b.n	800a486 <_strtod_l+0x8e6>
 800a4c6:	4013      	ands	r3, r2
 800a4c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a4cc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a4d0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a4d4:	f04f 3aff 	mov.w	sl, #4294967295
 800a4d8:	e7d5      	b.n	800a486 <_strtod_l+0x8e6>
 800a4da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4dc:	ea13 0f0a 	tst.w	r3, sl
 800a4e0:	e7e0      	b.n	800a4a4 <_strtod_l+0x904>
 800a4e2:	f7ff fb40 	bl	8009b66 <sulp>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a4ee:	f7f5 fecb 	bl	8000288 <__aeabi_dsub>
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	4682      	mov	sl, r0
 800a4f8:	468b      	mov	fp, r1
 800a4fa:	f7f6 fae5 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4fe:	2800      	cmp	r0, #0
 800a500:	d0c1      	beq.n	800a486 <_strtod_l+0x8e6>
 800a502:	e60e      	b.n	800a122 <_strtod_l+0x582>
 800a504:	fffffc02 	.word	0xfffffc02
 800a508:	7ff00000 	.word	0x7ff00000
 800a50c:	39500000 	.word	0x39500000
 800a510:	000fffff 	.word	0x000fffff
 800a514:	7fefffff 	.word	0x7fefffff
 800a518:	0800eff0 	.word	0x0800eff0
 800a51c:	4631      	mov	r1, r6
 800a51e:	4628      	mov	r0, r5
 800a520:	f001 fa4e 	bl	800b9c0 <__ratio>
 800a524:	ec59 8b10 	vmov	r8, r9, d0
 800a528:	ee10 0a10 	vmov	r0, s0
 800a52c:	2200      	movs	r2, #0
 800a52e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a532:	4649      	mov	r1, r9
 800a534:	f7f6 fadc 	bl	8000af0 <__aeabi_dcmple>
 800a538:	2800      	cmp	r0, #0
 800a53a:	d07c      	beq.n	800a636 <_strtod_l+0xa96>
 800a53c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d04c      	beq.n	800a5dc <_strtod_l+0xa3c>
 800a542:	4b95      	ldr	r3, [pc, #596]	; (800a798 <_strtod_l+0xbf8>)
 800a544:	2200      	movs	r2, #0
 800a546:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a54a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a798 <_strtod_l+0xbf8>
 800a54e:	f04f 0800 	mov.w	r8, #0
 800a552:	4b92      	ldr	r3, [pc, #584]	; (800a79c <_strtod_l+0xbfc>)
 800a554:	403b      	ands	r3, r7
 800a556:	9311      	str	r3, [sp, #68]	; 0x44
 800a558:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a55a:	4b91      	ldr	r3, [pc, #580]	; (800a7a0 <_strtod_l+0xc00>)
 800a55c:	429a      	cmp	r2, r3
 800a55e:	f040 80b2 	bne.w	800a6c6 <_strtod_l+0xb26>
 800a562:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a566:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a56a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a56e:	ec4b ab10 	vmov	d0, sl, fp
 800a572:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800a576:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a57a:	f001 f949 	bl	800b810 <__ulp>
 800a57e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a582:	ec53 2b10 	vmov	r2, r3, d0
 800a586:	f7f6 f837 	bl	80005f8 <__aeabi_dmul>
 800a58a:	4652      	mov	r2, sl
 800a58c:	465b      	mov	r3, fp
 800a58e:	f7f5 fe7d 	bl	800028c <__adddf3>
 800a592:	460b      	mov	r3, r1
 800a594:	4981      	ldr	r1, [pc, #516]	; (800a79c <_strtod_l+0xbfc>)
 800a596:	4a83      	ldr	r2, [pc, #524]	; (800a7a4 <_strtod_l+0xc04>)
 800a598:	4019      	ands	r1, r3
 800a59a:	4291      	cmp	r1, r2
 800a59c:	4682      	mov	sl, r0
 800a59e:	d95e      	bls.n	800a65e <_strtod_l+0xabe>
 800a5a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5a2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d103      	bne.n	800a5b2 <_strtod_l+0xa12>
 800a5aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	f43f ad43 	beq.w	800a038 <_strtod_l+0x498>
 800a5b2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800a7b0 <_strtod_l+0xc10>
 800a5b6:	f04f 3aff 	mov.w	sl, #4294967295
 800a5ba:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a5bc:	4620      	mov	r0, r4
 800a5be:	f000 fdfb 	bl	800b1b8 <_Bfree>
 800a5c2:	9907      	ldr	r1, [sp, #28]
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	f000 fdf7 	bl	800b1b8 <_Bfree>
 800a5ca:	4631      	mov	r1, r6
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	f000 fdf3 	bl	800b1b8 <_Bfree>
 800a5d2:	4629      	mov	r1, r5
 800a5d4:	4620      	mov	r0, r4
 800a5d6:	f000 fdef 	bl	800b1b8 <_Bfree>
 800a5da:	e613      	b.n	800a204 <_strtod_l+0x664>
 800a5dc:	f1ba 0f00 	cmp.w	sl, #0
 800a5e0:	d11b      	bne.n	800a61a <_strtod_l+0xa7a>
 800a5e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a5e6:	b9f3      	cbnz	r3, 800a626 <_strtod_l+0xa86>
 800a5e8:	4b6b      	ldr	r3, [pc, #428]	; (800a798 <_strtod_l+0xbf8>)
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	4640      	mov	r0, r8
 800a5ee:	4649      	mov	r1, r9
 800a5f0:	f7f6 fa74 	bl	8000adc <__aeabi_dcmplt>
 800a5f4:	b9d0      	cbnz	r0, 800a62c <_strtod_l+0xa8c>
 800a5f6:	4640      	mov	r0, r8
 800a5f8:	4649      	mov	r1, r9
 800a5fa:	4b6b      	ldr	r3, [pc, #428]	; (800a7a8 <_strtod_l+0xc08>)
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	f7f5 fffb 	bl	80005f8 <__aeabi_dmul>
 800a602:	4680      	mov	r8, r0
 800a604:	4689      	mov	r9, r1
 800a606:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a60a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800a60e:	931b      	str	r3, [sp, #108]	; 0x6c
 800a610:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a614:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a618:	e79b      	b.n	800a552 <_strtod_l+0x9b2>
 800a61a:	f1ba 0f01 	cmp.w	sl, #1
 800a61e:	d102      	bne.n	800a626 <_strtod_l+0xa86>
 800a620:	2f00      	cmp	r7, #0
 800a622:	f43f ad7e 	beq.w	800a122 <_strtod_l+0x582>
 800a626:	4b61      	ldr	r3, [pc, #388]	; (800a7ac <_strtod_l+0xc0c>)
 800a628:	2200      	movs	r2, #0
 800a62a:	e78c      	b.n	800a546 <_strtod_l+0x9a6>
 800a62c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a7a8 <_strtod_l+0xc08>
 800a630:	f04f 0800 	mov.w	r8, #0
 800a634:	e7e7      	b.n	800a606 <_strtod_l+0xa66>
 800a636:	4b5c      	ldr	r3, [pc, #368]	; (800a7a8 <_strtod_l+0xc08>)
 800a638:	4640      	mov	r0, r8
 800a63a:	4649      	mov	r1, r9
 800a63c:	2200      	movs	r2, #0
 800a63e:	f7f5 ffdb 	bl	80005f8 <__aeabi_dmul>
 800a642:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a644:	4680      	mov	r8, r0
 800a646:	4689      	mov	r9, r1
 800a648:	b933      	cbnz	r3, 800a658 <_strtod_l+0xab8>
 800a64a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a64e:	9012      	str	r0, [sp, #72]	; 0x48
 800a650:	9313      	str	r3, [sp, #76]	; 0x4c
 800a652:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a656:	e7dd      	b.n	800a614 <_strtod_l+0xa74>
 800a658:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800a65c:	e7f9      	b.n	800a652 <_strtod_l+0xab2>
 800a65e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a662:	9b04      	ldr	r3, [sp, #16]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d1a8      	bne.n	800a5ba <_strtod_l+0xa1a>
 800a668:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a66c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a66e:	0d1b      	lsrs	r3, r3, #20
 800a670:	051b      	lsls	r3, r3, #20
 800a672:	429a      	cmp	r2, r3
 800a674:	d1a1      	bne.n	800a5ba <_strtod_l+0xa1a>
 800a676:	4640      	mov	r0, r8
 800a678:	4649      	mov	r1, r9
 800a67a:	f7f6 fb1d 	bl	8000cb8 <__aeabi_d2lz>
 800a67e:	f7f5 ff8d 	bl	800059c <__aeabi_l2d>
 800a682:	4602      	mov	r2, r0
 800a684:	460b      	mov	r3, r1
 800a686:	4640      	mov	r0, r8
 800a688:	4649      	mov	r1, r9
 800a68a:	f7f5 fdfd 	bl	8000288 <__aeabi_dsub>
 800a68e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a690:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a694:	ea43 030a 	orr.w	r3, r3, sl
 800a698:	4313      	orrs	r3, r2
 800a69a:	4680      	mov	r8, r0
 800a69c:	4689      	mov	r9, r1
 800a69e:	d053      	beq.n	800a748 <_strtod_l+0xba8>
 800a6a0:	a335      	add	r3, pc, #212	; (adr r3, 800a778 <_strtod_l+0xbd8>)
 800a6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a6:	f7f6 fa19 	bl	8000adc <__aeabi_dcmplt>
 800a6aa:	2800      	cmp	r0, #0
 800a6ac:	f47f acce 	bne.w	800a04c <_strtod_l+0x4ac>
 800a6b0:	a333      	add	r3, pc, #204	; (adr r3, 800a780 <_strtod_l+0xbe0>)
 800a6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b6:	4640      	mov	r0, r8
 800a6b8:	4649      	mov	r1, r9
 800a6ba:	f7f6 fa2d 	bl	8000b18 <__aeabi_dcmpgt>
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	f43f af7b 	beq.w	800a5ba <_strtod_l+0xa1a>
 800a6c4:	e4c2      	b.n	800a04c <_strtod_l+0x4ac>
 800a6c6:	9b04      	ldr	r3, [sp, #16]
 800a6c8:	b333      	cbz	r3, 800a718 <_strtod_l+0xb78>
 800a6ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a6d0:	d822      	bhi.n	800a718 <_strtod_l+0xb78>
 800a6d2:	a32d      	add	r3, pc, #180	; (adr r3, 800a788 <_strtod_l+0xbe8>)
 800a6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d8:	4640      	mov	r0, r8
 800a6da:	4649      	mov	r1, r9
 800a6dc:	f7f6 fa08 	bl	8000af0 <__aeabi_dcmple>
 800a6e0:	b1a0      	cbz	r0, 800a70c <_strtod_l+0xb6c>
 800a6e2:	4649      	mov	r1, r9
 800a6e4:	4640      	mov	r0, r8
 800a6e6:	f7f6 fa5f 	bl	8000ba8 <__aeabi_d2uiz>
 800a6ea:	2801      	cmp	r0, #1
 800a6ec:	bf38      	it	cc
 800a6ee:	2001      	movcc	r0, #1
 800a6f0:	f7f5 ff08 	bl	8000504 <__aeabi_ui2d>
 800a6f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6f6:	4680      	mov	r8, r0
 800a6f8:	4689      	mov	r9, r1
 800a6fa:	bb13      	cbnz	r3, 800a742 <_strtod_l+0xba2>
 800a6fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a700:	9014      	str	r0, [sp, #80]	; 0x50
 800a702:	9315      	str	r3, [sp, #84]	; 0x54
 800a704:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a708:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a70c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a70e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a710:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a714:	1a9b      	subs	r3, r3, r2
 800a716:	930d      	str	r3, [sp, #52]	; 0x34
 800a718:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a71c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a720:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a724:	f001 f874 	bl	800b810 <__ulp>
 800a728:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a72c:	ec53 2b10 	vmov	r2, r3, d0
 800a730:	f7f5 ff62 	bl	80005f8 <__aeabi_dmul>
 800a734:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a738:	f7f5 fda8 	bl	800028c <__adddf3>
 800a73c:	4682      	mov	sl, r0
 800a73e:	468b      	mov	fp, r1
 800a740:	e78f      	b.n	800a662 <_strtod_l+0xac2>
 800a742:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800a746:	e7dd      	b.n	800a704 <_strtod_l+0xb64>
 800a748:	a311      	add	r3, pc, #68	; (adr r3, 800a790 <_strtod_l+0xbf0>)
 800a74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74e:	f7f6 f9c5 	bl	8000adc <__aeabi_dcmplt>
 800a752:	e7b4      	b.n	800a6be <_strtod_l+0xb1e>
 800a754:	2300      	movs	r3, #0
 800a756:	930e      	str	r3, [sp, #56]	; 0x38
 800a758:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a75a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a75c:	6013      	str	r3, [r2, #0]
 800a75e:	f7ff ba65 	b.w	8009c2c <_strtod_l+0x8c>
 800a762:	2b65      	cmp	r3, #101	; 0x65
 800a764:	f43f ab5d 	beq.w	8009e22 <_strtod_l+0x282>
 800a768:	2b45      	cmp	r3, #69	; 0x45
 800a76a:	f43f ab5a 	beq.w	8009e22 <_strtod_l+0x282>
 800a76e:	2201      	movs	r2, #1
 800a770:	f7ff bb92 	b.w	8009e98 <_strtod_l+0x2f8>
 800a774:	f3af 8000 	nop.w
 800a778:	94a03595 	.word	0x94a03595
 800a77c:	3fdfffff 	.word	0x3fdfffff
 800a780:	35afe535 	.word	0x35afe535
 800a784:	3fe00000 	.word	0x3fe00000
 800a788:	ffc00000 	.word	0xffc00000
 800a78c:	41dfffff 	.word	0x41dfffff
 800a790:	94a03595 	.word	0x94a03595
 800a794:	3fcfffff 	.word	0x3fcfffff
 800a798:	3ff00000 	.word	0x3ff00000
 800a79c:	7ff00000 	.word	0x7ff00000
 800a7a0:	7fe00000 	.word	0x7fe00000
 800a7a4:	7c9fffff 	.word	0x7c9fffff
 800a7a8:	3fe00000 	.word	0x3fe00000
 800a7ac:	bff00000 	.word	0xbff00000
 800a7b0:	7fefffff 	.word	0x7fefffff

0800a7b4 <strtod>:
 800a7b4:	460a      	mov	r2, r1
 800a7b6:	4601      	mov	r1, r0
 800a7b8:	4802      	ldr	r0, [pc, #8]	; (800a7c4 <strtod+0x10>)
 800a7ba:	4b03      	ldr	r3, [pc, #12]	; (800a7c8 <strtod+0x14>)
 800a7bc:	6800      	ldr	r0, [r0, #0]
 800a7be:	f7ff b9ef 	b.w	8009ba0 <_strtod_l>
 800a7c2:	bf00      	nop
 800a7c4:	2000034c 	.word	0x2000034c
 800a7c8:	200003b4 	.word	0x200003b4

0800a7cc <strtok>:
 800a7cc:	4b16      	ldr	r3, [pc, #88]	; (800a828 <strtok+0x5c>)
 800a7ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7d0:	681e      	ldr	r6, [r3, #0]
 800a7d2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800a7d4:	4605      	mov	r5, r0
 800a7d6:	b9fc      	cbnz	r4, 800a818 <strtok+0x4c>
 800a7d8:	2050      	movs	r0, #80	; 0x50
 800a7da:	9101      	str	r1, [sp, #4]
 800a7dc:	f7ff f8be 	bl	800995c <malloc>
 800a7e0:	9901      	ldr	r1, [sp, #4]
 800a7e2:	65b0      	str	r0, [r6, #88]	; 0x58
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	b920      	cbnz	r0, 800a7f2 <strtok+0x26>
 800a7e8:	4b10      	ldr	r3, [pc, #64]	; (800a82c <strtok+0x60>)
 800a7ea:	4811      	ldr	r0, [pc, #68]	; (800a830 <strtok+0x64>)
 800a7ec:	2157      	movs	r1, #87	; 0x57
 800a7ee:	f000 f8d7 	bl	800a9a0 <__assert_func>
 800a7f2:	e9c0 4400 	strd	r4, r4, [r0]
 800a7f6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a7fa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a7fe:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a802:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a806:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a80a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a80e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a812:	6184      	str	r4, [r0, #24]
 800a814:	7704      	strb	r4, [r0, #28]
 800a816:	6244      	str	r4, [r0, #36]	; 0x24
 800a818:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800a81a:	2301      	movs	r3, #1
 800a81c:	4628      	mov	r0, r5
 800a81e:	b002      	add	sp, #8
 800a820:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a824:	f000 b806 	b.w	800a834 <__strtok_r>
 800a828:	2000034c 	.word	0x2000034c
 800a82c:	0800f018 	.word	0x0800f018
 800a830:	0800f02f 	.word	0x0800f02f

0800a834 <__strtok_r>:
 800a834:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a836:	b908      	cbnz	r0, 800a83c <__strtok_r+0x8>
 800a838:	6810      	ldr	r0, [r2, #0]
 800a83a:	b188      	cbz	r0, 800a860 <__strtok_r+0x2c>
 800a83c:	4604      	mov	r4, r0
 800a83e:	4620      	mov	r0, r4
 800a840:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a844:	460f      	mov	r7, r1
 800a846:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a84a:	b91e      	cbnz	r6, 800a854 <__strtok_r+0x20>
 800a84c:	b965      	cbnz	r5, 800a868 <__strtok_r+0x34>
 800a84e:	6015      	str	r5, [r2, #0]
 800a850:	4628      	mov	r0, r5
 800a852:	e005      	b.n	800a860 <__strtok_r+0x2c>
 800a854:	42b5      	cmp	r5, r6
 800a856:	d1f6      	bne.n	800a846 <__strtok_r+0x12>
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d1f0      	bne.n	800a83e <__strtok_r+0xa>
 800a85c:	6014      	str	r4, [r2, #0]
 800a85e:	7003      	strb	r3, [r0, #0]
 800a860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a862:	461c      	mov	r4, r3
 800a864:	e00c      	b.n	800a880 <__strtok_r+0x4c>
 800a866:	b915      	cbnz	r5, 800a86e <__strtok_r+0x3a>
 800a868:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a86c:	460e      	mov	r6, r1
 800a86e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a872:	42ab      	cmp	r3, r5
 800a874:	d1f7      	bne.n	800a866 <__strtok_r+0x32>
 800a876:	2b00      	cmp	r3, #0
 800a878:	d0f3      	beq.n	800a862 <__strtok_r+0x2e>
 800a87a:	2300      	movs	r3, #0
 800a87c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a880:	6014      	str	r4, [r2, #0]
 800a882:	e7ed      	b.n	800a860 <__strtok_r+0x2c>

0800a884 <_strtol_l.isra.0>:
 800a884:	2b01      	cmp	r3, #1
 800a886:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a88a:	d001      	beq.n	800a890 <_strtol_l.isra.0+0xc>
 800a88c:	2b24      	cmp	r3, #36	; 0x24
 800a88e:	d906      	bls.n	800a89e <_strtol_l.isra.0+0x1a>
 800a890:	f7ff f83a 	bl	8009908 <__errno>
 800a894:	2316      	movs	r3, #22
 800a896:	6003      	str	r3, [r0, #0]
 800a898:	2000      	movs	r0, #0
 800a89a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a89e:	4f3a      	ldr	r7, [pc, #232]	; (800a988 <_strtol_l.isra.0+0x104>)
 800a8a0:	468e      	mov	lr, r1
 800a8a2:	4676      	mov	r6, lr
 800a8a4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a8a8:	5de5      	ldrb	r5, [r4, r7]
 800a8aa:	f015 0508 	ands.w	r5, r5, #8
 800a8ae:	d1f8      	bne.n	800a8a2 <_strtol_l.isra.0+0x1e>
 800a8b0:	2c2d      	cmp	r4, #45	; 0x2d
 800a8b2:	d134      	bne.n	800a91e <_strtol_l.isra.0+0x9a>
 800a8b4:	f89e 4000 	ldrb.w	r4, [lr]
 800a8b8:	f04f 0801 	mov.w	r8, #1
 800a8bc:	f106 0e02 	add.w	lr, r6, #2
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d05c      	beq.n	800a97e <_strtol_l.isra.0+0xfa>
 800a8c4:	2b10      	cmp	r3, #16
 800a8c6:	d10c      	bne.n	800a8e2 <_strtol_l.isra.0+0x5e>
 800a8c8:	2c30      	cmp	r4, #48	; 0x30
 800a8ca:	d10a      	bne.n	800a8e2 <_strtol_l.isra.0+0x5e>
 800a8cc:	f89e 4000 	ldrb.w	r4, [lr]
 800a8d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a8d4:	2c58      	cmp	r4, #88	; 0x58
 800a8d6:	d14d      	bne.n	800a974 <_strtol_l.isra.0+0xf0>
 800a8d8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a8dc:	2310      	movs	r3, #16
 800a8de:	f10e 0e02 	add.w	lr, lr, #2
 800a8e2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a8e6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a8ea:	2600      	movs	r6, #0
 800a8ec:	fbbc f9f3 	udiv	r9, ip, r3
 800a8f0:	4635      	mov	r5, r6
 800a8f2:	fb03 ca19 	mls	sl, r3, r9, ip
 800a8f6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a8fa:	2f09      	cmp	r7, #9
 800a8fc:	d818      	bhi.n	800a930 <_strtol_l.isra.0+0xac>
 800a8fe:	463c      	mov	r4, r7
 800a900:	42a3      	cmp	r3, r4
 800a902:	dd24      	ble.n	800a94e <_strtol_l.isra.0+0xca>
 800a904:	2e00      	cmp	r6, #0
 800a906:	db1f      	blt.n	800a948 <_strtol_l.isra.0+0xc4>
 800a908:	45a9      	cmp	r9, r5
 800a90a:	d31d      	bcc.n	800a948 <_strtol_l.isra.0+0xc4>
 800a90c:	d101      	bne.n	800a912 <_strtol_l.isra.0+0x8e>
 800a90e:	45a2      	cmp	sl, r4
 800a910:	db1a      	blt.n	800a948 <_strtol_l.isra.0+0xc4>
 800a912:	fb05 4503 	mla	r5, r5, r3, r4
 800a916:	2601      	movs	r6, #1
 800a918:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a91c:	e7eb      	b.n	800a8f6 <_strtol_l.isra.0+0x72>
 800a91e:	2c2b      	cmp	r4, #43	; 0x2b
 800a920:	bf08      	it	eq
 800a922:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a926:	46a8      	mov	r8, r5
 800a928:	bf08      	it	eq
 800a92a:	f106 0e02 	addeq.w	lr, r6, #2
 800a92e:	e7c7      	b.n	800a8c0 <_strtol_l.isra.0+0x3c>
 800a930:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a934:	2f19      	cmp	r7, #25
 800a936:	d801      	bhi.n	800a93c <_strtol_l.isra.0+0xb8>
 800a938:	3c37      	subs	r4, #55	; 0x37
 800a93a:	e7e1      	b.n	800a900 <_strtol_l.isra.0+0x7c>
 800a93c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a940:	2f19      	cmp	r7, #25
 800a942:	d804      	bhi.n	800a94e <_strtol_l.isra.0+0xca>
 800a944:	3c57      	subs	r4, #87	; 0x57
 800a946:	e7db      	b.n	800a900 <_strtol_l.isra.0+0x7c>
 800a948:	f04f 36ff 	mov.w	r6, #4294967295
 800a94c:	e7e4      	b.n	800a918 <_strtol_l.isra.0+0x94>
 800a94e:	2e00      	cmp	r6, #0
 800a950:	da05      	bge.n	800a95e <_strtol_l.isra.0+0xda>
 800a952:	2322      	movs	r3, #34	; 0x22
 800a954:	6003      	str	r3, [r0, #0]
 800a956:	4665      	mov	r5, ip
 800a958:	b942      	cbnz	r2, 800a96c <_strtol_l.isra.0+0xe8>
 800a95a:	4628      	mov	r0, r5
 800a95c:	e79d      	b.n	800a89a <_strtol_l.isra.0+0x16>
 800a95e:	f1b8 0f00 	cmp.w	r8, #0
 800a962:	d000      	beq.n	800a966 <_strtol_l.isra.0+0xe2>
 800a964:	426d      	negs	r5, r5
 800a966:	2a00      	cmp	r2, #0
 800a968:	d0f7      	beq.n	800a95a <_strtol_l.isra.0+0xd6>
 800a96a:	b10e      	cbz	r6, 800a970 <_strtol_l.isra.0+0xec>
 800a96c:	f10e 31ff 	add.w	r1, lr, #4294967295
 800a970:	6011      	str	r1, [r2, #0]
 800a972:	e7f2      	b.n	800a95a <_strtol_l.isra.0+0xd6>
 800a974:	2430      	movs	r4, #48	; 0x30
 800a976:	2b00      	cmp	r3, #0
 800a978:	d1b3      	bne.n	800a8e2 <_strtol_l.isra.0+0x5e>
 800a97a:	2308      	movs	r3, #8
 800a97c:	e7b1      	b.n	800a8e2 <_strtol_l.isra.0+0x5e>
 800a97e:	2c30      	cmp	r4, #48	; 0x30
 800a980:	d0a4      	beq.n	800a8cc <_strtol_l.isra.0+0x48>
 800a982:	230a      	movs	r3, #10
 800a984:	e7ad      	b.n	800a8e2 <_strtol_l.isra.0+0x5e>
 800a986:	bf00      	nop
 800a988:	0800f0cd 	.word	0x0800f0cd

0800a98c <strtol>:
 800a98c:	4613      	mov	r3, r2
 800a98e:	460a      	mov	r2, r1
 800a990:	4601      	mov	r1, r0
 800a992:	4802      	ldr	r0, [pc, #8]	; (800a99c <strtol+0x10>)
 800a994:	6800      	ldr	r0, [r0, #0]
 800a996:	f7ff bf75 	b.w	800a884 <_strtol_l.isra.0>
 800a99a:	bf00      	nop
 800a99c:	2000034c 	.word	0x2000034c

0800a9a0 <__assert_func>:
 800a9a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9a2:	4614      	mov	r4, r2
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	4b09      	ldr	r3, [pc, #36]	; (800a9cc <__assert_func+0x2c>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4605      	mov	r5, r0
 800a9ac:	68d8      	ldr	r0, [r3, #12]
 800a9ae:	b14c      	cbz	r4, 800a9c4 <__assert_func+0x24>
 800a9b0:	4b07      	ldr	r3, [pc, #28]	; (800a9d0 <__assert_func+0x30>)
 800a9b2:	9100      	str	r1, [sp, #0]
 800a9b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a9b8:	4906      	ldr	r1, [pc, #24]	; (800a9d4 <__assert_func+0x34>)
 800a9ba:	462b      	mov	r3, r5
 800a9bc:	f000 f80e 	bl	800a9dc <fiprintf>
 800a9c0:	f001 fdb6 	bl	800c530 <abort>
 800a9c4:	4b04      	ldr	r3, [pc, #16]	; (800a9d8 <__assert_func+0x38>)
 800a9c6:	461c      	mov	r4, r3
 800a9c8:	e7f3      	b.n	800a9b2 <__assert_func+0x12>
 800a9ca:	bf00      	nop
 800a9cc:	2000034c 	.word	0x2000034c
 800a9d0:	0800f090 	.word	0x0800f090
 800a9d4:	0800f09d 	.word	0x0800f09d
 800a9d8:	0800f0cb 	.word	0x0800f0cb

0800a9dc <fiprintf>:
 800a9dc:	b40e      	push	{r1, r2, r3}
 800a9de:	b503      	push	{r0, r1, lr}
 800a9e0:	4601      	mov	r1, r0
 800a9e2:	ab03      	add	r3, sp, #12
 800a9e4:	4805      	ldr	r0, [pc, #20]	; (800a9fc <fiprintf+0x20>)
 800a9e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9ea:	6800      	ldr	r0, [r0, #0]
 800a9ec:	9301      	str	r3, [sp, #4]
 800a9ee:	f001 f9f3 	bl	800bdd8 <_vfiprintf_r>
 800a9f2:	b002      	add	sp, #8
 800a9f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9f8:	b003      	add	sp, #12
 800a9fa:	4770      	bx	lr
 800a9fc:	2000034c 	.word	0x2000034c

0800aa00 <rshift>:
 800aa00:	6903      	ldr	r3, [r0, #16]
 800aa02:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aa06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa0a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aa0e:	f100 0414 	add.w	r4, r0, #20
 800aa12:	dd45      	ble.n	800aaa0 <rshift+0xa0>
 800aa14:	f011 011f 	ands.w	r1, r1, #31
 800aa18:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aa1c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aa20:	d10c      	bne.n	800aa3c <rshift+0x3c>
 800aa22:	f100 0710 	add.w	r7, r0, #16
 800aa26:	4629      	mov	r1, r5
 800aa28:	42b1      	cmp	r1, r6
 800aa2a:	d334      	bcc.n	800aa96 <rshift+0x96>
 800aa2c:	1a9b      	subs	r3, r3, r2
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	1eea      	subs	r2, r5, #3
 800aa32:	4296      	cmp	r6, r2
 800aa34:	bf38      	it	cc
 800aa36:	2300      	movcc	r3, #0
 800aa38:	4423      	add	r3, r4
 800aa3a:	e015      	b.n	800aa68 <rshift+0x68>
 800aa3c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aa40:	f1c1 0820 	rsb	r8, r1, #32
 800aa44:	40cf      	lsrs	r7, r1
 800aa46:	f105 0e04 	add.w	lr, r5, #4
 800aa4a:	46a1      	mov	r9, r4
 800aa4c:	4576      	cmp	r6, lr
 800aa4e:	46f4      	mov	ip, lr
 800aa50:	d815      	bhi.n	800aa7e <rshift+0x7e>
 800aa52:	1a9b      	subs	r3, r3, r2
 800aa54:	009a      	lsls	r2, r3, #2
 800aa56:	3a04      	subs	r2, #4
 800aa58:	3501      	adds	r5, #1
 800aa5a:	42ae      	cmp	r6, r5
 800aa5c:	bf38      	it	cc
 800aa5e:	2200      	movcc	r2, #0
 800aa60:	18a3      	adds	r3, r4, r2
 800aa62:	50a7      	str	r7, [r4, r2]
 800aa64:	b107      	cbz	r7, 800aa68 <rshift+0x68>
 800aa66:	3304      	adds	r3, #4
 800aa68:	1b1a      	subs	r2, r3, r4
 800aa6a:	42a3      	cmp	r3, r4
 800aa6c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aa70:	bf08      	it	eq
 800aa72:	2300      	moveq	r3, #0
 800aa74:	6102      	str	r2, [r0, #16]
 800aa76:	bf08      	it	eq
 800aa78:	6143      	streq	r3, [r0, #20]
 800aa7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa7e:	f8dc c000 	ldr.w	ip, [ip]
 800aa82:	fa0c fc08 	lsl.w	ip, ip, r8
 800aa86:	ea4c 0707 	orr.w	r7, ip, r7
 800aa8a:	f849 7b04 	str.w	r7, [r9], #4
 800aa8e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa92:	40cf      	lsrs	r7, r1
 800aa94:	e7da      	b.n	800aa4c <rshift+0x4c>
 800aa96:	f851 cb04 	ldr.w	ip, [r1], #4
 800aa9a:	f847 cf04 	str.w	ip, [r7, #4]!
 800aa9e:	e7c3      	b.n	800aa28 <rshift+0x28>
 800aaa0:	4623      	mov	r3, r4
 800aaa2:	e7e1      	b.n	800aa68 <rshift+0x68>

0800aaa4 <__hexdig_fun>:
 800aaa4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800aaa8:	2b09      	cmp	r3, #9
 800aaaa:	d802      	bhi.n	800aab2 <__hexdig_fun+0xe>
 800aaac:	3820      	subs	r0, #32
 800aaae:	b2c0      	uxtb	r0, r0
 800aab0:	4770      	bx	lr
 800aab2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800aab6:	2b05      	cmp	r3, #5
 800aab8:	d801      	bhi.n	800aabe <__hexdig_fun+0x1a>
 800aaba:	3847      	subs	r0, #71	; 0x47
 800aabc:	e7f7      	b.n	800aaae <__hexdig_fun+0xa>
 800aabe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800aac2:	2b05      	cmp	r3, #5
 800aac4:	d801      	bhi.n	800aaca <__hexdig_fun+0x26>
 800aac6:	3827      	subs	r0, #39	; 0x27
 800aac8:	e7f1      	b.n	800aaae <__hexdig_fun+0xa>
 800aaca:	2000      	movs	r0, #0
 800aacc:	4770      	bx	lr
	...

0800aad0 <__gethex>:
 800aad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aad4:	ed2d 8b02 	vpush	{d8}
 800aad8:	b089      	sub	sp, #36	; 0x24
 800aada:	ee08 0a10 	vmov	s16, r0
 800aade:	9304      	str	r3, [sp, #16]
 800aae0:	4bbc      	ldr	r3, [pc, #752]	; (800add4 <__gethex+0x304>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	9301      	str	r3, [sp, #4]
 800aae6:	4618      	mov	r0, r3
 800aae8:	468b      	mov	fp, r1
 800aaea:	4690      	mov	r8, r2
 800aaec:	f7f5 fb70 	bl	80001d0 <strlen>
 800aaf0:	9b01      	ldr	r3, [sp, #4]
 800aaf2:	f8db 2000 	ldr.w	r2, [fp]
 800aaf6:	4403      	add	r3, r0
 800aaf8:	4682      	mov	sl, r0
 800aafa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800aafe:	9305      	str	r3, [sp, #20]
 800ab00:	1c93      	adds	r3, r2, #2
 800ab02:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ab06:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ab0a:	32fe      	adds	r2, #254	; 0xfe
 800ab0c:	18d1      	adds	r1, r2, r3
 800ab0e:	461f      	mov	r7, r3
 800ab10:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ab14:	9100      	str	r1, [sp, #0]
 800ab16:	2830      	cmp	r0, #48	; 0x30
 800ab18:	d0f8      	beq.n	800ab0c <__gethex+0x3c>
 800ab1a:	f7ff ffc3 	bl	800aaa4 <__hexdig_fun>
 800ab1e:	4604      	mov	r4, r0
 800ab20:	2800      	cmp	r0, #0
 800ab22:	d13a      	bne.n	800ab9a <__gethex+0xca>
 800ab24:	9901      	ldr	r1, [sp, #4]
 800ab26:	4652      	mov	r2, sl
 800ab28:	4638      	mov	r0, r7
 800ab2a:	f001 fc21 	bl	800c370 <strncmp>
 800ab2e:	4605      	mov	r5, r0
 800ab30:	2800      	cmp	r0, #0
 800ab32:	d168      	bne.n	800ac06 <__gethex+0x136>
 800ab34:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ab38:	eb07 060a 	add.w	r6, r7, sl
 800ab3c:	f7ff ffb2 	bl	800aaa4 <__hexdig_fun>
 800ab40:	2800      	cmp	r0, #0
 800ab42:	d062      	beq.n	800ac0a <__gethex+0x13a>
 800ab44:	4633      	mov	r3, r6
 800ab46:	7818      	ldrb	r0, [r3, #0]
 800ab48:	2830      	cmp	r0, #48	; 0x30
 800ab4a:	461f      	mov	r7, r3
 800ab4c:	f103 0301 	add.w	r3, r3, #1
 800ab50:	d0f9      	beq.n	800ab46 <__gethex+0x76>
 800ab52:	f7ff ffa7 	bl	800aaa4 <__hexdig_fun>
 800ab56:	2301      	movs	r3, #1
 800ab58:	fab0 f480 	clz	r4, r0
 800ab5c:	0964      	lsrs	r4, r4, #5
 800ab5e:	4635      	mov	r5, r6
 800ab60:	9300      	str	r3, [sp, #0]
 800ab62:	463a      	mov	r2, r7
 800ab64:	4616      	mov	r6, r2
 800ab66:	3201      	adds	r2, #1
 800ab68:	7830      	ldrb	r0, [r6, #0]
 800ab6a:	f7ff ff9b 	bl	800aaa4 <__hexdig_fun>
 800ab6e:	2800      	cmp	r0, #0
 800ab70:	d1f8      	bne.n	800ab64 <__gethex+0x94>
 800ab72:	9901      	ldr	r1, [sp, #4]
 800ab74:	4652      	mov	r2, sl
 800ab76:	4630      	mov	r0, r6
 800ab78:	f001 fbfa 	bl	800c370 <strncmp>
 800ab7c:	b980      	cbnz	r0, 800aba0 <__gethex+0xd0>
 800ab7e:	b94d      	cbnz	r5, 800ab94 <__gethex+0xc4>
 800ab80:	eb06 050a 	add.w	r5, r6, sl
 800ab84:	462a      	mov	r2, r5
 800ab86:	4616      	mov	r6, r2
 800ab88:	3201      	adds	r2, #1
 800ab8a:	7830      	ldrb	r0, [r6, #0]
 800ab8c:	f7ff ff8a 	bl	800aaa4 <__hexdig_fun>
 800ab90:	2800      	cmp	r0, #0
 800ab92:	d1f8      	bne.n	800ab86 <__gethex+0xb6>
 800ab94:	1bad      	subs	r5, r5, r6
 800ab96:	00ad      	lsls	r5, r5, #2
 800ab98:	e004      	b.n	800aba4 <__gethex+0xd4>
 800ab9a:	2400      	movs	r4, #0
 800ab9c:	4625      	mov	r5, r4
 800ab9e:	e7e0      	b.n	800ab62 <__gethex+0x92>
 800aba0:	2d00      	cmp	r5, #0
 800aba2:	d1f7      	bne.n	800ab94 <__gethex+0xc4>
 800aba4:	7833      	ldrb	r3, [r6, #0]
 800aba6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800abaa:	2b50      	cmp	r3, #80	; 0x50
 800abac:	d13b      	bne.n	800ac26 <__gethex+0x156>
 800abae:	7873      	ldrb	r3, [r6, #1]
 800abb0:	2b2b      	cmp	r3, #43	; 0x2b
 800abb2:	d02c      	beq.n	800ac0e <__gethex+0x13e>
 800abb4:	2b2d      	cmp	r3, #45	; 0x2d
 800abb6:	d02e      	beq.n	800ac16 <__gethex+0x146>
 800abb8:	1c71      	adds	r1, r6, #1
 800abba:	f04f 0900 	mov.w	r9, #0
 800abbe:	7808      	ldrb	r0, [r1, #0]
 800abc0:	f7ff ff70 	bl	800aaa4 <__hexdig_fun>
 800abc4:	1e43      	subs	r3, r0, #1
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	2b18      	cmp	r3, #24
 800abca:	d82c      	bhi.n	800ac26 <__gethex+0x156>
 800abcc:	f1a0 0210 	sub.w	r2, r0, #16
 800abd0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800abd4:	f7ff ff66 	bl	800aaa4 <__hexdig_fun>
 800abd8:	1e43      	subs	r3, r0, #1
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	2b18      	cmp	r3, #24
 800abde:	d91d      	bls.n	800ac1c <__gethex+0x14c>
 800abe0:	f1b9 0f00 	cmp.w	r9, #0
 800abe4:	d000      	beq.n	800abe8 <__gethex+0x118>
 800abe6:	4252      	negs	r2, r2
 800abe8:	4415      	add	r5, r2
 800abea:	f8cb 1000 	str.w	r1, [fp]
 800abee:	b1e4      	cbz	r4, 800ac2a <__gethex+0x15a>
 800abf0:	9b00      	ldr	r3, [sp, #0]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	bf14      	ite	ne
 800abf6:	2700      	movne	r7, #0
 800abf8:	2706      	moveq	r7, #6
 800abfa:	4638      	mov	r0, r7
 800abfc:	b009      	add	sp, #36	; 0x24
 800abfe:	ecbd 8b02 	vpop	{d8}
 800ac02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac06:	463e      	mov	r6, r7
 800ac08:	4625      	mov	r5, r4
 800ac0a:	2401      	movs	r4, #1
 800ac0c:	e7ca      	b.n	800aba4 <__gethex+0xd4>
 800ac0e:	f04f 0900 	mov.w	r9, #0
 800ac12:	1cb1      	adds	r1, r6, #2
 800ac14:	e7d3      	b.n	800abbe <__gethex+0xee>
 800ac16:	f04f 0901 	mov.w	r9, #1
 800ac1a:	e7fa      	b.n	800ac12 <__gethex+0x142>
 800ac1c:	230a      	movs	r3, #10
 800ac1e:	fb03 0202 	mla	r2, r3, r2, r0
 800ac22:	3a10      	subs	r2, #16
 800ac24:	e7d4      	b.n	800abd0 <__gethex+0x100>
 800ac26:	4631      	mov	r1, r6
 800ac28:	e7df      	b.n	800abea <__gethex+0x11a>
 800ac2a:	1bf3      	subs	r3, r6, r7
 800ac2c:	3b01      	subs	r3, #1
 800ac2e:	4621      	mov	r1, r4
 800ac30:	2b07      	cmp	r3, #7
 800ac32:	dc0b      	bgt.n	800ac4c <__gethex+0x17c>
 800ac34:	ee18 0a10 	vmov	r0, s16
 800ac38:	f000 fa7e 	bl	800b138 <_Balloc>
 800ac3c:	4604      	mov	r4, r0
 800ac3e:	b940      	cbnz	r0, 800ac52 <__gethex+0x182>
 800ac40:	4b65      	ldr	r3, [pc, #404]	; (800add8 <__gethex+0x308>)
 800ac42:	4602      	mov	r2, r0
 800ac44:	21de      	movs	r1, #222	; 0xde
 800ac46:	4865      	ldr	r0, [pc, #404]	; (800addc <__gethex+0x30c>)
 800ac48:	f7ff feaa 	bl	800a9a0 <__assert_func>
 800ac4c:	3101      	adds	r1, #1
 800ac4e:	105b      	asrs	r3, r3, #1
 800ac50:	e7ee      	b.n	800ac30 <__gethex+0x160>
 800ac52:	f100 0914 	add.w	r9, r0, #20
 800ac56:	f04f 0b00 	mov.w	fp, #0
 800ac5a:	f1ca 0301 	rsb	r3, sl, #1
 800ac5e:	f8cd 9008 	str.w	r9, [sp, #8]
 800ac62:	f8cd b000 	str.w	fp, [sp]
 800ac66:	9306      	str	r3, [sp, #24]
 800ac68:	42b7      	cmp	r7, r6
 800ac6a:	d340      	bcc.n	800acee <__gethex+0x21e>
 800ac6c:	9802      	ldr	r0, [sp, #8]
 800ac6e:	9b00      	ldr	r3, [sp, #0]
 800ac70:	f840 3b04 	str.w	r3, [r0], #4
 800ac74:	eba0 0009 	sub.w	r0, r0, r9
 800ac78:	1080      	asrs	r0, r0, #2
 800ac7a:	0146      	lsls	r6, r0, #5
 800ac7c:	6120      	str	r0, [r4, #16]
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f000 fb50 	bl	800b324 <__hi0bits>
 800ac84:	1a30      	subs	r0, r6, r0
 800ac86:	f8d8 6000 	ldr.w	r6, [r8]
 800ac8a:	42b0      	cmp	r0, r6
 800ac8c:	dd63      	ble.n	800ad56 <__gethex+0x286>
 800ac8e:	1b87      	subs	r7, r0, r6
 800ac90:	4639      	mov	r1, r7
 800ac92:	4620      	mov	r0, r4
 800ac94:	f000 feea 	bl	800ba6c <__any_on>
 800ac98:	4682      	mov	sl, r0
 800ac9a:	b1a8      	cbz	r0, 800acc8 <__gethex+0x1f8>
 800ac9c:	1e7b      	subs	r3, r7, #1
 800ac9e:	1159      	asrs	r1, r3, #5
 800aca0:	f003 021f 	and.w	r2, r3, #31
 800aca4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800aca8:	f04f 0a01 	mov.w	sl, #1
 800acac:	fa0a f202 	lsl.w	r2, sl, r2
 800acb0:	420a      	tst	r2, r1
 800acb2:	d009      	beq.n	800acc8 <__gethex+0x1f8>
 800acb4:	4553      	cmp	r3, sl
 800acb6:	dd05      	ble.n	800acc4 <__gethex+0x1f4>
 800acb8:	1eb9      	subs	r1, r7, #2
 800acba:	4620      	mov	r0, r4
 800acbc:	f000 fed6 	bl	800ba6c <__any_on>
 800acc0:	2800      	cmp	r0, #0
 800acc2:	d145      	bne.n	800ad50 <__gethex+0x280>
 800acc4:	f04f 0a02 	mov.w	sl, #2
 800acc8:	4639      	mov	r1, r7
 800acca:	4620      	mov	r0, r4
 800accc:	f7ff fe98 	bl	800aa00 <rshift>
 800acd0:	443d      	add	r5, r7
 800acd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800acd6:	42ab      	cmp	r3, r5
 800acd8:	da4c      	bge.n	800ad74 <__gethex+0x2a4>
 800acda:	ee18 0a10 	vmov	r0, s16
 800acde:	4621      	mov	r1, r4
 800ace0:	f000 fa6a 	bl	800b1b8 <_Bfree>
 800ace4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ace6:	2300      	movs	r3, #0
 800ace8:	6013      	str	r3, [r2, #0]
 800acea:	27a3      	movs	r7, #163	; 0xa3
 800acec:	e785      	b.n	800abfa <__gethex+0x12a>
 800acee:	1e73      	subs	r3, r6, #1
 800acf0:	9a05      	ldr	r2, [sp, #20]
 800acf2:	9303      	str	r3, [sp, #12]
 800acf4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d019      	beq.n	800ad30 <__gethex+0x260>
 800acfc:	f1bb 0f20 	cmp.w	fp, #32
 800ad00:	d107      	bne.n	800ad12 <__gethex+0x242>
 800ad02:	9b02      	ldr	r3, [sp, #8]
 800ad04:	9a00      	ldr	r2, [sp, #0]
 800ad06:	f843 2b04 	str.w	r2, [r3], #4
 800ad0a:	9302      	str	r3, [sp, #8]
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	9300      	str	r3, [sp, #0]
 800ad10:	469b      	mov	fp, r3
 800ad12:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ad16:	f7ff fec5 	bl	800aaa4 <__hexdig_fun>
 800ad1a:	9b00      	ldr	r3, [sp, #0]
 800ad1c:	f000 000f 	and.w	r0, r0, #15
 800ad20:	fa00 f00b 	lsl.w	r0, r0, fp
 800ad24:	4303      	orrs	r3, r0
 800ad26:	9300      	str	r3, [sp, #0]
 800ad28:	f10b 0b04 	add.w	fp, fp, #4
 800ad2c:	9b03      	ldr	r3, [sp, #12]
 800ad2e:	e00d      	b.n	800ad4c <__gethex+0x27c>
 800ad30:	9b03      	ldr	r3, [sp, #12]
 800ad32:	9a06      	ldr	r2, [sp, #24]
 800ad34:	4413      	add	r3, r2
 800ad36:	42bb      	cmp	r3, r7
 800ad38:	d3e0      	bcc.n	800acfc <__gethex+0x22c>
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	9901      	ldr	r1, [sp, #4]
 800ad3e:	9307      	str	r3, [sp, #28]
 800ad40:	4652      	mov	r2, sl
 800ad42:	f001 fb15 	bl	800c370 <strncmp>
 800ad46:	9b07      	ldr	r3, [sp, #28]
 800ad48:	2800      	cmp	r0, #0
 800ad4a:	d1d7      	bne.n	800acfc <__gethex+0x22c>
 800ad4c:	461e      	mov	r6, r3
 800ad4e:	e78b      	b.n	800ac68 <__gethex+0x198>
 800ad50:	f04f 0a03 	mov.w	sl, #3
 800ad54:	e7b8      	b.n	800acc8 <__gethex+0x1f8>
 800ad56:	da0a      	bge.n	800ad6e <__gethex+0x29e>
 800ad58:	1a37      	subs	r7, r6, r0
 800ad5a:	4621      	mov	r1, r4
 800ad5c:	ee18 0a10 	vmov	r0, s16
 800ad60:	463a      	mov	r2, r7
 800ad62:	f000 fc45 	bl	800b5f0 <__lshift>
 800ad66:	1bed      	subs	r5, r5, r7
 800ad68:	4604      	mov	r4, r0
 800ad6a:	f100 0914 	add.w	r9, r0, #20
 800ad6e:	f04f 0a00 	mov.w	sl, #0
 800ad72:	e7ae      	b.n	800acd2 <__gethex+0x202>
 800ad74:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ad78:	42a8      	cmp	r0, r5
 800ad7a:	dd72      	ble.n	800ae62 <__gethex+0x392>
 800ad7c:	1b45      	subs	r5, r0, r5
 800ad7e:	42ae      	cmp	r6, r5
 800ad80:	dc36      	bgt.n	800adf0 <__gethex+0x320>
 800ad82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad86:	2b02      	cmp	r3, #2
 800ad88:	d02a      	beq.n	800ade0 <__gethex+0x310>
 800ad8a:	2b03      	cmp	r3, #3
 800ad8c:	d02c      	beq.n	800ade8 <__gethex+0x318>
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	d115      	bne.n	800adbe <__gethex+0x2ee>
 800ad92:	42ae      	cmp	r6, r5
 800ad94:	d113      	bne.n	800adbe <__gethex+0x2ee>
 800ad96:	2e01      	cmp	r6, #1
 800ad98:	d10b      	bne.n	800adb2 <__gethex+0x2e2>
 800ad9a:	9a04      	ldr	r2, [sp, #16]
 800ad9c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ada0:	6013      	str	r3, [r2, #0]
 800ada2:	2301      	movs	r3, #1
 800ada4:	6123      	str	r3, [r4, #16]
 800ada6:	f8c9 3000 	str.w	r3, [r9]
 800adaa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800adac:	2762      	movs	r7, #98	; 0x62
 800adae:	601c      	str	r4, [r3, #0]
 800adb0:	e723      	b.n	800abfa <__gethex+0x12a>
 800adb2:	1e71      	subs	r1, r6, #1
 800adb4:	4620      	mov	r0, r4
 800adb6:	f000 fe59 	bl	800ba6c <__any_on>
 800adba:	2800      	cmp	r0, #0
 800adbc:	d1ed      	bne.n	800ad9a <__gethex+0x2ca>
 800adbe:	ee18 0a10 	vmov	r0, s16
 800adc2:	4621      	mov	r1, r4
 800adc4:	f000 f9f8 	bl	800b1b8 <_Bfree>
 800adc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800adca:	2300      	movs	r3, #0
 800adcc:	6013      	str	r3, [r2, #0]
 800adce:	2750      	movs	r7, #80	; 0x50
 800add0:	e713      	b.n	800abfa <__gethex+0x12a>
 800add2:	bf00      	nop
 800add4:	0800f248 	.word	0x0800f248
 800add8:	0800f1cd 	.word	0x0800f1cd
 800addc:	0800f1de 	.word	0x0800f1de
 800ade0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d1eb      	bne.n	800adbe <__gethex+0x2ee>
 800ade6:	e7d8      	b.n	800ad9a <__gethex+0x2ca>
 800ade8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800adea:	2b00      	cmp	r3, #0
 800adec:	d1d5      	bne.n	800ad9a <__gethex+0x2ca>
 800adee:	e7e6      	b.n	800adbe <__gethex+0x2ee>
 800adf0:	1e6f      	subs	r7, r5, #1
 800adf2:	f1ba 0f00 	cmp.w	sl, #0
 800adf6:	d131      	bne.n	800ae5c <__gethex+0x38c>
 800adf8:	b127      	cbz	r7, 800ae04 <__gethex+0x334>
 800adfa:	4639      	mov	r1, r7
 800adfc:	4620      	mov	r0, r4
 800adfe:	f000 fe35 	bl	800ba6c <__any_on>
 800ae02:	4682      	mov	sl, r0
 800ae04:	117b      	asrs	r3, r7, #5
 800ae06:	2101      	movs	r1, #1
 800ae08:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ae0c:	f007 071f 	and.w	r7, r7, #31
 800ae10:	fa01 f707 	lsl.w	r7, r1, r7
 800ae14:	421f      	tst	r7, r3
 800ae16:	4629      	mov	r1, r5
 800ae18:	4620      	mov	r0, r4
 800ae1a:	bf18      	it	ne
 800ae1c:	f04a 0a02 	orrne.w	sl, sl, #2
 800ae20:	1b76      	subs	r6, r6, r5
 800ae22:	f7ff fded 	bl	800aa00 <rshift>
 800ae26:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ae2a:	2702      	movs	r7, #2
 800ae2c:	f1ba 0f00 	cmp.w	sl, #0
 800ae30:	d048      	beq.n	800aec4 <__gethex+0x3f4>
 800ae32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ae36:	2b02      	cmp	r3, #2
 800ae38:	d015      	beq.n	800ae66 <__gethex+0x396>
 800ae3a:	2b03      	cmp	r3, #3
 800ae3c:	d017      	beq.n	800ae6e <__gethex+0x39e>
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d109      	bne.n	800ae56 <__gethex+0x386>
 800ae42:	f01a 0f02 	tst.w	sl, #2
 800ae46:	d006      	beq.n	800ae56 <__gethex+0x386>
 800ae48:	f8d9 0000 	ldr.w	r0, [r9]
 800ae4c:	ea4a 0a00 	orr.w	sl, sl, r0
 800ae50:	f01a 0f01 	tst.w	sl, #1
 800ae54:	d10e      	bne.n	800ae74 <__gethex+0x3a4>
 800ae56:	f047 0710 	orr.w	r7, r7, #16
 800ae5a:	e033      	b.n	800aec4 <__gethex+0x3f4>
 800ae5c:	f04f 0a01 	mov.w	sl, #1
 800ae60:	e7d0      	b.n	800ae04 <__gethex+0x334>
 800ae62:	2701      	movs	r7, #1
 800ae64:	e7e2      	b.n	800ae2c <__gethex+0x35c>
 800ae66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae68:	f1c3 0301 	rsb	r3, r3, #1
 800ae6c:	9315      	str	r3, [sp, #84]	; 0x54
 800ae6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d0f0      	beq.n	800ae56 <__gethex+0x386>
 800ae74:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ae78:	f104 0314 	add.w	r3, r4, #20
 800ae7c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ae80:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ae84:	f04f 0c00 	mov.w	ip, #0
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae8e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ae92:	d01c      	beq.n	800aece <__gethex+0x3fe>
 800ae94:	3201      	adds	r2, #1
 800ae96:	6002      	str	r2, [r0, #0]
 800ae98:	2f02      	cmp	r7, #2
 800ae9a:	f104 0314 	add.w	r3, r4, #20
 800ae9e:	d13f      	bne.n	800af20 <__gethex+0x450>
 800aea0:	f8d8 2000 	ldr.w	r2, [r8]
 800aea4:	3a01      	subs	r2, #1
 800aea6:	42b2      	cmp	r2, r6
 800aea8:	d10a      	bne.n	800aec0 <__gethex+0x3f0>
 800aeaa:	1171      	asrs	r1, r6, #5
 800aeac:	2201      	movs	r2, #1
 800aeae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aeb2:	f006 061f 	and.w	r6, r6, #31
 800aeb6:	fa02 f606 	lsl.w	r6, r2, r6
 800aeba:	421e      	tst	r6, r3
 800aebc:	bf18      	it	ne
 800aebe:	4617      	movne	r7, r2
 800aec0:	f047 0720 	orr.w	r7, r7, #32
 800aec4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aec6:	601c      	str	r4, [r3, #0]
 800aec8:	9b04      	ldr	r3, [sp, #16]
 800aeca:	601d      	str	r5, [r3, #0]
 800aecc:	e695      	b.n	800abfa <__gethex+0x12a>
 800aece:	4299      	cmp	r1, r3
 800aed0:	f843 cc04 	str.w	ip, [r3, #-4]
 800aed4:	d8d8      	bhi.n	800ae88 <__gethex+0x3b8>
 800aed6:	68a3      	ldr	r3, [r4, #8]
 800aed8:	459b      	cmp	fp, r3
 800aeda:	db19      	blt.n	800af10 <__gethex+0x440>
 800aedc:	6861      	ldr	r1, [r4, #4]
 800aede:	ee18 0a10 	vmov	r0, s16
 800aee2:	3101      	adds	r1, #1
 800aee4:	f000 f928 	bl	800b138 <_Balloc>
 800aee8:	4681      	mov	r9, r0
 800aeea:	b918      	cbnz	r0, 800aef4 <__gethex+0x424>
 800aeec:	4b1a      	ldr	r3, [pc, #104]	; (800af58 <__gethex+0x488>)
 800aeee:	4602      	mov	r2, r0
 800aef0:	2184      	movs	r1, #132	; 0x84
 800aef2:	e6a8      	b.n	800ac46 <__gethex+0x176>
 800aef4:	6922      	ldr	r2, [r4, #16]
 800aef6:	3202      	adds	r2, #2
 800aef8:	f104 010c 	add.w	r1, r4, #12
 800aefc:	0092      	lsls	r2, r2, #2
 800aefe:	300c      	adds	r0, #12
 800af00:	f000 f900 	bl	800b104 <memcpy>
 800af04:	4621      	mov	r1, r4
 800af06:	ee18 0a10 	vmov	r0, s16
 800af0a:	f000 f955 	bl	800b1b8 <_Bfree>
 800af0e:	464c      	mov	r4, r9
 800af10:	6923      	ldr	r3, [r4, #16]
 800af12:	1c5a      	adds	r2, r3, #1
 800af14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800af18:	6122      	str	r2, [r4, #16]
 800af1a:	2201      	movs	r2, #1
 800af1c:	615a      	str	r2, [r3, #20]
 800af1e:	e7bb      	b.n	800ae98 <__gethex+0x3c8>
 800af20:	6922      	ldr	r2, [r4, #16]
 800af22:	455a      	cmp	r2, fp
 800af24:	dd0b      	ble.n	800af3e <__gethex+0x46e>
 800af26:	2101      	movs	r1, #1
 800af28:	4620      	mov	r0, r4
 800af2a:	f7ff fd69 	bl	800aa00 <rshift>
 800af2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800af32:	3501      	adds	r5, #1
 800af34:	42ab      	cmp	r3, r5
 800af36:	f6ff aed0 	blt.w	800acda <__gethex+0x20a>
 800af3a:	2701      	movs	r7, #1
 800af3c:	e7c0      	b.n	800aec0 <__gethex+0x3f0>
 800af3e:	f016 061f 	ands.w	r6, r6, #31
 800af42:	d0fa      	beq.n	800af3a <__gethex+0x46a>
 800af44:	449a      	add	sl, r3
 800af46:	f1c6 0620 	rsb	r6, r6, #32
 800af4a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800af4e:	f000 f9e9 	bl	800b324 <__hi0bits>
 800af52:	42b0      	cmp	r0, r6
 800af54:	dbe7      	blt.n	800af26 <__gethex+0x456>
 800af56:	e7f0      	b.n	800af3a <__gethex+0x46a>
 800af58:	0800f1cd 	.word	0x0800f1cd

0800af5c <L_shift>:
 800af5c:	f1c2 0208 	rsb	r2, r2, #8
 800af60:	0092      	lsls	r2, r2, #2
 800af62:	b570      	push	{r4, r5, r6, lr}
 800af64:	f1c2 0620 	rsb	r6, r2, #32
 800af68:	6843      	ldr	r3, [r0, #4]
 800af6a:	6804      	ldr	r4, [r0, #0]
 800af6c:	fa03 f506 	lsl.w	r5, r3, r6
 800af70:	432c      	orrs	r4, r5
 800af72:	40d3      	lsrs	r3, r2
 800af74:	6004      	str	r4, [r0, #0]
 800af76:	f840 3f04 	str.w	r3, [r0, #4]!
 800af7a:	4288      	cmp	r0, r1
 800af7c:	d3f4      	bcc.n	800af68 <L_shift+0xc>
 800af7e:	bd70      	pop	{r4, r5, r6, pc}

0800af80 <__match>:
 800af80:	b530      	push	{r4, r5, lr}
 800af82:	6803      	ldr	r3, [r0, #0]
 800af84:	3301      	adds	r3, #1
 800af86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af8a:	b914      	cbnz	r4, 800af92 <__match+0x12>
 800af8c:	6003      	str	r3, [r0, #0]
 800af8e:	2001      	movs	r0, #1
 800af90:	bd30      	pop	{r4, r5, pc}
 800af92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af96:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800af9a:	2d19      	cmp	r5, #25
 800af9c:	bf98      	it	ls
 800af9e:	3220      	addls	r2, #32
 800afa0:	42a2      	cmp	r2, r4
 800afa2:	d0f0      	beq.n	800af86 <__match+0x6>
 800afa4:	2000      	movs	r0, #0
 800afa6:	e7f3      	b.n	800af90 <__match+0x10>

0800afa8 <__hexnan>:
 800afa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afac:	680b      	ldr	r3, [r1, #0]
 800afae:	6801      	ldr	r1, [r0, #0]
 800afb0:	115e      	asrs	r6, r3, #5
 800afb2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800afb6:	f013 031f 	ands.w	r3, r3, #31
 800afba:	b087      	sub	sp, #28
 800afbc:	bf18      	it	ne
 800afbe:	3604      	addne	r6, #4
 800afc0:	2500      	movs	r5, #0
 800afc2:	1f37      	subs	r7, r6, #4
 800afc4:	4682      	mov	sl, r0
 800afc6:	4690      	mov	r8, r2
 800afc8:	9301      	str	r3, [sp, #4]
 800afca:	f846 5c04 	str.w	r5, [r6, #-4]
 800afce:	46b9      	mov	r9, r7
 800afd0:	463c      	mov	r4, r7
 800afd2:	9502      	str	r5, [sp, #8]
 800afd4:	46ab      	mov	fp, r5
 800afd6:	784a      	ldrb	r2, [r1, #1]
 800afd8:	1c4b      	adds	r3, r1, #1
 800afda:	9303      	str	r3, [sp, #12]
 800afdc:	b342      	cbz	r2, 800b030 <__hexnan+0x88>
 800afde:	4610      	mov	r0, r2
 800afe0:	9105      	str	r1, [sp, #20]
 800afe2:	9204      	str	r2, [sp, #16]
 800afe4:	f7ff fd5e 	bl	800aaa4 <__hexdig_fun>
 800afe8:	2800      	cmp	r0, #0
 800afea:	d14f      	bne.n	800b08c <__hexnan+0xe4>
 800afec:	9a04      	ldr	r2, [sp, #16]
 800afee:	9905      	ldr	r1, [sp, #20]
 800aff0:	2a20      	cmp	r2, #32
 800aff2:	d818      	bhi.n	800b026 <__hexnan+0x7e>
 800aff4:	9b02      	ldr	r3, [sp, #8]
 800aff6:	459b      	cmp	fp, r3
 800aff8:	dd13      	ble.n	800b022 <__hexnan+0x7a>
 800affa:	454c      	cmp	r4, r9
 800affc:	d206      	bcs.n	800b00c <__hexnan+0x64>
 800affe:	2d07      	cmp	r5, #7
 800b000:	dc04      	bgt.n	800b00c <__hexnan+0x64>
 800b002:	462a      	mov	r2, r5
 800b004:	4649      	mov	r1, r9
 800b006:	4620      	mov	r0, r4
 800b008:	f7ff ffa8 	bl	800af5c <L_shift>
 800b00c:	4544      	cmp	r4, r8
 800b00e:	d950      	bls.n	800b0b2 <__hexnan+0x10a>
 800b010:	2300      	movs	r3, #0
 800b012:	f1a4 0904 	sub.w	r9, r4, #4
 800b016:	f844 3c04 	str.w	r3, [r4, #-4]
 800b01a:	f8cd b008 	str.w	fp, [sp, #8]
 800b01e:	464c      	mov	r4, r9
 800b020:	461d      	mov	r5, r3
 800b022:	9903      	ldr	r1, [sp, #12]
 800b024:	e7d7      	b.n	800afd6 <__hexnan+0x2e>
 800b026:	2a29      	cmp	r2, #41	; 0x29
 800b028:	d156      	bne.n	800b0d8 <__hexnan+0x130>
 800b02a:	3102      	adds	r1, #2
 800b02c:	f8ca 1000 	str.w	r1, [sl]
 800b030:	f1bb 0f00 	cmp.w	fp, #0
 800b034:	d050      	beq.n	800b0d8 <__hexnan+0x130>
 800b036:	454c      	cmp	r4, r9
 800b038:	d206      	bcs.n	800b048 <__hexnan+0xa0>
 800b03a:	2d07      	cmp	r5, #7
 800b03c:	dc04      	bgt.n	800b048 <__hexnan+0xa0>
 800b03e:	462a      	mov	r2, r5
 800b040:	4649      	mov	r1, r9
 800b042:	4620      	mov	r0, r4
 800b044:	f7ff ff8a 	bl	800af5c <L_shift>
 800b048:	4544      	cmp	r4, r8
 800b04a:	d934      	bls.n	800b0b6 <__hexnan+0x10e>
 800b04c:	f1a8 0204 	sub.w	r2, r8, #4
 800b050:	4623      	mov	r3, r4
 800b052:	f853 1b04 	ldr.w	r1, [r3], #4
 800b056:	f842 1f04 	str.w	r1, [r2, #4]!
 800b05a:	429f      	cmp	r7, r3
 800b05c:	d2f9      	bcs.n	800b052 <__hexnan+0xaa>
 800b05e:	1b3b      	subs	r3, r7, r4
 800b060:	f023 0303 	bic.w	r3, r3, #3
 800b064:	3304      	adds	r3, #4
 800b066:	3401      	adds	r4, #1
 800b068:	3e03      	subs	r6, #3
 800b06a:	42b4      	cmp	r4, r6
 800b06c:	bf88      	it	hi
 800b06e:	2304      	movhi	r3, #4
 800b070:	4443      	add	r3, r8
 800b072:	2200      	movs	r2, #0
 800b074:	f843 2b04 	str.w	r2, [r3], #4
 800b078:	429f      	cmp	r7, r3
 800b07a:	d2fb      	bcs.n	800b074 <__hexnan+0xcc>
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	b91b      	cbnz	r3, 800b088 <__hexnan+0xe0>
 800b080:	4547      	cmp	r7, r8
 800b082:	d127      	bne.n	800b0d4 <__hexnan+0x12c>
 800b084:	2301      	movs	r3, #1
 800b086:	603b      	str	r3, [r7, #0]
 800b088:	2005      	movs	r0, #5
 800b08a:	e026      	b.n	800b0da <__hexnan+0x132>
 800b08c:	3501      	adds	r5, #1
 800b08e:	2d08      	cmp	r5, #8
 800b090:	f10b 0b01 	add.w	fp, fp, #1
 800b094:	dd06      	ble.n	800b0a4 <__hexnan+0xfc>
 800b096:	4544      	cmp	r4, r8
 800b098:	d9c3      	bls.n	800b022 <__hexnan+0x7a>
 800b09a:	2300      	movs	r3, #0
 800b09c:	f844 3c04 	str.w	r3, [r4, #-4]
 800b0a0:	2501      	movs	r5, #1
 800b0a2:	3c04      	subs	r4, #4
 800b0a4:	6822      	ldr	r2, [r4, #0]
 800b0a6:	f000 000f 	and.w	r0, r0, #15
 800b0aa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b0ae:	6022      	str	r2, [r4, #0]
 800b0b0:	e7b7      	b.n	800b022 <__hexnan+0x7a>
 800b0b2:	2508      	movs	r5, #8
 800b0b4:	e7b5      	b.n	800b022 <__hexnan+0x7a>
 800b0b6:	9b01      	ldr	r3, [sp, #4]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d0df      	beq.n	800b07c <__hexnan+0xd4>
 800b0bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b0c0:	f1c3 0320 	rsb	r3, r3, #32
 800b0c4:	fa22 f303 	lsr.w	r3, r2, r3
 800b0c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b0cc:	401a      	ands	r2, r3
 800b0ce:	f846 2c04 	str.w	r2, [r6, #-4]
 800b0d2:	e7d3      	b.n	800b07c <__hexnan+0xd4>
 800b0d4:	3f04      	subs	r7, #4
 800b0d6:	e7d1      	b.n	800b07c <__hexnan+0xd4>
 800b0d8:	2004      	movs	r0, #4
 800b0da:	b007      	add	sp, #28
 800b0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b0e0 <__ascii_mbtowc>:
 800b0e0:	b082      	sub	sp, #8
 800b0e2:	b901      	cbnz	r1, 800b0e6 <__ascii_mbtowc+0x6>
 800b0e4:	a901      	add	r1, sp, #4
 800b0e6:	b142      	cbz	r2, 800b0fa <__ascii_mbtowc+0x1a>
 800b0e8:	b14b      	cbz	r3, 800b0fe <__ascii_mbtowc+0x1e>
 800b0ea:	7813      	ldrb	r3, [r2, #0]
 800b0ec:	600b      	str	r3, [r1, #0]
 800b0ee:	7812      	ldrb	r2, [r2, #0]
 800b0f0:	1e10      	subs	r0, r2, #0
 800b0f2:	bf18      	it	ne
 800b0f4:	2001      	movne	r0, #1
 800b0f6:	b002      	add	sp, #8
 800b0f8:	4770      	bx	lr
 800b0fa:	4610      	mov	r0, r2
 800b0fc:	e7fb      	b.n	800b0f6 <__ascii_mbtowc+0x16>
 800b0fe:	f06f 0001 	mvn.w	r0, #1
 800b102:	e7f8      	b.n	800b0f6 <__ascii_mbtowc+0x16>

0800b104 <memcpy>:
 800b104:	440a      	add	r2, r1
 800b106:	4291      	cmp	r1, r2
 800b108:	f100 33ff 	add.w	r3, r0, #4294967295
 800b10c:	d100      	bne.n	800b110 <memcpy+0xc>
 800b10e:	4770      	bx	lr
 800b110:	b510      	push	{r4, lr}
 800b112:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b116:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b11a:	4291      	cmp	r1, r2
 800b11c:	d1f9      	bne.n	800b112 <memcpy+0xe>
 800b11e:	bd10      	pop	{r4, pc}

0800b120 <__malloc_lock>:
 800b120:	4801      	ldr	r0, [pc, #4]	; (800b128 <__malloc_lock+0x8>)
 800b122:	f001 bbc5 	b.w	800c8b0 <__retarget_lock_acquire_recursive>
 800b126:	bf00      	nop
 800b128:	20000d38 	.word	0x20000d38

0800b12c <__malloc_unlock>:
 800b12c:	4801      	ldr	r0, [pc, #4]	; (800b134 <__malloc_unlock+0x8>)
 800b12e:	f001 bbc0 	b.w	800c8b2 <__retarget_lock_release_recursive>
 800b132:	bf00      	nop
 800b134:	20000d38 	.word	0x20000d38

0800b138 <_Balloc>:
 800b138:	b570      	push	{r4, r5, r6, lr}
 800b13a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b13c:	4604      	mov	r4, r0
 800b13e:	460d      	mov	r5, r1
 800b140:	b976      	cbnz	r6, 800b160 <_Balloc+0x28>
 800b142:	2010      	movs	r0, #16
 800b144:	f7fe fc0a 	bl	800995c <malloc>
 800b148:	4602      	mov	r2, r0
 800b14a:	6260      	str	r0, [r4, #36]	; 0x24
 800b14c:	b920      	cbnz	r0, 800b158 <_Balloc+0x20>
 800b14e:	4b18      	ldr	r3, [pc, #96]	; (800b1b0 <_Balloc+0x78>)
 800b150:	4818      	ldr	r0, [pc, #96]	; (800b1b4 <_Balloc+0x7c>)
 800b152:	2166      	movs	r1, #102	; 0x66
 800b154:	f7ff fc24 	bl	800a9a0 <__assert_func>
 800b158:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b15c:	6006      	str	r6, [r0, #0]
 800b15e:	60c6      	str	r6, [r0, #12]
 800b160:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b162:	68f3      	ldr	r3, [r6, #12]
 800b164:	b183      	cbz	r3, 800b188 <_Balloc+0x50>
 800b166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b168:	68db      	ldr	r3, [r3, #12]
 800b16a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b16e:	b9b8      	cbnz	r0, 800b1a0 <_Balloc+0x68>
 800b170:	2101      	movs	r1, #1
 800b172:	fa01 f605 	lsl.w	r6, r1, r5
 800b176:	1d72      	adds	r2, r6, #5
 800b178:	0092      	lsls	r2, r2, #2
 800b17a:	4620      	mov	r0, r4
 800b17c:	f000 fc97 	bl	800baae <_calloc_r>
 800b180:	b160      	cbz	r0, 800b19c <_Balloc+0x64>
 800b182:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b186:	e00e      	b.n	800b1a6 <_Balloc+0x6e>
 800b188:	2221      	movs	r2, #33	; 0x21
 800b18a:	2104      	movs	r1, #4
 800b18c:	4620      	mov	r0, r4
 800b18e:	f000 fc8e 	bl	800baae <_calloc_r>
 800b192:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b194:	60f0      	str	r0, [r6, #12]
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d1e4      	bne.n	800b166 <_Balloc+0x2e>
 800b19c:	2000      	movs	r0, #0
 800b19e:	bd70      	pop	{r4, r5, r6, pc}
 800b1a0:	6802      	ldr	r2, [r0, #0]
 800b1a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b1ac:	e7f7      	b.n	800b19e <_Balloc+0x66>
 800b1ae:	bf00      	nop
 800b1b0:	0800f018 	.word	0x0800f018
 800b1b4:	0800f25c 	.word	0x0800f25c

0800b1b8 <_Bfree>:
 800b1b8:	b570      	push	{r4, r5, r6, lr}
 800b1ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1bc:	4605      	mov	r5, r0
 800b1be:	460c      	mov	r4, r1
 800b1c0:	b976      	cbnz	r6, 800b1e0 <_Bfree+0x28>
 800b1c2:	2010      	movs	r0, #16
 800b1c4:	f7fe fbca 	bl	800995c <malloc>
 800b1c8:	4602      	mov	r2, r0
 800b1ca:	6268      	str	r0, [r5, #36]	; 0x24
 800b1cc:	b920      	cbnz	r0, 800b1d8 <_Bfree+0x20>
 800b1ce:	4b09      	ldr	r3, [pc, #36]	; (800b1f4 <_Bfree+0x3c>)
 800b1d0:	4809      	ldr	r0, [pc, #36]	; (800b1f8 <_Bfree+0x40>)
 800b1d2:	218a      	movs	r1, #138	; 0x8a
 800b1d4:	f7ff fbe4 	bl	800a9a0 <__assert_func>
 800b1d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1dc:	6006      	str	r6, [r0, #0]
 800b1de:	60c6      	str	r6, [r0, #12]
 800b1e0:	b13c      	cbz	r4, 800b1f2 <_Bfree+0x3a>
 800b1e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b1e4:	6862      	ldr	r2, [r4, #4]
 800b1e6:	68db      	ldr	r3, [r3, #12]
 800b1e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b1ec:	6021      	str	r1, [r4, #0]
 800b1ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b1f2:	bd70      	pop	{r4, r5, r6, pc}
 800b1f4:	0800f018 	.word	0x0800f018
 800b1f8:	0800f25c 	.word	0x0800f25c

0800b1fc <__multadd>:
 800b1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b200:	690e      	ldr	r6, [r1, #16]
 800b202:	4607      	mov	r7, r0
 800b204:	4698      	mov	r8, r3
 800b206:	460c      	mov	r4, r1
 800b208:	f101 0014 	add.w	r0, r1, #20
 800b20c:	2300      	movs	r3, #0
 800b20e:	6805      	ldr	r5, [r0, #0]
 800b210:	b2a9      	uxth	r1, r5
 800b212:	fb02 8101 	mla	r1, r2, r1, r8
 800b216:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b21a:	0c2d      	lsrs	r5, r5, #16
 800b21c:	fb02 c505 	mla	r5, r2, r5, ip
 800b220:	b289      	uxth	r1, r1
 800b222:	3301      	adds	r3, #1
 800b224:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b228:	429e      	cmp	r6, r3
 800b22a:	f840 1b04 	str.w	r1, [r0], #4
 800b22e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b232:	dcec      	bgt.n	800b20e <__multadd+0x12>
 800b234:	f1b8 0f00 	cmp.w	r8, #0
 800b238:	d022      	beq.n	800b280 <__multadd+0x84>
 800b23a:	68a3      	ldr	r3, [r4, #8]
 800b23c:	42b3      	cmp	r3, r6
 800b23e:	dc19      	bgt.n	800b274 <__multadd+0x78>
 800b240:	6861      	ldr	r1, [r4, #4]
 800b242:	4638      	mov	r0, r7
 800b244:	3101      	adds	r1, #1
 800b246:	f7ff ff77 	bl	800b138 <_Balloc>
 800b24a:	4605      	mov	r5, r0
 800b24c:	b928      	cbnz	r0, 800b25a <__multadd+0x5e>
 800b24e:	4602      	mov	r2, r0
 800b250:	4b0d      	ldr	r3, [pc, #52]	; (800b288 <__multadd+0x8c>)
 800b252:	480e      	ldr	r0, [pc, #56]	; (800b28c <__multadd+0x90>)
 800b254:	21b5      	movs	r1, #181	; 0xb5
 800b256:	f7ff fba3 	bl	800a9a0 <__assert_func>
 800b25a:	6922      	ldr	r2, [r4, #16]
 800b25c:	3202      	adds	r2, #2
 800b25e:	f104 010c 	add.w	r1, r4, #12
 800b262:	0092      	lsls	r2, r2, #2
 800b264:	300c      	adds	r0, #12
 800b266:	f7ff ff4d 	bl	800b104 <memcpy>
 800b26a:	4621      	mov	r1, r4
 800b26c:	4638      	mov	r0, r7
 800b26e:	f7ff ffa3 	bl	800b1b8 <_Bfree>
 800b272:	462c      	mov	r4, r5
 800b274:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b278:	3601      	adds	r6, #1
 800b27a:	f8c3 8014 	str.w	r8, [r3, #20]
 800b27e:	6126      	str	r6, [r4, #16]
 800b280:	4620      	mov	r0, r4
 800b282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b286:	bf00      	nop
 800b288:	0800f1cd 	.word	0x0800f1cd
 800b28c:	0800f25c 	.word	0x0800f25c

0800b290 <__s2b>:
 800b290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b294:	460c      	mov	r4, r1
 800b296:	4615      	mov	r5, r2
 800b298:	461f      	mov	r7, r3
 800b29a:	2209      	movs	r2, #9
 800b29c:	3308      	adds	r3, #8
 800b29e:	4606      	mov	r6, r0
 800b2a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2a4:	2100      	movs	r1, #0
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	db09      	blt.n	800b2c0 <__s2b+0x30>
 800b2ac:	4630      	mov	r0, r6
 800b2ae:	f7ff ff43 	bl	800b138 <_Balloc>
 800b2b2:	b940      	cbnz	r0, 800b2c6 <__s2b+0x36>
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	4b19      	ldr	r3, [pc, #100]	; (800b31c <__s2b+0x8c>)
 800b2b8:	4819      	ldr	r0, [pc, #100]	; (800b320 <__s2b+0x90>)
 800b2ba:	21ce      	movs	r1, #206	; 0xce
 800b2bc:	f7ff fb70 	bl	800a9a0 <__assert_func>
 800b2c0:	0052      	lsls	r2, r2, #1
 800b2c2:	3101      	adds	r1, #1
 800b2c4:	e7f0      	b.n	800b2a8 <__s2b+0x18>
 800b2c6:	9b08      	ldr	r3, [sp, #32]
 800b2c8:	6143      	str	r3, [r0, #20]
 800b2ca:	2d09      	cmp	r5, #9
 800b2cc:	f04f 0301 	mov.w	r3, #1
 800b2d0:	6103      	str	r3, [r0, #16]
 800b2d2:	dd16      	ble.n	800b302 <__s2b+0x72>
 800b2d4:	f104 0909 	add.w	r9, r4, #9
 800b2d8:	46c8      	mov	r8, r9
 800b2da:	442c      	add	r4, r5
 800b2dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b2e0:	4601      	mov	r1, r0
 800b2e2:	3b30      	subs	r3, #48	; 0x30
 800b2e4:	220a      	movs	r2, #10
 800b2e6:	4630      	mov	r0, r6
 800b2e8:	f7ff ff88 	bl	800b1fc <__multadd>
 800b2ec:	45a0      	cmp	r8, r4
 800b2ee:	d1f5      	bne.n	800b2dc <__s2b+0x4c>
 800b2f0:	f1a5 0408 	sub.w	r4, r5, #8
 800b2f4:	444c      	add	r4, r9
 800b2f6:	1b2d      	subs	r5, r5, r4
 800b2f8:	1963      	adds	r3, r4, r5
 800b2fa:	42bb      	cmp	r3, r7
 800b2fc:	db04      	blt.n	800b308 <__s2b+0x78>
 800b2fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b302:	340a      	adds	r4, #10
 800b304:	2509      	movs	r5, #9
 800b306:	e7f6      	b.n	800b2f6 <__s2b+0x66>
 800b308:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b30c:	4601      	mov	r1, r0
 800b30e:	3b30      	subs	r3, #48	; 0x30
 800b310:	220a      	movs	r2, #10
 800b312:	4630      	mov	r0, r6
 800b314:	f7ff ff72 	bl	800b1fc <__multadd>
 800b318:	e7ee      	b.n	800b2f8 <__s2b+0x68>
 800b31a:	bf00      	nop
 800b31c:	0800f1cd 	.word	0x0800f1cd
 800b320:	0800f25c 	.word	0x0800f25c

0800b324 <__hi0bits>:
 800b324:	0c03      	lsrs	r3, r0, #16
 800b326:	041b      	lsls	r3, r3, #16
 800b328:	b9d3      	cbnz	r3, 800b360 <__hi0bits+0x3c>
 800b32a:	0400      	lsls	r0, r0, #16
 800b32c:	2310      	movs	r3, #16
 800b32e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b332:	bf04      	itt	eq
 800b334:	0200      	lsleq	r0, r0, #8
 800b336:	3308      	addeq	r3, #8
 800b338:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b33c:	bf04      	itt	eq
 800b33e:	0100      	lsleq	r0, r0, #4
 800b340:	3304      	addeq	r3, #4
 800b342:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b346:	bf04      	itt	eq
 800b348:	0080      	lsleq	r0, r0, #2
 800b34a:	3302      	addeq	r3, #2
 800b34c:	2800      	cmp	r0, #0
 800b34e:	db05      	blt.n	800b35c <__hi0bits+0x38>
 800b350:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b354:	f103 0301 	add.w	r3, r3, #1
 800b358:	bf08      	it	eq
 800b35a:	2320      	moveq	r3, #32
 800b35c:	4618      	mov	r0, r3
 800b35e:	4770      	bx	lr
 800b360:	2300      	movs	r3, #0
 800b362:	e7e4      	b.n	800b32e <__hi0bits+0xa>

0800b364 <__lo0bits>:
 800b364:	6803      	ldr	r3, [r0, #0]
 800b366:	f013 0207 	ands.w	r2, r3, #7
 800b36a:	4601      	mov	r1, r0
 800b36c:	d00b      	beq.n	800b386 <__lo0bits+0x22>
 800b36e:	07da      	lsls	r2, r3, #31
 800b370:	d424      	bmi.n	800b3bc <__lo0bits+0x58>
 800b372:	0798      	lsls	r0, r3, #30
 800b374:	bf49      	itett	mi
 800b376:	085b      	lsrmi	r3, r3, #1
 800b378:	089b      	lsrpl	r3, r3, #2
 800b37a:	2001      	movmi	r0, #1
 800b37c:	600b      	strmi	r3, [r1, #0]
 800b37e:	bf5c      	itt	pl
 800b380:	600b      	strpl	r3, [r1, #0]
 800b382:	2002      	movpl	r0, #2
 800b384:	4770      	bx	lr
 800b386:	b298      	uxth	r0, r3
 800b388:	b9b0      	cbnz	r0, 800b3b8 <__lo0bits+0x54>
 800b38a:	0c1b      	lsrs	r3, r3, #16
 800b38c:	2010      	movs	r0, #16
 800b38e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b392:	bf04      	itt	eq
 800b394:	0a1b      	lsreq	r3, r3, #8
 800b396:	3008      	addeq	r0, #8
 800b398:	071a      	lsls	r2, r3, #28
 800b39a:	bf04      	itt	eq
 800b39c:	091b      	lsreq	r3, r3, #4
 800b39e:	3004      	addeq	r0, #4
 800b3a0:	079a      	lsls	r2, r3, #30
 800b3a2:	bf04      	itt	eq
 800b3a4:	089b      	lsreq	r3, r3, #2
 800b3a6:	3002      	addeq	r0, #2
 800b3a8:	07da      	lsls	r2, r3, #31
 800b3aa:	d403      	bmi.n	800b3b4 <__lo0bits+0x50>
 800b3ac:	085b      	lsrs	r3, r3, #1
 800b3ae:	f100 0001 	add.w	r0, r0, #1
 800b3b2:	d005      	beq.n	800b3c0 <__lo0bits+0x5c>
 800b3b4:	600b      	str	r3, [r1, #0]
 800b3b6:	4770      	bx	lr
 800b3b8:	4610      	mov	r0, r2
 800b3ba:	e7e8      	b.n	800b38e <__lo0bits+0x2a>
 800b3bc:	2000      	movs	r0, #0
 800b3be:	4770      	bx	lr
 800b3c0:	2020      	movs	r0, #32
 800b3c2:	4770      	bx	lr

0800b3c4 <__i2b>:
 800b3c4:	b510      	push	{r4, lr}
 800b3c6:	460c      	mov	r4, r1
 800b3c8:	2101      	movs	r1, #1
 800b3ca:	f7ff feb5 	bl	800b138 <_Balloc>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	b928      	cbnz	r0, 800b3de <__i2b+0x1a>
 800b3d2:	4b05      	ldr	r3, [pc, #20]	; (800b3e8 <__i2b+0x24>)
 800b3d4:	4805      	ldr	r0, [pc, #20]	; (800b3ec <__i2b+0x28>)
 800b3d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b3da:	f7ff fae1 	bl	800a9a0 <__assert_func>
 800b3de:	2301      	movs	r3, #1
 800b3e0:	6144      	str	r4, [r0, #20]
 800b3e2:	6103      	str	r3, [r0, #16]
 800b3e4:	bd10      	pop	{r4, pc}
 800b3e6:	bf00      	nop
 800b3e8:	0800f1cd 	.word	0x0800f1cd
 800b3ec:	0800f25c 	.word	0x0800f25c

0800b3f0 <__multiply>:
 800b3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f4:	4614      	mov	r4, r2
 800b3f6:	690a      	ldr	r2, [r1, #16]
 800b3f8:	6923      	ldr	r3, [r4, #16]
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	bfb8      	it	lt
 800b3fe:	460b      	movlt	r3, r1
 800b400:	460d      	mov	r5, r1
 800b402:	bfbc      	itt	lt
 800b404:	4625      	movlt	r5, r4
 800b406:	461c      	movlt	r4, r3
 800b408:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b40c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b410:	68ab      	ldr	r3, [r5, #8]
 800b412:	6869      	ldr	r1, [r5, #4]
 800b414:	eb0a 0709 	add.w	r7, sl, r9
 800b418:	42bb      	cmp	r3, r7
 800b41a:	b085      	sub	sp, #20
 800b41c:	bfb8      	it	lt
 800b41e:	3101      	addlt	r1, #1
 800b420:	f7ff fe8a 	bl	800b138 <_Balloc>
 800b424:	b930      	cbnz	r0, 800b434 <__multiply+0x44>
 800b426:	4602      	mov	r2, r0
 800b428:	4b42      	ldr	r3, [pc, #264]	; (800b534 <__multiply+0x144>)
 800b42a:	4843      	ldr	r0, [pc, #268]	; (800b538 <__multiply+0x148>)
 800b42c:	f240 115d 	movw	r1, #349	; 0x15d
 800b430:	f7ff fab6 	bl	800a9a0 <__assert_func>
 800b434:	f100 0614 	add.w	r6, r0, #20
 800b438:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b43c:	4633      	mov	r3, r6
 800b43e:	2200      	movs	r2, #0
 800b440:	4543      	cmp	r3, r8
 800b442:	d31e      	bcc.n	800b482 <__multiply+0x92>
 800b444:	f105 0c14 	add.w	ip, r5, #20
 800b448:	f104 0314 	add.w	r3, r4, #20
 800b44c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b450:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b454:	9202      	str	r2, [sp, #8]
 800b456:	ebac 0205 	sub.w	r2, ip, r5
 800b45a:	3a15      	subs	r2, #21
 800b45c:	f022 0203 	bic.w	r2, r2, #3
 800b460:	3204      	adds	r2, #4
 800b462:	f105 0115 	add.w	r1, r5, #21
 800b466:	458c      	cmp	ip, r1
 800b468:	bf38      	it	cc
 800b46a:	2204      	movcc	r2, #4
 800b46c:	9201      	str	r2, [sp, #4]
 800b46e:	9a02      	ldr	r2, [sp, #8]
 800b470:	9303      	str	r3, [sp, #12]
 800b472:	429a      	cmp	r2, r3
 800b474:	d808      	bhi.n	800b488 <__multiply+0x98>
 800b476:	2f00      	cmp	r7, #0
 800b478:	dc55      	bgt.n	800b526 <__multiply+0x136>
 800b47a:	6107      	str	r7, [r0, #16]
 800b47c:	b005      	add	sp, #20
 800b47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b482:	f843 2b04 	str.w	r2, [r3], #4
 800b486:	e7db      	b.n	800b440 <__multiply+0x50>
 800b488:	f8b3 a000 	ldrh.w	sl, [r3]
 800b48c:	f1ba 0f00 	cmp.w	sl, #0
 800b490:	d020      	beq.n	800b4d4 <__multiply+0xe4>
 800b492:	f105 0e14 	add.w	lr, r5, #20
 800b496:	46b1      	mov	r9, r6
 800b498:	2200      	movs	r2, #0
 800b49a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b49e:	f8d9 b000 	ldr.w	fp, [r9]
 800b4a2:	b2a1      	uxth	r1, r4
 800b4a4:	fa1f fb8b 	uxth.w	fp, fp
 800b4a8:	fb0a b101 	mla	r1, sl, r1, fp
 800b4ac:	4411      	add	r1, r2
 800b4ae:	f8d9 2000 	ldr.w	r2, [r9]
 800b4b2:	0c24      	lsrs	r4, r4, #16
 800b4b4:	0c12      	lsrs	r2, r2, #16
 800b4b6:	fb0a 2404 	mla	r4, sl, r4, r2
 800b4ba:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b4be:	b289      	uxth	r1, r1
 800b4c0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b4c4:	45f4      	cmp	ip, lr
 800b4c6:	f849 1b04 	str.w	r1, [r9], #4
 800b4ca:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b4ce:	d8e4      	bhi.n	800b49a <__multiply+0xaa>
 800b4d0:	9901      	ldr	r1, [sp, #4]
 800b4d2:	5072      	str	r2, [r6, r1]
 800b4d4:	9a03      	ldr	r2, [sp, #12]
 800b4d6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b4da:	3304      	adds	r3, #4
 800b4dc:	f1b9 0f00 	cmp.w	r9, #0
 800b4e0:	d01f      	beq.n	800b522 <__multiply+0x132>
 800b4e2:	6834      	ldr	r4, [r6, #0]
 800b4e4:	f105 0114 	add.w	r1, r5, #20
 800b4e8:	46b6      	mov	lr, r6
 800b4ea:	f04f 0a00 	mov.w	sl, #0
 800b4ee:	880a      	ldrh	r2, [r1, #0]
 800b4f0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b4f4:	fb09 b202 	mla	r2, r9, r2, fp
 800b4f8:	4492      	add	sl, r2
 800b4fa:	b2a4      	uxth	r4, r4
 800b4fc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b500:	f84e 4b04 	str.w	r4, [lr], #4
 800b504:	f851 4b04 	ldr.w	r4, [r1], #4
 800b508:	f8be 2000 	ldrh.w	r2, [lr]
 800b50c:	0c24      	lsrs	r4, r4, #16
 800b50e:	fb09 2404 	mla	r4, r9, r4, r2
 800b512:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b516:	458c      	cmp	ip, r1
 800b518:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b51c:	d8e7      	bhi.n	800b4ee <__multiply+0xfe>
 800b51e:	9a01      	ldr	r2, [sp, #4]
 800b520:	50b4      	str	r4, [r6, r2]
 800b522:	3604      	adds	r6, #4
 800b524:	e7a3      	b.n	800b46e <__multiply+0x7e>
 800b526:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d1a5      	bne.n	800b47a <__multiply+0x8a>
 800b52e:	3f01      	subs	r7, #1
 800b530:	e7a1      	b.n	800b476 <__multiply+0x86>
 800b532:	bf00      	nop
 800b534:	0800f1cd 	.word	0x0800f1cd
 800b538:	0800f25c 	.word	0x0800f25c

0800b53c <__pow5mult>:
 800b53c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b540:	4615      	mov	r5, r2
 800b542:	f012 0203 	ands.w	r2, r2, #3
 800b546:	4606      	mov	r6, r0
 800b548:	460f      	mov	r7, r1
 800b54a:	d007      	beq.n	800b55c <__pow5mult+0x20>
 800b54c:	4c25      	ldr	r4, [pc, #148]	; (800b5e4 <__pow5mult+0xa8>)
 800b54e:	3a01      	subs	r2, #1
 800b550:	2300      	movs	r3, #0
 800b552:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b556:	f7ff fe51 	bl	800b1fc <__multadd>
 800b55a:	4607      	mov	r7, r0
 800b55c:	10ad      	asrs	r5, r5, #2
 800b55e:	d03d      	beq.n	800b5dc <__pow5mult+0xa0>
 800b560:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b562:	b97c      	cbnz	r4, 800b584 <__pow5mult+0x48>
 800b564:	2010      	movs	r0, #16
 800b566:	f7fe f9f9 	bl	800995c <malloc>
 800b56a:	4602      	mov	r2, r0
 800b56c:	6270      	str	r0, [r6, #36]	; 0x24
 800b56e:	b928      	cbnz	r0, 800b57c <__pow5mult+0x40>
 800b570:	4b1d      	ldr	r3, [pc, #116]	; (800b5e8 <__pow5mult+0xac>)
 800b572:	481e      	ldr	r0, [pc, #120]	; (800b5ec <__pow5mult+0xb0>)
 800b574:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b578:	f7ff fa12 	bl	800a9a0 <__assert_func>
 800b57c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b580:	6004      	str	r4, [r0, #0]
 800b582:	60c4      	str	r4, [r0, #12]
 800b584:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b588:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b58c:	b94c      	cbnz	r4, 800b5a2 <__pow5mult+0x66>
 800b58e:	f240 2171 	movw	r1, #625	; 0x271
 800b592:	4630      	mov	r0, r6
 800b594:	f7ff ff16 	bl	800b3c4 <__i2b>
 800b598:	2300      	movs	r3, #0
 800b59a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b59e:	4604      	mov	r4, r0
 800b5a0:	6003      	str	r3, [r0, #0]
 800b5a2:	f04f 0900 	mov.w	r9, #0
 800b5a6:	07eb      	lsls	r3, r5, #31
 800b5a8:	d50a      	bpl.n	800b5c0 <__pow5mult+0x84>
 800b5aa:	4639      	mov	r1, r7
 800b5ac:	4622      	mov	r2, r4
 800b5ae:	4630      	mov	r0, r6
 800b5b0:	f7ff ff1e 	bl	800b3f0 <__multiply>
 800b5b4:	4639      	mov	r1, r7
 800b5b6:	4680      	mov	r8, r0
 800b5b8:	4630      	mov	r0, r6
 800b5ba:	f7ff fdfd 	bl	800b1b8 <_Bfree>
 800b5be:	4647      	mov	r7, r8
 800b5c0:	106d      	asrs	r5, r5, #1
 800b5c2:	d00b      	beq.n	800b5dc <__pow5mult+0xa0>
 800b5c4:	6820      	ldr	r0, [r4, #0]
 800b5c6:	b938      	cbnz	r0, 800b5d8 <__pow5mult+0x9c>
 800b5c8:	4622      	mov	r2, r4
 800b5ca:	4621      	mov	r1, r4
 800b5cc:	4630      	mov	r0, r6
 800b5ce:	f7ff ff0f 	bl	800b3f0 <__multiply>
 800b5d2:	6020      	str	r0, [r4, #0]
 800b5d4:	f8c0 9000 	str.w	r9, [r0]
 800b5d8:	4604      	mov	r4, r0
 800b5da:	e7e4      	b.n	800b5a6 <__pow5mult+0x6a>
 800b5dc:	4638      	mov	r0, r7
 800b5de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5e2:	bf00      	nop
 800b5e4:	0800f3b0 	.word	0x0800f3b0
 800b5e8:	0800f018 	.word	0x0800f018
 800b5ec:	0800f25c 	.word	0x0800f25c

0800b5f0 <__lshift>:
 800b5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5f4:	460c      	mov	r4, r1
 800b5f6:	6849      	ldr	r1, [r1, #4]
 800b5f8:	6923      	ldr	r3, [r4, #16]
 800b5fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b5fe:	68a3      	ldr	r3, [r4, #8]
 800b600:	4607      	mov	r7, r0
 800b602:	4691      	mov	r9, r2
 800b604:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b608:	f108 0601 	add.w	r6, r8, #1
 800b60c:	42b3      	cmp	r3, r6
 800b60e:	db0b      	blt.n	800b628 <__lshift+0x38>
 800b610:	4638      	mov	r0, r7
 800b612:	f7ff fd91 	bl	800b138 <_Balloc>
 800b616:	4605      	mov	r5, r0
 800b618:	b948      	cbnz	r0, 800b62e <__lshift+0x3e>
 800b61a:	4602      	mov	r2, r0
 800b61c:	4b28      	ldr	r3, [pc, #160]	; (800b6c0 <__lshift+0xd0>)
 800b61e:	4829      	ldr	r0, [pc, #164]	; (800b6c4 <__lshift+0xd4>)
 800b620:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b624:	f7ff f9bc 	bl	800a9a0 <__assert_func>
 800b628:	3101      	adds	r1, #1
 800b62a:	005b      	lsls	r3, r3, #1
 800b62c:	e7ee      	b.n	800b60c <__lshift+0x1c>
 800b62e:	2300      	movs	r3, #0
 800b630:	f100 0114 	add.w	r1, r0, #20
 800b634:	f100 0210 	add.w	r2, r0, #16
 800b638:	4618      	mov	r0, r3
 800b63a:	4553      	cmp	r3, sl
 800b63c:	db33      	blt.n	800b6a6 <__lshift+0xb6>
 800b63e:	6920      	ldr	r0, [r4, #16]
 800b640:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b644:	f104 0314 	add.w	r3, r4, #20
 800b648:	f019 091f 	ands.w	r9, r9, #31
 800b64c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b650:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b654:	d02b      	beq.n	800b6ae <__lshift+0xbe>
 800b656:	f1c9 0e20 	rsb	lr, r9, #32
 800b65a:	468a      	mov	sl, r1
 800b65c:	2200      	movs	r2, #0
 800b65e:	6818      	ldr	r0, [r3, #0]
 800b660:	fa00 f009 	lsl.w	r0, r0, r9
 800b664:	4302      	orrs	r2, r0
 800b666:	f84a 2b04 	str.w	r2, [sl], #4
 800b66a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b66e:	459c      	cmp	ip, r3
 800b670:	fa22 f20e 	lsr.w	r2, r2, lr
 800b674:	d8f3      	bhi.n	800b65e <__lshift+0x6e>
 800b676:	ebac 0304 	sub.w	r3, ip, r4
 800b67a:	3b15      	subs	r3, #21
 800b67c:	f023 0303 	bic.w	r3, r3, #3
 800b680:	3304      	adds	r3, #4
 800b682:	f104 0015 	add.w	r0, r4, #21
 800b686:	4584      	cmp	ip, r0
 800b688:	bf38      	it	cc
 800b68a:	2304      	movcc	r3, #4
 800b68c:	50ca      	str	r2, [r1, r3]
 800b68e:	b10a      	cbz	r2, 800b694 <__lshift+0xa4>
 800b690:	f108 0602 	add.w	r6, r8, #2
 800b694:	3e01      	subs	r6, #1
 800b696:	4638      	mov	r0, r7
 800b698:	612e      	str	r6, [r5, #16]
 800b69a:	4621      	mov	r1, r4
 800b69c:	f7ff fd8c 	bl	800b1b8 <_Bfree>
 800b6a0:	4628      	mov	r0, r5
 800b6a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	e7c5      	b.n	800b63a <__lshift+0x4a>
 800b6ae:	3904      	subs	r1, #4
 800b6b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b6b8:	459c      	cmp	ip, r3
 800b6ba:	d8f9      	bhi.n	800b6b0 <__lshift+0xc0>
 800b6bc:	e7ea      	b.n	800b694 <__lshift+0xa4>
 800b6be:	bf00      	nop
 800b6c0:	0800f1cd 	.word	0x0800f1cd
 800b6c4:	0800f25c 	.word	0x0800f25c

0800b6c8 <__mcmp>:
 800b6c8:	b530      	push	{r4, r5, lr}
 800b6ca:	6902      	ldr	r2, [r0, #16]
 800b6cc:	690c      	ldr	r4, [r1, #16]
 800b6ce:	1b12      	subs	r2, r2, r4
 800b6d0:	d10e      	bne.n	800b6f0 <__mcmp+0x28>
 800b6d2:	f100 0314 	add.w	r3, r0, #20
 800b6d6:	3114      	adds	r1, #20
 800b6d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b6dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b6e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b6e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b6e8:	42a5      	cmp	r5, r4
 800b6ea:	d003      	beq.n	800b6f4 <__mcmp+0x2c>
 800b6ec:	d305      	bcc.n	800b6fa <__mcmp+0x32>
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	4610      	mov	r0, r2
 800b6f2:	bd30      	pop	{r4, r5, pc}
 800b6f4:	4283      	cmp	r3, r0
 800b6f6:	d3f3      	bcc.n	800b6e0 <__mcmp+0x18>
 800b6f8:	e7fa      	b.n	800b6f0 <__mcmp+0x28>
 800b6fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b6fe:	e7f7      	b.n	800b6f0 <__mcmp+0x28>

0800b700 <__mdiff>:
 800b700:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b704:	460c      	mov	r4, r1
 800b706:	4606      	mov	r6, r0
 800b708:	4611      	mov	r1, r2
 800b70a:	4620      	mov	r0, r4
 800b70c:	4617      	mov	r7, r2
 800b70e:	f7ff ffdb 	bl	800b6c8 <__mcmp>
 800b712:	1e05      	subs	r5, r0, #0
 800b714:	d110      	bne.n	800b738 <__mdiff+0x38>
 800b716:	4629      	mov	r1, r5
 800b718:	4630      	mov	r0, r6
 800b71a:	f7ff fd0d 	bl	800b138 <_Balloc>
 800b71e:	b930      	cbnz	r0, 800b72e <__mdiff+0x2e>
 800b720:	4b39      	ldr	r3, [pc, #228]	; (800b808 <__mdiff+0x108>)
 800b722:	4602      	mov	r2, r0
 800b724:	f240 2132 	movw	r1, #562	; 0x232
 800b728:	4838      	ldr	r0, [pc, #224]	; (800b80c <__mdiff+0x10c>)
 800b72a:	f7ff f939 	bl	800a9a0 <__assert_func>
 800b72e:	2301      	movs	r3, #1
 800b730:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b734:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b738:	bfa4      	itt	ge
 800b73a:	463b      	movge	r3, r7
 800b73c:	4627      	movge	r7, r4
 800b73e:	4630      	mov	r0, r6
 800b740:	6879      	ldr	r1, [r7, #4]
 800b742:	bfa6      	itte	ge
 800b744:	461c      	movge	r4, r3
 800b746:	2500      	movge	r5, #0
 800b748:	2501      	movlt	r5, #1
 800b74a:	f7ff fcf5 	bl	800b138 <_Balloc>
 800b74e:	b920      	cbnz	r0, 800b75a <__mdiff+0x5a>
 800b750:	4b2d      	ldr	r3, [pc, #180]	; (800b808 <__mdiff+0x108>)
 800b752:	4602      	mov	r2, r0
 800b754:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b758:	e7e6      	b.n	800b728 <__mdiff+0x28>
 800b75a:	693e      	ldr	r6, [r7, #16]
 800b75c:	60c5      	str	r5, [r0, #12]
 800b75e:	6925      	ldr	r5, [r4, #16]
 800b760:	f107 0114 	add.w	r1, r7, #20
 800b764:	f104 0914 	add.w	r9, r4, #20
 800b768:	f100 0e14 	add.w	lr, r0, #20
 800b76c:	f107 0210 	add.w	r2, r7, #16
 800b770:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b774:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b778:	46f2      	mov	sl, lr
 800b77a:	2700      	movs	r7, #0
 800b77c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b780:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b784:	fa1f f883 	uxth.w	r8, r3
 800b788:	fa17 f78b 	uxtah	r7, r7, fp
 800b78c:	0c1b      	lsrs	r3, r3, #16
 800b78e:	eba7 0808 	sub.w	r8, r7, r8
 800b792:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b796:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b79a:	fa1f f888 	uxth.w	r8, r8
 800b79e:	141f      	asrs	r7, r3, #16
 800b7a0:	454d      	cmp	r5, r9
 800b7a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b7a6:	f84a 3b04 	str.w	r3, [sl], #4
 800b7aa:	d8e7      	bhi.n	800b77c <__mdiff+0x7c>
 800b7ac:	1b2b      	subs	r3, r5, r4
 800b7ae:	3b15      	subs	r3, #21
 800b7b0:	f023 0303 	bic.w	r3, r3, #3
 800b7b4:	3304      	adds	r3, #4
 800b7b6:	3415      	adds	r4, #21
 800b7b8:	42a5      	cmp	r5, r4
 800b7ba:	bf38      	it	cc
 800b7bc:	2304      	movcc	r3, #4
 800b7be:	4419      	add	r1, r3
 800b7c0:	4473      	add	r3, lr
 800b7c2:	469e      	mov	lr, r3
 800b7c4:	460d      	mov	r5, r1
 800b7c6:	4565      	cmp	r5, ip
 800b7c8:	d30e      	bcc.n	800b7e8 <__mdiff+0xe8>
 800b7ca:	f10c 0203 	add.w	r2, ip, #3
 800b7ce:	1a52      	subs	r2, r2, r1
 800b7d0:	f022 0203 	bic.w	r2, r2, #3
 800b7d4:	3903      	subs	r1, #3
 800b7d6:	458c      	cmp	ip, r1
 800b7d8:	bf38      	it	cc
 800b7da:	2200      	movcc	r2, #0
 800b7dc:	441a      	add	r2, r3
 800b7de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b7e2:	b17b      	cbz	r3, 800b804 <__mdiff+0x104>
 800b7e4:	6106      	str	r6, [r0, #16]
 800b7e6:	e7a5      	b.n	800b734 <__mdiff+0x34>
 800b7e8:	f855 8b04 	ldr.w	r8, [r5], #4
 800b7ec:	fa17 f488 	uxtah	r4, r7, r8
 800b7f0:	1422      	asrs	r2, r4, #16
 800b7f2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b7f6:	b2a4      	uxth	r4, r4
 800b7f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b7fc:	f84e 4b04 	str.w	r4, [lr], #4
 800b800:	1417      	asrs	r7, r2, #16
 800b802:	e7e0      	b.n	800b7c6 <__mdiff+0xc6>
 800b804:	3e01      	subs	r6, #1
 800b806:	e7ea      	b.n	800b7de <__mdiff+0xde>
 800b808:	0800f1cd 	.word	0x0800f1cd
 800b80c:	0800f25c 	.word	0x0800f25c

0800b810 <__ulp>:
 800b810:	b082      	sub	sp, #8
 800b812:	ed8d 0b00 	vstr	d0, [sp]
 800b816:	9b01      	ldr	r3, [sp, #4]
 800b818:	4912      	ldr	r1, [pc, #72]	; (800b864 <__ulp+0x54>)
 800b81a:	4019      	ands	r1, r3
 800b81c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b820:	2900      	cmp	r1, #0
 800b822:	dd05      	ble.n	800b830 <__ulp+0x20>
 800b824:	2200      	movs	r2, #0
 800b826:	460b      	mov	r3, r1
 800b828:	ec43 2b10 	vmov	d0, r2, r3
 800b82c:	b002      	add	sp, #8
 800b82e:	4770      	bx	lr
 800b830:	4249      	negs	r1, r1
 800b832:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b836:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b83a:	f04f 0200 	mov.w	r2, #0
 800b83e:	f04f 0300 	mov.w	r3, #0
 800b842:	da04      	bge.n	800b84e <__ulp+0x3e>
 800b844:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b848:	fa41 f300 	asr.w	r3, r1, r0
 800b84c:	e7ec      	b.n	800b828 <__ulp+0x18>
 800b84e:	f1a0 0114 	sub.w	r1, r0, #20
 800b852:	291e      	cmp	r1, #30
 800b854:	bfda      	itte	le
 800b856:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b85a:	fa20 f101 	lsrle.w	r1, r0, r1
 800b85e:	2101      	movgt	r1, #1
 800b860:	460a      	mov	r2, r1
 800b862:	e7e1      	b.n	800b828 <__ulp+0x18>
 800b864:	7ff00000 	.word	0x7ff00000

0800b868 <__b2d>:
 800b868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b86a:	6905      	ldr	r5, [r0, #16]
 800b86c:	f100 0714 	add.w	r7, r0, #20
 800b870:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b874:	1f2e      	subs	r6, r5, #4
 800b876:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b87a:	4620      	mov	r0, r4
 800b87c:	f7ff fd52 	bl	800b324 <__hi0bits>
 800b880:	f1c0 0320 	rsb	r3, r0, #32
 800b884:	280a      	cmp	r0, #10
 800b886:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b904 <__b2d+0x9c>
 800b88a:	600b      	str	r3, [r1, #0]
 800b88c:	dc14      	bgt.n	800b8b8 <__b2d+0x50>
 800b88e:	f1c0 0e0b 	rsb	lr, r0, #11
 800b892:	fa24 f10e 	lsr.w	r1, r4, lr
 800b896:	42b7      	cmp	r7, r6
 800b898:	ea41 030c 	orr.w	r3, r1, ip
 800b89c:	bf34      	ite	cc
 800b89e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b8a2:	2100      	movcs	r1, #0
 800b8a4:	3015      	adds	r0, #21
 800b8a6:	fa04 f000 	lsl.w	r0, r4, r0
 800b8aa:	fa21 f10e 	lsr.w	r1, r1, lr
 800b8ae:	ea40 0201 	orr.w	r2, r0, r1
 800b8b2:	ec43 2b10 	vmov	d0, r2, r3
 800b8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8b8:	42b7      	cmp	r7, r6
 800b8ba:	bf3a      	itte	cc
 800b8bc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b8c0:	f1a5 0608 	subcc.w	r6, r5, #8
 800b8c4:	2100      	movcs	r1, #0
 800b8c6:	380b      	subs	r0, #11
 800b8c8:	d017      	beq.n	800b8fa <__b2d+0x92>
 800b8ca:	f1c0 0c20 	rsb	ip, r0, #32
 800b8ce:	fa04 f500 	lsl.w	r5, r4, r0
 800b8d2:	42be      	cmp	r6, r7
 800b8d4:	fa21 f40c 	lsr.w	r4, r1, ip
 800b8d8:	ea45 0504 	orr.w	r5, r5, r4
 800b8dc:	bf8c      	ite	hi
 800b8de:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b8e2:	2400      	movls	r4, #0
 800b8e4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b8e8:	fa01 f000 	lsl.w	r0, r1, r0
 800b8ec:	fa24 f40c 	lsr.w	r4, r4, ip
 800b8f0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b8f4:	ea40 0204 	orr.w	r2, r0, r4
 800b8f8:	e7db      	b.n	800b8b2 <__b2d+0x4a>
 800b8fa:	ea44 030c 	orr.w	r3, r4, ip
 800b8fe:	460a      	mov	r2, r1
 800b900:	e7d7      	b.n	800b8b2 <__b2d+0x4a>
 800b902:	bf00      	nop
 800b904:	3ff00000 	.word	0x3ff00000

0800b908 <__d2b>:
 800b908:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b90c:	4689      	mov	r9, r1
 800b90e:	2101      	movs	r1, #1
 800b910:	ec57 6b10 	vmov	r6, r7, d0
 800b914:	4690      	mov	r8, r2
 800b916:	f7ff fc0f 	bl	800b138 <_Balloc>
 800b91a:	4604      	mov	r4, r0
 800b91c:	b930      	cbnz	r0, 800b92c <__d2b+0x24>
 800b91e:	4602      	mov	r2, r0
 800b920:	4b25      	ldr	r3, [pc, #148]	; (800b9b8 <__d2b+0xb0>)
 800b922:	4826      	ldr	r0, [pc, #152]	; (800b9bc <__d2b+0xb4>)
 800b924:	f240 310a 	movw	r1, #778	; 0x30a
 800b928:	f7ff f83a 	bl	800a9a0 <__assert_func>
 800b92c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b930:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b934:	bb35      	cbnz	r5, 800b984 <__d2b+0x7c>
 800b936:	2e00      	cmp	r6, #0
 800b938:	9301      	str	r3, [sp, #4]
 800b93a:	d028      	beq.n	800b98e <__d2b+0x86>
 800b93c:	4668      	mov	r0, sp
 800b93e:	9600      	str	r6, [sp, #0]
 800b940:	f7ff fd10 	bl	800b364 <__lo0bits>
 800b944:	9900      	ldr	r1, [sp, #0]
 800b946:	b300      	cbz	r0, 800b98a <__d2b+0x82>
 800b948:	9a01      	ldr	r2, [sp, #4]
 800b94a:	f1c0 0320 	rsb	r3, r0, #32
 800b94e:	fa02 f303 	lsl.w	r3, r2, r3
 800b952:	430b      	orrs	r3, r1
 800b954:	40c2      	lsrs	r2, r0
 800b956:	6163      	str	r3, [r4, #20]
 800b958:	9201      	str	r2, [sp, #4]
 800b95a:	9b01      	ldr	r3, [sp, #4]
 800b95c:	61a3      	str	r3, [r4, #24]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	bf14      	ite	ne
 800b962:	2202      	movne	r2, #2
 800b964:	2201      	moveq	r2, #1
 800b966:	6122      	str	r2, [r4, #16]
 800b968:	b1d5      	cbz	r5, 800b9a0 <__d2b+0x98>
 800b96a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b96e:	4405      	add	r5, r0
 800b970:	f8c9 5000 	str.w	r5, [r9]
 800b974:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b978:	f8c8 0000 	str.w	r0, [r8]
 800b97c:	4620      	mov	r0, r4
 800b97e:	b003      	add	sp, #12
 800b980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b984:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b988:	e7d5      	b.n	800b936 <__d2b+0x2e>
 800b98a:	6161      	str	r1, [r4, #20]
 800b98c:	e7e5      	b.n	800b95a <__d2b+0x52>
 800b98e:	a801      	add	r0, sp, #4
 800b990:	f7ff fce8 	bl	800b364 <__lo0bits>
 800b994:	9b01      	ldr	r3, [sp, #4]
 800b996:	6163      	str	r3, [r4, #20]
 800b998:	2201      	movs	r2, #1
 800b99a:	6122      	str	r2, [r4, #16]
 800b99c:	3020      	adds	r0, #32
 800b99e:	e7e3      	b.n	800b968 <__d2b+0x60>
 800b9a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b9a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b9a8:	f8c9 0000 	str.w	r0, [r9]
 800b9ac:	6918      	ldr	r0, [r3, #16]
 800b9ae:	f7ff fcb9 	bl	800b324 <__hi0bits>
 800b9b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b9b6:	e7df      	b.n	800b978 <__d2b+0x70>
 800b9b8:	0800f1cd 	.word	0x0800f1cd
 800b9bc:	0800f25c 	.word	0x0800f25c

0800b9c0 <__ratio>:
 800b9c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c4:	4688      	mov	r8, r1
 800b9c6:	4669      	mov	r1, sp
 800b9c8:	4681      	mov	r9, r0
 800b9ca:	f7ff ff4d 	bl	800b868 <__b2d>
 800b9ce:	a901      	add	r1, sp, #4
 800b9d0:	4640      	mov	r0, r8
 800b9d2:	ec55 4b10 	vmov	r4, r5, d0
 800b9d6:	f7ff ff47 	bl	800b868 <__b2d>
 800b9da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b9de:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b9e2:	eba3 0c02 	sub.w	ip, r3, r2
 800b9e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b9ea:	1a9b      	subs	r3, r3, r2
 800b9ec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b9f0:	ec51 0b10 	vmov	r0, r1, d0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	bfd6      	itet	le
 800b9f8:	460a      	movle	r2, r1
 800b9fa:	462a      	movgt	r2, r5
 800b9fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ba00:	468b      	mov	fp, r1
 800ba02:	462f      	mov	r7, r5
 800ba04:	bfd4      	ite	le
 800ba06:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ba0a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ba0e:	4620      	mov	r0, r4
 800ba10:	ee10 2a10 	vmov	r2, s0
 800ba14:	465b      	mov	r3, fp
 800ba16:	4639      	mov	r1, r7
 800ba18:	f7f4 ff18 	bl	800084c <__aeabi_ddiv>
 800ba1c:	ec41 0b10 	vmov	d0, r0, r1
 800ba20:	b003      	add	sp, #12
 800ba22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba26 <__copybits>:
 800ba26:	3901      	subs	r1, #1
 800ba28:	b570      	push	{r4, r5, r6, lr}
 800ba2a:	1149      	asrs	r1, r1, #5
 800ba2c:	6914      	ldr	r4, [r2, #16]
 800ba2e:	3101      	adds	r1, #1
 800ba30:	f102 0314 	add.w	r3, r2, #20
 800ba34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ba38:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ba3c:	1f05      	subs	r5, r0, #4
 800ba3e:	42a3      	cmp	r3, r4
 800ba40:	d30c      	bcc.n	800ba5c <__copybits+0x36>
 800ba42:	1aa3      	subs	r3, r4, r2
 800ba44:	3b11      	subs	r3, #17
 800ba46:	f023 0303 	bic.w	r3, r3, #3
 800ba4a:	3211      	adds	r2, #17
 800ba4c:	42a2      	cmp	r2, r4
 800ba4e:	bf88      	it	hi
 800ba50:	2300      	movhi	r3, #0
 800ba52:	4418      	add	r0, r3
 800ba54:	2300      	movs	r3, #0
 800ba56:	4288      	cmp	r0, r1
 800ba58:	d305      	bcc.n	800ba66 <__copybits+0x40>
 800ba5a:	bd70      	pop	{r4, r5, r6, pc}
 800ba5c:	f853 6b04 	ldr.w	r6, [r3], #4
 800ba60:	f845 6f04 	str.w	r6, [r5, #4]!
 800ba64:	e7eb      	b.n	800ba3e <__copybits+0x18>
 800ba66:	f840 3b04 	str.w	r3, [r0], #4
 800ba6a:	e7f4      	b.n	800ba56 <__copybits+0x30>

0800ba6c <__any_on>:
 800ba6c:	f100 0214 	add.w	r2, r0, #20
 800ba70:	6900      	ldr	r0, [r0, #16]
 800ba72:	114b      	asrs	r3, r1, #5
 800ba74:	4298      	cmp	r0, r3
 800ba76:	b510      	push	{r4, lr}
 800ba78:	db11      	blt.n	800ba9e <__any_on+0x32>
 800ba7a:	dd0a      	ble.n	800ba92 <__any_on+0x26>
 800ba7c:	f011 011f 	ands.w	r1, r1, #31
 800ba80:	d007      	beq.n	800ba92 <__any_on+0x26>
 800ba82:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ba86:	fa24 f001 	lsr.w	r0, r4, r1
 800ba8a:	fa00 f101 	lsl.w	r1, r0, r1
 800ba8e:	428c      	cmp	r4, r1
 800ba90:	d10b      	bne.n	800baaa <__any_on+0x3e>
 800ba92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d803      	bhi.n	800baa2 <__any_on+0x36>
 800ba9a:	2000      	movs	r0, #0
 800ba9c:	bd10      	pop	{r4, pc}
 800ba9e:	4603      	mov	r3, r0
 800baa0:	e7f7      	b.n	800ba92 <__any_on+0x26>
 800baa2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800baa6:	2900      	cmp	r1, #0
 800baa8:	d0f5      	beq.n	800ba96 <__any_on+0x2a>
 800baaa:	2001      	movs	r0, #1
 800baac:	e7f6      	b.n	800ba9c <__any_on+0x30>

0800baae <_calloc_r>:
 800baae:	b513      	push	{r0, r1, r4, lr}
 800bab0:	434a      	muls	r2, r1
 800bab2:	4611      	mov	r1, r2
 800bab4:	9201      	str	r2, [sp, #4]
 800bab6:	f7fd ffb9 	bl	8009a2c <_malloc_r>
 800baba:	4604      	mov	r4, r0
 800babc:	b118      	cbz	r0, 800bac6 <_calloc_r+0x18>
 800babe:	9a01      	ldr	r2, [sp, #4]
 800bac0:	2100      	movs	r1, #0
 800bac2:	f7fd ff5b 	bl	800997c <memset>
 800bac6:	4620      	mov	r0, r4
 800bac8:	b002      	add	sp, #8
 800baca:	bd10      	pop	{r4, pc}

0800bacc <__ssputs_r>:
 800bacc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bad0:	688e      	ldr	r6, [r1, #8]
 800bad2:	429e      	cmp	r6, r3
 800bad4:	4682      	mov	sl, r0
 800bad6:	460c      	mov	r4, r1
 800bad8:	4690      	mov	r8, r2
 800bada:	461f      	mov	r7, r3
 800badc:	d838      	bhi.n	800bb50 <__ssputs_r+0x84>
 800bade:	898a      	ldrh	r2, [r1, #12]
 800bae0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bae4:	d032      	beq.n	800bb4c <__ssputs_r+0x80>
 800bae6:	6825      	ldr	r5, [r4, #0]
 800bae8:	6909      	ldr	r1, [r1, #16]
 800baea:	eba5 0901 	sub.w	r9, r5, r1
 800baee:	6965      	ldr	r5, [r4, #20]
 800baf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800baf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800baf8:	3301      	adds	r3, #1
 800bafa:	444b      	add	r3, r9
 800bafc:	106d      	asrs	r5, r5, #1
 800bafe:	429d      	cmp	r5, r3
 800bb00:	bf38      	it	cc
 800bb02:	461d      	movcc	r5, r3
 800bb04:	0553      	lsls	r3, r2, #21
 800bb06:	d531      	bpl.n	800bb6c <__ssputs_r+0xa0>
 800bb08:	4629      	mov	r1, r5
 800bb0a:	f7fd ff8f 	bl	8009a2c <_malloc_r>
 800bb0e:	4606      	mov	r6, r0
 800bb10:	b950      	cbnz	r0, 800bb28 <__ssputs_r+0x5c>
 800bb12:	230c      	movs	r3, #12
 800bb14:	f8ca 3000 	str.w	r3, [sl]
 800bb18:	89a3      	ldrh	r3, [r4, #12]
 800bb1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb1e:	81a3      	strh	r3, [r4, #12]
 800bb20:	f04f 30ff 	mov.w	r0, #4294967295
 800bb24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb28:	6921      	ldr	r1, [r4, #16]
 800bb2a:	464a      	mov	r2, r9
 800bb2c:	f7ff faea 	bl	800b104 <memcpy>
 800bb30:	89a3      	ldrh	r3, [r4, #12]
 800bb32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb3a:	81a3      	strh	r3, [r4, #12]
 800bb3c:	6126      	str	r6, [r4, #16]
 800bb3e:	6165      	str	r5, [r4, #20]
 800bb40:	444e      	add	r6, r9
 800bb42:	eba5 0509 	sub.w	r5, r5, r9
 800bb46:	6026      	str	r6, [r4, #0]
 800bb48:	60a5      	str	r5, [r4, #8]
 800bb4a:	463e      	mov	r6, r7
 800bb4c:	42be      	cmp	r6, r7
 800bb4e:	d900      	bls.n	800bb52 <__ssputs_r+0x86>
 800bb50:	463e      	mov	r6, r7
 800bb52:	4632      	mov	r2, r6
 800bb54:	6820      	ldr	r0, [r4, #0]
 800bb56:	4641      	mov	r1, r8
 800bb58:	f000 ff10 	bl	800c97c <memmove>
 800bb5c:	68a3      	ldr	r3, [r4, #8]
 800bb5e:	6822      	ldr	r2, [r4, #0]
 800bb60:	1b9b      	subs	r3, r3, r6
 800bb62:	4432      	add	r2, r6
 800bb64:	60a3      	str	r3, [r4, #8]
 800bb66:	6022      	str	r2, [r4, #0]
 800bb68:	2000      	movs	r0, #0
 800bb6a:	e7db      	b.n	800bb24 <__ssputs_r+0x58>
 800bb6c:	462a      	mov	r2, r5
 800bb6e:	f000 ff1f 	bl	800c9b0 <_realloc_r>
 800bb72:	4606      	mov	r6, r0
 800bb74:	2800      	cmp	r0, #0
 800bb76:	d1e1      	bne.n	800bb3c <__ssputs_r+0x70>
 800bb78:	6921      	ldr	r1, [r4, #16]
 800bb7a:	4650      	mov	r0, sl
 800bb7c:	f7fd ff06 	bl	800998c <_free_r>
 800bb80:	e7c7      	b.n	800bb12 <__ssputs_r+0x46>
	...

0800bb84 <_svfiprintf_r>:
 800bb84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb88:	4698      	mov	r8, r3
 800bb8a:	898b      	ldrh	r3, [r1, #12]
 800bb8c:	061b      	lsls	r3, r3, #24
 800bb8e:	b09d      	sub	sp, #116	; 0x74
 800bb90:	4607      	mov	r7, r0
 800bb92:	460d      	mov	r5, r1
 800bb94:	4614      	mov	r4, r2
 800bb96:	d50e      	bpl.n	800bbb6 <_svfiprintf_r+0x32>
 800bb98:	690b      	ldr	r3, [r1, #16]
 800bb9a:	b963      	cbnz	r3, 800bbb6 <_svfiprintf_r+0x32>
 800bb9c:	2140      	movs	r1, #64	; 0x40
 800bb9e:	f7fd ff45 	bl	8009a2c <_malloc_r>
 800bba2:	6028      	str	r0, [r5, #0]
 800bba4:	6128      	str	r0, [r5, #16]
 800bba6:	b920      	cbnz	r0, 800bbb2 <_svfiprintf_r+0x2e>
 800bba8:	230c      	movs	r3, #12
 800bbaa:	603b      	str	r3, [r7, #0]
 800bbac:	f04f 30ff 	mov.w	r0, #4294967295
 800bbb0:	e0d1      	b.n	800bd56 <_svfiprintf_r+0x1d2>
 800bbb2:	2340      	movs	r3, #64	; 0x40
 800bbb4:	616b      	str	r3, [r5, #20]
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	9309      	str	r3, [sp, #36]	; 0x24
 800bbba:	2320      	movs	r3, #32
 800bbbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbc0:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbc4:	2330      	movs	r3, #48	; 0x30
 800bbc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bd70 <_svfiprintf_r+0x1ec>
 800bbca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbce:	f04f 0901 	mov.w	r9, #1
 800bbd2:	4623      	mov	r3, r4
 800bbd4:	469a      	mov	sl, r3
 800bbd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbda:	b10a      	cbz	r2, 800bbe0 <_svfiprintf_r+0x5c>
 800bbdc:	2a25      	cmp	r2, #37	; 0x25
 800bbde:	d1f9      	bne.n	800bbd4 <_svfiprintf_r+0x50>
 800bbe0:	ebba 0b04 	subs.w	fp, sl, r4
 800bbe4:	d00b      	beq.n	800bbfe <_svfiprintf_r+0x7a>
 800bbe6:	465b      	mov	r3, fp
 800bbe8:	4622      	mov	r2, r4
 800bbea:	4629      	mov	r1, r5
 800bbec:	4638      	mov	r0, r7
 800bbee:	f7ff ff6d 	bl	800bacc <__ssputs_r>
 800bbf2:	3001      	adds	r0, #1
 800bbf4:	f000 80aa 	beq.w	800bd4c <_svfiprintf_r+0x1c8>
 800bbf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbfa:	445a      	add	r2, fp
 800bbfc:	9209      	str	r2, [sp, #36]	; 0x24
 800bbfe:	f89a 3000 	ldrb.w	r3, [sl]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	f000 80a2 	beq.w	800bd4c <_svfiprintf_r+0x1c8>
 800bc08:	2300      	movs	r3, #0
 800bc0a:	f04f 32ff 	mov.w	r2, #4294967295
 800bc0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc12:	f10a 0a01 	add.w	sl, sl, #1
 800bc16:	9304      	str	r3, [sp, #16]
 800bc18:	9307      	str	r3, [sp, #28]
 800bc1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc1e:	931a      	str	r3, [sp, #104]	; 0x68
 800bc20:	4654      	mov	r4, sl
 800bc22:	2205      	movs	r2, #5
 800bc24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc28:	4851      	ldr	r0, [pc, #324]	; (800bd70 <_svfiprintf_r+0x1ec>)
 800bc2a:	f7f4 fad9 	bl	80001e0 <memchr>
 800bc2e:	9a04      	ldr	r2, [sp, #16]
 800bc30:	b9d8      	cbnz	r0, 800bc6a <_svfiprintf_r+0xe6>
 800bc32:	06d0      	lsls	r0, r2, #27
 800bc34:	bf44      	itt	mi
 800bc36:	2320      	movmi	r3, #32
 800bc38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc3c:	0711      	lsls	r1, r2, #28
 800bc3e:	bf44      	itt	mi
 800bc40:	232b      	movmi	r3, #43	; 0x2b
 800bc42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc46:	f89a 3000 	ldrb.w	r3, [sl]
 800bc4a:	2b2a      	cmp	r3, #42	; 0x2a
 800bc4c:	d015      	beq.n	800bc7a <_svfiprintf_r+0xf6>
 800bc4e:	9a07      	ldr	r2, [sp, #28]
 800bc50:	4654      	mov	r4, sl
 800bc52:	2000      	movs	r0, #0
 800bc54:	f04f 0c0a 	mov.w	ip, #10
 800bc58:	4621      	mov	r1, r4
 800bc5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc5e:	3b30      	subs	r3, #48	; 0x30
 800bc60:	2b09      	cmp	r3, #9
 800bc62:	d94e      	bls.n	800bd02 <_svfiprintf_r+0x17e>
 800bc64:	b1b0      	cbz	r0, 800bc94 <_svfiprintf_r+0x110>
 800bc66:	9207      	str	r2, [sp, #28]
 800bc68:	e014      	b.n	800bc94 <_svfiprintf_r+0x110>
 800bc6a:	eba0 0308 	sub.w	r3, r0, r8
 800bc6e:	fa09 f303 	lsl.w	r3, r9, r3
 800bc72:	4313      	orrs	r3, r2
 800bc74:	9304      	str	r3, [sp, #16]
 800bc76:	46a2      	mov	sl, r4
 800bc78:	e7d2      	b.n	800bc20 <_svfiprintf_r+0x9c>
 800bc7a:	9b03      	ldr	r3, [sp, #12]
 800bc7c:	1d19      	adds	r1, r3, #4
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	9103      	str	r1, [sp, #12]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	bfbb      	ittet	lt
 800bc86:	425b      	neglt	r3, r3
 800bc88:	f042 0202 	orrlt.w	r2, r2, #2
 800bc8c:	9307      	strge	r3, [sp, #28]
 800bc8e:	9307      	strlt	r3, [sp, #28]
 800bc90:	bfb8      	it	lt
 800bc92:	9204      	strlt	r2, [sp, #16]
 800bc94:	7823      	ldrb	r3, [r4, #0]
 800bc96:	2b2e      	cmp	r3, #46	; 0x2e
 800bc98:	d10c      	bne.n	800bcb4 <_svfiprintf_r+0x130>
 800bc9a:	7863      	ldrb	r3, [r4, #1]
 800bc9c:	2b2a      	cmp	r3, #42	; 0x2a
 800bc9e:	d135      	bne.n	800bd0c <_svfiprintf_r+0x188>
 800bca0:	9b03      	ldr	r3, [sp, #12]
 800bca2:	1d1a      	adds	r2, r3, #4
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	9203      	str	r2, [sp, #12]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	bfb8      	it	lt
 800bcac:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcb0:	3402      	adds	r4, #2
 800bcb2:	9305      	str	r3, [sp, #20]
 800bcb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bd80 <_svfiprintf_r+0x1fc>
 800bcb8:	7821      	ldrb	r1, [r4, #0]
 800bcba:	2203      	movs	r2, #3
 800bcbc:	4650      	mov	r0, sl
 800bcbe:	f7f4 fa8f 	bl	80001e0 <memchr>
 800bcc2:	b140      	cbz	r0, 800bcd6 <_svfiprintf_r+0x152>
 800bcc4:	2340      	movs	r3, #64	; 0x40
 800bcc6:	eba0 000a 	sub.w	r0, r0, sl
 800bcca:	fa03 f000 	lsl.w	r0, r3, r0
 800bcce:	9b04      	ldr	r3, [sp, #16]
 800bcd0:	4303      	orrs	r3, r0
 800bcd2:	3401      	adds	r4, #1
 800bcd4:	9304      	str	r3, [sp, #16]
 800bcd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcda:	4826      	ldr	r0, [pc, #152]	; (800bd74 <_svfiprintf_r+0x1f0>)
 800bcdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bce0:	2206      	movs	r2, #6
 800bce2:	f7f4 fa7d 	bl	80001e0 <memchr>
 800bce6:	2800      	cmp	r0, #0
 800bce8:	d038      	beq.n	800bd5c <_svfiprintf_r+0x1d8>
 800bcea:	4b23      	ldr	r3, [pc, #140]	; (800bd78 <_svfiprintf_r+0x1f4>)
 800bcec:	bb1b      	cbnz	r3, 800bd36 <_svfiprintf_r+0x1b2>
 800bcee:	9b03      	ldr	r3, [sp, #12]
 800bcf0:	3307      	adds	r3, #7
 800bcf2:	f023 0307 	bic.w	r3, r3, #7
 800bcf6:	3308      	adds	r3, #8
 800bcf8:	9303      	str	r3, [sp, #12]
 800bcfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcfc:	4433      	add	r3, r6
 800bcfe:	9309      	str	r3, [sp, #36]	; 0x24
 800bd00:	e767      	b.n	800bbd2 <_svfiprintf_r+0x4e>
 800bd02:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd06:	460c      	mov	r4, r1
 800bd08:	2001      	movs	r0, #1
 800bd0a:	e7a5      	b.n	800bc58 <_svfiprintf_r+0xd4>
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	3401      	adds	r4, #1
 800bd10:	9305      	str	r3, [sp, #20]
 800bd12:	4619      	mov	r1, r3
 800bd14:	f04f 0c0a 	mov.w	ip, #10
 800bd18:	4620      	mov	r0, r4
 800bd1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd1e:	3a30      	subs	r2, #48	; 0x30
 800bd20:	2a09      	cmp	r2, #9
 800bd22:	d903      	bls.n	800bd2c <_svfiprintf_r+0x1a8>
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d0c5      	beq.n	800bcb4 <_svfiprintf_r+0x130>
 800bd28:	9105      	str	r1, [sp, #20]
 800bd2a:	e7c3      	b.n	800bcb4 <_svfiprintf_r+0x130>
 800bd2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd30:	4604      	mov	r4, r0
 800bd32:	2301      	movs	r3, #1
 800bd34:	e7f0      	b.n	800bd18 <_svfiprintf_r+0x194>
 800bd36:	ab03      	add	r3, sp, #12
 800bd38:	9300      	str	r3, [sp, #0]
 800bd3a:	462a      	mov	r2, r5
 800bd3c:	4b0f      	ldr	r3, [pc, #60]	; (800bd7c <_svfiprintf_r+0x1f8>)
 800bd3e:	a904      	add	r1, sp, #16
 800bd40:	4638      	mov	r0, r7
 800bd42:	f3af 8000 	nop.w
 800bd46:	1c42      	adds	r2, r0, #1
 800bd48:	4606      	mov	r6, r0
 800bd4a:	d1d6      	bne.n	800bcfa <_svfiprintf_r+0x176>
 800bd4c:	89ab      	ldrh	r3, [r5, #12]
 800bd4e:	065b      	lsls	r3, r3, #25
 800bd50:	f53f af2c 	bmi.w	800bbac <_svfiprintf_r+0x28>
 800bd54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd56:	b01d      	add	sp, #116	; 0x74
 800bd58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd5c:	ab03      	add	r3, sp, #12
 800bd5e:	9300      	str	r3, [sp, #0]
 800bd60:	462a      	mov	r2, r5
 800bd62:	4b06      	ldr	r3, [pc, #24]	; (800bd7c <_svfiprintf_r+0x1f8>)
 800bd64:	a904      	add	r1, sp, #16
 800bd66:	4638      	mov	r0, r7
 800bd68:	f000 f9d4 	bl	800c114 <_printf_i>
 800bd6c:	e7eb      	b.n	800bd46 <_svfiprintf_r+0x1c2>
 800bd6e:	bf00      	nop
 800bd70:	0800f3bc 	.word	0x0800f3bc
 800bd74:	0800f3c6 	.word	0x0800f3c6
 800bd78:	00000000 	.word	0x00000000
 800bd7c:	0800bacd 	.word	0x0800bacd
 800bd80:	0800f3c2 	.word	0x0800f3c2

0800bd84 <__sfputc_r>:
 800bd84:	6893      	ldr	r3, [r2, #8]
 800bd86:	3b01      	subs	r3, #1
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	b410      	push	{r4}
 800bd8c:	6093      	str	r3, [r2, #8]
 800bd8e:	da08      	bge.n	800bda2 <__sfputc_r+0x1e>
 800bd90:	6994      	ldr	r4, [r2, #24]
 800bd92:	42a3      	cmp	r3, r4
 800bd94:	db01      	blt.n	800bd9a <__sfputc_r+0x16>
 800bd96:	290a      	cmp	r1, #10
 800bd98:	d103      	bne.n	800bda2 <__sfputc_r+0x1e>
 800bd9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd9e:	f000 baf9 	b.w	800c394 <__swbuf_r>
 800bda2:	6813      	ldr	r3, [r2, #0]
 800bda4:	1c58      	adds	r0, r3, #1
 800bda6:	6010      	str	r0, [r2, #0]
 800bda8:	7019      	strb	r1, [r3, #0]
 800bdaa:	4608      	mov	r0, r1
 800bdac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdb0:	4770      	bx	lr

0800bdb2 <__sfputs_r>:
 800bdb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdb4:	4606      	mov	r6, r0
 800bdb6:	460f      	mov	r7, r1
 800bdb8:	4614      	mov	r4, r2
 800bdba:	18d5      	adds	r5, r2, r3
 800bdbc:	42ac      	cmp	r4, r5
 800bdbe:	d101      	bne.n	800bdc4 <__sfputs_r+0x12>
 800bdc0:	2000      	movs	r0, #0
 800bdc2:	e007      	b.n	800bdd4 <__sfputs_r+0x22>
 800bdc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdc8:	463a      	mov	r2, r7
 800bdca:	4630      	mov	r0, r6
 800bdcc:	f7ff ffda 	bl	800bd84 <__sfputc_r>
 800bdd0:	1c43      	adds	r3, r0, #1
 800bdd2:	d1f3      	bne.n	800bdbc <__sfputs_r+0xa>
 800bdd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bdd8 <_vfiprintf_r>:
 800bdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bddc:	460d      	mov	r5, r1
 800bdde:	b09d      	sub	sp, #116	; 0x74
 800bde0:	4614      	mov	r4, r2
 800bde2:	4698      	mov	r8, r3
 800bde4:	4606      	mov	r6, r0
 800bde6:	b118      	cbz	r0, 800bdf0 <_vfiprintf_r+0x18>
 800bde8:	6983      	ldr	r3, [r0, #24]
 800bdea:	b90b      	cbnz	r3, 800bdf0 <_vfiprintf_r+0x18>
 800bdec:	f000 fcc2 	bl	800c774 <__sinit>
 800bdf0:	4b89      	ldr	r3, [pc, #548]	; (800c018 <_vfiprintf_r+0x240>)
 800bdf2:	429d      	cmp	r5, r3
 800bdf4:	d11b      	bne.n	800be2e <_vfiprintf_r+0x56>
 800bdf6:	6875      	ldr	r5, [r6, #4]
 800bdf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdfa:	07d9      	lsls	r1, r3, #31
 800bdfc:	d405      	bmi.n	800be0a <_vfiprintf_r+0x32>
 800bdfe:	89ab      	ldrh	r3, [r5, #12]
 800be00:	059a      	lsls	r2, r3, #22
 800be02:	d402      	bmi.n	800be0a <_vfiprintf_r+0x32>
 800be04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be06:	f000 fd53 	bl	800c8b0 <__retarget_lock_acquire_recursive>
 800be0a:	89ab      	ldrh	r3, [r5, #12]
 800be0c:	071b      	lsls	r3, r3, #28
 800be0e:	d501      	bpl.n	800be14 <_vfiprintf_r+0x3c>
 800be10:	692b      	ldr	r3, [r5, #16]
 800be12:	b9eb      	cbnz	r3, 800be50 <_vfiprintf_r+0x78>
 800be14:	4629      	mov	r1, r5
 800be16:	4630      	mov	r0, r6
 800be18:	f000 fb1c 	bl	800c454 <__swsetup_r>
 800be1c:	b1c0      	cbz	r0, 800be50 <_vfiprintf_r+0x78>
 800be1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be20:	07dc      	lsls	r4, r3, #31
 800be22:	d50e      	bpl.n	800be42 <_vfiprintf_r+0x6a>
 800be24:	f04f 30ff 	mov.w	r0, #4294967295
 800be28:	b01d      	add	sp, #116	; 0x74
 800be2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be2e:	4b7b      	ldr	r3, [pc, #492]	; (800c01c <_vfiprintf_r+0x244>)
 800be30:	429d      	cmp	r5, r3
 800be32:	d101      	bne.n	800be38 <_vfiprintf_r+0x60>
 800be34:	68b5      	ldr	r5, [r6, #8]
 800be36:	e7df      	b.n	800bdf8 <_vfiprintf_r+0x20>
 800be38:	4b79      	ldr	r3, [pc, #484]	; (800c020 <_vfiprintf_r+0x248>)
 800be3a:	429d      	cmp	r5, r3
 800be3c:	bf08      	it	eq
 800be3e:	68f5      	ldreq	r5, [r6, #12]
 800be40:	e7da      	b.n	800bdf8 <_vfiprintf_r+0x20>
 800be42:	89ab      	ldrh	r3, [r5, #12]
 800be44:	0598      	lsls	r0, r3, #22
 800be46:	d4ed      	bmi.n	800be24 <_vfiprintf_r+0x4c>
 800be48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be4a:	f000 fd32 	bl	800c8b2 <__retarget_lock_release_recursive>
 800be4e:	e7e9      	b.n	800be24 <_vfiprintf_r+0x4c>
 800be50:	2300      	movs	r3, #0
 800be52:	9309      	str	r3, [sp, #36]	; 0x24
 800be54:	2320      	movs	r3, #32
 800be56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800be5e:	2330      	movs	r3, #48	; 0x30
 800be60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c024 <_vfiprintf_r+0x24c>
 800be64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be68:	f04f 0901 	mov.w	r9, #1
 800be6c:	4623      	mov	r3, r4
 800be6e:	469a      	mov	sl, r3
 800be70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be74:	b10a      	cbz	r2, 800be7a <_vfiprintf_r+0xa2>
 800be76:	2a25      	cmp	r2, #37	; 0x25
 800be78:	d1f9      	bne.n	800be6e <_vfiprintf_r+0x96>
 800be7a:	ebba 0b04 	subs.w	fp, sl, r4
 800be7e:	d00b      	beq.n	800be98 <_vfiprintf_r+0xc0>
 800be80:	465b      	mov	r3, fp
 800be82:	4622      	mov	r2, r4
 800be84:	4629      	mov	r1, r5
 800be86:	4630      	mov	r0, r6
 800be88:	f7ff ff93 	bl	800bdb2 <__sfputs_r>
 800be8c:	3001      	adds	r0, #1
 800be8e:	f000 80aa 	beq.w	800bfe6 <_vfiprintf_r+0x20e>
 800be92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be94:	445a      	add	r2, fp
 800be96:	9209      	str	r2, [sp, #36]	; 0x24
 800be98:	f89a 3000 	ldrb.w	r3, [sl]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	f000 80a2 	beq.w	800bfe6 <_vfiprintf_r+0x20e>
 800bea2:	2300      	movs	r3, #0
 800bea4:	f04f 32ff 	mov.w	r2, #4294967295
 800bea8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800beac:	f10a 0a01 	add.w	sl, sl, #1
 800beb0:	9304      	str	r3, [sp, #16]
 800beb2:	9307      	str	r3, [sp, #28]
 800beb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800beb8:	931a      	str	r3, [sp, #104]	; 0x68
 800beba:	4654      	mov	r4, sl
 800bebc:	2205      	movs	r2, #5
 800bebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bec2:	4858      	ldr	r0, [pc, #352]	; (800c024 <_vfiprintf_r+0x24c>)
 800bec4:	f7f4 f98c 	bl	80001e0 <memchr>
 800bec8:	9a04      	ldr	r2, [sp, #16]
 800beca:	b9d8      	cbnz	r0, 800bf04 <_vfiprintf_r+0x12c>
 800becc:	06d1      	lsls	r1, r2, #27
 800bece:	bf44      	itt	mi
 800bed0:	2320      	movmi	r3, #32
 800bed2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bed6:	0713      	lsls	r3, r2, #28
 800bed8:	bf44      	itt	mi
 800beda:	232b      	movmi	r3, #43	; 0x2b
 800bedc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bee0:	f89a 3000 	ldrb.w	r3, [sl]
 800bee4:	2b2a      	cmp	r3, #42	; 0x2a
 800bee6:	d015      	beq.n	800bf14 <_vfiprintf_r+0x13c>
 800bee8:	9a07      	ldr	r2, [sp, #28]
 800beea:	4654      	mov	r4, sl
 800beec:	2000      	movs	r0, #0
 800beee:	f04f 0c0a 	mov.w	ip, #10
 800bef2:	4621      	mov	r1, r4
 800bef4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bef8:	3b30      	subs	r3, #48	; 0x30
 800befa:	2b09      	cmp	r3, #9
 800befc:	d94e      	bls.n	800bf9c <_vfiprintf_r+0x1c4>
 800befe:	b1b0      	cbz	r0, 800bf2e <_vfiprintf_r+0x156>
 800bf00:	9207      	str	r2, [sp, #28]
 800bf02:	e014      	b.n	800bf2e <_vfiprintf_r+0x156>
 800bf04:	eba0 0308 	sub.w	r3, r0, r8
 800bf08:	fa09 f303 	lsl.w	r3, r9, r3
 800bf0c:	4313      	orrs	r3, r2
 800bf0e:	9304      	str	r3, [sp, #16]
 800bf10:	46a2      	mov	sl, r4
 800bf12:	e7d2      	b.n	800beba <_vfiprintf_r+0xe2>
 800bf14:	9b03      	ldr	r3, [sp, #12]
 800bf16:	1d19      	adds	r1, r3, #4
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	9103      	str	r1, [sp, #12]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	bfbb      	ittet	lt
 800bf20:	425b      	neglt	r3, r3
 800bf22:	f042 0202 	orrlt.w	r2, r2, #2
 800bf26:	9307      	strge	r3, [sp, #28]
 800bf28:	9307      	strlt	r3, [sp, #28]
 800bf2a:	bfb8      	it	lt
 800bf2c:	9204      	strlt	r2, [sp, #16]
 800bf2e:	7823      	ldrb	r3, [r4, #0]
 800bf30:	2b2e      	cmp	r3, #46	; 0x2e
 800bf32:	d10c      	bne.n	800bf4e <_vfiprintf_r+0x176>
 800bf34:	7863      	ldrb	r3, [r4, #1]
 800bf36:	2b2a      	cmp	r3, #42	; 0x2a
 800bf38:	d135      	bne.n	800bfa6 <_vfiprintf_r+0x1ce>
 800bf3a:	9b03      	ldr	r3, [sp, #12]
 800bf3c:	1d1a      	adds	r2, r3, #4
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	9203      	str	r2, [sp, #12]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	bfb8      	it	lt
 800bf46:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf4a:	3402      	adds	r4, #2
 800bf4c:	9305      	str	r3, [sp, #20]
 800bf4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c034 <_vfiprintf_r+0x25c>
 800bf52:	7821      	ldrb	r1, [r4, #0]
 800bf54:	2203      	movs	r2, #3
 800bf56:	4650      	mov	r0, sl
 800bf58:	f7f4 f942 	bl	80001e0 <memchr>
 800bf5c:	b140      	cbz	r0, 800bf70 <_vfiprintf_r+0x198>
 800bf5e:	2340      	movs	r3, #64	; 0x40
 800bf60:	eba0 000a 	sub.w	r0, r0, sl
 800bf64:	fa03 f000 	lsl.w	r0, r3, r0
 800bf68:	9b04      	ldr	r3, [sp, #16]
 800bf6a:	4303      	orrs	r3, r0
 800bf6c:	3401      	adds	r4, #1
 800bf6e:	9304      	str	r3, [sp, #16]
 800bf70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf74:	482c      	ldr	r0, [pc, #176]	; (800c028 <_vfiprintf_r+0x250>)
 800bf76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf7a:	2206      	movs	r2, #6
 800bf7c:	f7f4 f930 	bl	80001e0 <memchr>
 800bf80:	2800      	cmp	r0, #0
 800bf82:	d03f      	beq.n	800c004 <_vfiprintf_r+0x22c>
 800bf84:	4b29      	ldr	r3, [pc, #164]	; (800c02c <_vfiprintf_r+0x254>)
 800bf86:	bb1b      	cbnz	r3, 800bfd0 <_vfiprintf_r+0x1f8>
 800bf88:	9b03      	ldr	r3, [sp, #12]
 800bf8a:	3307      	adds	r3, #7
 800bf8c:	f023 0307 	bic.w	r3, r3, #7
 800bf90:	3308      	adds	r3, #8
 800bf92:	9303      	str	r3, [sp, #12]
 800bf94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf96:	443b      	add	r3, r7
 800bf98:	9309      	str	r3, [sp, #36]	; 0x24
 800bf9a:	e767      	b.n	800be6c <_vfiprintf_r+0x94>
 800bf9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfa0:	460c      	mov	r4, r1
 800bfa2:	2001      	movs	r0, #1
 800bfa4:	e7a5      	b.n	800bef2 <_vfiprintf_r+0x11a>
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	3401      	adds	r4, #1
 800bfaa:	9305      	str	r3, [sp, #20]
 800bfac:	4619      	mov	r1, r3
 800bfae:	f04f 0c0a 	mov.w	ip, #10
 800bfb2:	4620      	mov	r0, r4
 800bfb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfb8:	3a30      	subs	r2, #48	; 0x30
 800bfba:	2a09      	cmp	r2, #9
 800bfbc:	d903      	bls.n	800bfc6 <_vfiprintf_r+0x1ee>
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d0c5      	beq.n	800bf4e <_vfiprintf_r+0x176>
 800bfc2:	9105      	str	r1, [sp, #20]
 800bfc4:	e7c3      	b.n	800bf4e <_vfiprintf_r+0x176>
 800bfc6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfca:	4604      	mov	r4, r0
 800bfcc:	2301      	movs	r3, #1
 800bfce:	e7f0      	b.n	800bfb2 <_vfiprintf_r+0x1da>
 800bfd0:	ab03      	add	r3, sp, #12
 800bfd2:	9300      	str	r3, [sp, #0]
 800bfd4:	462a      	mov	r2, r5
 800bfd6:	4b16      	ldr	r3, [pc, #88]	; (800c030 <_vfiprintf_r+0x258>)
 800bfd8:	a904      	add	r1, sp, #16
 800bfda:	4630      	mov	r0, r6
 800bfdc:	f3af 8000 	nop.w
 800bfe0:	4607      	mov	r7, r0
 800bfe2:	1c78      	adds	r0, r7, #1
 800bfe4:	d1d6      	bne.n	800bf94 <_vfiprintf_r+0x1bc>
 800bfe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfe8:	07d9      	lsls	r1, r3, #31
 800bfea:	d405      	bmi.n	800bff8 <_vfiprintf_r+0x220>
 800bfec:	89ab      	ldrh	r3, [r5, #12]
 800bfee:	059a      	lsls	r2, r3, #22
 800bff0:	d402      	bmi.n	800bff8 <_vfiprintf_r+0x220>
 800bff2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bff4:	f000 fc5d 	bl	800c8b2 <__retarget_lock_release_recursive>
 800bff8:	89ab      	ldrh	r3, [r5, #12]
 800bffa:	065b      	lsls	r3, r3, #25
 800bffc:	f53f af12 	bmi.w	800be24 <_vfiprintf_r+0x4c>
 800c000:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c002:	e711      	b.n	800be28 <_vfiprintf_r+0x50>
 800c004:	ab03      	add	r3, sp, #12
 800c006:	9300      	str	r3, [sp, #0]
 800c008:	462a      	mov	r2, r5
 800c00a:	4b09      	ldr	r3, [pc, #36]	; (800c030 <_vfiprintf_r+0x258>)
 800c00c:	a904      	add	r1, sp, #16
 800c00e:	4630      	mov	r0, r6
 800c010:	f000 f880 	bl	800c114 <_printf_i>
 800c014:	e7e4      	b.n	800bfe0 <_vfiprintf_r+0x208>
 800c016:	bf00      	nop
 800c018:	0800f410 	.word	0x0800f410
 800c01c:	0800f430 	.word	0x0800f430
 800c020:	0800f3f0 	.word	0x0800f3f0
 800c024:	0800f3bc 	.word	0x0800f3bc
 800c028:	0800f3c6 	.word	0x0800f3c6
 800c02c:	00000000 	.word	0x00000000
 800c030:	0800bdb3 	.word	0x0800bdb3
 800c034:	0800f3c2 	.word	0x0800f3c2

0800c038 <_printf_common>:
 800c038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c03c:	4616      	mov	r6, r2
 800c03e:	4699      	mov	r9, r3
 800c040:	688a      	ldr	r2, [r1, #8]
 800c042:	690b      	ldr	r3, [r1, #16]
 800c044:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c048:	4293      	cmp	r3, r2
 800c04a:	bfb8      	it	lt
 800c04c:	4613      	movlt	r3, r2
 800c04e:	6033      	str	r3, [r6, #0]
 800c050:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c054:	4607      	mov	r7, r0
 800c056:	460c      	mov	r4, r1
 800c058:	b10a      	cbz	r2, 800c05e <_printf_common+0x26>
 800c05a:	3301      	adds	r3, #1
 800c05c:	6033      	str	r3, [r6, #0]
 800c05e:	6823      	ldr	r3, [r4, #0]
 800c060:	0699      	lsls	r1, r3, #26
 800c062:	bf42      	ittt	mi
 800c064:	6833      	ldrmi	r3, [r6, #0]
 800c066:	3302      	addmi	r3, #2
 800c068:	6033      	strmi	r3, [r6, #0]
 800c06a:	6825      	ldr	r5, [r4, #0]
 800c06c:	f015 0506 	ands.w	r5, r5, #6
 800c070:	d106      	bne.n	800c080 <_printf_common+0x48>
 800c072:	f104 0a19 	add.w	sl, r4, #25
 800c076:	68e3      	ldr	r3, [r4, #12]
 800c078:	6832      	ldr	r2, [r6, #0]
 800c07a:	1a9b      	subs	r3, r3, r2
 800c07c:	42ab      	cmp	r3, r5
 800c07e:	dc26      	bgt.n	800c0ce <_printf_common+0x96>
 800c080:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c084:	1e13      	subs	r3, r2, #0
 800c086:	6822      	ldr	r2, [r4, #0]
 800c088:	bf18      	it	ne
 800c08a:	2301      	movne	r3, #1
 800c08c:	0692      	lsls	r2, r2, #26
 800c08e:	d42b      	bmi.n	800c0e8 <_printf_common+0xb0>
 800c090:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c094:	4649      	mov	r1, r9
 800c096:	4638      	mov	r0, r7
 800c098:	47c0      	blx	r8
 800c09a:	3001      	adds	r0, #1
 800c09c:	d01e      	beq.n	800c0dc <_printf_common+0xa4>
 800c09e:	6823      	ldr	r3, [r4, #0]
 800c0a0:	68e5      	ldr	r5, [r4, #12]
 800c0a2:	6832      	ldr	r2, [r6, #0]
 800c0a4:	f003 0306 	and.w	r3, r3, #6
 800c0a8:	2b04      	cmp	r3, #4
 800c0aa:	bf08      	it	eq
 800c0ac:	1aad      	subeq	r5, r5, r2
 800c0ae:	68a3      	ldr	r3, [r4, #8]
 800c0b0:	6922      	ldr	r2, [r4, #16]
 800c0b2:	bf0c      	ite	eq
 800c0b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0b8:	2500      	movne	r5, #0
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	bfc4      	itt	gt
 800c0be:	1a9b      	subgt	r3, r3, r2
 800c0c0:	18ed      	addgt	r5, r5, r3
 800c0c2:	2600      	movs	r6, #0
 800c0c4:	341a      	adds	r4, #26
 800c0c6:	42b5      	cmp	r5, r6
 800c0c8:	d11a      	bne.n	800c100 <_printf_common+0xc8>
 800c0ca:	2000      	movs	r0, #0
 800c0cc:	e008      	b.n	800c0e0 <_printf_common+0xa8>
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	4652      	mov	r2, sl
 800c0d2:	4649      	mov	r1, r9
 800c0d4:	4638      	mov	r0, r7
 800c0d6:	47c0      	blx	r8
 800c0d8:	3001      	adds	r0, #1
 800c0da:	d103      	bne.n	800c0e4 <_printf_common+0xac>
 800c0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c0e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0e4:	3501      	adds	r5, #1
 800c0e6:	e7c6      	b.n	800c076 <_printf_common+0x3e>
 800c0e8:	18e1      	adds	r1, r4, r3
 800c0ea:	1c5a      	adds	r2, r3, #1
 800c0ec:	2030      	movs	r0, #48	; 0x30
 800c0ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c0f2:	4422      	add	r2, r4
 800c0f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c0f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c0fc:	3302      	adds	r3, #2
 800c0fe:	e7c7      	b.n	800c090 <_printf_common+0x58>
 800c100:	2301      	movs	r3, #1
 800c102:	4622      	mov	r2, r4
 800c104:	4649      	mov	r1, r9
 800c106:	4638      	mov	r0, r7
 800c108:	47c0      	blx	r8
 800c10a:	3001      	adds	r0, #1
 800c10c:	d0e6      	beq.n	800c0dc <_printf_common+0xa4>
 800c10e:	3601      	adds	r6, #1
 800c110:	e7d9      	b.n	800c0c6 <_printf_common+0x8e>
	...

0800c114 <_printf_i>:
 800c114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c118:	460c      	mov	r4, r1
 800c11a:	4691      	mov	r9, r2
 800c11c:	7e27      	ldrb	r7, [r4, #24]
 800c11e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c120:	2f78      	cmp	r7, #120	; 0x78
 800c122:	4680      	mov	r8, r0
 800c124:	469a      	mov	sl, r3
 800c126:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c12a:	d807      	bhi.n	800c13c <_printf_i+0x28>
 800c12c:	2f62      	cmp	r7, #98	; 0x62
 800c12e:	d80a      	bhi.n	800c146 <_printf_i+0x32>
 800c130:	2f00      	cmp	r7, #0
 800c132:	f000 80d8 	beq.w	800c2e6 <_printf_i+0x1d2>
 800c136:	2f58      	cmp	r7, #88	; 0x58
 800c138:	f000 80a3 	beq.w	800c282 <_printf_i+0x16e>
 800c13c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c140:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c144:	e03a      	b.n	800c1bc <_printf_i+0xa8>
 800c146:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c14a:	2b15      	cmp	r3, #21
 800c14c:	d8f6      	bhi.n	800c13c <_printf_i+0x28>
 800c14e:	a001      	add	r0, pc, #4	; (adr r0, 800c154 <_printf_i+0x40>)
 800c150:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c154:	0800c1ad 	.word	0x0800c1ad
 800c158:	0800c1c1 	.word	0x0800c1c1
 800c15c:	0800c13d 	.word	0x0800c13d
 800c160:	0800c13d 	.word	0x0800c13d
 800c164:	0800c13d 	.word	0x0800c13d
 800c168:	0800c13d 	.word	0x0800c13d
 800c16c:	0800c1c1 	.word	0x0800c1c1
 800c170:	0800c13d 	.word	0x0800c13d
 800c174:	0800c13d 	.word	0x0800c13d
 800c178:	0800c13d 	.word	0x0800c13d
 800c17c:	0800c13d 	.word	0x0800c13d
 800c180:	0800c2cd 	.word	0x0800c2cd
 800c184:	0800c1f1 	.word	0x0800c1f1
 800c188:	0800c2af 	.word	0x0800c2af
 800c18c:	0800c13d 	.word	0x0800c13d
 800c190:	0800c13d 	.word	0x0800c13d
 800c194:	0800c2ef 	.word	0x0800c2ef
 800c198:	0800c13d 	.word	0x0800c13d
 800c19c:	0800c1f1 	.word	0x0800c1f1
 800c1a0:	0800c13d 	.word	0x0800c13d
 800c1a4:	0800c13d 	.word	0x0800c13d
 800c1a8:	0800c2b7 	.word	0x0800c2b7
 800c1ac:	680b      	ldr	r3, [r1, #0]
 800c1ae:	1d1a      	adds	r2, r3, #4
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	600a      	str	r2, [r1, #0]
 800c1b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c1b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c1bc:	2301      	movs	r3, #1
 800c1be:	e0a3      	b.n	800c308 <_printf_i+0x1f4>
 800c1c0:	6825      	ldr	r5, [r4, #0]
 800c1c2:	6808      	ldr	r0, [r1, #0]
 800c1c4:	062e      	lsls	r6, r5, #24
 800c1c6:	f100 0304 	add.w	r3, r0, #4
 800c1ca:	d50a      	bpl.n	800c1e2 <_printf_i+0xce>
 800c1cc:	6805      	ldr	r5, [r0, #0]
 800c1ce:	600b      	str	r3, [r1, #0]
 800c1d0:	2d00      	cmp	r5, #0
 800c1d2:	da03      	bge.n	800c1dc <_printf_i+0xc8>
 800c1d4:	232d      	movs	r3, #45	; 0x2d
 800c1d6:	426d      	negs	r5, r5
 800c1d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1dc:	485e      	ldr	r0, [pc, #376]	; (800c358 <_printf_i+0x244>)
 800c1de:	230a      	movs	r3, #10
 800c1e0:	e019      	b.n	800c216 <_printf_i+0x102>
 800c1e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c1e6:	6805      	ldr	r5, [r0, #0]
 800c1e8:	600b      	str	r3, [r1, #0]
 800c1ea:	bf18      	it	ne
 800c1ec:	b22d      	sxthne	r5, r5
 800c1ee:	e7ef      	b.n	800c1d0 <_printf_i+0xbc>
 800c1f0:	680b      	ldr	r3, [r1, #0]
 800c1f2:	6825      	ldr	r5, [r4, #0]
 800c1f4:	1d18      	adds	r0, r3, #4
 800c1f6:	6008      	str	r0, [r1, #0]
 800c1f8:	0628      	lsls	r0, r5, #24
 800c1fa:	d501      	bpl.n	800c200 <_printf_i+0xec>
 800c1fc:	681d      	ldr	r5, [r3, #0]
 800c1fe:	e002      	b.n	800c206 <_printf_i+0xf2>
 800c200:	0669      	lsls	r1, r5, #25
 800c202:	d5fb      	bpl.n	800c1fc <_printf_i+0xe8>
 800c204:	881d      	ldrh	r5, [r3, #0]
 800c206:	4854      	ldr	r0, [pc, #336]	; (800c358 <_printf_i+0x244>)
 800c208:	2f6f      	cmp	r7, #111	; 0x6f
 800c20a:	bf0c      	ite	eq
 800c20c:	2308      	moveq	r3, #8
 800c20e:	230a      	movne	r3, #10
 800c210:	2100      	movs	r1, #0
 800c212:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c216:	6866      	ldr	r6, [r4, #4]
 800c218:	60a6      	str	r6, [r4, #8]
 800c21a:	2e00      	cmp	r6, #0
 800c21c:	bfa2      	ittt	ge
 800c21e:	6821      	ldrge	r1, [r4, #0]
 800c220:	f021 0104 	bicge.w	r1, r1, #4
 800c224:	6021      	strge	r1, [r4, #0]
 800c226:	b90d      	cbnz	r5, 800c22c <_printf_i+0x118>
 800c228:	2e00      	cmp	r6, #0
 800c22a:	d04d      	beq.n	800c2c8 <_printf_i+0x1b4>
 800c22c:	4616      	mov	r6, r2
 800c22e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c232:	fb03 5711 	mls	r7, r3, r1, r5
 800c236:	5dc7      	ldrb	r7, [r0, r7]
 800c238:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c23c:	462f      	mov	r7, r5
 800c23e:	42bb      	cmp	r3, r7
 800c240:	460d      	mov	r5, r1
 800c242:	d9f4      	bls.n	800c22e <_printf_i+0x11a>
 800c244:	2b08      	cmp	r3, #8
 800c246:	d10b      	bne.n	800c260 <_printf_i+0x14c>
 800c248:	6823      	ldr	r3, [r4, #0]
 800c24a:	07df      	lsls	r7, r3, #31
 800c24c:	d508      	bpl.n	800c260 <_printf_i+0x14c>
 800c24e:	6923      	ldr	r3, [r4, #16]
 800c250:	6861      	ldr	r1, [r4, #4]
 800c252:	4299      	cmp	r1, r3
 800c254:	bfde      	ittt	le
 800c256:	2330      	movle	r3, #48	; 0x30
 800c258:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c25c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c260:	1b92      	subs	r2, r2, r6
 800c262:	6122      	str	r2, [r4, #16]
 800c264:	f8cd a000 	str.w	sl, [sp]
 800c268:	464b      	mov	r3, r9
 800c26a:	aa03      	add	r2, sp, #12
 800c26c:	4621      	mov	r1, r4
 800c26e:	4640      	mov	r0, r8
 800c270:	f7ff fee2 	bl	800c038 <_printf_common>
 800c274:	3001      	adds	r0, #1
 800c276:	d14c      	bne.n	800c312 <_printf_i+0x1fe>
 800c278:	f04f 30ff 	mov.w	r0, #4294967295
 800c27c:	b004      	add	sp, #16
 800c27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c282:	4835      	ldr	r0, [pc, #212]	; (800c358 <_printf_i+0x244>)
 800c284:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c288:	6823      	ldr	r3, [r4, #0]
 800c28a:	680e      	ldr	r6, [r1, #0]
 800c28c:	061f      	lsls	r7, r3, #24
 800c28e:	f856 5b04 	ldr.w	r5, [r6], #4
 800c292:	600e      	str	r6, [r1, #0]
 800c294:	d514      	bpl.n	800c2c0 <_printf_i+0x1ac>
 800c296:	07d9      	lsls	r1, r3, #31
 800c298:	bf44      	itt	mi
 800c29a:	f043 0320 	orrmi.w	r3, r3, #32
 800c29e:	6023      	strmi	r3, [r4, #0]
 800c2a0:	b91d      	cbnz	r5, 800c2aa <_printf_i+0x196>
 800c2a2:	6823      	ldr	r3, [r4, #0]
 800c2a4:	f023 0320 	bic.w	r3, r3, #32
 800c2a8:	6023      	str	r3, [r4, #0]
 800c2aa:	2310      	movs	r3, #16
 800c2ac:	e7b0      	b.n	800c210 <_printf_i+0xfc>
 800c2ae:	6823      	ldr	r3, [r4, #0]
 800c2b0:	f043 0320 	orr.w	r3, r3, #32
 800c2b4:	6023      	str	r3, [r4, #0]
 800c2b6:	2378      	movs	r3, #120	; 0x78
 800c2b8:	4828      	ldr	r0, [pc, #160]	; (800c35c <_printf_i+0x248>)
 800c2ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c2be:	e7e3      	b.n	800c288 <_printf_i+0x174>
 800c2c0:	065e      	lsls	r6, r3, #25
 800c2c2:	bf48      	it	mi
 800c2c4:	b2ad      	uxthmi	r5, r5
 800c2c6:	e7e6      	b.n	800c296 <_printf_i+0x182>
 800c2c8:	4616      	mov	r6, r2
 800c2ca:	e7bb      	b.n	800c244 <_printf_i+0x130>
 800c2cc:	680b      	ldr	r3, [r1, #0]
 800c2ce:	6826      	ldr	r6, [r4, #0]
 800c2d0:	6960      	ldr	r0, [r4, #20]
 800c2d2:	1d1d      	adds	r5, r3, #4
 800c2d4:	600d      	str	r5, [r1, #0]
 800c2d6:	0635      	lsls	r5, r6, #24
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	d501      	bpl.n	800c2e0 <_printf_i+0x1cc>
 800c2dc:	6018      	str	r0, [r3, #0]
 800c2de:	e002      	b.n	800c2e6 <_printf_i+0x1d2>
 800c2e0:	0671      	lsls	r1, r6, #25
 800c2e2:	d5fb      	bpl.n	800c2dc <_printf_i+0x1c8>
 800c2e4:	8018      	strh	r0, [r3, #0]
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	6123      	str	r3, [r4, #16]
 800c2ea:	4616      	mov	r6, r2
 800c2ec:	e7ba      	b.n	800c264 <_printf_i+0x150>
 800c2ee:	680b      	ldr	r3, [r1, #0]
 800c2f0:	1d1a      	adds	r2, r3, #4
 800c2f2:	600a      	str	r2, [r1, #0]
 800c2f4:	681e      	ldr	r6, [r3, #0]
 800c2f6:	6862      	ldr	r2, [r4, #4]
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	4630      	mov	r0, r6
 800c2fc:	f7f3 ff70 	bl	80001e0 <memchr>
 800c300:	b108      	cbz	r0, 800c306 <_printf_i+0x1f2>
 800c302:	1b80      	subs	r0, r0, r6
 800c304:	6060      	str	r0, [r4, #4]
 800c306:	6863      	ldr	r3, [r4, #4]
 800c308:	6123      	str	r3, [r4, #16]
 800c30a:	2300      	movs	r3, #0
 800c30c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c310:	e7a8      	b.n	800c264 <_printf_i+0x150>
 800c312:	6923      	ldr	r3, [r4, #16]
 800c314:	4632      	mov	r2, r6
 800c316:	4649      	mov	r1, r9
 800c318:	4640      	mov	r0, r8
 800c31a:	47d0      	blx	sl
 800c31c:	3001      	adds	r0, #1
 800c31e:	d0ab      	beq.n	800c278 <_printf_i+0x164>
 800c320:	6823      	ldr	r3, [r4, #0]
 800c322:	079b      	lsls	r3, r3, #30
 800c324:	d413      	bmi.n	800c34e <_printf_i+0x23a>
 800c326:	68e0      	ldr	r0, [r4, #12]
 800c328:	9b03      	ldr	r3, [sp, #12]
 800c32a:	4298      	cmp	r0, r3
 800c32c:	bfb8      	it	lt
 800c32e:	4618      	movlt	r0, r3
 800c330:	e7a4      	b.n	800c27c <_printf_i+0x168>
 800c332:	2301      	movs	r3, #1
 800c334:	4632      	mov	r2, r6
 800c336:	4649      	mov	r1, r9
 800c338:	4640      	mov	r0, r8
 800c33a:	47d0      	blx	sl
 800c33c:	3001      	adds	r0, #1
 800c33e:	d09b      	beq.n	800c278 <_printf_i+0x164>
 800c340:	3501      	adds	r5, #1
 800c342:	68e3      	ldr	r3, [r4, #12]
 800c344:	9903      	ldr	r1, [sp, #12]
 800c346:	1a5b      	subs	r3, r3, r1
 800c348:	42ab      	cmp	r3, r5
 800c34a:	dcf2      	bgt.n	800c332 <_printf_i+0x21e>
 800c34c:	e7eb      	b.n	800c326 <_printf_i+0x212>
 800c34e:	2500      	movs	r5, #0
 800c350:	f104 0619 	add.w	r6, r4, #25
 800c354:	e7f5      	b.n	800c342 <_printf_i+0x22e>
 800c356:	bf00      	nop
 800c358:	0800f3cd 	.word	0x0800f3cd
 800c35c:	0800f3de 	.word	0x0800f3de

0800c360 <nan>:
 800c360:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c368 <nan+0x8>
 800c364:	4770      	bx	lr
 800c366:	bf00      	nop
 800c368:	00000000 	.word	0x00000000
 800c36c:	7ff80000 	.word	0x7ff80000

0800c370 <strncmp>:
 800c370:	b510      	push	{r4, lr}
 800c372:	b16a      	cbz	r2, 800c390 <strncmp+0x20>
 800c374:	3901      	subs	r1, #1
 800c376:	1884      	adds	r4, r0, r2
 800c378:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c37c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c380:	4293      	cmp	r3, r2
 800c382:	d103      	bne.n	800c38c <strncmp+0x1c>
 800c384:	42a0      	cmp	r0, r4
 800c386:	d001      	beq.n	800c38c <strncmp+0x1c>
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d1f5      	bne.n	800c378 <strncmp+0x8>
 800c38c:	1a98      	subs	r0, r3, r2
 800c38e:	bd10      	pop	{r4, pc}
 800c390:	4610      	mov	r0, r2
 800c392:	e7fc      	b.n	800c38e <strncmp+0x1e>

0800c394 <__swbuf_r>:
 800c394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c396:	460e      	mov	r6, r1
 800c398:	4614      	mov	r4, r2
 800c39a:	4605      	mov	r5, r0
 800c39c:	b118      	cbz	r0, 800c3a6 <__swbuf_r+0x12>
 800c39e:	6983      	ldr	r3, [r0, #24]
 800c3a0:	b90b      	cbnz	r3, 800c3a6 <__swbuf_r+0x12>
 800c3a2:	f000 f9e7 	bl	800c774 <__sinit>
 800c3a6:	4b21      	ldr	r3, [pc, #132]	; (800c42c <__swbuf_r+0x98>)
 800c3a8:	429c      	cmp	r4, r3
 800c3aa:	d12b      	bne.n	800c404 <__swbuf_r+0x70>
 800c3ac:	686c      	ldr	r4, [r5, #4]
 800c3ae:	69a3      	ldr	r3, [r4, #24]
 800c3b0:	60a3      	str	r3, [r4, #8]
 800c3b2:	89a3      	ldrh	r3, [r4, #12]
 800c3b4:	071a      	lsls	r2, r3, #28
 800c3b6:	d52f      	bpl.n	800c418 <__swbuf_r+0x84>
 800c3b8:	6923      	ldr	r3, [r4, #16]
 800c3ba:	b36b      	cbz	r3, 800c418 <__swbuf_r+0x84>
 800c3bc:	6923      	ldr	r3, [r4, #16]
 800c3be:	6820      	ldr	r0, [r4, #0]
 800c3c0:	1ac0      	subs	r0, r0, r3
 800c3c2:	6963      	ldr	r3, [r4, #20]
 800c3c4:	b2f6      	uxtb	r6, r6
 800c3c6:	4283      	cmp	r3, r0
 800c3c8:	4637      	mov	r7, r6
 800c3ca:	dc04      	bgt.n	800c3d6 <__swbuf_r+0x42>
 800c3cc:	4621      	mov	r1, r4
 800c3ce:	4628      	mov	r0, r5
 800c3d0:	f000 f93c 	bl	800c64c <_fflush_r>
 800c3d4:	bb30      	cbnz	r0, 800c424 <__swbuf_r+0x90>
 800c3d6:	68a3      	ldr	r3, [r4, #8]
 800c3d8:	3b01      	subs	r3, #1
 800c3da:	60a3      	str	r3, [r4, #8]
 800c3dc:	6823      	ldr	r3, [r4, #0]
 800c3de:	1c5a      	adds	r2, r3, #1
 800c3e0:	6022      	str	r2, [r4, #0]
 800c3e2:	701e      	strb	r6, [r3, #0]
 800c3e4:	6963      	ldr	r3, [r4, #20]
 800c3e6:	3001      	adds	r0, #1
 800c3e8:	4283      	cmp	r3, r0
 800c3ea:	d004      	beq.n	800c3f6 <__swbuf_r+0x62>
 800c3ec:	89a3      	ldrh	r3, [r4, #12]
 800c3ee:	07db      	lsls	r3, r3, #31
 800c3f0:	d506      	bpl.n	800c400 <__swbuf_r+0x6c>
 800c3f2:	2e0a      	cmp	r6, #10
 800c3f4:	d104      	bne.n	800c400 <__swbuf_r+0x6c>
 800c3f6:	4621      	mov	r1, r4
 800c3f8:	4628      	mov	r0, r5
 800c3fa:	f000 f927 	bl	800c64c <_fflush_r>
 800c3fe:	b988      	cbnz	r0, 800c424 <__swbuf_r+0x90>
 800c400:	4638      	mov	r0, r7
 800c402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c404:	4b0a      	ldr	r3, [pc, #40]	; (800c430 <__swbuf_r+0x9c>)
 800c406:	429c      	cmp	r4, r3
 800c408:	d101      	bne.n	800c40e <__swbuf_r+0x7a>
 800c40a:	68ac      	ldr	r4, [r5, #8]
 800c40c:	e7cf      	b.n	800c3ae <__swbuf_r+0x1a>
 800c40e:	4b09      	ldr	r3, [pc, #36]	; (800c434 <__swbuf_r+0xa0>)
 800c410:	429c      	cmp	r4, r3
 800c412:	bf08      	it	eq
 800c414:	68ec      	ldreq	r4, [r5, #12]
 800c416:	e7ca      	b.n	800c3ae <__swbuf_r+0x1a>
 800c418:	4621      	mov	r1, r4
 800c41a:	4628      	mov	r0, r5
 800c41c:	f000 f81a 	bl	800c454 <__swsetup_r>
 800c420:	2800      	cmp	r0, #0
 800c422:	d0cb      	beq.n	800c3bc <__swbuf_r+0x28>
 800c424:	f04f 37ff 	mov.w	r7, #4294967295
 800c428:	e7ea      	b.n	800c400 <__swbuf_r+0x6c>
 800c42a:	bf00      	nop
 800c42c:	0800f410 	.word	0x0800f410
 800c430:	0800f430 	.word	0x0800f430
 800c434:	0800f3f0 	.word	0x0800f3f0

0800c438 <__ascii_wctomb>:
 800c438:	b149      	cbz	r1, 800c44e <__ascii_wctomb+0x16>
 800c43a:	2aff      	cmp	r2, #255	; 0xff
 800c43c:	bf85      	ittet	hi
 800c43e:	238a      	movhi	r3, #138	; 0x8a
 800c440:	6003      	strhi	r3, [r0, #0]
 800c442:	700a      	strbls	r2, [r1, #0]
 800c444:	f04f 30ff 	movhi.w	r0, #4294967295
 800c448:	bf98      	it	ls
 800c44a:	2001      	movls	r0, #1
 800c44c:	4770      	bx	lr
 800c44e:	4608      	mov	r0, r1
 800c450:	4770      	bx	lr
	...

0800c454 <__swsetup_r>:
 800c454:	4b32      	ldr	r3, [pc, #200]	; (800c520 <__swsetup_r+0xcc>)
 800c456:	b570      	push	{r4, r5, r6, lr}
 800c458:	681d      	ldr	r5, [r3, #0]
 800c45a:	4606      	mov	r6, r0
 800c45c:	460c      	mov	r4, r1
 800c45e:	b125      	cbz	r5, 800c46a <__swsetup_r+0x16>
 800c460:	69ab      	ldr	r3, [r5, #24]
 800c462:	b913      	cbnz	r3, 800c46a <__swsetup_r+0x16>
 800c464:	4628      	mov	r0, r5
 800c466:	f000 f985 	bl	800c774 <__sinit>
 800c46a:	4b2e      	ldr	r3, [pc, #184]	; (800c524 <__swsetup_r+0xd0>)
 800c46c:	429c      	cmp	r4, r3
 800c46e:	d10f      	bne.n	800c490 <__swsetup_r+0x3c>
 800c470:	686c      	ldr	r4, [r5, #4]
 800c472:	89a3      	ldrh	r3, [r4, #12]
 800c474:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c478:	0719      	lsls	r1, r3, #28
 800c47a:	d42c      	bmi.n	800c4d6 <__swsetup_r+0x82>
 800c47c:	06dd      	lsls	r5, r3, #27
 800c47e:	d411      	bmi.n	800c4a4 <__swsetup_r+0x50>
 800c480:	2309      	movs	r3, #9
 800c482:	6033      	str	r3, [r6, #0]
 800c484:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c488:	81a3      	strh	r3, [r4, #12]
 800c48a:	f04f 30ff 	mov.w	r0, #4294967295
 800c48e:	e03e      	b.n	800c50e <__swsetup_r+0xba>
 800c490:	4b25      	ldr	r3, [pc, #148]	; (800c528 <__swsetup_r+0xd4>)
 800c492:	429c      	cmp	r4, r3
 800c494:	d101      	bne.n	800c49a <__swsetup_r+0x46>
 800c496:	68ac      	ldr	r4, [r5, #8]
 800c498:	e7eb      	b.n	800c472 <__swsetup_r+0x1e>
 800c49a:	4b24      	ldr	r3, [pc, #144]	; (800c52c <__swsetup_r+0xd8>)
 800c49c:	429c      	cmp	r4, r3
 800c49e:	bf08      	it	eq
 800c4a0:	68ec      	ldreq	r4, [r5, #12]
 800c4a2:	e7e6      	b.n	800c472 <__swsetup_r+0x1e>
 800c4a4:	0758      	lsls	r0, r3, #29
 800c4a6:	d512      	bpl.n	800c4ce <__swsetup_r+0x7a>
 800c4a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4aa:	b141      	cbz	r1, 800c4be <__swsetup_r+0x6a>
 800c4ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4b0:	4299      	cmp	r1, r3
 800c4b2:	d002      	beq.n	800c4ba <__swsetup_r+0x66>
 800c4b4:	4630      	mov	r0, r6
 800c4b6:	f7fd fa69 	bl	800998c <_free_r>
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	6363      	str	r3, [r4, #52]	; 0x34
 800c4be:	89a3      	ldrh	r3, [r4, #12]
 800c4c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c4c4:	81a3      	strh	r3, [r4, #12]
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	6063      	str	r3, [r4, #4]
 800c4ca:	6923      	ldr	r3, [r4, #16]
 800c4cc:	6023      	str	r3, [r4, #0]
 800c4ce:	89a3      	ldrh	r3, [r4, #12]
 800c4d0:	f043 0308 	orr.w	r3, r3, #8
 800c4d4:	81a3      	strh	r3, [r4, #12]
 800c4d6:	6923      	ldr	r3, [r4, #16]
 800c4d8:	b94b      	cbnz	r3, 800c4ee <__swsetup_r+0x9a>
 800c4da:	89a3      	ldrh	r3, [r4, #12]
 800c4dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c4e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4e4:	d003      	beq.n	800c4ee <__swsetup_r+0x9a>
 800c4e6:	4621      	mov	r1, r4
 800c4e8:	4630      	mov	r0, r6
 800c4ea:	f000 fa07 	bl	800c8fc <__smakebuf_r>
 800c4ee:	89a0      	ldrh	r0, [r4, #12]
 800c4f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c4f4:	f010 0301 	ands.w	r3, r0, #1
 800c4f8:	d00a      	beq.n	800c510 <__swsetup_r+0xbc>
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	60a3      	str	r3, [r4, #8]
 800c4fe:	6963      	ldr	r3, [r4, #20]
 800c500:	425b      	negs	r3, r3
 800c502:	61a3      	str	r3, [r4, #24]
 800c504:	6923      	ldr	r3, [r4, #16]
 800c506:	b943      	cbnz	r3, 800c51a <__swsetup_r+0xc6>
 800c508:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c50c:	d1ba      	bne.n	800c484 <__swsetup_r+0x30>
 800c50e:	bd70      	pop	{r4, r5, r6, pc}
 800c510:	0781      	lsls	r1, r0, #30
 800c512:	bf58      	it	pl
 800c514:	6963      	ldrpl	r3, [r4, #20]
 800c516:	60a3      	str	r3, [r4, #8]
 800c518:	e7f4      	b.n	800c504 <__swsetup_r+0xb0>
 800c51a:	2000      	movs	r0, #0
 800c51c:	e7f7      	b.n	800c50e <__swsetup_r+0xba>
 800c51e:	bf00      	nop
 800c520:	2000034c 	.word	0x2000034c
 800c524:	0800f410 	.word	0x0800f410
 800c528:	0800f430 	.word	0x0800f430
 800c52c:	0800f3f0 	.word	0x0800f3f0

0800c530 <abort>:
 800c530:	b508      	push	{r3, lr}
 800c532:	2006      	movs	r0, #6
 800c534:	f000 fa8a 	bl	800ca4c <raise>
 800c538:	2001      	movs	r0, #1
 800c53a:	f7f6 f9ef 	bl	800291c <_exit>
	...

0800c540 <__sflush_r>:
 800c540:	898a      	ldrh	r2, [r1, #12]
 800c542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c546:	4605      	mov	r5, r0
 800c548:	0710      	lsls	r0, r2, #28
 800c54a:	460c      	mov	r4, r1
 800c54c:	d458      	bmi.n	800c600 <__sflush_r+0xc0>
 800c54e:	684b      	ldr	r3, [r1, #4]
 800c550:	2b00      	cmp	r3, #0
 800c552:	dc05      	bgt.n	800c560 <__sflush_r+0x20>
 800c554:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c556:	2b00      	cmp	r3, #0
 800c558:	dc02      	bgt.n	800c560 <__sflush_r+0x20>
 800c55a:	2000      	movs	r0, #0
 800c55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c560:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c562:	2e00      	cmp	r6, #0
 800c564:	d0f9      	beq.n	800c55a <__sflush_r+0x1a>
 800c566:	2300      	movs	r3, #0
 800c568:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c56c:	682f      	ldr	r7, [r5, #0]
 800c56e:	602b      	str	r3, [r5, #0]
 800c570:	d032      	beq.n	800c5d8 <__sflush_r+0x98>
 800c572:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c574:	89a3      	ldrh	r3, [r4, #12]
 800c576:	075a      	lsls	r2, r3, #29
 800c578:	d505      	bpl.n	800c586 <__sflush_r+0x46>
 800c57a:	6863      	ldr	r3, [r4, #4]
 800c57c:	1ac0      	subs	r0, r0, r3
 800c57e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c580:	b10b      	cbz	r3, 800c586 <__sflush_r+0x46>
 800c582:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c584:	1ac0      	subs	r0, r0, r3
 800c586:	2300      	movs	r3, #0
 800c588:	4602      	mov	r2, r0
 800c58a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c58c:	6a21      	ldr	r1, [r4, #32]
 800c58e:	4628      	mov	r0, r5
 800c590:	47b0      	blx	r6
 800c592:	1c43      	adds	r3, r0, #1
 800c594:	89a3      	ldrh	r3, [r4, #12]
 800c596:	d106      	bne.n	800c5a6 <__sflush_r+0x66>
 800c598:	6829      	ldr	r1, [r5, #0]
 800c59a:	291d      	cmp	r1, #29
 800c59c:	d82c      	bhi.n	800c5f8 <__sflush_r+0xb8>
 800c59e:	4a2a      	ldr	r2, [pc, #168]	; (800c648 <__sflush_r+0x108>)
 800c5a0:	40ca      	lsrs	r2, r1
 800c5a2:	07d6      	lsls	r6, r2, #31
 800c5a4:	d528      	bpl.n	800c5f8 <__sflush_r+0xb8>
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	6062      	str	r2, [r4, #4]
 800c5aa:	04d9      	lsls	r1, r3, #19
 800c5ac:	6922      	ldr	r2, [r4, #16]
 800c5ae:	6022      	str	r2, [r4, #0]
 800c5b0:	d504      	bpl.n	800c5bc <__sflush_r+0x7c>
 800c5b2:	1c42      	adds	r2, r0, #1
 800c5b4:	d101      	bne.n	800c5ba <__sflush_r+0x7a>
 800c5b6:	682b      	ldr	r3, [r5, #0]
 800c5b8:	b903      	cbnz	r3, 800c5bc <__sflush_r+0x7c>
 800c5ba:	6560      	str	r0, [r4, #84]	; 0x54
 800c5bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5be:	602f      	str	r7, [r5, #0]
 800c5c0:	2900      	cmp	r1, #0
 800c5c2:	d0ca      	beq.n	800c55a <__sflush_r+0x1a>
 800c5c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5c8:	4299      	cmp	r1, r3
 800c5ca:	d002      	beq.n	800c5d2 <__sflush_r+0x92>
 800c5cc:	4628      	mov	r0, r5
 800c5ce:	f7fd f9dd 	bl	800998c <_free_r>
 800c5d2:	2000      	movs	r0, #0
 800c5d4:	6360      	str	r0, [r4, #52]	; 0x34
 800c5d6:	e7c1      	b.n	800c55c <__sflush_r+0x1c>
 800c5d8:	6a21      	ldr	r1, [r4, #32]
 800c5da:	2301      	movs	r3, #1
 800c5dc:	4628      	mov	r0, r5
 800c5de:	47b0      	blx	r6
 800c5e0:	1c41      	adds	r1, r0, #1
 800c5e2:	d1c7      	bne.n	800c574 <__sflush_r+0x34>
 800c5e4:	682b      	ldr	r3, [r5, #0]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d0c4      	beq.n	800c574 <__sflush_r+0x34>
 800c5ea:	2b1d      	cmp	r3, #29
 800c5ec:	d001      	beq.n	800c5f2 <__sflush_r+0xb2>
 800c5ee:	2b16      	cmp	r3, #22
 800c5f0:	d101      	bne.n	800c5f6 <__sflush_r+0xb6>
 800c5f2:	602f      	str	r7, [r5, #0]
 800c5f4:	e7b1      	b.n	800c55a <__sflush_r+0x1a>
 800c5f6:	89a3      	ldrh	r3, [r4, #12]
 800c5f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5fc:	81a3      	strh	r3, [r4, #12]
 800c5fe:	e7ad      	b.n	800c55c <__sflush_r+0x1c>
 800c600:	690f      	ldr	r7, [r1, #16]
 800c602:	2f00      	cmp	r7, #0
 800c604:	d0a9      	beq.n	800c55a <__sflush_r+0x1a>
 800c606:	0793      	lsls	r3, r2, #30
 800c608:	680e      	ldr	r6, [r1, #0]
 800c60a:	bf08      	it	eq
 800c60c:	694b      	ldreq	r3, [r1, #20]
 800c60e:	600f      	str	r7, [r1, #0]
 800c610:	bf18      	it	ne
 800c612:	2300      	movne	r3, #0
 800c614:	eba6 0807 	sub.w	r8, r6, r7
 800c618:	608b      	str	r3, [r1, #8]
 800c61a:	f1b8 0f00 	cmp.w	r8, #0
 800c61e:	dd9c      	ble.n	800c55a <__sflush_r+0x1a>
 800c620:	6a21      	ldr	r1, [r4, #32]
 800c622:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c624:	4643      	mov	r3, r8
 800c626:	463a      	mov	r2, r7
 800c628:	4628      	mov	r0, r5
 800c62a:	47b0      	blx	r6
 800c62c:	2800      	cmp	r0, #0
 800c62e:	dc06      	bgt.n	800c63e <__sflush_r+0xfe>
 800c630:	89a3      	ldrh	r3, [r4, #12]
 800c632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c636:	81a3      	strh	r3, [r4, #12]
 800c638:	f04f 30ff 	mov.w	r0, #4294967295
 800c63c:	e78e      	b.n	800c55c <__sflush_r+0x1c>
 800c63e:	4407      	add	r7, r0
 800c640:	eba8 0800 	sub.w	r8, r8, r0
 800c644:	e7e9      	b.n	800c61a <__sflush_r+0xda>
 800c646:	bf00      	nop
 800c648:	20400001 	.word	0x20400001

0800c64c <_fflush_r>:
 800c64c:	b538      	push	{r3, r4, r5, lr}
 800c64e:	690b      	ldr	r3, [r1, #16]
 800c650:	4605      	mov	r5, r0
 800c652:	460c      	mov	r4, r1
 800c654:	b913      	cbnz	r3, 800c65c <_fflush_r+0x10>
 800c656:	2500      	movs	r5, #0
 800c658:	4628      	mov	r0, r5
 800c65a:	bd38      	pop	{r3, r4, r5, pc}
 800c65c:	b118      	cbz	r0, 800c666 <_fflush_r+0x1a>
 800c65e:	6983      	ldr	r3, [r0, #24]
 800c660:	b90b      	cbnz	r3, 800c666 <_fflush_r+0x1a>
 800c662:	f000 f887 	bl	800c774 <__sinit>
 800c666:	4b14      	ldr	r3, [pc, #80]	; (800c6b8 <_fflush_r+0x6c>)
 800c668:	429c      	cmp	r4, r3
 800c66a:	d11b      	bne.n	800c6a4 <_fflush_r+0x58>
 800c66c:	686c      	ldr	r4, [r5, #4]
 800c66e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d0ef      	beq.n	800c656 <_fflush_r+0xa>
 800c676:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c678:	07d0      	lsls	r0, r2, #31
 800c67a:	d404      	bmi.n	800c686 <_fflush_r+0x3a>
 800c67c:	0599      	lsls	r1, r3, #22
 800c67e:	d402      	bmi.n	800c686 <_fflush_r+0x3a>
 800c680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c682:	f000 f915 	bl	800c8b0 <__retarget_lock_acquire_recursive>
 800c686:	4628      	mov	r0, r5
 800c688:	4621      	mov	r1, r4
 800c68a:	f7ff ff59 	bl	800c540 <__sflush_r>
 800c68e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c690:	07da      	lsls	r2, r3, #31
 800c692:	4605      	mov	r5, r0
 800c694:	d4e0      	bmi.n	800c658 <_fflush_r+0xc>
 800c696:	89a3      	ldrh	r3, [r4, #12]
 800c698:	059b      	lsls	r3, r3, #22
 800c69a:	d4dd      	bmi.n	800c658 <_fflush_r+0xc>
 800c69c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c69e:	f000 f908 	bl	800c8b2 <__retarget_lock_release_recursive>
 800c6a2:	e7d9      	b.n	800c658 <_fflush_r+0xc>
 800c6a4:	4b05      	ldr	r3, [pc, #20]	; (800c6bc <_fflush_r+0x70>)
 800c6a6:	429c      	cmp	r4, r3
 800c6a8:	d101      	bne.n	800c6ae <_fflush_r+0x62>
 800c6aa:	68ac      	ldr	r4, [r5, #8]
 800c6ac:	e7df      	b.n	800c66e <_fflush_r+0x22>
 800c6ae:	4b04      	ldr	r3, [pc, #16]	; (800c6c0 <_fflush_r+0x74>)
 800c6b0:	429c      	cmp	r4, r3
 800c6b2:	bf08      	it	eq
 800c6b4:	68ec      	ldreq	r4, [r5, #12]
 800c6b6:	e7da      	b.n	800c66e <_fflush_r+0x22>
 800c6b8:	0800f410 	.word	0x0800f410
 800c6bc:	0800f430 	.word	0x0800f430
 800c6c0:	0800f3f0 	.word	0x0800f3f0

0800c6c4 <std>:
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	b510      	push	{r4, lr}
 800c6c8:	4604      	mov	r4, r0
 800c6ca:	e9c0 3300 	strd	r3, r3, [r0]
 800c6ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c6d2:	6083      	str	r3, [r0, #8]
 800c6d4:	8181      	strh	r1, [r0, #12]
 800c6d6:	6643      	str	r3, [r0, #100]	; 0x64
 800c6d8:	81c2      	strh	r2, [r0, #14]
 800c6da:	6183      	str	r3, [r0, #24]
 800c6dc:	4619      	mov	r1, r3
 800c6de:	2208      	movs	r2, #8
 800c6e0:	305c      	adds	r0, #92	; 0x5c
 800c6e2:	f7fd f94b 	bl	800997c <memset>
 800c6e6:	4b05      	ldr	r3, [pc, #20]	; (800c6fc <std+0x38>)
 800c6e8:	6263      	str	r3, [r4, #36]	; 0x24
 800c6ea:	4b05      	ldr	r3, [pc, #20]	; (800c700 <std+0x3c>)
 800c6ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800c6ee:	4b05      	ldr	r3, [pc, #20]	; (800c704 <std+0x40>)
 800c6f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c6f2:	4b05      	ldr	r3, [pc, #20]	; (800c708 <std+0x44>)
 800c6f4:	6224      	str	r4, [r4, #32]
 800c6f6:	6323      	str	r3, [r4, #48]	; 0x30
 800c6f8:	bd10      	pop	{r4, pc}
 800c6fa:	bf00      	nop
 800c6fc:	0800ca85 	.word	0x0800ca85
 800c700:	0800caa7 	.word	0x0800caa7
 800c704:	0800cadf 	.word	0x0800cadf
 800c708:	0800cb03 	.word	0x0800cb03

0800c70c <_cleanup_r>:
 800c70c:	4901      	ldr	r1, [pc, #4]	; (800c714 <_cleanup_r+0x8>)
 800c70e:	f000 b8af 	b.w	800c870 <_fwalk_reent>
 800c712:	bf00      	nop
 800c714:	0800c64d 	.word	0x0800c64d

0800c718 <__sfmoreglue>:
 800c718:	b570      	push	{r4, r5, r6, lr}
 800c71a:	1e4a      	subs	r2, r1, #1
 800c71c:	2568      	movs	r5, #104	; 0x68
 800c71e:	4355      	muls	r5, r2
 800c720:	460e      	mov	r6, r1
 800c722:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c726:	f7fd f981 	bl	8009a2c <_malloc_r>
 800c72a:	4604      	mov	r4, r0
 800c72c:	b140      	cbz	r0, 800c740 <__sfmoreglue+0x28>
 800c72e:	2100      	movs	r1, #0
 800c730:	e9c0 1600 	strd	r1, r6, [r0]
 800c734:	300c      	adds	r0, #12
 800c736:	60a0      	str	r0, [r4, #8]
 800c738:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c73c:	f7fd f91e 	bl	800997c <memset>
 800c740:	4620      	mov	r0, r4
 800c742:	bd70      	pop	{r4, r5, r6, pc}

0800c744 <__sfp_lock_acquire>:
 800c744:	4801      	ldr	r0, [pc, #4]	; (800c74c <__sfp_lock_acquire+0x8>)
 800c746:	f000 b8b3 	b.w	800c8b0 <__retarget_lock_acquire_recursive>
 800c74a:	bf00      	nop
 800c74c:	20000d3c 	.word	0x20000d3c

0800c750 <__sfp_lock_release>:
 800c750:	4801      	ldr	r0, [pc, #4]	; (800c758 <__sfp_lock_release+0x8>)
 800c752:	f000 b8ae 	b.w	800c8b2 <__retarget_lock_release_recursive>
 800c756:	bf00      	nop
 800c758:	20000d3c 	.word	0x20000d3c

0800c75c <__sinit_lock_acquire>:
 800c75c:	4801      	ldr	r0, [pc, #4]	; (800c764 <__sinit_lock_acquire+0x8>)
 800c75e:	f000 b8a7 	b.w	800c8b0 <__retarget_lock_acquire_recursive>
 800c762:	bf00      	nop
 800c764:	20000d37 	.word	0x20000d37

0800c768 <__sinit_lock_release>:
 800c768:	4801      	ldr	r0, [pc, #4]	; (800c770 <__sinit_lock_release+0x8>)
 800c76a:	f000 b8a2 	b.w	800c8b2 <__retarget_lock_release_recursive>
 800c76e:	bf00      	nop
 800c770:	20000d37 	.word	0x20000d37

0800c774 <__sinit>:
 800c774:	b510      	push	{r4, lr}
 800c776:	4604      	mov	r4, r0
 800c778:	f7ff fff0 	bl	800c75c <__sinit_lock_acquire>
 800c77c:	69a3      	ldr	r3, [r4, #24]
 800c77e:	b11b      	cbz	r3, 800c788 <__sinit+0x14>
 800c780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c784:	f7ff bff0 	b.w	800c768 <__sinit_lock_release>
 800c788:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c78c:	6523      	str	r3, [r4, #80]	; 0x50
 800c78e:	4b13      	ldr	r3, [pc, #76]	; (800c7dc <__sinit+0x68>)
 800c790:	4a13      	ldr	r2, [pc, #76]	; (800c7e0 <__sinit+0x6c>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	62a2      	str	r2, [r4, #40]	; 0x28
 800c796:	42a3      	cmp	r3, r4
 800c798:	bf04      	itt	eq
 800c79a:	2301      	moveq	r3, #1
 800c79c:	61a3      	streq	r3, [r4, #24]
 800c79e:	4620      	mov	r0, r4
 800c7a0:	f000 f820 	bl	800c7e4 <__sfp>
 800c7a4:	6060      	str	r0, [r4, #4]
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	f000 f81c 	bl	800c7e4 <__sfp>
 800c7ac:	60a0      	str	r0, [r4, #8]
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	f000 f818 	bl	800c7e4 <__sfp>
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	60e0      	str	r0, [r4, #12]
 800c7b8:	2104      	movs	r1, #4
 800c7ba:	6860      	ldr	r0, [r4, #4]
 800c7bc:	f7ff ff82 	bl	800c6c4 <std>
 800c7c0:	68a0      	ldr	r0, [r4, #8]
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	2109      	movs	r1, #9
 800c7c6:	f7ff ff7d 	bl	800c6c4 <std>
 800c7ca:	68e0      	ldr	r0, [r4, #12]
 800c7cc:	2202      	movs	r2, #2
 800c7ce:	2112      	movs	r1, #18
 800c7d0:	f7ff ff78 	bl	800c6c4 <std>
 800c7d4:	2301      	movs	r3, #1
 800c7d6:	61a3      	str	r3, [r4, #24]
 800c7d8:	e7d2      	b.n	800c780 <__sinit+0xc>
 800c7da:	bf00      	nop
 800c7dc:	0800efb4 	.word	0x0800efb4
 800c7e0:	0800c70d 	.word	0x0800c70d

0800c7e4 <__sfp>:
 800c7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7e6:	4607      	mov	r7, r0
 800c7e8:	f7ff ffac 	bl	800c744 <__sfp_lock_acquire>
 800c7ec:	4b1e      	ldr	r3, [pc, #120]	; (800c868 <__sfp+0x84>)
 800c7ee:	681e      	ldr	r6, [r3, #0]
 800c7f0:	69b3      	ldr	r3, [r6, #24]
 800c7f2:	b913      	cbnz	r3, 800c7fa <__sfp+0x16>
 800c7f4:	4630      	mov	r0, r6
 800c7f6:	f7ff ffbd 	bl	800c774 <__sinit>
 800c7fa:	3648      	adds	r6, #72	; 0x48
 800c7fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c800:	3b01      	subs	r3, #1
 800c802:	d503      	bpl.n	800c80c <__sfp+0x28>
 800c804:	6833      	ldr	r3, [r6, #0]
 800c806:	b30b      	cbz	r3, 800c84c <__sfp+0x68>
 800c808:	6836      	ldr	r6, [r6, #0]
 800c80a:	e7f7      	b.n	800c7fc <__sfp+0x18>
 800c80c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c810:	b9d5      	cbnz	r5, 800c848 <__sfp+0x64>
 800c812:	4b16      	ldr	r3, [pc, #88]	; (800c86c <__sfp+0x88>)
 800c814:	60e3      	str	r3, [r4, #12]
 800c816:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c81a:	6665      	str	r5, [r4, #100]	; 0x64
 800c81c:	f000 f847 	bl	800c8ae <__retarget_lock_init_recursive>
 800c820:	f7ff ff96 	bl	800c750 <__sfp_lock_release>
 800c824:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c828:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c82c:	6025      	str	r5, [r4, #0]
 800c82e:	61a5      	str	r5, [r4, #24]
 800c830:	2208      	movs	r2, #8
 800c832:	4629      	mov	r1, r5
 800c834:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c838:	f7fd f8a0 	bl	800997c <memset>
 800c83c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c840:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c844:	4620      	mov	r0, r4
 800c846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c848:	3468      	adds	r4, #104	; 0x68
 800c84a:	e7d9      	b.n	800c800 <__sfp+0x1c>
 800c84c:	2104      	movs	r1, #4
 800c84e:	4638      	mov	r0, r7
 800c850:	f7ff ff62 	bl	800c718 <__sfmoreglue>
 800c854:	4604      	mov	r4, r0
 800c856:	6030      	str	r0, [r6, #0]
 800c858:	2800      	cmp	r0, #0
 800c85a:	d1d5      	bne.n	800c808 <__sfp+0x24>
 800c85c:	f7ff ff78 	bl	800c750 <__sfp_lock_release>
 800c860:	230c      	movs	r3, #12
 800c862:	603b      	str	r3, [r7, #0]
 800c864:	e7ee      	b.n	800c844 <__sfp+0x60>
 800c866:	bf00      	nop
 800c868:	0800efb4 	.word	0x0800efb4
 800c86c:	ffff0001 	.word	0xffff0001

0800c870 <_fwalk_reent>:
 800c870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c874:	4606      	mov	r6, r0
 800c876:	4688      	mov	r8, r1
 800c878:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c87c:	2700      	movs	r7, #0
 800c87e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c882:	f1b9 0901 	subs.w	r9, r9, #1
 800c886:	d505      	bpl.n	800c894 <_fwalk_reent+0x24>
 800c888:	6824      	ldr	r4, [r4, #0]
 800c88a:	2c00      	cmp	r4, #0
 800c88c:	d1f7      	bne.n	800c87e <_fwalk_reent+0xe>
 800c88e:	4638      	mov	r0, r7
 800c890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c894:	89ab      	ldrh	r3, [r5, #12]
 800c896:	2b01      	cmp	r3, #1
 800c898:	d907      	bls.n	800c8aa <_fwalk_reent+0x3a>
 800c89a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c89e:	3301      	adds	r3, #1
 800c8a0:	d003      	beq.n	800c8aa <_fwalk_reent+0x3a>
 800c8a2:	4629      	mov	r1, r5
 800c8a4:	4630      	mov	r0, r6
 800c8a6:	47c0      	blx	r8
 800c8a8:	4307      	orrs	r7, r0
 800c8aa:	3568      	adds	r5, #104	; 0x68
 800c8ac:	e7e9      	b.n	800c882 <_fwalk_reent+0x12>

0800c8ae <__retarget_lock_init_recursive>:
 800c8ae:	4770      	bx	lr

0800c8b0 <__retarget_lock_acquire_recursive>:
 800c8b0:	4770      	bx	lr

0800c8b2 <__retarget_lock_release_recursive>:
 800c8b2:	4770      	bx	lr

0800c8b4 <__swhatbuf_r>:
 800c8b4:	b570      	push	{r4, r5, r6, lr}
 800c8b6:	460e      	mov	r6, r1
 800c8b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8bc:	2900      	cmp	r1, #0
 800c8be:	b096      	sub	sp, #88	; 0x58
 800c8c0:	4614      	mov	r4, r2
 800c8c2:	461d      	mov	r5, r3
 800c8c4:	da07      	bge.n	800c8d6 <__swhatbuf_r+0x22>
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	602b      	str	r3, [r5, #0]
 800c8ca:	89b3      	ldrh	r3, [r6, #12]
 800c8cc:	061a      	lsls	r2, r3, #24
 800c8ce:	d410      	bmi.n	800c8f2 <__swhatbuf_r+0x3e>
 800c8d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8d4:	e00e      	b.n	800c8f4 <__swhatbuf_r+0x40>
 800c8d6:	466a      	mov	r2, sp
 800c8d8:	f000 f93a 	bl	800cb50 <_fstat_r>
 800c8dc:	2800      	cmp	r0, #0
 800c8de:	dbf2      	blt.n	800c8c6 <__swhatbuf_r+0x12>
 800c8e0:	9a01      	ldr	r2, [sp, #4]
 800c8e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c8e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c8ea:	425a      	negs	r2, r3
 800c8ec:	415a      	adcs	r2, r3
 800c8ee:	602a      	str	r2, [r5, #0]
 800c8f0:	e7ee      	b.n	800c8d0 <__swhatbuf_r+0x1c>
 800c8f2:	2340      	movs	r3, #64	; 0x40
 800c8f4:	2000      	movs	r0, #0
 800c8f6:	6023      	str	r3, [r4, #0]
 800c8f8:	b016      	add	sp, #88	; 0x58
 800c8fa:	bd70      	pop	{r4, r5, r6, pc}

0800c8fc <__smakebuf_r>:
 800c8fc:	898b      	ldrh	r3, [r1, #12]
 800c8fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c900:	079d      	lsls	r5, r3, #30
 800c902:	4606      	mov	r6, r0
 800c904:	460c      	mov	r4, r1
 800c906:	d507      	bpl.n	800c918 <__smakebuf_r+0x1c>
 800c908:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c90c:	6023      	str	r3, [r4, #0]
 800c90e:	6123      	str	r3, [r4, #16]
 800c910:	2301      	movs	r3, #1
 800c912:	6163      	str	r3, [r4, #20]
 800c914:	b002      	add	sp, #8
 800c916:	bd70      	pop	{r4, r5, r6, pc}
 800c918:	ab01      	add	r3, sp, #4
 800c91a:	466a      	mov	r2, sp
 800c91c:	f7ff ffca 	bl	800c8b4 <__swhatbuf_r>
 800c920:	9900      	ldr	r1, [sp, #0]
 800c922:	4605      	mov	r5, r0
 800c924:	4630      	mov	r0, r6
 800c926:	f7fd f881 	bl	8009a2c <_malloc_r>
 800c92a:	b948      	cbnz	r0, 800c940 <__smakebuf_r+0x44>
 800c92c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c930:	059a      	lsls	r2, r3, #22
 800c932:	d4ef      	bmi.n	800c914 <__smakebuf_r+0x18>
 800c934:	f023 0303 	bic.w	r3, r3, #3
 800c938:	f043 0302 	orr.w	r3, r3, #2
 800c93c:	81a3      	strh	r3, [r4, #12]
 800c93e:	e7e3      	b.n	800c908 <__smakebuf_r+0xc>
 800c940:	4b0d      	ldr	r3, [pc, #52]	; (800c978 <__smakebuf_r+0x7c>)
 800c942:	62b3      	str	r3, [r6, #40]	; 0x28
 800c944:	89a3      	ldrh	r3, [r4, #12]
 800c946:	6020      	str	r0, [r4, #0]
 800c948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c94c:	81a3      	strh	r3, [r4, #12]
 800c94e:	9b00      	ldr	r3, [sp, #0]
 800c950:	6163      	str	r3, [r4, #20]
 800c952:	9b01      	ldr	r3, [sp, #4]
 800c954:	6120      	str	r0, [r4, #16]
 800c956:	b15b      	cbz	r3, 800c970 <__smakebuf_r+0x74>
 800c958:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c95c:	4630      	mov	r0, r6
 800c95e:	f000 f909 	bl	800cb74 <_isatty_r>
 800c962:	b128      	cbz	r0, 800c970 <__smakebuf_r+0x74>
 800c964:	89a3      	ldrh	r3, [r4, #12]
 800c966:	f023 0303 	bic.w	r3, r3, #3
 800c96a:	f043 0301 	orr.w	r3, r3, #1
 800c96e:	81a3      	strh	r3, [r4, #12]
 800c970:	89a0      	ldrh	r0, [r4, #12]
 800c972:	4305      	orrs	r5, r0
 800c974:	81a5      	strh	r5, [r4, #12]
 800c976:	e7cd      	b.n	800c914 <__smakebuf_r+0x18>
 800c978:	0800c70d 	.word	0x0800c70d

0800c97c <memmove>:
 800c97c:	4288      	cmp	r0, r1
 800c97e:	b510      	push	{r4, lr}
 800c980:	eb01 0402 	add.w	r4, r1, r2
 800c984:	d902      	bls.n	800c98c <memmove+0x10>
 800c986:	4284      	cmp	r4, r0
 800c988:	4623      	mov	r3, r4
 800c98a:	d807      	bhi.n	800c99c <memmove+0x20>
 800c98c:	1e43      	subs	r3, r0, #1
 800c98e:	42a1      	cmp	r1, r4
 800c990:	d008      	beq.n	800c9a4 <memmove+0x28>
 800c992:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c996:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c99a:	e7f8      	b.n	800c98e <memmove+0x12>
 800c99c:	4402      	add	r2, r0
 800c99e:	4601      	mov	r1, r0
 800c9a0:	428a      	cmp	r2, r1
 800c9a2:	d100      	bne.n	800c9a6 <memmove+0x2a>
 800c9a4:	bd10      	pop	{r4, pc}
 800c9a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c9aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c9ae:	e7f7      	b.n	800c9a0 <memmove+0x24>

0800c9b0 <_realloc_r>:
 800c9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9b2:	4607      	mov	r7, r0
 800c9b4:	4614      	mov	r4, r2
 800c9b6:	460e      	mov	r6, r1
 800c9b8:	b921      	cbnz	r1, 800c9c4 <_realloc_r+0x14>
 800c9ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c9be:	4611      	mov	r1, r2
 800c9c0:	f7fd b834 	b.w	8009a2c <_malloc_r>
 800c9c4:	b922      	cbnz	r2, 800c9d0 <_realloc_r+0x20>
 800c9c6:	f7fc ffe1 	bl	800998c <_free_r>
 800c9ca:	4625      	mov	r5, r4
 800c9cc:	4628      	mov	r0, r5
 800c9ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9d0:	f000 f8f2 	bl	800cbb8 <_malloc_usable_size_r>
 800c9d4:	42a0      	cmp	r0, r4
 800c9d6:	d20f      	bcs.n	800c9f8 <_realloc_r+0x48>
 800c9d8:	4621      	mov	r1, r4
 800c9da:	4638      	mov	r0, r7
 800c9dc:	f7fd f826 	bl	8009a2c <_malloc_r>
 800c9e0:	4605      	mov	r5, r0
 800c9e2:	2800      	cmp	r0, #0
 800c9e4:	d0f2      	beq.n	800c9cc <_realloc_r+0x1c>
 800c9e6:	4631      	mov	r1, r6
 800c9e8:	4622      	mov	r2, r4
 800c9ea:	f7fe fb8b 	bl	800b104 <memcpy>
 800c9ee:	4631      	mov	r1, r6
 800c9f0:	4638      	mov	r0, r7
 800c9f2:	f7fc ffcb 	bl	800998c <_free_r>
 800c9f6:	e7e9      	b.n	800c9cc <_realloc_r+0x1c>
 800c9f8:	4635      	mov	r5, r6
 800c9fa:	e7e7      	b.n	800c9cc <_realloc_r+0x1c>

0800c9fc <_raise_r>:
 800c9fc:	291f      	cmp	r1, #31
 800c9fe:	b538      	push	{r3, r4, r5, lr}
 800ca00:	4604      	mov	r4, r0
 800ca02:	460d      	mov	r5, r1
 800ca04:	d904      	bls.n	800ca10 <_raise_r+0x14>
 800ca06:	2316      	movs	r3, #22
 800ca08:	6003      	str	r3, [r0, #0]
 800ca0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ca0e:	bd38      	pop	{r3, r4, r5, pc}
 800ca10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ca12:	b112      	cbz	r2, 800ca1a <_raise_r+0x1e>
 800ca14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca18:	b94b      	cbnz	r3, 800ca2e <_raise_r+0x32>
 800ca1a:	4620      	mov	r0, r4
 800ca1c:	f000 f830 	bl	800ca80 <_getpid_r>
 800ca20:	462a      	mov	r2, r5
 800ca22:	4601      	mov	r1, r0
 800ca24:	4620      	mov	r0, r4
 800ca26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca2a:	f000 b817 	b.w	800ca5c <_kill_r>
 800ca2e:	2b01      	cmp	r3, #1
 800ca30:	d00a      	beq.n	800ca48 <_raise_r+0x4c>
 800ca32:	1c59      	adds	r1, r3, #1
 800ca34:	d103      	bne.n	800ca3e <_raise_r+0x42>
 800ca36:	2316      	movs	r3, #22
 800ca38:	6003      	str	r3, [r0, #0]
 800ca3a:	2001      	movs	r0, #1
 800ca3c:	e7e7      	b.n	800ca0e <_raise_r+0x12>
 800ca3e:	2400      	movs	r4, #0
 800ca40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ca44:	4628      	mov	r0, r5
 800ca46:	4798      	blx	r3
 800ca48:	2000      	movs	r0, #0
 800ca4a:	e7e0      	b.n	800ca0e <_raise_r+0x12>

0800ca4c <raise>:
 800ca4c:	4b02      	ldr	r3, [pc, #8]	; (800ca58 <raise+0xc>)
 800ca4e:	4601      	mov	r1, r0
 800ca50:	6818      	ldr	r0, [r3, #0]
 800ca52:	f7ff bfd3 	b.w	800c9fc <_raise_r>
 800ca56:	bf00      	nop
 800ca58:	2000034c 	.word	0x2000034c

0800ca5c <_kill_r>:
 800ca5c:	b538      	push	{r3, r4, r5, lr}
 800ca5e:	4d07      	ldr	r5, [pc, #28]	; (800ca7c <_kill_r+0x20>)
 800ca60:	2300      	movs	r3, #0
 800ca62:	4604      	mov	r4, r0
 800ca64:	4608      	mov	r0, r1
 800ca66:	4611      	mov	r1, r2
 800ca68:	602b      	str	r3, [r5, #0]
 800ca6a:	f7f5 ff47 	bl	80028fc <_kill>
 800ca6e:	1c43      	adds	r3, r0, #1
 800ca70:	d102      	bne.n	800ca78 <_kill_r+0x1c>
 800ca72:	682b      	ldr	r3, [r5, #0]
 800ca74:	b103      	cbz	r3, 800ca78 <_kill_r+0x1c>
 800ca76:	6023      	str	r3, [r4, #0]
 800ca78:	bd38      	pop	{r3, r4, r5, pc}
 800ca7a:	bf00      	nop
 800ca7c:	20000d30 	.word	0x20000d30

0800ca80 <_getpid_r>:
 800ca80:	f7f5 bf34 	b.w	80028ec <_getpid>

0800ca84 <__sread>:
 800ca84:	b510      	push	{r4, lr}
 800ca86:	460c      	mov	r4, r1
 800ca88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca8c:	f000 f89c 	bl	800cbc8 <_read_r>
 800ca90:	2800      	cmp	r0, #0
 800ca92:	bfab      	itete	ge
 800ca94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ca96:	89a3      	ldrhlt	r3, [r4, #12]
 800ca98:	181b      	addge	r3, r3, r0
 800ca9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ca9e:	bfac      	ite	ge
 800caa0:	6563      	strge	r3, [r4, #84]	; 0x54
 800caa2:	81a3      	strhlt	r3, [r4, #12]
 800caa4:	bd10      	pop	{r4, pc}

0800caa6 <__swrite>:
 800caa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caaa:	461f      	mov	r7, r3
 800caac:	898b      	ldrh	r3, [r1, #12]
 800caae:	05db      	lsls	r3, r3, #23
 800cab0:	4605      	mov	r5, r0
 800cab2:	460c      	mov	r4, r1
 800cab4:	4616      	mov	r6, r2
 800cab6:	d505      	bpl.n	800cac4 <__swrite+0x1e>
 800cab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cabc:	2302      	movs	r3, #2
 800cabe:	2200      	movs	r2, #0
 800cac0:	f000 f868 	bl	800cb94 <_lseek_r>
 800cac4:	89a3      	ldrh	r3, [r4, #12]
 800cac6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800caca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cace:	81a3      	strh	r3, [r4, #12]
 800cad0:	4632      	mov	r2, r6
 800cad2:	463b      	mov	r3, r7
 800cad4:	4628      	mov	r0, r5
 800cad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cada:	f000 b817 	b.w	800cb0c <_write_r>

0800cade <__sseek>:
 800cade:	b510      	push	{r4, lr}
 800cae0:	460c      	mov	r4, r1
 800cae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cae6:	f000 f855 	bl	800cb94 <_lseek_r>
 800caea:	1c43      	adds	r3, r0, #1
 800caec:	89a3      	ldrh	r3, [r4, #12]
 800caee:	bf15      	itete	ne
 800caf0:	6560      	strne	r0, [r4, #84]	; 0x54
 800caf2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800caf6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cafa:	81a3      	strheq	r3, [r4, #12]
 800cafc:	bf18      	it	ne
 800cafe:	81a3      	strhne	r3, [r4, #12]
 800cb00:	bd10      	pop	{r4, pc}

0800cb02 <__sclose>:
 800cb02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb06:	f000 b813 	b.w	800cb30 <_close_r>
	...

0800cb0c <_write_r>:
 800cb0c:	b538      	push	{r3, r4, r5, lr}
 800cb0e:	4d07      	ldr	r5, [pc, #28]	; (800cb2c <_write_r+0x20>)
 800cb10:	4604      	mov	r4, r0
 800cb12:	4608      	mov	r0, r1
 800cb14:	4611      	mov	r1, r2
 800cb16:	2200      	movs	r2, #0
 800cb18:	602a      	str	r2, [r5, #0]
 800cb1a:	461a      	mov	r2, r3
 800cb1c:	f7f5 ff25 	bl	800296a <_write>
 800cb20:	1c43      	adds	r3, r0, #1
 800cb22:	d102      	bne.n	800cb2a <_write_r+0x1e>
 800cb24:	682b      	ldr	r3, [r5, #0]
 800cb26:	b103      	cbz	r3, 800cb2a <_write_r+0x1e>
 800cb28:	6023      	str	r3, [r4, #0]
 800cb2a:	bd38      	pop	{r3, r4, r5, pc}
 800cb2c:	20000d30 	.word	0x20000d30

0800cb30 <_close_r>:
 800cb30:	b538      	push	{r3, r4, r5, lr}
 800cb32:	4d06      	ldr	r5, [pc, #24]	; (800cb4c <_close_r+0x1c>)
 800cb34:	2300      	movs	r3, #0
 800cb36:	4604      	mov	r4, r0
 800cb38:	4608      	mov	r0, r1
 800cb3a:	602b      	str	r3, [r5, #0]
 800cb3c:	f7f5 ff31 	bl	80029a2 <_close>
 800cb40:	1c43      	adds	r3, r0, #1
 800cb42:	d102      	bne.n	800cb4a <_close_r+0x1a>
 800cb44:	682b      	ldr	r3, [r5, #0]
 800cb46:	b103      	cbz	r3, 800cb4a <_close_r+0x1a>
 800cb48:	6023      	str	r3, [r4, #0]
 800cb4a:	bd38      	pop	{r3, r4, r5, pc}
 800cb4c:	20000d30 	.word	0x20000d30

0800cb50 <_fstat_r>:
 800cb50:	b538      	push	{r3, r4, r5, lr}
 800cb52:	4d07      	ldr	r5, [pc, #28]	; (800cb70 <_fstat_r+0x20>)
 800cb54:	2300      	movs	r3, #0
 800cb56:	4604      	mov	r4, r0
 800cb58:	4608      	mov	r0, r1
 800cb5a:	4611      	mov	r1, r2
 800cb5c:	602b      	str	r3, [r5, #0]
 800cb5e:	f7f5 ff2c 	bl	80029ba <_fstat>
 800cb62:	1c43      	adds	r3, r0, #1
 800cb64:	d102      	bne.n	800cb6c <_fstat_r+0x1c>
 800cb66:	682b      	ldr	r3, [r5, #0]
 800cb68:	b103      	cbz	r3, 800cb6c <_fstat_r+0x1c>
 800cb6a:	6023      	str	r3, [r4, #0]
 800cb6c:	bd38      	pop	{r3, r4, r5, pc}
 800cb6e:	bf00      	nop
 800cb70:	20000d30 	.word	0x20000d30

0800cb74 <_isatty_r>:
 800cb74:	b538      	push	{r3, r4, r5, lr}
 800cb76:	4d06      	ldr	r5, [pc, #24]	; (800cb90 <_isatty_r+0x1c>)
 800cb78:	2300      	movs	r3, #0
 800cb7a:	4604      	mov	r4, r0
 800cb7c:	4608      	mov	r0, r1
 800cb7e:	602b      	str	r3, [r5, #0]
 800cb80:	f7f5 ff2b 	bl	80029da <_isatty>
 800cb84:	1c43      	adds	r3, r0, #1
 800cb86:	d102      	bne.n	800cb8e <_isatty_r+0x1a>
 800cb88:	682b      	ldr	r3, [r5, #0]
 800cb8a:	b103      	cbz	r3, 800cb8e <_isatty_r+0x1a>
 800cb8c:	6023      	str	r3, [r4, #0]
 800cb8e:	bd38      	pop	{r3, r4, r5, pc}
 800cb90:	20000d30 	.word	0x20000d30

0800cb94 <_lseek_r>:
 800cb94:	b538      	push	{r3, r4, r5, lr}
 800cb96:	4d07      	ldr	r5, [pc, #28]	; (800cbb4 <_lseek_r+0x20>)
 800cb98:	4604      	mov	r4, r0
 800cb9a:	4608      	mov	r0, r1
 800cb9c:	4611      	mov	r1, r2
 800cb9e:	2200      	movs	r2, #0
 800cba0:	602a      	str	r2, [r5, #0]
 800cba2:	461a      	mov	r2, r3
 800cba4:	f7f5 ff24 	bl	80029f0 <_lseek>
 800cba8:	1c43      	adds	r3, r0, #1
 800cbaa:	d102      	bne.n	800cbb2 <_lseek_r+0x1e>
 800cbac:	682b      	ldr	r3, [r5, #0]
 800cbae:	b103      	cbz	r3, 800cbb2 <_lseek_r+0x1e>
 800cbb0:	6023      	str	r3, [r4, #0]
 800cbb2:	bd38      	pop	{r3, r4, r5, pc}
 800cbb4:	20000d30 	.word	0x20000d30

0800cbb8 <_malloc_usable_size_r>:
 800cbb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbbc:	1f18      	subs	r0, r3, #4
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	bfbc      	itt	lt
 800cbc2:	580b      	ldrlt	r3, [r1, r0]
 800cbc4:	18c0      	addlt	r0, r0, r3
 800cbc6:	4770      	bx	lr

0800cbc8 <_read_r>:
 800cbc8:	b538      	push	{r3, r4, r5, lr}
 800cbca:	4d07      	ldr	r5, [pc, #28]	; (800cbe8 <_read_r+0x20>)
 800cbcc:	4604      	mov	r4, r0
 800cbce:	4608      	mov	r0, r1
 800cbd0:	4611      	mov	r1, r2
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	602a      	str	r2, [r5, #0]
 800cbd6:	461a      	mov	r2, r3
 800cbd8:	f7f5 feaa 	bl	8002930 <_read>
 800cbdc:	1c43      	adds	r3, r0, #1
 800cbde:	d102      	bne.n	800cbe6 <_read_r+0x1e>
 800cbe0:	682b      	ldr	r3, [r5, #0]
 800cbe2:	b103      	cbz	r3, 800cbe6 <_read_r+0x1e>
 800cbe4:	6023      	str	r3, [r4, #0]
 800cbe6:	bd38      	pop	{r3, r4, r5, pc}
 800cbe8:	20000d30 	.word	0x20000d30
 800cbec:	00000000 	.word	0x00000000

0800cbf0 <atan>:
 800cbf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbf4:	ec55 4b10 	vmov	r4, r5, d0
 800cbf8:	4bc3      	ldr	r3, [pc, #780]	; (800cf08 <atan+0x318>)
 800cbfa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cbfe:	429e      	cmp	r6, r3
 800cc00:	46ab      	mov	fp, r5
 800cc02:	dd18      	ble.n	800cc36 <atan+0x46>
 800cc04:	4bc1      	ldr	r3, [pc, #772]	; (800cf0c <atan+0x31c>)
 800cc06:	429e      	cmp	r6, r3
 800cc08:	dc01      	bgt.n	800cc0e <atan+0x1e>
 800cc0a:	d109      	bne.n	800cc20 <atan+0x30>
 800cc0c:	b144      	cbz	r4, 800cc20 <atan+0x30>
 800cc0e:	4622      	mov	r2, r4
 800cc10:	462b      	mov	r3, r5
 800cc12:	4620      	mov	r0, r4
 800cc14:	4629      	mov	r1, r5
 800cc16:	f7f3 fb39 	bl	800028c <__adddf3>
 800cc1a:	4604      	mov	r4, r0
 800cc1c:	460d      	mov	r5, r1
 800cc1e:	e006      	b.n	800cc2e <atan+0x3e>
 800cc20:	f1bb 0f00 	cmp.w	fp, #0
 800cc24:	f300 8131 	bgt.w	800ce8a <atan+0x29a>
 800cc28:	a59b      	add	r5, pc, #620	; (adr r5, 800ce98 <atan+0x2a8>)
 800cc2a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cc2e:	ec45 4b10 	vmov	d0, r4, r5
 800cc32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc36:	4bb6      	ldr	r3, [pc, #728]	; (800cf10 <atan+0x320>)
 800cc38:	429e      	cmp	r6, r3
 800cc3a:	dc14      	bgt.n	800cc66 <atan+0x76>
 800cc3c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800cc40:	429e      	cmp	r6, r3
 800cc42:	dc0d      	bgt.n	800cc60 <atan+0x70>
 800cc44:	a396      	add	r3, pc, #600	; (adr r3, 800cea0 <atan+0x2b0>)
 800cc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc4a:	ee10 0a10 	vmov	r0, s0
 800cc4e:	4629      	mov	r1, r5
 800cc50:	f7f3 fb1c 	bl	800028c <__adddf3>
 800cc54:	4baf      	ldr	r3, [pc, #700]	; (800cf14 <atan+0x324>)
 800cc56:	2200      	movs	r2, #0
 800cc58:	f7f3 ff5e 	bl	8000b18 <__aeabi_dcmpgt>
 800cc5c:	2800      	cmp	r0, #0
 800cc5e:	d1e6      	bne.n	800cc2e <atan+0x3e>
 800cc60:	f04f 3aff 	mov.w	sl, #4294967295
 800cc64:	e02b      	b.n	800ccbe <atan+0xce>
 800cc66:	f000 f9b3 	bl	800cfd0 <fabs>
 800cc6a:	4bab      	ldr	r3, [pc, #684]	; (800cf18 <atan+0x328>)
 800cc6c:	429e      	cmp	r6, r3
 800cc6e:	ec55 4b10 	vmov	r4, r5, d0
 800cc72:	f300 80bf 	bgt.w	800cdf4 <atan+0x204>
 800cc76:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800cc7a:	429e      	cmp	r6, r3
 800cc7c:	f300 80a0 	bgt.w	800cdc0 <atan+0x1d0>
 800cc80:	ee10 2a10 	vmov	r2, s0
 800cc84:	ee10 0a10 	vmov	r0, s0
 800cc88:	462b      	mov	r3, r5
 800cc8a:	4629      	mov	r1, r5
 800cc8c:	f7f3 fafe 	bl	800028c <__adddf3>
 800cc90:	4ba0      	ldr	r3, [pc, #640]	; (800cf14 <atan+0x324>)
 800cc92:	2200      	movs	r2, #0
 800cc94:	f7f3 faf8 	bl	8000288 <__aeabi_dsub>
 800cc98:	2200      	movs	r2, #0
 800cc9a:	4606      	mov	r6, r0
 800cc9c:	460f      	mov	r7, r1
 800cc9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cca2:	4620      	mov	r0, r4
 800cca4:	4629      	mov	r1, r5
 800cca6:	f7f3 faf1 	bl	800028c <__adddf3>
 800ccaa:	4602      	mov	r2, r0
 800ccac:	460b      	mov	r3, r1
 800ccae:	4630      	mov	r0, r6
 800ccb0:	4639      	mov	r1, r7
 800ccb2:	f7f3 fdcb 	bl	800084c <__aeabi_ddiv>
 800ccb6:	f04f 0a00 	mov.w	sl, #0
 800ccba:	4604      	mov	r4, r0
 800ccbc:	460d      	mov	r5, r1
 800ccbe:	4622      	mov	r2, r4
 800ccc0:	462b      	mov	r3, r5
 800ccc2:	4620      	mov	r0, r4
 800ccc4:	4629      	mov	r1, r5
 800ccc6:	f7f3 fc97 	bl	80005f8 <__aeabi_dmul>
 800ccca:	4602      	mov	r2, r0
 800cccc:	460b      	mov	r3, r1
 800ccce:	4680      	mov	r8, r0
 800ccd0:	4689      	mov	r9, r1
 800ccd2:	f7f3 fc91 	bl	80005f8 <__aeabi_dmul>
 800ccd6:	a374      	add	r3, pc, #464	; (adr r3, 800cea8 <atan+0x2b8>)
 800ccd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccdc:	4606      	mov	r6, r0
 800ccde:	460f      	mov	r7, r1
 800cce0:	f7f3 fc8a 	bl	80005f8 <__aeabi_dmul>
 800cce4:	a372      	add	r3, pc, #456	; (adr r3, 800ceb0 <atan+0x2c0>)
 800cce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccea:	f7f3 facf 	bl	800028c <__adddf3>
 800ccee:	4632      	mov	r2, r6
 800ccf0:	463b      	mov	r3, r7
 800ccf2:	f7f3 fc81 	bl	80005f8 <__aeabi_dmul>
 800ccf6:	a370      	add	r3, pc, #448	; (adr r3, 800ceb8 <atan+0x2c8>)
 800ccf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccfc:	f7f3 fac6 	bl	800028c <__adddf3>
 800cd00:	4632      	mov	r2, r6
 800cd02:	463b      	mov	r3, r7
 800cd04:	f7f3 fc78 	bl	80005f8 <__aeabi_dmul>
 800cd08:	a36d      	add	r3, pc, #436	; (adr r3, 800cec0 <atan+0x2d0>)
 800cd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd0e:	f7f3 fabd 	bl	800028c <__adddf3>
 800cd12:	4632      	mov	r2, r6
 800cd14:	463b      	mov	r3, r7
 800cd16:	f7f3 fc6f 	bl	80005f8 <__aeabi_dmul>
 800cd1a:	a36b      	add	r3, pc, #428	; (adr r3, 800cec8 <atan+0x2d8>)
 800cd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd20:	f7f3 fab4 	bl	800028c <__adddf3>
 800cd24:	4632      	mov	r2, r6
 800cd26:	463b      	mov	r3, r7
 800cd28:	f7f3 fc66 	bl	80005f8 <__aeabi_dmul>
 800cd2c:	a368      	add	r3, pc, #416	; (adr r3, 800ced0 <atan+0x2e0>)
 800cd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd32:	f7f3 faab 	bl	800028c <__adddf3>
 800cd36:	4642      	mov	r2, r8
 800cd38:	464b      	mov	r3, r9
 800cd3a:	f7f3 fc5d 	bl	80005f8 <__aeabi_dmul>
 800cd3e:	a366      	add	r3, pc, #408	; (adr r3, 800ced8 <atan+0x2e8>)
 800cd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd44:	4680      	mov	r8, r0
 800cd46:	4689      	mov	r9, r1
 800cd48:	4630      	mov	r0, r6
 800cd4a:	4639      	mov	r1, r7
 800cd4c:	f7f3 fc54 	bl	80005f8 <__aeabi_dmul>
 800cd50:	a363      	add	r3, pc, #396	; (adr r3, 800cee0 <atan+0x2f0>)
 800cd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd56:	f7f3 fa97 	bl	8000288 <__aeabi_dsub>
 800cd5a:	4632      	mov	r2, r6
 800cd5c:	463b      	mov	r3, r7
 800cd5e:	f7f3 fc4b 	bl	80005f8 <__aeabi_dmul>
 800cd62:	a361      	add	r3, pc, #388	; (adr r3, 800cee8 <atan+0x2f8>)
 800cd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd68:	f7f3 fa8e 	bl	8000288 <__aeabi_dsub>
 800cd6c:	4632      	mov	r2, r6
 800cd6e:	463b      	mov	r3, r7
 800cd70:	f7f3 fc42 	bl	80005f8 <__aeabi_dmul>
 800cd74:	a35e      	add	r3, pc, #376	; (adr r3, 800cef0 <atan+0x300>)
 800cd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7a:	f7f3 fa85 	bl	8000288 <__aeabi_dsub>
 800cd7e:	4632      	mov	r2, r6
 800cd80:	463b      	mov	r3, r7
 800cd82:	f7f3 fc39 	bl	80005f8 <__aeabi_dmul>
 800cd86:	a35c      	add	r3, pc, #368	; (adr r3, 800cef8 <atan+0x308>)
 800cd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd8c:	f7f3 fa7c 	bl	8000288 <__aeabi_dsub>
 800cd90:	4632      	mov	r2, r6
 800cd92:	463b      	mov	r3, r7
 800cd94:	f7f3 fc30 	bl	80005f8 <__aeabi_dmul>
 800cd98:	4602      	mov	r2, r0
 800cd9a:	460b      	mov	r3, r1
 800cd9c:	4640      	mov	r0, r8
 800cd9e:	4649      	mov	r1, r9
 800cda0:	f7f3 fa74 	bl	800028c <__adddf3>
 800cda4:	4622      	mov	r2, r4
 800cda6:	462b      	mov	r3, r5
 800cda8:	f7f3 fc26 	bl	80005f8 <__aeabi_dmul>
 800cdac:	f1ba 3fff 	cmp.w	sl, #4294967295
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	460b      	mov	r3, r1
 800cdb4:	d14b      	bne.n	800ce4e <atan+0x25e>
 800cdb6:	4620      	mov	r0, r4
 800cdb8:	4629      	mov	r1, r5
 800cdba:	f7f3 fa65 	bl	8000288 <__aeabi_dsub>
 800cdbe:	e72c      	b.n	800cc1a <atan+0x2a>
 800cdc0:	ee10 0a10 	vmov	r0, s0
 800cdc4:	4b53      	ldr	r3, [pc, #332]	; (800cf14 <atan+0x324>)
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	4629      	mov	r1, r5
 800cdca:	f7f3 fa5d 	bl	8000288 <__aeabi_dsub>
 800cdce:	4b51      	ldr	r3, [pc, #324]	; (800cf14 <atan+0x324>)
 800cdd0:	4606      	mov	r6, r0
 800cdd2:	460f      	mov	r7, r1
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	4620      	mov	r0, r4
 800cdd8:	4629      	mov	r1, r5
 800cdda:	f7f3 fa57 	bl	800028c <__adddf3>
 800cdde:	4602      	mov	r2, r0
 800cde0:	460b      	mov	r3, r1
 800cde2:	4630      	mov	r0, r6
 800cde4:	4639      	mov	r1, r7
 800cde6:	f7f3 fd31 	bl	800084c <__aeabi_ddiv>
 800cdea:	f04f 0a01 	mov.w	sl, #1
 800cdee:	4604      	mov	r4, r0
 800cdf0:	460d      	mov	r5, r1
 800cdf2:	e764      	b.n	800ccbe <atan+0xce>
 800cdf4:	4b49      	ldr	r3, [pc, #292]	; (800cf1c <atan+0x32c>)
 800cdf6:	429e      	cmp	r6, r3
 800cdf8:	da1d      	bge.n	800ce36 <atan+0x246>
 800cdfa:	ee10 0a10 	vmov	r0, s0
 800cdfe:	4b48      	ldr	r3, [pc, #288]	; (800cf20 <atan+0x330>)
 800ce00:	2200      	movs	r2, #0
 800ce02:	4629      	mov	r1, r5
 800ce04:	f7f3 fa40 	bl	8000288 <__aeabi_dsub>
 800ce08:	4b45      	ldr	r3, [pc, #276]	; (800cf20 <atan+0x330>)
 800ce0a:	4606      	mov	r6, r0
 800ce0c:	460f      	mov	r7, r1
 800ce0e:	2200      	movs	r2, #0
 800ce10:	4620      	mov	r0, r4
 800ce12:	4629      	mov	r1, r5
 800ce14:	f7f3 fbf0 	bl	80005f8 <__aeabi_dmul>
 800ce18:	4b3e      	ldr	r3, [pc, #248]	; (800cf14 <atan+0x324>)
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	f7f3 fa36 	bl	800028c <__adddf3>
 800ce20:	4602      	mov	r2, r0
 800ce22:	460b      	mov	r3, r1
 800ce24:	4630      	mov	r0, r6
 800ce26:	4639      	mov	r1, r7
 800ce28:	f7f3 fd10 	bl	800084c <__aeabi_ddiv>
 800ce2c:	f04f 0a02 	mov.w	sl, #2
 800ce30:	4604      	mov	r4, r0
 800ce32:	460d      	mov	r5, r1
 800ce34:	e743      	b.n	800ccbe <atan+0xce>
 800ce36:	462b      	mov	r3, r5
 800ce38:	ee10 2a10 	vmov	r2, s0
 800ce3c:	4939      	ldr	r1, [pc, #228]	; (800cf24 <atan+0x334>)
 800ce3e:	2000      	movs	r0, #0
 800ce40:	f7f3 fd04 	bl	800084c <__aeabi_ddiv>
 800ce44:	f04f 0a03 	mov.w	sl, #3
 800ce48:	4604      	mov	r4, r0
 800ce4a:	460d      	mov	r5, r1
 800ce4c:	e737      	b.n	800ccbe <atan+0xce>
 800ce4e:	4b36      	ldr	r3, [pc, #216]	; (800cf28 <atan+0x338>)
 800ce50:	4e36      	ldr	r6, [pc, #216]	; (800cf2c <atan+0x33c>)
 800ce52:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ce56:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800ce5a:	e9da 2300 	ldrd	r2, r3, [sl]
 800ce5e:	f7f3 fa13 	bl	8000288 <__aeabi_dsub>
 800ce62:	4622      	mov	r2, r4
 800ce64:	462b      	mov	r3, r5
 800ce66:	f7f3 fa0f 	bl	8000288 <__aeabi_dsub>
 800ce6a:	4602      	mov	r2, r0
 800ce6c:	460b      	mov	r3, r1
 800ce6e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ce72:	f7f3 fa09 	bl	8000288 <__aeabi_dsub>
 800ce76:	f1bb 0f00 	cmp.w	fp, #0
 800ce7a:	4604      	mov	r4, r0
 800ce7c:	460d      	mov	r5, r1
 800ce7e:	f6bf aed6 	bge.w	800cc2e <atan+0x3e>
 800ce82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce86:	461d      	mov	r5, r3
 800ce88:	e6d1      	b.n	800cc2e <atan+0x3e>
 800ce8a:	a51d      	add	r5, pc, #116	; (adr r5, 800cf00 <atan+0x310>)
 800ce8c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ce90:	e6cd      	b.n	800cc2e <atan+0x3e>
 800ce92:	bf00      	nop
 800ce94:	f3af 8000 	nop.w
 800ce98:	54442d18 	.word	0x54442d18
 800ce9c:	bff921fb 	.word	0xbff921fb
 800cea0:	8800759c 	.word	0x8800759c
 800cea4:	7e37e43c 	.word	0x7e37e43c
 800cea8:	e322da11 	.word	0xe322da11
 800ceac:	3f90ad3a 	.word	0x3f90ad3a
 800ceb0:	24760deb 	.word	0x24760deb
 800ceb4:	3fa97b4b 	.word	0x3fa97b4b
 800ceb8:	a0d03d51 	.word	0xa0d03d51
 800cebc:	3fb10d66 	.word	0x3fb10d66
 800cec0:	c54c206e 	.word	0xc54c206e
 800cec4:	3fb745cd 	.word	0x3fb745cd
 800cec8:	920083ff 	.word	0x920083ff
 800cecc:	3fc24924 	.word	0x3fc24924
 800ced0:	5555550d 	.word	0x5555550d
 800ced4:	3fd55555 	.word	0x3fd55555
 800ced8:	2c6a6c2f 	.word	0x2c6a6c2f
 800cedc:	bfa2b444 	.word	0xbfa2b444
 800cee0:	52defd9a 	.word	0x52defd9a
 800cee4:	3fadde2d 	.word	0x3fadde2d
 800cee8:	af749a6d 	.word	0xaf749a6d
 800ceec:	3fb3b0f2 	.word	0x3fb3b0f2
 800cef0:	fe231671 	.word	0xfe231671
 800cef4:	3fbc71c6 	.word	0x3fbc71c6
 800cef8:	9998ebc4 	.word	0x9998ebc4
 800cefc:	3fc99999 	.word	0x3fc99999
 800cf00:	54442d18 	.word	0x54442d18
 800cf04:	3ff921fb 	.word	0x3ff921fb
 800cf08:	440fffff 	.word	0x440fffff
 800cf0c:	7ff00000 	.word	0x7ff00000
 800cf10:	3fdbffff 	.word	0x3fdbffff
 800cf14:	3ff00000 	.word	0x3ff00000
 800cf18:	3ff2ffff 	.word	0x3ff2ffff
 800cf1c:	40038000 	.word	0x40038000
 800cf20:	3ff80000 	.word	0x3ff80000
 800cf24:	bff00000 	.word	0xbff00000
 800cf28:	0800f470 	.word	0x0800f470
 800cf2c:	0800f450 	.word	0x0800f450

0800cf30 <cos>:
 800cf30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf32:	ec53 2b10 	vmov	r2, r3, d0
 800cf36:	4824      	ldr	r0, [pc, #144]	; (800cfc8 <cos+0x98>)
 800cf38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cf3c:	4281      	cmp	r1, r0
 800cf3e:	dc06      	bgt.n	800cf4e <cos+0x1e>
 800cf40:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800cfc0 <cos+0x90>
 800cf44:	f001 f96c 	bl	800e220 <__kernel_cos>
 800cf48:	ec51 0b10 	vmov	r0, r1, d0
 800cf4c:	e007      	b.n	800cf5e <cos+0x2e>
 800cf4e:	481f      	ldr	r0, [pc, #124]	; (800cfcc <cos+0x9c>)
 800cf50:	4281      	cmp	r1, r0
 800cf52:	dd09      	ble.n	800cf68 <cos+0x38>
 800cf54:	ee10 0a10 	vmov	r0, s0
 800cf58:	4619      	mov	r1, r3
 800cf5a:	f7f3 f995 	bl	8000288 <__aeabi_dsub>
 800cf5e:	ec41 0b10 	vmov	d0, r0, r1
 800cf62:	b005      	add	sp, #20
 800cf64:	f85d fb04 	ldr.w	pc, [sp], #4
 800cf68:	4668      	mov	r0, sp
 800cf6a:	f000 fe99 	bl	800dca0 <__ieee754_rem_pio2>
 800cf6e:	f000 0003 	and.w	r0, r0, #3
 800cf72:	2801      	cmp	r0, #1
 800cf74:	d007      	beq.n	800cf86 <cos+0x56>
 800cf76:	2802      	cmp	r0, #2
 800cf78:	d012      	beq.n	800cfa0 <cos+0x70>
 800cf7a:	b9c0      	cbnz	r0, 800cfae <cos+0x7e>
 800cf7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cf80:	ed9d 0b00 	vldr	d0, [sp]
 800cf84:	e7de      	b.n	800cf44 <cos+0x14>
 800cf86:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cf8a:	ed9d 0b00 	vldr	d0, [sp]
 800cf8e:	f001 fd4f 	bl	800ea30 <__kernel_sin>
 800cf92:	ec53 2b10 	vmov	r2, r3, d0
 800cf96:	ee10 0a10 	vmov	r0, s0
 800cf9a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cf9e:	e7de      	b.n	800cf5e <cos+0x2e>
 800cfa0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cfa4:	ed9d 0b00 	vldr	d0, [sp]
 800cfa8:	f001 f93a 	bl	800e220 <__kernel_cos>
 800cfac:	e7f1      	b.n	800cf92 <cos+0x62>
 800cfae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cfb2:	ed9d 0b00 	vldr	d0, [sp]
 800cfb6:	2001      	movs	r0, #1
 800cfb8:	f001 fd3a 	bl	800ea30 <__kernel_sin>
 800cfbc:	e7c4      	b.n	800cf48 <cos+0x18>
 800cfbe:	bf00      	nop
	...
 800cfc8:	3fe921fb 	.word	0x3fe921fb
 800cfcc:	7fefffff 	.word	0x7fefffff

0800cfd0 <fabs>:
 800cfd0:	ec51 0b10 	vmov	r0, r1, d0
 800cfd4:	ee10 2a10 	vmov	r2, s0
 800cfd8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cfdc:	ec43 2b10 	vmov	d0, r2, r3
 800cfe0:	4770      	bx	lr
 800cfe2:	0000      	movs	r0, r0
 800cfe4:	0000      	movs	r0, r0
	...

0800cfe8 <sin>:
 800cfe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cfea:	ec53 2b10 	vmov	r2, r3, d0
 800cfee:	4826      	ldr	r0, [pc, #152]	; (800d088 <sin+0xa0>)
 800cff0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cff4:	4281      	cmp	r1, r0
 800cff6:	dc07      	bgt.n	800d008 <sin+0x20>
 800cff8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d080 <sin+0x98>
 800cffc:	2000      	movs	r0, #0
 800cffe:	f001 fd17 	bl	800ea30 <__kernel_sin>
 800d002:	ec51 0b10 	vmov	r0, r1, d0
 800d006:	e007      	b.n	800d018 <sin+0x30>
 800d008:	4820      	ldr	r0, [pc, #128]	; (800d08c <sin+0xa4>)
 800d00a:	4281      	cmp	r1, r0
 800d00c:	dd09      	ble.n	800d022 <sin+0x3a>
 800d00e:	ee10 0a10 	vmov	r0, s0
 800d012:	4619      	mov	r1, r3
 800d014:	f7f3 f938 	bl	8000288 <__aeabi_dsub>
 800d018:	ec41 0b10 	vmov	d0, r0, r1
 800d01c:	b005      	add	sp, #20
 800d01e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d022:	4668      	mov	r0, sp
 800d024:	f000 fe3c 	bl	800dca0 <__ieee754_rem_pio2>
 800d028:	f000 0003 	and.w	r0, r0, #3
 800d02c:	2801      	cmp	r0, #1
 800d02e:	d008      	beq.n	800d042 <sin+0x5a>
 800d030:	2802      	cmp	r0, #2
 800d032:	d00d      	beq.n	800d050 <sin+0x68>
 800d034:	b9d0      	cbnz	r0, 800d06c <sin+0x84>
 800d036:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d03a:	ed9d 0b00 	vldr	d0, [sp]
 800d03e:	2001      	movs	r0, #1
 800d040:	e7dd      	b.n	800cffe <sin+0x16>
 800d042:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d046:	ed9d 0b00 	vldr	d0, [sp]
 800d04a:	f001 f8e9 	bl	800e220 <__kernel_cos>
 800d04e:	e7d8      	b.n	800d002 <sin+0x1a>
 800d050:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d054:	ed9d 0b00 	vldr	d0, [sp]
 800d058:	2001      	movs	r0, #1
 800d05a:	f001 fce9 	bl	800ea30 <__kernel_sin>
 800d05e:	ec53 2b10 	vmov	r2, r3, d0
 800d062:	ee10 0a10 	vmov	r0, s0
 800d066:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d06a:	e7d5      	b.n	800d018 <sin+0x30>
 800d06c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d070:	ed9d 0b00 	vldr	d0, [sp]
 800d074:	f001 f8d4 	bl	800e220 <__kernel_cos>
 800d078:	e7f1      	b.n	800d05e <sin+0x76>
 800d07a:	bf00      	nop
 800d07c:	f3af 8000 	nop.w
	...
 800d088:	3fe921fb 	.word	0x3fe921fb
 800d08c:	7fefffff 	.word	0x7fefffff

0800d090 <pow>:
 800d090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d094:	ec59 8b10 	vmov	r8, r9, d0
 800d098:	ec57 6b11 	vmov	r6, r7, d1
 800d09c:	f000 f8dc 	bl	800d258 <__ieee754_pow>
 800d0a0:	4b4e      	ldr	r3, [pc, #312]	; (800d1dc <pow+0x14c>)
 800d0a2:	f993 3000 	ldrsb.w	r3, [r3]
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	ec55 4b10 	vmov	r4, r5, d0
 800d0ac:	d015      	beq.n	800d0da <pow+0x4a>
 800d0ae:	4632      	mov	r2, r6
 800d0b0:	463b      	mov	r3, r7
 800d0b2:	4630      	mov	r0, r6
 800d0b4:	4639      	mov	r1, r7
 800d0b6:	f7f3 fd39 	bl	8000b2c <__aeabi_dcmpun>
 800d0ba:	b970      	cbnz	r0, 800d0da <pow+0x4a>
 800d0bc:	4642      	mov	r2, r8
 800d0be:	464b      	mov	r3, r9
 800d0c0:	4640      	mov	r0, r8
 800d0c2:	4649      	mov	r1, r9
 800d0c4:	f7f3 fd32 	bl	8000b2c <__aeabi_dcmpun>
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	b148      	cbz	r0, 800d0e2 <pow+0x52>
 800d0ce:	4630      	mov	r0, r6
 800d0d0:	4639      	mov	r1, r7
 800d0d2:	f7f3 fcf9 	bl	8000ac8 <__aeabi_dcmpeq>
 800d0d6:	2800      	cmp	r0, #0
 800d0d8:	d17d      	bne.n	800d1d6 <pow+0x146>
 800d0da:	ec45 4b10 	vmov	d0, r4, r5
 800d0de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0e2:	4640      	mov	r0, r8
 800d0e4:	4649      	mov	r1, r9
 800d0e6:	f7f3 fcef 	bl	8000ac8 <__aeabi_dcmpeq>
 800d0ea:	b1e0      	cbz	r0, 800d126 <pow+0x96>
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	4630      	mov	r0, r6
 800d0f2:	4639      	mov	r1, r7
 800d0f4:	f7f3 fce8 	bl	8000ac8 <__aeabi_dcmpeq>
 800d0f8:	2800      	cmp	r0, #0
 800d0fa:	d16c      	bne.n	800d1d6 <pow+0x146>
 800d0fc:	ec47 6b10 	vmov	d0, r6, r7
 800d100:	f001 fd54 	bl	800ebac <finite>
 800d104:	2800      	cmp	r0, #0
 800d106:	d0e8      	beq.n	800d0da <pow+0x4a>
 800d108:	2200      	movs	r2, #0
 800d10a:	2300      	movs	r3, #0
 800d10c:	4630      	mov	r0, r6
 800d10e:	4639      	mov	r1, r7
 800d110:	f7f3 fce4 	bl	8000adc <__aeabi_dcmplt>
 800d114:	2800      	cmp	r0, #0
 800d116:	d0e0      	beq.n	800d0da <pow+0x4a>
 800d118:	f7fc fbf6 	bl	8009908 <__errno>
 800d11c:	2321      	movs	r3, #33	; 0x21
 800d11e:	6003      	str	r3, [r0, #0]
 800d120:	2400      	movs	r4, #0
 800d122:	4d2f      	ldr	r5, [pc, #188]	; (800d1e0 <pow+0x150>)
 800d124:	e7d9      	b.n	800d0da <pow+0x4a>
 800d126:	ec45 4b10 	vmov	d0, r4, r5
 800d12a:	f001 fd3f 	bl	800ebac <finite>
 800d12e:	bbb8      	cbnz	r0, 800d1a0 <pow+0x110>
 800d130:	ec49 8b10 	vmov	d0, r8, r9
 800d134:	f001 fd3a 	bl	800ebac <finite>
 800d138:	b390      	cbz	r0, 800d1a0 <pow+0x110>
 800d13a:	ec47 6b10 	vmov	d0, r6, r7
 800d13e:	f001 fd35 	bl	800ebac <finite>
 800d142:	b368      	cbz	r0, 800d1a0 <pow+0x110>
 800d144:	4622      	mov	r2, r4
 800d146:	462b      	mov	r3, r5
 800d148:	4620      	mov	r0, r4
 800d14a:	4629      	mov	r1, r5
 800d14c:	f7f3 fcee 	bl	8000b2c <__aeabi_dcmpun>
 800d150:	b160      	cbz	r0, 800d16c <pow+0xdc>
 800d152:	f7fc fbd9 	bl	8009908 <__errno>
 800d156:	2321      	movs	r3, #33	; 0x21
 800d158:	6003      	str	r3, [r0, #0]
 800d15a:	2200      	movs	r2, #0
 800d15c:	2300      	movs	r3, #0
 800d15e:	4610      	mov	r0, r2
 800d160:	4619      	mov	r1, r3
 800d162:	f7f3 fb73 	bl	800084c <__aeabi_ddiv>
 800d166:	4604      	mov	r4, r0
 800d168:	460d      	mov	r5, r1
 800d16a:	e7b6      	b.n	800d0da <pow+0x4a>
 800d16c:	f7fc fbcc 	bl	8009908 <__errno>
 800d170:	2322      	movs	r3, #34	; 0x22
 800d172:	6003      	str	r3, [r0, #0]
 800d174:	2200      	movs	r2, #0
 800d176:	2300      	movs	r3, #0
 800d178:	4640      	mov	r0, r8
 800d17a:	4649      	mov	r1, r9
 800d17c:	f7f3 fcae 	bl	8000adc <__aeabi_dcmplt>
 800d180:	2400      	movs	r4, #0
 800d182:	b158      	cbz	r0, 800d19c <pow+0x10c>
 800d184:	ec47 6b10 	vmov	d0, r6, r7
 800d188:	f001 fd9e 	bl	800ecc8 <rint>
 800d18c:	4632      	mov	r2, r6
 800d18e:	ec51 0b10 	vmov	r0, r1, d0
 800d192:	463b      	mov	r3, r7
 800d194:	f7f3 fc98 	bl	8000ac8 <__aeabi_dcmpeq>
 800d198:	2800      	cmp	r0, #0
 800d19a:	d0c2      	beq.n	800d122 <pow+0x92>
 800d19c:	4d11      	ldr	r5, [pc, #68]	; (800d1e4 <pow+0x154>)
 800d19e:	e79c      	b.n	800d0da <pow+0x4a>
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	4620      	mov	r0, r4
 800d1a6:	4629      	mov	r1, r5
 800d1a8:	f7f3 fc8e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d1ac:	2800      	cmp	r0, #0
 800d1ae:	d094      	beq.n	800d0da <pow+0x4a>
 800d1b0:	ec49 8b10 	vmov	d0, r8, r9
 800d1b4:	f001 fcfa 	bl	800ebac <finite>
 800d1b8:	2800      	cmp	r0, #0
 800d1ba:	d08e      	beq.n	800d0da <pow+0x4a>
 800d1bc:	ec47 6b10 	vmov	d0, r6, r7
 800d1c0:	f001 fcf4 	bl	800ebac <finite>
 800d1c4:	2800      	cmp	r0, #0
 800d1c6:	d088      	beq.n	800d0da <pow+0x4a>
 800d1c8:	f7fc fb9e 	bl	8009908 <__errno>
 800d1cc:	2322      	movs	r3, #34	; 0x22
 800d1ce:	6003      	str	r3, [r0, #0]
 800d1d0:	2400      	movs	r4, #0
 800d1d2:	2500      	movs	r5, #0
 800d1d4:	e781      	b.n	800d0da <pow+0x4a>
 800d1d6:	4d04      	ldr	r5, [pc, #16]	; (800d1e8 <pow+0x158>)
 800d1d8:	2400      	movs	r4, #0
 800d1da:	e77e      	b.n	800d0da <pow+0x4a>
 800d1dc:	20000520 	.word	0x20000520
 800d1e0:	fff00000 	.word	0xfff00000
 800d1e4:	7ff00000 	.word	0x7ff00000
 800d1e8:	3ff00000 	.word	0x3ff00000

0800d1ec <sqrt>:
 800d1ec:	b538      	push	{r3, r4, r5, lr}
 800d1ee:	ed2d 8b02 	vpush	{d8}
 800d1f2:	ec55 4b10 	vmov	r4, r5, d0
 800d1f6:	f000 ff5d 	bl	800e0b4 <__ieee754_sqrt>
 800d1fa:	4b15      	ldr	r3, [pc, #84]	; (800d250 <sqrt+0x64>)
 800d1fc:	eeb0 8a40 	vmov.f32	s16, s0
 800d200:	eef0 8a60 	vmov.f32	s17, s1
 800d204:	f993 3000 	ldrsb.w	r3, [r3]
 800d208:	3301      	adds	r3, #1
 800d20a:	d019      	beq.n	800d240 <sqrt+0x54>
 800d20c:	4622      	mov	r2, r4
 800d20e:	462b      	mov	r3, r5
 800d210:	4620      	mov	r0, r4
 800d212:	4629      	mov	r1, r5
 800d214:	f7f3 fc8a 	bl	8000b2c <__aeabi_dcmpun>
 800d218:	b990      	cbnz	r0, 800d240 <sqrt+0x54>
 800d21a:	2200      	movs	r2, #0
 800d21c:	2300      	movs	r3, #0
 800d21e:	4620      	mov	r0, r4
 800d220:	4629      	mov	r1, r5
 800d222:	f7f3 fc5b 	bl	8000adc <__aeabi_dcmplt>
 800d226:	b158      	cbz	r0, 800d240 <sqrt+0x54>
 800d228:	f7fc fb6e 	bl	8009908 <__errno>
 800d22c:	2321      	movs	r3, #33	; 0x21
 800d22e:	6003      	str	r3, [r0, #0]
 800d230:	2200      	movs	r2, #0
 800d232:	2300      	movs	r3, #0
 800d234:	4610      	mov	r0, r2
 800d236:	4619      	mov	r1, r3
 800d238:	f7f3 fb08 	bl	800084c <__aeabi_ddiv>
 800d23c:	ec41 0b18 	vmov	d8, r0, r1
 800d240:	eeb0 0a48 	vmov.f32	s0, s16
 800d244:	eef0 0a68 	vmov.f32	s1, s17
 800d248:	ecbd 8b02 	vpop	{d8}
 800d24c:	bd38      	pop	{r3, r4, r5, pc}
 800d24e:	bf00      	nop
 800d250:	20000520 	.word	0x20000520
 800d254:	00000000 	.word	0x00000000

0800d258 <__ieee754_pow>:
 800d258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d25c:	ed2d 8b06 	vpush	{d8-d10}
 800d260:	b08d      	sub	sp, #52	; 0x34
 800d262:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d266:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800d26a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800d26e:	ea56 0100 	orrs.w	r1, r6, r0
 800d272:	ec53 2b10 	vmov	r2, r3, d0
 800d276:	f000 84d1 	beq.w	800dc1c <__ieee754_pow+0x9c4>
 800d27a:	497f      	ldr	r1, [pc, #508]	; (800d478 <__ieee754_pow+0x220>)
 800d27c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800d280:	428c      	cmp	r4, r1
 800d282:	ee10 8a10 	vmov	r8, s0
 800d286:	4699      	mov	r9, r3
 800d288:	dc09      	bgt.n	800d29e <__ieee754_pow+0x46>
 800d28a:	d103      	bne.n	800d294 <__ieee754_pow+0x3c>
 800d28c:	b97a      	cbnz	r2, 800d2ae <__ieee754_pow+0x56>
 800d28e:	42a6      	cmp	r6, r4
 800d290:	dd02      	ble.n	800d298 <__ieee754_pow+0x40>
 800d292:	e00c      	b.n	800d2ae <__ieee754_pow+0x56>
 800d294:	428e      	cmp	r6, r1
 800d296:	dc02      	bgt.n	800d29e <__ieee754_pow+0x46>
 800d298:	428e      	cmp	r6, r1
 800d29a:	d110      	bne.n	800d2be <__ieee754_pow+0x66>
 800d29c:	b178      	cbz	r0, 800d2be <__ieee754_pow+0x66>
 800d29e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d2a2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d2a6:	ea54 0308 	orrs.w	r3, r4, r8
 800d2aa:	f000 84b7 	beq.w	800dc1c <__ieee754_pow+0x9c4>
 800d2ae:	4873      	ldr	r0, [pc, #460]	; (800d47c <__ieee754_pow+0x224>)
 800d2b0:	b00d      	add	sp, #52	; 0x34
 800d2b2:	ecbd 8b06 	vpop	{d8-d10}
 800d2b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2ba:	f7ff b851 	b.w	800c360 <nan>
 800d2be:	f1b9 0f00 	cmp.w	r9, #0
 800d2c2:	da36      	bge.n	800d332 <__ieee754_pow+0xda>
 800d2c4:	496e      	ldr	r1, [pc, #440]	; (800d480 <__ieee754_pow+0x228>)
 800d2c6:	428e      	cmp	r6, r1
 800d2c8:	dc51      	bgt.n	800d36e <__ieee754_pow+0x116>
 800d2ca:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800d2ce:	428e      	cmp	r6, r1
 800d2d0:	f340 84af 	ble.w	800dc32 <__ieee754_pow+0x9da>
 800d2d4:	1531      	asrs	r1, r6, #20
 800d2d6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d2da:	2914      	cmp	r1, #20
 800d2dc:	dd0f      	ble.n	800d2fe <__ieee754_pow+0xa6>
 800d2de:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800d2e2:	fa20 fc01 	lsr.w	ip, r0, r1
 800d2e6:	fa0c f101 	lsl.w	r1, ip, r1
 800d2ea:	4281      	cmp	r1, r0
 800d2ec:	f040 84a1 	bne.w	800dc32 <__ieee754_pow+0x9da>
 800d2f0:	f00c 0c01 	and.w	ip, ip, #1
 800d2f4:	f1cc 0102 	rsb	r1, ip, #2
 800d2f8:	9100      	str	r1, [sp, #0]
 800d2fa:	b180      	cbz	r0, 800d31e <__ieee754_pow+0xc6>
 800d2fc:	e059      	b.n	800d3b2 <__ieee754_pow+0x15a>
 800d2fe:	2800      	cmp	r0, #0
 800d300:	d155      	bne.n	800d3ae <__ieee754_pow+0x156>
 800d302:	f1c1 0114 	rsb	r1, r1, #20
 800d306:	fa46 fc01 	asr.w	ip, r6, r1
 800d30a:	fa0c f101 	lsl.w	r1, ip, r1
 800d30e:	42b1      	cmp	r1, r6
 800d310:	f040 848c 	bne.w	800dc2c <__ieee754_pow+0x9d4>
 800d314:	f00c 0c01 	and.w	ip, ip, #1
 800d318:	f1cc 0102 	rsb	r1, ip, #2
 800d31c:	9100      	str	r1, [sp, #0]
 800d31e:	4959      	ldr	r1, [pc, #356]	; (800d484 <__ieee754_pow+0x22c>)
 800d320:	428e      	cmp	r6, r1
 800d322:	d12d      	bne.n	800d380 <__ieee754_pow+0x128>
 800d324:	2f00      	cmp	r7, #0
 800d326:	da79      	bge.n	800d41c <__ieee754_pow+0x1c4>
 800d328:	4956      	ldr	r1, [pc, #344]	; (800d484 <__ieee754_pow+0x22c>)
 800d32a:	2000      	movs	r0, #0
 800d32c:	f7f3 fa8e 	bl	800084c <__aeabi_ddiv>
 800d330:	e016      	b.n	800d360 <__ieee754_pow+0x108>
 800d332:	2100      	movs	r1, #0
 800d334:	9100      	str	r1, [sp, #0]
 800d336:	2800      	cmp	r0, #0
 800d338:	d13b      	bne.n	800d3b2 <__ieee754_pow+0x15a>
 800d33a:	494f      	ldr	r1, [pc, #316]	; (800d478 <__ieee754_pow+0x220>)
 800d33c:	428e      	cmp	r6, r1
 800d33e:	d1ee      	bne.n	800d31e <__ieee754_pow+0xc6>
 800d340:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d344:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d348:	ea53 0308 	orrs.w	r3, r3, r8
 800d34c:	f000 8466 	beq.w	800dc1c <__ieee754_pow+0x9c4>
 800d350:	4b4d      	ldr	r3, [pc, #308]	; (800d488 <__ieee754_pow+0x230>)
 800d352:	429c      	cmp	r4, r3
 800d354:	dd0d      	ble.n	800d372 <__ieee754_pow+0x11a>
 800d356:	2f00      	cmp	r7, #0
 800d358:	f280 8464 	bge.w	800dc24 <__ieee754_pow+0x9cc>
 800d35c:	2000      	movs	r0, #0
 800d35e:	2100      	movs	r1, #0
 800d360:	ec41 0b10 	vmov	d0, r0, r1
 800d364:	b00d      	add	sp, #52	; 0x34
 800d366:	ecbd 8b06 	vpop	{d8-d10}
 800d36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d36e:	2102      	movs	r1, #2
 800d370:	e7e0      	b.n	800d334 <__ieee754_pow+0xdc>
 800d372:	2f00      	cmp	r7, #0
 800d374:	daf2      	bge.n	800d35c <__ieee754_pow+0x104>
 800d376:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800d37a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d37e:	e7ef      	b.n	800d360 <__ieee754_pow+0x108>
 800d380:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800d384:	d104      	bne.n	800d390 <__ieee754_pow+0x138>
 800d386:	4610      	mov	r0, r2
 800d388:	4619      	mov	r1, r3
 800d38a:	f7f3 f935 	bl	80005f8 <__aeabi_dmul>
 800d38e:	e7e7      	b.n	800d360 <__ieee754_pow+0x108>
 800d390:	493e      	ldr	r1, [pc, #248]	; (800d48c <__ieee754_pow+0x234>)
 800d392:	428f      	cmp	r7, r1
 800d394:	d10d      	bne.n	800d3b2 <__ieee754_pow+0x15a>
 800d396:	f1b9 0f00 	cmp.w	r9, #0
 800d39a:	db0a      	blt.n	800d3b2 <__ieee754_pow+0x15a>
 800d39c:	ec43 2b10 	vmov	d0, r2, r3
 800d3a0:	b00d      	add	sp, #52	; 0x34
 800d3a2:	ecbd 8b06 	vpop	{d8-d10}
 800d3a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3aa:	f000 be83 	b.w	800e0b4 <__ieee754_sqrt>
 800d3ae:	2100      	movs	r1, #0
 800d3b0:	9100      	str	r1, [sp, #0]
 800d3b2:	ec43 2b10 	vmov	d0, r2, r3
 800d3b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d3ba:	f7ff fe09 	bl	800cfd0 <fabs>
 800d3be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3c2:	ec51 0b10 	vmov	r0, r1, d0
 800d3c6:	f1b8 0f00 	cmp.w	r8, #0
 800d3ca:	d12a      	bne.n	800d422 <__ieee754_pow+0x1ca>
 800d3cc:	b12c      	cbz	r4, 800d3da <__ieee754_pow+0x182>
 800d3ce:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800d484 <__ieee754_pow+0x22c>
 800d3d2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800d3d6:	45e6      	cmp	lr, ip
 800d3d8:	d123      	bne.n	800d422 <__ieee754_pow+0x1ca>
 800d3da:	2f00      	cmp	r7, #0
 800d3dc:	da05      	bge.n	800d3ea <__ieee754_pow+0x192>
 800d3de:	4602      	mov	r2, r0
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	2000      	movs	r0, #0
 800d3e4:	4927      	ldr	r1, [pc, #156]	; (800d484 <__ieee754_pow+0x22c>)
 800d3e6:	f7f3 fa31 	bl	800084c <__aeabi_ddiv>
 800d3ea:	f1b9 0f00 	cmp.w	r9, #0
 800d3ee:	dab7      	bge.n	800d360 <__ieee754_pow+0x108>
 800d3f0:	9b00      	ldr	r3, [sp, #0]
 800d3f2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d3f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d3fa:	4323      	orrs	r3, r4
 800d3fc:	d108      	bne.n	800d410 <__ieee754_pow+0x1b8>
 800d3fe:	4602      	mov	r2, r0
 800d400:	460b      	mov	r3, r1
 800d402:	4610      	mov	r0, r2
 800d404:	4619      	mov	r1, r3
 800d406:	f7f2 ff3f 	bl	8000288 <__aeabi_dsub>
 800d40a:	4602      	mov	r2, r0
 800d40c:	460b      	mov	r3, r1
 800d40e:	e78d      	b.n	800d32c <__ieee754_pow+0xd4>
 800d410:	9b00      	ldr	r3, [sp, #0]
 800d412:	2b01      	cmp	r3, #1
 800d414:	d1a4      	bne.n	800d360 <__ieee754_pow+0x108>
 800d416:	4602      	mov	r2, r0
 800d418:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d41c:	4610      	mov	r0, r2
 800d41e:	4619      	mov	r1, r3
 800d420:	e79e      	b.n	800d360 <__ieee754_pow+0x108>
 800d422:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800d426:	f10c 35ff 	add.w	r5, ip, #4294967295
 800d42a:	950a      	str	r5, [sp, #40]	; 0x28
 800d42c:	9d00      	ldr	r5, [sp, #0]
 800d42e:	46ac      	mov	ip, r5
 800d430:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d432:	ea5c 0505 	orrs.w	r5, ip, r5
 800d436:	d0e4      	beq.n	800d402 <__ieee754_pow+0x1aa>
 800d438:	4b15      	ldr	r3, [pc, #84]	; (800d490 <__ieee754_pow+0x238>)
 800d43a:	429e      	cmp	r6, r3
 800d43c:	f340 80fc 	ble.w	800d638 <__ieee754_pow+0x3e0>
 800d440:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d444:	429e      	cmp	r6, r3
 800d446:	4b10      	ldr	r3, [pc, #64]	; (800d488 <__ieee754_pow+0x230>)
 800d448:	dd07      	ble.n	800d45a <__ieee754_pow+0x202>
 800d44a:	429c      	cmp	r4, r3
 800d44c:	dc0a      	bgt.n	800d464 <__ieee754_pow+0x20c>
 800d44e:	2f00      	cmp	r7, #0
 800d450:	da84      	bge.n	800d35c <__ieee754_pow+0x104>
 800d452:	a307      	add	r3, pc, #28	; (adr r3, 800d470 <__ieee754_pow+0x218>)
 800d454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d458:	e795      	b.n	800d386 <__ieee754_pow+0x12e>
 800d45a:	429c      	cmp	r4, r3
 800d45c:	dbf7      	blt.n	800d44e <__ieee754_pow+0x1f6>
 800d45e:	4b09      	ldr	r3, [pc, #36]	; (800d484 <__ieee754_pow+0x22c>)
 800d460:	429c      	cmp	r4, r3
 800d462:	dd17      	ble.n	800d494 <__ieee754_pow+0x23c>
 800d464:	2f00      	cmp	r7, #0
 800d466:	dcf4      	bgt.n	800d452 <__ieee754_pow+0x1fa>
 800d468:	e778      	b.n	800d35c <__ieee754_pow+0x104>
 800d46a:	bf00      	nop
 800d46c:	f3af 8000 	nop.w
 800d470:	8800759c 	.word	0x8800759c
 800d474:	7e37e43c 	.word	0x7e37e43c
 800d478:	7ff00000 	.word	0x7ff00000
 800d47c:	0800f0cb 	.word	0x0800f0cb
 800d480:	433fffff 	.word	0x433fffff
 800d484:	3ff00000 	.word	0x3ff00000
 800d488:	3fefffff 	.word	0x3fefffff
 800d48c:	3fe00000 	.word	0x3fe00000
 800d490:	41e00000 	.word	0x41e00000
 800d494:	4b64      	ldr	r3, [pc, #400]	; (800d628 <__ieee754_pow+0x3d0>)
 800d496:	2200      	movs	r2, #0
 800d498:	f7f2 fef6 	bl	8000288 <__aeabi_dsub>
 800d49c:	a356      	add	r3, pc, #344	; (adr r3, 800d5f8 <__ieee754_pow+0x3a0>)
 800d49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a2:	4604      	mov	r4, r0
 800d4a4:	460d      	mov	r5, r1
 800d4a6:	f7f3 f8a7 	bl	80005f8 <__aeabi_dmul>
 800d4aa:	a355      	add	r3, pc, #340	; (adr r3, 800d600 <__ieee754_pow+0x3a8>)
 800d4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b0:	4606      	mov	r6, r0
 800d4b2:	460f      	mov	r7, r1
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	4629      	mov	r1, r5
 800d4b8:	f7f3 f89e 	bl	80005f8 <__aeabi_dmul>
 800d4bc:	4b5b      	ldr	r3, [pc, #364]	; (800d62c <__ieee754_pow+0x3d4>)
 800d4be:	4682      	mov	sl, r0
 800d4c0:	468b      	mov	fp, r1
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	4629      	mov	r1, r5
 800d4c8:	f7f3 f896 	bl	80005f8 <__aeabi_dmul>
 800d4cc:	4602      	mov	r2, r0
 800d4ce:	460b      	mov	r3, r1
 800d4d0:	a14d      	add	r1, pc, #308	; (adr r1, 800d608 <__ieee754_pow+0x3b0>)
 800d4d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4d6:	f7f2 fed7 	bl	8000288 <__aeabi_dsub>
 800d4da:	4622      	mov	r2, r4
 800d4dc:	462b      	mov	r3, r5
 800d4de:	f7f3 f88b 	bl	80005f8 <__aeabi_dmul>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	460b      	mov	r3, r1
 800d4e6:	2000      	movs	r0, #0
 800d4e8:	4951      	ldr	r1, [pc, #324]	; (800d630 <__ieee754_pow+0x3d8>)
 800d4ea:	f7f2 fecd 	bl	8000288 <__aeabi_dsub>
 800d4ee:	4622      	mov	r2, r4
 800d4f0:	4680      	mov	r8, r0
 800d4f2:	4689      	mov	r9, r1
 800d4f4:	462b      	mov	r3, r5
 800d4f6:	4620      	mov	r0, r4
 800d4f8:	4629      	mov	r1, r5
 800d4fa:	f7f3 f87d 	bl	80005f8 <__aeabi_dmul>
 800d4fe:	4602      	mov	r2, r0
 800d500:	460b      	mov	r3, r1
 800d502:	4640      	mov	r0, r8
 800d504:	4649      	mov	r1, r9
 800d506:	f7f3 f877 	bl	80005f8 <__aeabi_dmul>
 800d50a:	a341      	add	r3, pc, #260	; (adr r3, 800d610 <__ieee754_pow+0x3b8>)
 800d50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d510:	f7f3 f872 	bl	80005f8 <__aeabi_dmul>
 800d514:	4602      	mov	r2, r0
 800d516:	460b      	mov	r3, r1
 800d518:	4650      	mov	r0, sl
 800d51a:	4659      	mov	r1, fp
 800d51c:	f7f2 feb4 	bl	8000288 <__aeabi_dsub>
 800d520:	4602      	mov	r2, r0
 800d522:	460b      	mov	r3, r1
 800d524:	4680      	mov	r8, r0
 800d526:	4689      	mov	r9, r1
 800d528:	4630      	mov	r0, r6
 800d52a:	4639      	mov	r1, r7
 800d52c:	f7f2 feae 	bl	800028c <__adddf3>
 800d530:	2400      	movs	r4, #0
 800d532:	4632      	mov	r2, r6
 800d534:	463b      	mov	r3, r7
 800d536:	4620      	mov	r0, r4
 800d538:	460d      	mov	r5, r1
 800d53a:	f7f2 fea5 	bl	8000288 <__aeabi_dsub>
 800d53e:	4602      	mov	r2, r0
 800d540:	460b      	mov	r3, r1
 800d542:	4640      	mov	r0, r8
 800d544:	4649      	mov	r1, r9
 800d546:	f7f2 fe9f 	bl	8000288 <__aeabi_dsub>
 800d54a:	9b00      	ldr	r3, [sp, #0]
 800d54c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d54e:	3b01      	subs	r3, #1
 800d550:	4313      	orrs	r3, r2
 800d552:	4682      	mov	sl, r0
 800d554:	468b      	mov	fp, r1
 800d556:	f040 81f1 	bne.w	800d93c <__ieee754_pow+0x6e4>
 800d55a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800d618 <__ieee754_pow+0x3c0>
 800d55e:	eeb0 8a47 	vmov.f32	s16, s14
 800d562:	eef0 8a67 	vmov.f32	s17, s15
 800d566:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d56a:	2600      	movs	r6, #0
 800d56c:	4632      	mov	r2, r6
 800d56e:	463b      	mov	r3, r7
 800d570:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d574:	f7f2 fe88 	bl	8000288 <__aeabi_dsub>
 800d578:	4622      	mov	r2, r4
 800d57a:	462b      	mov	r3, r5
 800d57c:	f7f3 f83c 	bl	80005f8 <__aeabi_dmul>
 800d580:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d584:	4680      	mov	r8, r0
 800d586:	4689      	mov	r9, r1
 800d588:	4650      	mov	r0, sl
 800d58a:	4659      	mov	r1, fp
 800d58c:	f7f3 f834 	bl	80005f8 <__aeabi_dmul>
 800d590:	4602      	mov	r2, r0
 800d592:	460b      	mov	r3, r1
 800d594:	4640      	mov	r0, r8
 800d596:	4649      	mov	r1, r9
 800d598:	f7f2 fe78 	bl	800028c <__adddf3>
 800d59c:	4632      	mov	r2, r6
 800d59e:	463b      	mov	r3, r7
 800d5a0:	4680      	mov	r8, r0
 800d5a2:	4689      	mov	r9, r1
 800d5a4:	4620      	mov	r0, r4
 800d5a6:	4629      	mov	r1, r5
 800d5a8:	f7f3 f826 	bl	80005f8 <__aeabi_dmul>
 800d5ac:	460b      	mov	r3, r1
 800d5ae:	4604      	mov	r4, r0
 800d5b0:	460d      	mov	r5, r1
 800d5b2:	4602      	mov	r2, r0
 800d5b4:	4649      	mov	r1, r9
 800d5b6:	4640      	mov	r0, r8
 800d5b8:	f7f2 fe68 	bl	800028c <__adddf3>
 800d5bc:	4b1d      	ldr	r3, [pc, #116]	; (800d634 <__ieee754_pow+0x3dc>)
 800d5be:	4299      	cmp	r1, r3
 800d5c0:	ec45 4b19 	vmov	d9, r4, r5
 800d5c4:	4606      	mov	r6, r0
 800d5c6:	460f      	mov	r7, r1
 800d5c8:	468b      	mov	fp, r1
 800d5ca:	f340 82fe 	ble.w	800dbca <__ieee754_pow+0x972>
 800d5ce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d5d2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d5d6:	4303      	orrs	r3, r0
 800d5d8:	f000 81f0 	beq.w	800d9bc <__ieee754_pow+0x764>
 800d5dc:	a310      	add	r3, pc, #64	; (adr r3, 800d620 <__ieee754_pow+0x3c8>)
 800d5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e2:	ec51 0b18 	vmov	r0, r1, d8
 800d5e6:	f7f3 f807 	bl	80005f8 <__aeabi_dmul>
 800d5ea:	a30d      	add	r3, pc, #52	; (adr r3, 800d620 <__ieee754_pow+0x3c8>)
 800d5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f0:	e6cb      	b.n	800d38a <__ieee754_pow+0x132>
 800d5f2:	bf00      	nop
 800d5f4:	f3af 8000 	nop.w
 800d5f8:	60000000 	.word	0x60000000
 800d5fc:	3ff71547 	.word	0x3ff71547
 800d600:	f85ddf44 	.word	0xf85ddf44
 800d604:	3e54ae0b 	.word	0x3e54ae0b
 800d608:	55555555 	.word	0x55555555
 800d60c:	3fd55555 	.word	0x3fd55555
 800d610:	652b82fe 	.word	0x652b82fe
 800d614:	3ff71547 	.word	0x3ff71547
 800d618:	00000000 	.word	0x00000000
 800d61c:	bff00000 	.word	0xbff00000
 800d620:	8800759c 	.word	0x8800759c
 800d624:	7e37e43c 	.word	0x7e37e43c
 800d628:	3ff00000 	.word	0x3ff00000
 800d62c:	3fd00000 	.word	0x3fd00000
 800d630:	3fe00000 	.word	0x3fe00000
 800d634:	408fffff 	.word	0x408fffff
 800d638:	4bd7      	ldr	r3, [pc, #860]	; (800d998 <__ieee754_pow+0x740>)
 800d63a:	ea03 0309 	and.w	r3, r3, r9
 800d63e:	2200      	movs	r2, #0
 800d640:	b92b      	cbnz	r3, 800d64e <__ieee754_pow+0x3f6>
 800d642:	4bd6      	ldr	r3, [pc, #856]	; (800d99c <__ieee754_pow+0x744>)
 800d644:	f7f2 ffd8 	bl	80005f8 <__aeabi_dmul>
 800d648:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d64c:	460c      	mov	r4, r1
 800d64e:	1523      	asrs	r3, r4, #20
 800d650:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d654:	4413      	add	r3, r2
 800d656:	9309      	str	r3, [sp, #36]	; 0x24
 800d658:	4bd1      	ldr	r3, [pc, #836]	; (800d9a0 <__ieee754_pow+0x748>)
 800d65a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d65e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d662:	429c      	cmp	r4, r3
 800d664:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d668:	dd08      	ble.n	800d67c <__ieee754_pow+0x424>
 800d66a:	4bce      	ldr	r3, [pc, #824]	; (800d9a4 <__ieee754_pow+0x74c>)
 800d66c:	429c      	cmp	r4, r3
 800d66e:	f340 8163 	ble.w	800d938 <__ieee754_pow+0x6e0>
 800d672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d674:	3301      	adds	r3, #1
 800d676:	9309      	str	r3, [sp, #36]	; 0x24
 800d678:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d67c:	2400      	movs	r4, #0
 800d67e:	00e3      	lsls	r3, r4, #3
 800d680:	930b      	str	r3, [sp, #44]	; 0x2c
 800d682:	4bc9      	ldr	r3, [pc, #804]	; (800d9a8 <__ieee754_pow+0x750>)
 800d684:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d688:	ed93 7b00 	vldr	d7, [r3]
 800d68c:	4629      	mov	r1, r5
 800d68e:	ec53 2b17 	vmov	r2, r3, d7
 800d692:	eeb0 8a47 	vmov.f32	s16, s14
 800d696:	eef0 8a67 	vmov.f32	s17, s15
 800d69a:	4682      	mov	sl, r0
 800d69c:	f7f2 fdf4 	bl	8000288 <__aeabi_dsub>
 800d6a0:	4652      	mov	r2, sl
 800d6a2:	4606      	mov	r6, r0
 800d6a4:	460f      	mov	r7, r1
 800d6a6:	462b      	mov	r3, r5
 800d6a8:	ec51 0b18 	vmov	r0, r1, d8
 800d6ac:	f7f2 fdee 	bl	800028c <__adddf3>
 800d6b0:	4602      	mov	r2, r0
 800d6b2:	460b      	mov	r3, r1
 800d6b4:	2000      	movs	r0, #0
 800d6b6:	49bd      	ldr	r1, [pc, #756]	; (800d9ac <__ieee754_pow+0x754>)
 800d6b8:	f7f3 f8c8 	bl	800084c <__aeabi_ddiv>
 800d6bc:	ec41 0b19 	vmov	d9, r0, r1
 800d6c0:	4602      	mov	r2, r0
 800d6c2:	460b      	mov	r3, r1
 800d6c4:	4630      	mov	r0, r6
 800d6c6:	4639      	mov	r1, r7
 800d6c8:	f7f2 ff96 	bl	80005f8 <__aeabi_dmul>
 800d6cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d6d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d6d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d6d8:	2300      	movs	r3, #0
 800d6da:	9304      	str	r3, [sp, #16]
 800d6dc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d6e0:	46ab      	mov	fp, r5
 800d6e2:	106d      	asrs	r5, r5, #1
 800d6e4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d6e8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d6ec:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	4640      	mov	r0, r8
 800d6f4:	4649      	mov	r1, r9
 800d6f6:	4614      	mov	r4, r2
 800d6f8:	461d      	mov	r5, r3
 800d6fa:	f7f2 ff7d 	bl	80005f8 <__aeabi_dmul>
 800d6fe:	4602      	mov	r2, r0
 800d700:	460b      	mov	r3, r1
 800d702:	4630      	mov	r0, r6
 800d704:	4639      	mov	r1, r7
 800d706:	f7f2 fdbf 	bl	8000288 <__aeabi_dsub>
 800d70a:	ec53 2b18 	vmov	r2, r3, d8
 800d70e:	4606      	mov	r6, r0
 800d710:	460f      	mov	r7, r1
 800d712:	4620      	mov	r0, r4
 800d714:	4629      	mov	r1, r5
 800d716:	f7f2 fdb7 	bl	8000288 <__aeabi_dsub>
 800d71a:	4602      	mov	r2, r0
 800d71c:	460b      	mov	r3, r1
 800d71e:	4650      	mov	r0, sl
 800d720:	4659      	mov	r1, fp
 800d722:	f7f2 fdb1 	bl	8000288 <__aeabi_dsub>
 800d726:	4642      	mov	r2, r8
 800d728:	464b      	mov	r3, r9
 800d72a:	f7f2 ff65 	bl	80005f8 <__aeabi_dmul>
 800d72e:	4602      	mov	r2, r0
 800d730:	460b      	mov	r3, r1
 800d732:	4630      	mov	r0, r6
 800d734:	4639      	mov	r1, r7
 800d736:	f7f2 fda7 	bl	8000288 <__aeabi_dsub>
 800d73a:	ec53 2b19 	vmov	r2, r3, d9
 800d73e:	f7f2 ff5b 	bl	80005f8 <__aeabi_dmul>
 800d742:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d746:	ec41 0b18 	vmov	d8, r0, r1
 800d74a:	4610      	mov	r0, r2
 800d74c:	4619      	mov	r1, r3
 800d74e:	f7f2 ff53 	bl	80005f8 <__aeabi_dmul>
 800d752:	a37d      	add	r3, pc, #500	; (adr r3, 800d948 <__ieee754_pow+0x6f0>)
 800d754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d758:	4604      	mov	r4, r0
 800d75a:	460d      	mov	r5, r1
 800d75c:	f7f2 ff4c 	bl	80005f8 <__aeabi_dmul>
 800d760:	a37b      	add	r3, pc, #492	; (adr r3, 800d950 <__ieee754_pow+0x6f8>)
 800d762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d766:	f7f2 fd91 	bl	800028c <__adddf3>
 800d76a:	4622      	mov	r2, r4
 800d76c:	462b      	mov	r3, r5
 800d76e:	f7f2 ff43 	bl	80005f8 <__aeabi_dmul>
 800d772:	a379      	add	r3, pc, #484	; (adr r3, 800d958 <__ieee754_pow+0x700>)
 800d774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d778:	f7f2 fd88 	bl	800028c <__adddf3>
 800d77c:	4622      	mov	r2, r4
 800d77e:	462b      	mov	r3, r5
 800d780:	f7f2 ff3a 	bl	80005f8 <__aeabi_dmul>
 800d784:	a376      	add	r3, pc, #472	; (adr r3, 800d960 <__ieee754_pow+0x708>)
 800d786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78a:	f7f2 fd7f 	bl	800028c <__adddf3>
 800d78e:	4622      	mov	r2, r4
 800d790:	462b      	mov	r3, r5
 800d792:	f7f2 ff31 	bl	80005f8 <__aeabi_dmul>
 800d796:	a374      	add	r3, pc, #464	; (adr r3, 800d968 <__ieee754_pow+0x710>)
 800d798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d79c:	f7f2 fd76 	bl	800028c <__adddf3>
 800d7a0:	4622      	mov	r2, r4
 800d7a2:	462b      	mov	r3, r5
 800d7a4:	f7f2 ff28 	bl	80005f8 <__aeabi_dmul>
 800d7a8:	a371      	add	r3, pc, #452	; (adr r3, 800d970 <__ieee754_pow+0x718>)
 800d7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ae:	f7f2 fd6d 	bl	800028c <__adddf3>
 800d7b2:	4622      	mov	r2, r4
 800d7b4:	4606      	mov	r6, r0
 800d7b6:	460f      	mov	r7, r1
 800d7b8:	462b      	mov	r3, r5
 800d7ba:	4620      	mov	r0, r4
 800d7bc:	4629      	mov	r1, r5
 800d7be:	f7f2 ff1b 	bl	80005f8 <__aeabi_dmul>
 800d7c2:	4602      	mov	r2, r0
 800d7c4:	460b      	mov	r3, r1
 800d7c6:	4630      	mov	r0, r6
 800d7c8:	4639      	mov	r1, r7
 800d7ca:	f7f2 ff15 	bl	80005f8 <__aeabi_dmul>
 800d7ce:	4642      	mov	r2, r8
 800d7d0:	4604      	mov	r4, r0
 800d7d2:	460d      	mov	r5, r1
 800d7d4:	464b      	mov	r3, r9
 800d7d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d7da:	f7f2 fd57 	bl	800028c <__adddf3>
 800d7de:	ec53 2b18 	vmov	r2, r3, d8
 800d7e2:	f7f2 ff09 	bl	80005f8 <__aeabi_dmul>
 800d7e6:	4622      	mov	r2, r4
 800d7e8:	462b      	mov	r3, r5
 800d7ea:	f7f2 fd4f 	bl	800028c <__adddf3>
 800d7ee:	4642      	mov	r2, r8
 800d7f0:	4682      	mov	sl, r0
 800d7f2:	468b      	mov	fp, r1
 800d7f4:	464b      	mov	r3, r9
 800d7f6:	4640      	mov	r0, r8
 800d7f8:	4649      	mov	r1, r9
 800d7fa:	f7f2 fefd 	bl	80005f8 <__aeabi_dmul>
 800d7fe:	4b6c      	ldr	r3, [pc, #432]	; (800d9b0 <__ieee754_pow+0x758>)
 800d800:	2200      	movs	r2, #0
 800d802:	4606      	mov	r6, r0
 800d804:	460f      	mov	r7, r1
 800d806:	f7f2 fd41 	bl	800028c <__adddf3>
 800d80a:	4652      	mov	r2, sl
 800d80c:	465b      	mov	r3, fp
 800d80e:	f7f2 fd3d 	bl	800028c <__adddf3>
 800d812:	9c04      	ldr	r4, [sp, #16]
 800d814:	460d      	mov	r5, r1
 800d816:	4622      	mov	r2, r4
 800d818:	460b      	mov	r3, r1
 800d81a:	4640      	mov	r0, r8
 800d81c:	4649      	mov	r1, r9
 800d81e:	f7f2 feeb 	bl	80005f8 <__aeabi_dmul>
 800d822:	4b63      	ldr	r3, [pc, #396]	; (800d9b0 <__ieee754_pow+0x758>)
 800d824:	4680      	mov	r8, r0
 800d826:	4689      	mov	r9, r1
 800d828:	2200      	movs	r2, #0
 800d82a:	4620      	mov	r0, r4
 800d82c:	4629      	mov	r1, r5
 800d82e:	f7f2 fd2b 	bl	8000288 <__aeabi_dsub>
 800d832:	4632      	mov	r2, r6
 800d834:	463b      	mov	r3, r7
 800d836:	f7f2 fd27 	bl	8000288 <__aeabi_dsub>
 800d83a:	4602      	mov	r2, r0
 800d83c:	460b      	mov	r3, r1
 800d83e:	4650      	mov	r0, sl
 800d840:	4659      	mov	r1, fp
 800d842:	f7f2 fd21 	bl	8000288 <__aeabi_dsub>
 800d846:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d84a:	f7f2 fed5 	bl	80005f8 <__aeabi_dmul>
 800d84e:	4622      	mov	r2, r4
 800d850:	4606      	mov	r6, r0
 800d852:	460f      	mov	r7, r1
 800d854:	462b      	mov	r3, r5
 800d856:	ec51 0b18 	vmov	r0, r1, d8
 800d85a:	f7f2 fecd 	bl	80005f8 <__aeabi_dmul>
 800d85e:	4602      	mov	r2, r0
 800d860:	460b      	mov	r3, r1
 800d862:	4630      	mov	r0, r6
 800d864:	4639      	mov	r1, r7
 800d866:	f7f2 fd11 	bl	800028c <__adddf3>
 800d86a:	4606      	mov	r6, r0
 800d86c:	460f      	mov	r7, r1
 800d86e:	4602      	mov	r2, r0
 800d870:	460b      	mov	r3, r1
 800d872:	4640      	mov	r0, r8
 800d874:	4649      	mov	r1, r9
 800d876:	f7f2 fd09 	bl	800028c <__adddf3>
 800d87a:	9c04      	ldr	r4, [sp, #16]
 800d87c:	a33e      	add	r3, pc, #248	; (adr r3, 800d978 <__ieee754_pow+0x720>)
 800d87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d882:	4620      	mov	r0, r4
 800d884:	460d      	mov	r5, r1
 800d886:	f7f2 feb7 	bl	80005f8 <__aeabi_dmul>
 800d88a:	4642      	mov	r2, r8
 800d88c:	ec41 0b18 	vmov	d8, r0, r1
 800d890:	464b      	mov	r3, r9
 800d892:	4620      	mov	r0, r4
 800d894:	4629      	mov	r1, r5
 800d896:	f7f2 fcf7 	bl	8000288 <__aeabi_dsub>
 800d89a:	4602      	mov	r2, r0
 800d89c:	460b      	mov	r3, r1
 800d89e:	4630      	mov	r0, r6
 800d8a0:	4639      	mov	r1, r7
 800d8a2:	f7f2 fcf1 	bl	8000288 <__aeabi_dsub>
 800d8a6:	a336      	add	r3, pc, #216	; (adr r3, 800d980 <__ieee754_pow+0x728>)
 800d8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ac:	f7f2 fea4 	bl	80005f8 <__aeabi_dmul>
 800d8b0:	a335      	add	r3, pc, #212	; (adr r3, 800d988 <__ieee754_pow+0x730>)
 800d8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b6:	4606      	mov	r6, r0
 800d8b8:	460f      	mov	r7, r1
 800d8ba:	4620      	mov	r0, r4
 800d8bc:	4629      	mov	r1, r5
 800d8be:	f7f2 fe9b 	bl	80005f8 <__aeabi_dmul>
 800d8c2:	4602      	mov	r2, r0
 800d8c4:	460b      	mov	r3, r1
 800d8c6:	4630      	mov	r0, r6
 800d8c8:	4639      	mov	r1, r7
 800d8ca:	f7f2 fcdf 	bl	800028c <__adddf3>
 800d8ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d8d0:	4b38      	ldr	r3, [pc, #224]	; (800d9b4 <__ieee754_pow+0x75c>)
 800d8d2:	4413      	add	r3, r2
 800d8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d8:	f7f2 fcd8 	bl	800028c <__adddf3>
 800d8dc:	4682      	mov	sl, r0
 800d8de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8e0:	468b      	mov	fp, r1
 800d8e2:	f7f2 fe1f 	bl	8000524 <__aeabi_i2d>
 800d8e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d8e8:	4b33      	ldr	r3, [pc, #204]	; (800d9b8 <__ieee754_pow+0x760>)
 800d8ea:	4413      	add	r3, r2
 800d8ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d8f0:	4606      	mov	r6, r0
 800d8f2:	460f      	mov	r7, r1
 800d8f4:	4652      	mov	r2, sl
 800d8f6:	465b      	mov	r3, fp
 800d8f8:	ec51 0b18 	vmov	r0, r1, d8
 800d8fc:	f7f2 fcc6 	bl	800028c <__adddf3>
 800d900:	4642      	mov	r2, r8
 800d902:	464b      	mov	r3, r9
 800d904:	f7f2 fcc2 	bl	800028c <__adddf3>
 800d908:	4632      	mov	r2, r6
 800d90a:	463b      	mov	r3, r7
 800d90c:	f7f2 fcbe 	bl	800028c <__adddf3>
 800d910:	9c04      	ldr	r4, [sp, #16]
 800d912:	4632      	mov	r2, r6
 800d914:	463b      	mov	r3, r7
 800d916:	4620      	mov	r0, r4
 800d918:	460d      	mov	r5, r1
 800d91a:	f7f2 fcb5 	bl	8000288 <__aeabi_dsub>
 800d91e:	4642      	mov	r2, r8
 800d920:	464b      	mov	r3, r9
 800d922:	f7f2 fcb1 	bl	8000288 <__aeabi_dsub>
 800d926:	ec53 2b18 	vmov	r2, r3, d8
 800d92a:	f7f2 fcad 	bl	8000288 <__aeabi_dsub>
 800d92e:	4602      	mov	r2, r0
 800d930:	460b      	mov	r3, r1
 800d932:	4650      	mov	r0, sl
 800d934:	4659      	mov	r1, fp
 800d936:	e606      	b.n	800d546 <__ieee754_pow+0x2ee>
 800d938:	2401      	movs	r4, #1
 800d93a:	e6a0      	b.n	800d67e <__ieee754_pow+0x426>
 800d93c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800d990 <__ieee754_pow+0x738>
 800d940:	e60d      	b.n	800d55e <__ieee754_pow+0x306>
 800d942:	bf00      	nop
 800d944:	f3af 8000 	nop.w
 800d948:	4a454eef 	.word	0x4a454eef
 800d94c:	3fca7e28 	.word	0x3fca7e28
 800d950:	93c9db65 	.word	0x93c9db65
 800d954:	3fcd864a 	.word	0x3fcd864a
 800d958:	a91d4101 	.word	0xa91d4101
 800d95c:	3fd17460 	.word	0x3fd17460
 800d960:	518f264d 	.word	0x518f264d
 800d964:	3fd55555 	.word	0x3fd55555
 800d968:	db6fabff 	.word	0xdb6fabff
 800d96c:	3fdb6db6 	.word	0x3fdb6db6
 800d970:	33333303 	.word	0x33333303
 800d974:	3fe33333 	.word	0x3fe33333
 800d978:	e0000000 	.word	0xe0000000
 800d97c:	3feec709 	.word	0x3feec709
 800d980:	dc3a03fd 	.word	0xdc3a03fd
 800d984:	3feec709 	.word	0x3feec709
 800d988:	145b01f5 	.word	0x145b01f5
 800d98c:	be3e2fe0 	.word	0xbe3e2fe0
 800d990:	00000000 	.word	0x00000000
 800d994:	3ff00000 	.word	0x3ff00000
 800d998:	7ff00000 	.word	0x7ff00000
 800d99c:	43400000 	.word	0x43400000
 800d9a0:	0003988e 	.word	0x0003988e
 800d9a4:	000bb679 	.word	0x000bb679
 800d9a8:	0800f490 	.word	0x0800f490
 800d9ac:	3ff00000 	.word	0x3ff00000
 800d9b0:	40080000 	.word	0x40080000
 800d9b4:	0800f4b0 	.word	0x0800f4b0
 800d9b8:	0800f4a0 	.word	0x0800f4a0
 800d9bc:	a3b5      	add	r3, pc, #724	; (adr r3, 800dc94 <__ieee754_pow+0xa3c>)
 800d9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c2:	4640      	mov	r0, r8
 800d9c4:	4649      	mov	r1, r9
 800d9c6:	f7f2 fc61 	bl	800028c <__adddf3>
 800d9ca:	4622      	mov	r2, r4
 800d9cc:	ec41 0b1a 	vmov	d10, r0, r1
 800d9d0:	462b      	mov	r3, r5
 800d9d2:	4630      	mov	r0, r6
 800d9d4:	4639      	mov	r1, r7
 800d9d6:	f7f2 fc57 	bl	8000288 <__aeabi_dsub>
 800d9da:	4602      	mov	r2, r0
 800d9dc:	460b      	mov	r3, r1
 800d9de:	ec51 0b1a 	vmov	r0, r1, d10
 800d9e2:	f7f3 f899 	bl	8000b18 <__aeabi_dcmpgt>
 800d9e6:	2800      	cmp	r0, #0
 800d9e8:	f47f adf8 	bne.w	800d5dc <__ieee754_pow+0x384>
 800d9ec:	4aa4      	ldr	r2, [pc, #656]	; (800dc80 <__ieee754_pow+0xa28>)
 800d9ee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	f340 810b 	ble.w	800dc0e <__ieee754_pow+0x9b6>
 800d9f8:	151b      	asrs	r3, r3, #20
 800d9fa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d9fe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800da02:	fa4a f303 	asr.w	r3, sl, r3
 800da06:	445b      	add	r3, fp
 800da08:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800da0c:	4e9d      	ldr	r6, [pc, #628]	; (800dc84 <__ieee754_pow+0xa2c>)
 800da0e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800da12:	4116      	asrs	r6, r2
 800da14:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800da18:	2000      	movs	r0, #0
 800da1a:	ea23 0106 	bic.w	r1, r3, r6
 800da1e:	f1c2 0214 	rsb	r2, r2, #20
 800da22:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800da26:	fa4a fa02 	asr.w	sl, sl, r2
 800da2a:	f1bb 0f00 	cmp.w	fp, #0
 800da2e:	4602      	mov	r2, r0
 800da30:	460b      	mov	r3, r1
 800da32:	4620      	mov	r0, r4
 800da34:	4629      	mov	r1, r5
 800da36:	bfb8      	it	lt
 800da38:	f1ca 0a00 	rsblt	sl, sl, #0
 800da3c:	f7f2 fc24 	bl	8000288 <__aeabi_dsub>
 800da40:	ec41 0b19 	vmov	d9, r0, r1
 800da44:	4642      	mov	r2, r8
 800da46:	464b      	mov	r3, r9
 800da48:	ec51 0b19 	vmov	r0, r1, d9
 800da4c:	f7f2 fc1e 	bl	800028c <__adddf3>
 800da50:	2400      	movs	r4, #0
 800da52:	a379      	add	r3, pc, #484	; (adr r3, 800dc38 <__ieee754_pow+0x9e0>)
 800da54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da58:	4620      	mov	r0, r4
 800da5a:	460d      	mov	r5, r1
 800da5c:	f7f2 fdcc 	bl	80005f8 <__aeabi_dmul>
 800da60:	ec53 2b19 	vmov	r2, r3, d9
 800da64:	4606      	mov	r6, r0
 800da66:	460f      	mov	r7, r1
 800da68:	4620      	mov	r0, r4
 800da6a:	4629      	mov	r1, r5
 800da6c:	f7f2 fc0c 	bl	8000288 <__aeabi_dsub>
 800da70:	4602      	mov	r2, r0
 800da72:	460b      	mov	r3, r1
 800da74:	4640      	mov	r0, r8
 800da76:	4649      	mov	r1, r9
 800da78:	f7f2 fc06 	bl	8000288 <__aeabi_dsub>
 800da7c:	a370      	add	r3, pc, #448	; (adr r3, 800dc40 <__ieee754_pow+0x9e8>)
 800da7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da82:	f7f2 fdb9 	bl	80005f8 <__aeabi_dmul>
 800da86:	a370      	add	r3, pc, #448	; (adr r3, 800dc48 <__ieee754_pow+0x9f0>)
 800da88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da8c:	4680      	mov	r8, r0
 800da8e:	4689      	mov	r9, r1
 800da90:	4620      	mov	r0, r4
 800da92:	4629      	mov	r1, r5
 800da94:	f7f2 fdb0 	bl	80005f8 <__aeabi_dmul>
 800da98:	4602      	mov	r2, r0
 800da9a:	460b      	mov	r3, r1
 800da9c:	4640      	mov	r0, r8
 800da9e:	4649      	mov	r1, r9
 800daa0:	f7f2 fbf4 	bl	800028c <__adddf3>
 800daa4:	4604      	mov	r4, r0
 800daa6:	460d      	mov	r5, r1
 800daa8:	4602      	mov	r2, r0
 800daaa:	460b      	mov	r3, r1
 800daac:	4630      	mov	r0, r6
 800daae:	4639      	mov	r1, r7
 800dab0:	f7f2 fbec 	bl	800028c <__adddf3>
 800dab4:	4632      	mov	r2, r6
 800dab6:	463b      	mov	r3, r7
 800dab8:	4680      	mov	r8, r0
 800daba:	4689      	mov	r9, r1
 800dabc:	f7f2 fbe4 	bl	8000288 <__aeabi_dsub>
 800dac0:	4602      	mov	r2, r0
 800dac2:	460b      	mov	r3, r1
 800dac4:	4620      	mov	r0, r4
 800dac6:	4629      	mov	r1, r5
 800dac8:	f7f2 fbde 	bl	8000288 <__aeabi_dsub>
 800dacc:	4642      	mov	r2, r8
 800dace:	4606      	mov	r6, r0
 800dad0:	460f      	mov	r7, r1
 800dad2:	464b      	mov	r3, r9
 800dad4:	4640      	mov	r0, r8
 800dad6:	4649      	mov	r1, r9
 800dad8:	f7f2 fd8e 	bl	80005f8 <__aeabi_dmul>
 800dadc:	a35c      	add	r3, pc, #368	; (adr r3, 800dc50 <__ieee754_pow+0x9f8>)
 800dade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae2:	4604      	mov	r4, r0
 800dae4:	460d      	mov	r5, r1
 800dae6:	f7f2 fd87 	bl	80005f8 <__aeabi_dmul>
 800daea:	a35b      	add	r3, pc, #364	; (adr r3, 800dc58 <__ieee754_pow+0xa00>)
 800daec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf0:	f7f2 fbca 	bl	8000288 <__aeabi_dsub>
 800daf4:	4622      	mov	r2, r4
 800daf6:	462b      	mov	r3, r5
 800daf8:	f7f2 fd7e 	bl	80005f8 <__aeabi_dmul>
 800dafc:	a358      	add	r3, pc, #352	; (adr r3, 800dc60 <__ieee754_pow+0xa08>)
 800dafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db02:	f7f2 fbc3 	bl	800028c <__adddf3>
 800db06:	4622      	mov	r2, r4
 800db08:	462b      	mov	r3, r5
 800db0a:	f7f2 fd75 	bl	80005f8 <__aeabi_dmul>
 800db0e:	a356      	add	r3, pc, #344	; (adr r3, 800dc68 <__ieee754_pow+0xa10>)
 800db10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db14:	f7f2 fbb8 	bl	8000288 <__aeabi_dsub>
 800db18:	4622      	mov	r2, r4
 800db1a:	462b      	mov	r3, r5
 800db1c:	f7f2 fd6c 	bl	80005f8 <__aeabi_dmul>
 800db20:	a353      	add	r3, pc, #332	; (adr r3, 800dc70 <__ieee754_pow+0xa18>)
 800db22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db26:	f7f2 fbb1 	bl	800028c <__adddf3>
 800db2a:	4622      	mov	r2, r4
 800db2c:	462b      	mov	r3, r5
 800db2e:	f7f2 fd63 	bl	80005f8 <__aeabi_dmul>
 800db32:	4602      	mov	r2, r0
 800db34:	460b      	mov	r3, r1
 800db36:	4640      	mov	r0, r8
 800db38:	4649      	mov	r1, r9
 800db3a:	f7f2 fba5 	bl	8000288 <__aeabi_dsub>
 800db3e:	4604      	mov	r4, r0
 800db40:	460d      	mov	r5, r1
 800db42:	4602      	mov	r2, r0
 800db44:	460b      	mov	r3, r1
 800db46:	4640      	mov	r0, r8
 800db48:	4649      	mov	r1, r9
 800db4a:	f7f2 fd55 	bl	80005f8 <__aeabi_dmul>
 800db4e:	2200      	movs	r2, #0
 800db50:	ec41 0b19 	vmov	d9, r0, r1
 800db54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800db58:	4620      	mov	r0, r4
 800db5a:	4629      	mov	r1, r5
 800db5c:	f7f2 fb94 	bl	8000288 <__aeabi_dsub>
 800db60:	4602      	mov	r2, r0
 800db62:	460b      	mov	r3, r1
 800db64:	ec51 0b19 	vmov	r0, r1, d9
 800db68:	f7f2 fe70 	bl	800084c <__aeabi_ddiv>
 800db6c:	4632      	mov	r2, r6
 800db6e:	4604      	mov	r4, r0
 800db70:	460d      	mov	r5, r1
 800db72:	463b      	mov	r3, r7
 800db74:	4640      	mov	r0, r8
 800db76:	4649      	mov	r1, r9
 800db78:	f7f2 fd3e 	bl	80005f8 <__aeabi_dmul>
 800db7c:	4632      	mov	r2, r6
 800db7e:	463b      	mov	r3, r7
 800db80:	f7f2 fb84 	bl	800028c <__adddf3>
 800db84:	4602      	mov	r2, r0
 800db86:	460b      	mov	r3, r1
 800db88:	4620      	mov	r0, r4
 800db8a:	4629      	mov	r1, r5
 800db8c:	f7f2 fb7c 	bl	8000288 <__aeabi_dsub>
 800db90:	4642      	mov	r2, r8
 800db92:	464b      	mov	r3, r9
 800db94:	f7f2 fb78 	bl	8000288 <__aeabi_dsub>
 800db98:	460b      	mov	r3, r1
 800db9a:	4602      	mov	r2, r0
 800db9c:	493a      	ldr	r1, [pc, #232]	; (800dc88 <__ieee754_pow+0xa30>)
 800db9e:	2000      	movs	r0, #0
 800dba0:	f7f2 fb72 	bl	8000288 <__aeabi_dsub>
 800dba4:	e9cd 0100 	strd	r0, r1, [sp]
 800dba8:	9b01      	ldr	r3, [sp, #4]
 800dbaa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800dbae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dbb2:	da2f      	bge.n	800dc14 <__ieee754_pow+0x9bc>
 800dbb4:	4650      	mov	r0, sl
 800dbb6:	ed9d 0b00 	vldr	d0, [sp]
 800dbba:	f001 f911 	bl	800ede0 <scalbn>
 800dbbe:	ec51 0b10 	vmov	r0, r1, d0
 800dbc2:	ec53 2b18 	vmov	r2, r3, d8
 800dbc6:	f7ff bbe0 	b.w	800d38a <__ieee754_pow+0x132>
 800dbca:	4b30      	ldr	r3, [pc, #192]	; (800dc8c <__ieee754_pow+0xa34>)
 800dbcc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800dbd0:	429e      	cmp	r6, r3
 800dbd2:	f77f af0b 	ble.w	800d9ec <__ieee754_pow+0x794>
 800dbd6:	4b2e      	ldr	r3, [pc, #184]	; (800dc90 <__ieee754_pow+0xa38>)
 800dbd8:	440b      	add	r3, r1
 800dbda:	4303      	orrs	r3, r0
 800dbdc:	d00b      	beq.n	800dbf6 <__ieee754_pow+0x99e>
 800dbde:	a326      	add	r3, pc, #152	; (adr r3, 800dc78 <__ieee754_pow+0xa20>)
 800dbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe4:	ec51 0b18 	vmov	r0, r1, d8
 800dbe8:	f7f2 fd06 	bl	80005f8 <__aeabi_dmul>
 800dbec:	a322      	add	r3, pc, #136	; (adr r3, 800dc78 <__ieee754_pow+0xa20>)
 800dbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf2:	f7ff bbca 	b.w	800d38a <__ieee754_pow+0x132>
 800dbf6:	4622      	mov	r2, r4
 800dbf8:	462b      	mov	r3, r5
 800dbfa:	f7f2 fb45 	bl	8000288 <__aeabi_dsub>
 800dbfe:	4642      	mov	r2, r8
 800dc00:	464b      	mov	r3, r9
 800dc02:	f7f2 ff7f 	bl	8000b04 <__aeabi_dcmpge>
 800dc06:	2800      	cmp	r0, #0
 800dc08:	f43f aef0 	beq.w	800d9ec <__ieee754_pow+0x794>
 800dc0c:	e7e7      	b.n	800dbde <__ieee754_pow+0x986>
 800dc0e:	f04f 0a00 	mov.w	sl, #0
 800dc12:	e717      	b.n	800da44 <__ieee754_pow+0x7ec>
 800dc14:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc18:	4619      	mov	r1, r3
 800dc1a:	e7d2      	b.n	800dbc2 <__ieee754_pow+0x96a>
 800dc1c:	491a      	ldr	r1, [pc, #104]	; (800dc88 <__ieee754_pow+0xa30>)
 800dc1e:	2000      	movs	r0, #0
 800dc20:	f7ff bb9e 	b.w	800d360 <__ieee754_pow+0x108>
 800dc24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc28:	f7ff bb9a 	b.w	800d360 <__ieee754_pow+0x108>
 800dc2c:	9000      	str	r0, [sp, #0]
 800dc2e:	f7ff bb76 	b.w	800d31e <__ieee754_pow+0xc6>
 800dc32:	2100      	movs	r1, #0
 800dc34:	f7ff bb60 	b.w	800d2f8 <__ieee754_pow+0xa0>
 800dc38:	00000000 	.word	0x00000000
 800dc3c:	3fe62e43 	.word	0x3fe62e43
 800dc40:	fefa39ef 	.word	0xfefa39ef
 800dc44:	3fe62e42 	.word	0x3fe62e42
 800dc48:	0ca86c39 	.word	0x0ca86c39
 800dc4c:	be205c61 	.word	0xbe205c61
 800dc50:	72bea4d0 	.word	0x72bea4d0
 800dc54:	3e663769 	.word	0x3e663769
 800dc58:	c5d26bf1 	.word	0xc5d26bf1
 800dc5c:	3ebbbd41 	.word	0x3ebbbd41
 800dc60:	af25de2c 	.word	0xaf25de2c
 800dc64:	3f11566a 	.word	0x3f11566a
 800dc68:	16bebd93 	.word	0x16bebd93
 800dc6c:	3f66c16c 	.word	0x3f66c16c
 800dc70:	5555553e 	.word	0x5555553e
 800dc74:	3fc55555 	.word	0x3fc55555
 800dc78:	c2f8f359 	.word	0xc2f8f359
 800dc7c:	01a56e1f 	.word	0x01a56e1f
 800dc80:	3fe00000 	.word	0x3fe00000
 800dc84:	000fffff 	.word	0x000fffff
 800dc88:	3ff00000 	.word	0x3ff00000
 800dc8c:	4090cbff 	.word	0x4090cbff
 800dc90:	3f6f3400 	.word	0x3f6f3400
 800dc94:	652b82fe 	.word	0x652b82fe
 800dc98:	3c971547 	.word	0x3c971547
 800dc9c:	00000000 	.word	0x00000000

0800dca0 <__ieee754_rem_pio2>:
 800dca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dca4:	ed2d 8b02 	vpush	{d8}
 800dca8:	ec55 4b10 	vmov	r4, r5, d0
 800dcac:	4bca      	ldr	r3, [pc, #808]	; (800dfd8 <__ieee754_rem_pio2+0x338>)
 800dcae:	b08b      	sub	sp, #44	; 0x2c
 800dcb0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800dcb4:	4598      	cmp	r8, r3
 800dcb6:	4682      	mov	sl, r0
 800dcb8:	9502      	str	r5, [sp, #8]
 800dcba:	dc08      	bgt.n	800dcce <__ieee754_rem_pio2+0x2e>
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	ed80 0b00 	vstr	d0, [r0]
 800dcc4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800dcc8:	f04f 0b00 	mov.w	fp, #0
 800dccc:	e028      	b.n	800dd20 <__ieee754_rem_pio2+0x80>
 800dcce:	4bc3      	ldr	r3, [pc, #780]	; (800dfdc <__ieee754_rem_pio2+0x33c>)
 800dcd0:	4598      	cmp	r8, r3
 800dcd2:	dc78      	bgt.n	800ddc6 <__ieee754_rem_pio2+0x126>
 800dcd4:	9b02      	ldr	r3, [sp, #8]
 800dcd6:	4ec2      	ldr	r6, [pc, #776]	; (800dfe0 <__ieee754_rem_pio2+0x340>)
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	ee10 0a10 	vmov	r0, s0
 800dcde:	a3b0      	add	r3, pc, #704	; (adr r3, 800dfa0 <__ieee754_rem_pio2+0x300>)
 800dce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce4:	4629      	mov	r1, r5
 800dce6:	dd39      	ble.n	800dd5c <__ieee754_rem_pio2+0xbc>
 800dce8:	f7f2 face 	bl	8000288 <__aeabi_dsub>
 800dcec:	45b0      	cmp	r8, r6
 800dcee:	4604      	mov	r4, r0
 800dcf0:	460d      	mov	r5, r1
 800dcf2:	d01b      	beq.n	800dd2c <__ieee754_rem_pio2+0x8c>
 800dcf4:	a3ac      	add	r3, pc, #688	; (adr r3, 800dfa8 <__ieee754_rem_pio2+0x308>)
 800dcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcfa:	f7f2 fac5 	bl	8000288 <__aeabi_dsub>
 800dcfe:	4602      	mov	r2, r0
 800dd00:	460b      	mov	r3, r1
 800dd02:	e9ca 2300 	strd	r2, r3, [sl]
 800dd06:	4620      	mov	r0, r4
 800dd08:	4629      	mov	r1, r5
 800dd0a:	f7f2 fabd 	bl	8000288 <__aeabi_dsub>
 800dd0e:	a3a6      	add	r3, pc, #664	; (adr r3, 800dfa8 <__ieee754_rem_pio2+0x308>)
 800dd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd14:	f7f2 fab8 	bl	8000288 <__aeabi_dsub>
 800dd18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dd1c:	f04f 0b01 	mov.w	fp, #1
 800dd20:	4658      	mov	r0, fp
 800dd22:	b00b      	add	sp, #44	; 0x2c
 800dd24:	ecbd 8b02 	vpop	{d8}
 800dd28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd2c:	a3a0      	add	r3, pc, #640	; (adr r3, 800dfb0 <__ieee754_rem_pio2+0x310>)
 800dd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd32:	f7f2 faa9 	bl	8000288 <__aeabi_dsub>
 800dd36:	a3a0      	add	r3, pc, #640	; (adr r3, 800dfb8 <__ieee754_rem_pio2+0x318>)
 800dd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd3c:	4604      	mov	r4, r0
 800dd3e:	460d      	mov	r5, r1
 800dd40:	f7f2 faa2 	bl	8000288 <__aeabi_dsub>
 800dd44:	4602      	mov	r2, r0
 800dd46:	460b      	mov	r3, r1
 800dd48:	e9ca 2300 	strd	r2, r3, [sl]
 800dd4c:	4620      	mov	r0, r4
 800dd4e:	4629      	mov	r1, r5
 800dd50:	f7f2 fa9a 	bl	8000288 <__aeabi_dsub>
 800dd54:	a398      	add	r3, pc, #608	; (adr r3, 800dfb8 <__ieee754_rem_pio2+0x318>)
 800dd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5a:	e7db      	b.n	800dd14 <__ieee754_rem_pio2+0x74>
 800dd5c:	f7f2 fa96 	bl	800028c <__adddf3>
 800dd60:	45b0      	cmp	r8, r6
 800dd62:	4604      	mov	r4, r0
 800dd64:	460d      	mov	r5, r1
 800dd66:	d016      	beq.n	800dd96 <__ieee754_rem_pio2+0xf6>
 800dd68:	a38f      	add	r3, pc, #572	; (adr r3, 800dfa8 <__ieee754_rem_pio2+0x308>)
 800dd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd6e:	f7f2 fa8d 	bl	800028c <__adddf3>
 800dd72:	4602      	mov	r2, r0
 800dd74:	460b      	mov	r3, r1
 800dd76:	e9ca 2300 	strd	r2, r3, [sl]
 800dd7a:	4620      	mov	r0, r4
 800dd7c:	4629      	mov	r1, r5
 800dd7e:	f7f2 fa83 	bl	8000288 <__aeabi_dsub>
 800dd82:	a389      	add	r3, pc, #548	; (adr r3, 800dfa8 <__ieee754_rem_pio2+0x308>)
 800dd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd88:	f7f2 fa80 	bl	800028c <__adddf3>
 800dd8c:	f04f 3bff 	mov.w	fp, #4294967295
 800dd90:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dd94:	e7c4      	b.n	800dd20 <__ieee754_rem_pio2+0x80>
 800dd96:	a386      	add	r3, pc, #536	; (adr r3, 800dfb0 <__ieee754_rem_pio2+0x310>)
 800dd98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd9c:	f7f2 fa76 	bl	800028c <__adddf3>
 800dda0:	a385      	add	r3, pc, #532	; (adr r3, 800dfb8 <__ieee754_rem_pio2+0x318>)
 800dda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda6:	4604      	mov	r4, r0
 800dda8:	460d      	mov	r5, r1
 800ddaa:	f7f2 fa6f 	bl	800028c <__adddf3>
 800ddae:	4602      	mov	r2, r0
 800ddb0:	460b      	mov	r3, r1
 800ddb2:	e9ca 2300 	strd	r2, r3, [sl]
 800ddb6:	4620      	mov	r0, r4
 800ddb8:	4629      	mov	r1, r5
 800ddba:	f7f2 fa65 	bl	8000288 <__aeabi_dsub>
 800ddbe:	a37e      	add	r3, pc, #504	; (adr r3, 800dfb8 <__ieee754_rem_pio2+0x318>)
 800ddc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddc4:	e7e0      	b.n	800dd88 <__ieee754_rem_pio2+0xe8>
 800ddc6:	4b87      	ldr	r3, [pc, #540]	; (800dfe4 <__ieee754_rem_pio2+0x344>)
 800ddc8:	4598      	cmp	r8, r3
 800ddca:	f300 80d9 	bgt.w	800df80 <__ieee754_rem_pio2+0x2e0>
 800ddce:	f7ff f8ff 	bl	800cfd0 <fabs>
 800ddd2:	ec55 4b10 	vmov	r4, r5, d0
 800ddd6:	ee10 0a10 	vmov	r0, s0
 800ddda:	a379      	add	r3, pc, #484	; (adr r3, 800dfc0 <__ieee754_rem_pio2+0x320>)
 800dddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde0:	4629      	mov	r1, r5
 800dde2:	f7f2 fc09 	bl	80005f8 <__aeabi_dmul>
 800dde6:	4b80      	ldr	r3, [pc, #512]	; (800dfe8 <__ieee754_rem_pio2+0x348>)
 800dde8:	2200      	movs	r2, #0
 800ddea:	f7f2 fa4f 	bl	800028c <__adddf3>
 800ddee:	f7f2 feb3 	bl	8000b58 <__aeabi_d2iz>
 800ddf2:	4683      	mov	fp, r0
 800ddf4:	f7f2 fb96 	bl	8000524 <__aeabi_i2d>
 800ddf8:	4602      	mov	r2, r0
 800ddfa:	460b      	mov	r3, r1
 800ddfc:	ec43 2b18 	vmov	d8, r2, r3
 800de00:	a367      	add	r3, pc, #412	; (adr r3, 800dfa0 <__ieee754_rem_pio2+0x300>)
 800de02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de06:	f7f2 fbf7 	bl	80005f8 <__aeabi_dmul>
 800de0a:	4602      	mov	r2, r0
 800de0c:	460b      	mov	r3, r1
 800de0e:	4620      	mov	r0, r4
 800de10:	4629      	mov	r1, r5
 800de12:	f7f2 fa39 	bl	8000288 <__aeabi_dsub>
 800de16:	a364      	add	r3, pc, #400	; (adr r3, 800dfa8 <__ieee754_rem_pio2+0x308>)
 800de18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de1c:	4606      	mov	r6, r0
 800de1e:	460f      	mov	r7, r1
 800de20:	ec51 0b18 	vmov	r0, r1, d8
 800de24:	f7f2 fbe8 	bl	80005f8 <__aeabi_dmul>
 800de28:	f1bb 0f1f 	cmp.w	fp, #31
 800de2c:	4604      	mov	r4, r0
 800de2e:	460d      	mov	r5, r1
 800de30:	dc0d      	bgt.n	800de4e <__ieee754_rem_pio2+0x1ae>
 800de32:	4b6e      	ldr	r3, [pc, #440]	; (800dfec <__ieee754_rem_pio2+0x34c>)
 800de34:	f10b 32ff 	add.w	r2, fp, #4294967295
 800de38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de3c:	4543      	cmp	r3, r8
 800de3e:	d006      	beq.n	800de4e <__ieee754_rem_pio2+0x1ae>
 800de40:	4622      	mov	r2, r4
 800de42:	462b      	mov	r3, r5
 800de44:	4630      	mov	r0, r6
 800de46:	4639      	mov	r1, r7
 800de48:	f7f2 fa1e 	bl	8000288 <__aeabi_dsub>
 800de4c:	e00f      	b.n	800de6e <__ieee754_rem_pio2+0x1ce>
 800de4e:	462b      	mov	r3, r5
 800de50:	4622      	mov	r2, r4
 800de52:	4630      	mov	r0, r6
 800de54:	4639      	mov	r1, r7
 800de56:	f7f2 fa17 	bl	8000288 <__aeabi_dsub>
 800de5a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800de5e:	9303      	str	r3, [sp, #12]
 800de60:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800de64:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800de68:	f1b8 0f10 	cmp.w	r8, #16
 800de6c:	dc02      	bgt.n	800de74 <__ieee754_rem_pio2+0x1d4>
 800de6e:	e9ca 0100 	strd	r0, r1, [sl]
 800de72:	e039      	b.n	800dee8 <__ieee754_rem_pio2+0x248>
 800de74:	a34e      	add	r3, pc, #312	; (adr r3, 800dfb0 <__ieee754_rem_pio2+0x310>)
 800de76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de7a:	ec51 0b18 	vmov	r0, r1, d8
 800de7e:	f7f2 fbbb 	bl	80005f8 <__aeabi_dmul>
 800de82:	4604      	mov	r4, r0
 800de84:	460d      	mov	r5, r1
 800de86:	4602      	mov	r2, r0
 800de88:	460b      	mov	r3, r1
 800de8a:	4630      	mov	r0, r6
 800de8c:	4639      	mov	r1, r7
 800de8e:	f7f2 f9fb 	bl	8000288 <__aeabi_dsub>
 800de92:	4602      	mov	r2, r0
 800de94:	460b      	mov	r3, r1
 800de96:	4680      	mov	r8, r0
 800de98:	4689      	mov	r9, r1
 800de9a:	4630      	mov	r0, r6
 800de9c:	4639      	mov	r1, r7
 800de9e:	f7f2 f9f3 	bl	8000288 <__aeabi_dsub>
 800dea2:	4622      	mov	r2, r4
 800dea4:	462b      	mov	r3, r5
 800dea6:	f7f2 f9ef 	bl	8000288 <__aeabi_dsub>
 800deaa:	a343      	add	r3, pc, #268	; (adr r3, 800dfb8 <__ieee754_rem_pio2+0x318>)
 800deac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deb0:	4604      	mov	r4, r0
 800deb2:	460d      	mov	r5, r1
 800deb4:	ec51 0b18 	vmov	r0, r1, d8
 800deb8:	f7f2 fb9e 	bl	80005f8 <__aeabi_dmul>
 800debc:	4622      	mov	r2, r4
 800debe:	462b      	mov	r3, r5
 800dec0:	f7f2 f9e2 	bl	8000288 <__aeabi_dsub>
 800dec4:	4602      	mov	r2, r0
 800dec6:	460b      	mov	r3, r1
 800dec8:	4604      	mov	r4, r0
 800deca:	460d      	mov	r5, r1
 800decc:	4640      	mov	r0, r8
 800dece:	4649      	mov	r1, r9
 800ded0:	f7f2 f9da 	bl	8000288 <__aeabi_dsub>
 800ded4:	9a03      	ldr	r2, [sp, #12]
 800ded6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800deda:	1ad3      	subs	r3, r2, r3
 800dedc:	2b31      	cmp	r3, #49	; 0x31
 800dede:	dc24      	bgt.n	800df2a <__ieee754_rem_pio2+0x28a>
 800dee0:	e9ca 0100 	strd	r0, r1, [sl]
 800dee4:	4646      	mov	r6, r8
 800dee6:	464f      	mov	r7, r9
 800dee8:	e9da 8900 	ldrd	r8, r9, [sl]
 800deec:	4630      	mov	r0, r6
 800deee:	4642      	mov	r2, r8
 800def0:	464b      	mov	r3, r9
 800def2:	4639      	mov	r1, r7
 800def4:	f7f2 f9c8 	bl	8000288 <__aeabi_dsub>
 800def8:	462b      	mov	r3, r5
 800defa:	4622      	mov	r2, r4
 800defc:	f7f2 f9c4 	bl	8000288 <__aeabi_dsub>
 800df00:	9b02      	ldr	r3, [sp, #8]
 800df02:	2b00      	cmp	r3, #0
 800df04:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800df08:	f6bf af0a 	bge.w	800dd20 <__ieee754_rem_pio2+0x80>
 800df0c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800df10:	f8ca 3004 	str.w	r3, [sl, #4]
 800df14:	f8ca 8000 	str.w	r8, [sl]
 800df18:	f8ca 0008 	str.w	r0, [sl, #8]
 800df1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800df20:	f8ca 300c 	str.w	r3, [sl, #12]
 800df24:	f1cb 0b00 	rsb	fp, fp, #0
 800df28:	e6fa      	b.n	800dd20 <__ieee754_rem_pio2+0x80>
 800df2a:	a327      	add	r3, pc, #156	; (adr r3, 800dfc8 <__ieee754_rem_pio2+0x328>)
 800df2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df30:	ec51 0b18 	vmov	r0, r1, d8
 800df34:	f7f2 fb60 	bl	80005f8 <__aeabi_dmul>
 800df38:	4604      	mov	r4, r0
 800df3a:	460d      	mov	r5, r1
 800df3c:	4602      	mov	r2, r0
 800df3e:	460b      	mov	r3, r1
 800df40:	4640      	mov	r0, r8
 800df42:	4649      	mov	r1, r9
 800df44:	f7f2 f9a0 	bl	8000288 <__aeabi_dsub>
 800df48:	4602      	mov	r2, r0
 800df4a:	460b      	mov	r3, r1
 800df4c:	4606      	mov	r6, r0
 800df4e:	460f      	mov	r7, r1
 800df50:	4640      	mov	r0, r8
 800df52:	4649      	mov	r1, r9
 800df54:	f7f2 f998 	bl	8000288 <__aeabi_dsub>
 800df58:	4622      	mov	r2, r4
 800df5a:	462b      	mov	r3, r5
 800df5c:	f7f2 f994 	bl	8000288 <__aeabi_dsub>
 800df60:	a31b      	add	r3, pc, #108	; (adr r3, 800dfd0 <__ieee754_rem_pio2+0x330>)
 800df62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df66:	4604      	mov	r4, r0
 800df68:	460d      	mov	r5, r1
 800df6a:	ec51 0b18 	vmov	r0, r1, d8
 800df6e:	f7f2 fb43 	bl	80005f8 <__aeabi_dmul>
 800df72:	4622      	mov	r2, r4
 800df74:	462b      	mov	r3, r5
 800df76:	f7f2 f987 	bl	8000288 <__aeabi_dsub>
 800df7a:	4604      	mov	r4, r0
 800df7c:	460d      	mov	r5, r1
 800df7e:	e75f      	b.n	800de40 <__ieee754_rem_pio2+0x1a0>
 800df80:	4b1b      	ldr	r3, [pc, #108]	; (800dff0 <__ieee754_rem_pio2+0x350>)
 800df82:	4598      	cmp	r8, r3
 800df84:	dd36      	ble.n	800dff4 <__ieee754_rem_pio2+0x354>
 800df86:	ee10 2a10 	vmov	r2, s0
 800df8a:	462b      	mov	r3, r5
 800df8c:	4620      	mov	r0, r4
 800df8e:	4629      	mov	r1, r5
 800df90:	f7f2 f97a 	bl	8000288 <__aeabi_dsub>
 800df94:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800df98:	e9ca 0100 	strd	r0, r1, [sl]
 800df9c:	e694      	b.n	800dcc8 <__ieee754_rem_pio2+0x28>
 800df9e:	bf00      	nop
 800dfa0:	54400000 	.word	0x54400000
 800dfa4:	3ff921fb 	.word	0x3ff921fb
 800dfa8:	1a626331 	.word	0x1a626331
 800dfac:	3dd0b461 	.word	0x3dd0b461
 800dfb0:	1a600000 	.word	0x1a600000
 800dfb4:	3dd0b461 	.word	0x3dd0b461
 800dfb8:	2e037073 	.word	0x2e037073
 800dfbc:	3ba3198a 	.word	0x3ba3198a
 800dfc0:	6dc9c883 	.word	0x6dc9c883
 800dfc4:	3fe45f30 	.word	0x3fe45f30
 800dfc8:	2e000000 	.word	0x2e000000
 800dfcc:	3ba3198a 	.word	0x3ba3198a
 800dfd0:	252049c1 	.word	0x252049c1
 800dfd4:	397b839a 	.word	0x397b839a
 800dfd8:	3fe921fb 	.word	0x3fe921fb
 800dfdc:	4002d97b 	.word	0x4002d97b
 800dfe0:	3ff921fb 	.word	0x3ff921fb
 800dfe4:	413921fb 	.word	0x413921fb
 800dfe8:	3fe00000 	.word	0x3fe00000
 800dfec:	0800f4c0 	.word	0x0800f4c0
 800dff0:	7fefffff 	.word	0x7fefffff
 800dff4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800dff8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800dffc:	ee10 0a10 	vmov	r0, s0
 800e000:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800e004:	ee10 6a10 	vmov	r6, s0
 800e008:	460f      	mov	r7, r1
 800e00a:	f7f2 fda5 	bl	8000b58 <__aeabi_d2iz>
 800e00e:	f7f2 fa89 	bl	8000524 <__aeabi_i2d>
 800e012:	4602      	mov	r2, r0
 800e014:	460b      	mov	r3, r1
 800e016:	4630      	mov	r0, r6
 800e018:	4639      	mov	r1, r7
 800e01a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e01e:	f7f2 f933 	bl	8000288 <__aeabi_dsub>
 800e022:	4b22      	ldr	r3, [pc, #136]	; (800e0ac <__ieee754_rem_pio2+0x40c>)
 800e024:	2200      	movs	r2, #0
 800e026:	f7f2 fae7 	bl	80005f8 <__aeabi_dmul>
 800e02a:	460f      	mov	r7, r1
 800e02c:	4606      	mov	r6, r0
 800e02e:	f7f2 fd93 	bl	8000b58 <__aeabi_d2iz>
 800e032:	f7f2 fa77 	bl	8000524 <__aeabi_i2d>
 800e036:	4602      	mov	r2, r0
 800e038:	460b      	mov	r3, r1
 800e03a:	4630      	mov	r0, r6
 800e03c:	4639      	mov	r1, r7
 800e03e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e042:	f7f2 f921 	bl	8000288 <__aeabi_dsub>
 800e046:	4b19      	ldr	r3, [pc, #100]	; (800e0ac <__ieee754_rem_pio2+0x40c>)
 800e048:	2200      	movs	r2, #0
 800e04a:	f7f2 fad5 	bl	80005f8 <__aeabi_dmul>
 800e04e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e052:	ad04      	add	r5, sp, #16
 800e054:	f04f 0803 	mov.w	r8, #3
 800e058:	46a9      	mov	r9, r5
 800e05a:	2600      	movs	r6, #0
 800e05c:	2700      	movs	r7, #0
 800e05e:	4632      	mov	r2, r6
 800e060:	463b      	mov	r3, r7
 800e062:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800e066:	46c3      	mov	fp, r8
 800e068:	3d08      	subs	r5, #8
 800e06a:	f108 38ff 	add.w	r8, r8, #4294967295
 800e06e:	f7f2 fd2b 	bl	8000ac8 <__aeabi_dcmpeq>
 800e072:	2800      	cmp	r0, #0
 800e074:	d1f3      	bne.n	800e05e <__ieee754_rem_pio2+0x3be>
 800e076:	4b0e      	ldr	r3, [pc, #56]	; (800e0b0 <__ieee754_rem_pio2+0x410>)
 800e078:	9301      	str	r3, [sp, #4]
 800e07a:	2302      	movs	r3, #2
 800e07c:	9300      	str	r3, [sp, #0]
 800e07e:	4622      	mov	r2, r4
 800e080:	465b      	mov	r3, fp
 800e082:	4651      	mov	r1, sl
 800e084:	4648      	mov	r0, r9
 800e086:	f000 f993 	bl	800e3b0 <__kernel_rem_pio2>
 800e08a:	9b02      	ldr	r3, [sp, #8]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	4683      	mov	fp, r0
 800e090:	f6bf ae46 	bge.w	800dd20 <__ieee754_rem_pio2+0x80>
 800e094:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e098:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e09c:	f8ca 3004 	str.w	r3, [sl, #4]
 800e0a0:	f8da 300c 	ldr.w	r3, [sl, #12]
 800e0a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e0a8:	e73a      	b.n	800df20 <__ieee754_rem_pio2+0x280>
 800e0aa:	bf00      	nop
 800e0ac:	41700000 	.word	0x41700000
 800e0b0:	0800f540 	.word	0x0800f540

0800e0b4 <__ieee754_sqrt>:
 800e0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0b8:	ec55 4b10 	vmov	r4, r5, d0
 800e0bc:	4e56      	ldr	r6, [pc, #344]	; (800e218 <__ieee754_sqrt+0x164>)
 800e0be:	43ae      	bics	r6, r5
 800e0c0:	ee10 0a10 	vmov	r0, s0
 800e0c4:	ee10 3a10 	vmov	r3, s0
 800e0c8:	4629      	mov	r1, r5
 800e0ca:	462a      	mov	r2, r5
 800e0cc:	d110      	bne.n	800e0f0 <__ieee754_sqrt+0x3c>
 800e0ce:	ee10 2a10 	vmov	r2, s0
 800e0d2:	462b      	mov	r3, r5
 800e0d4:	f7f2 fa90 	bl	80005f8 <__aeabi_dmul>
 800e0d8:	4602      	mov	r2, r0
 800e0da:	460b      	mov	r3, r1
 800e0dc:	4620      	mov	r0, r4
 800e0de:	4629      	mov	r1, r5
 800e0e0:	f7f2 f8d4 	bl	800028c <__adddf3>
 800e0e4:	4604      	mov	r4, r0
 800e0e6:	460d      	mov	r5, r1
 800e0e8:	ec45 4b10 	vmov	d0, r4, r5
 800e0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0f0:	2d00      	cmp	r5, #0
 800e0f2:	dc10      	bgt.n	800e116 <__ieee754_sqrt+0x62>
 800e0f4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e0f8:	4330      	orrs	r0, r6
 800e0fa:	d0f5      	beq.n	800e0e8 <__ieee754_sqrt+0x34>
 800e0fc:	b15d      	cbz	r5, 800e116 <__ieee754_sqrt+0x62>
 800e0fe:	ee10 2a10 	vmov	r2, s0
 800e102:	462b      	mov	r3, r5
 800e104:	ee10 0a10 	vmov	r0, s0
 800e108:	f7f2 f8be 	bl	8000288 <__aeabi_dsub>
 800e10c:	4602      	mov	r2, r0
 800e10e:	460b      	mov	r3, r1
 800e110:	f7f2 fb9c 	bl	800084c <__aeabi_ddiv>
 800e114:	e7e6      	b.n	800e0e4 <__ieee754_sqrt+0x30>
 800e116:	1509      	asrs	r1, r1, #20
 800e118:	d076      	beq.n	800e208 <__ieee754_sqrt+0x154>
 800e11a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800e11e:	07ce      	lsls	r6, r1, #31
 800e120:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800e124:	bf5e      	ittt	pl
 800e126:	0fda      	lsrpl	r2, r3, #31
 800e128:	005b      	lslpl	r3, r3, #1
 800e12a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800e12e:	0fda      	lsrs	r2, r3, #31
 800e130:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800e134:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800e138:	2000      	movs	r0, #0
 800e13a:	106d      	asrs	r5, r5, #1
 800e13c:	005b      	lsls	r3, r3, #1
 800e13e:	f04f 0e16 	mov.w	lr, #22
 800e142:	4684      	mov	ip, r0
 800e144:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e148:	eb0c 0401 	add.w	r4, ip, r1
 800e14c:	4294      	cmp	r4, r2
 800e14e:	bfde      	ittt	le
 800e150:	1b12      	suble	r2, r2, r4
 800e152:	eb04 0c01 	addle.w	ip, r4, r1
 800e156:	1840      	addle	r0, r0, r1
 800e158:	0052      	lsls	r2, r2, #1
 800e15a:	f1be 0e01 	subs.w	lr, lr, #1
 800e15e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800e162:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e166:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e16a:	d1ed      	bne.n	800e148 <__ieee754_sqrt+0x94>
 800e16c:	4671      	mov	r1, lr
 800e16e:	2720      	movs	r7, #32
 800e170:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e174:	4562      	cmp	r2, ip
 800e176:	eb04 060e 	add.w	r6, r4, lr
 800e17a:	dc02      	bgt.n	800e182 <__ieee754_sqrt+0xce>
 800e17c:	d113      	bne.n	800e1a6 <__ieee754_sqrt+0xf2>
 800e17e:	429e      	cmp	r6, r3
 800e180:	d811      	bhi.n	800e1a6 <__ieee754_sqrt+0xf2>
 800e182:	2e00      	cmp	r6, #0
 800e184:	eb06 0e04 	add.w	lr, r6, r4
 800e188:	da43      	bge.n	800e212 <__ieee754_sqrt+0x15e>
 800e18a:	f1be 0f00 	cmp.w	lr, #0
 800e18e:	db40      	blt.n	800e212 <__ieee754_sqrt+0x15e>
 800e190:	f10c 0801 	add.w	r8, ip, #1
 800e194:	eba2 020c 	sub.w	r2, r2, ip
 800e198:	429e      	cmp	r6, r3
 800e19a:	bf88      	it	hi
 800e19c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800e1a0:	1b9b      	subs	r3, r3, r6
 800e1a2:	4421      	add	r1, r4
 800e1a4:	46c4      	mov	ip, r8
 800e1a6:	0052      	lsls	r2, r2, #1
 800e1a8:	3f01      	subs	r7, #1
 800e1aa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800e1ae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e1b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e1b6:	d1dd      	bne.n	800e174 <__ieee754_sqrt+0xc0>
 800e1b8:	4313      	orrs	r3, r2
 800e1ba:	d006      	beq.n	800e1ca <__ieee754_sqrt+0x116>
 800e1bc:	1c4c      	adds	r4, r1, #1
 800e1be:	bf13      	iteet	ne
 800e1c0:	3101      	addne	r1, #1
 800e1c2:	3001      	addeq	r0, #1
 800e1c4:	4639      	moveq	r1, r7
 800e1c6:	f021 0101 	bicne.w	r1, r1, #1
 800e1ca:	1043      	asrs	r3, r0, #1
 800e1cc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e1d0:	0849      	lsrs	r1, r1, #1
 800e1d2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e1d6:	07c2      	lsls	r2, r0, #31
 800e1d8:	bf48      	it	mi
 800e1da:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800e1de:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800e1e2:	460c      	mov	r4, r1
 800e1e4:	463d      	mov	r5, r7
 800e1e6:	e77f      	b.n	800e0e8 <__ieee754_sqrt+0x34>
 800e1e8:	0ada      	lsrs	r2, r3, #11
 800e1ea:	3815      	subs	r0, #21
 800e1ec:	055b      	lsls	r3, r3, #21
 800e1ee:	2a00      	cmp	r2, #0
 800e1f0:	d0fa      	beq.n	800e1e8 <__ieee754_sqrt+0x134>
 800e1f2:	02d7      	lsls	r7, r2, #11
 800e1f4:	d50a      	bpl.n	800e20c <__ieee754_sqrt+0x158>
 800e1f6:	f1c1 0420 	rsb	r4, r1, #32
 800e1fa:	fa23 f404 	lsr.w	r4, r3, r4
 800e1fe:	1e4d      	subs	r5, r1, #1
 800e200:	408b      	lsls	r3, r1
 800e202:	4322      	orrs	r2, r4
 800e204:	1b41      	subs	r1, r0, r5
 800e206:	e788      	b.n	800e11a <__ieee754_sqrt+0x66>
 800e208:	4608      	mov	r0, r1
 800e20a:	e7f0      	b.n	800e1ee <__ieee754_sqrt+0x13a>
 800e20c:	0052      	lsls	r2, r2, #1
 800e20e:	3101      	adds	r1, #1
 800e210:	e7ef      	b.n	800e1f2 <__ieee754_sqrt+0x13e>
 800e212:	46e0      	mov	r8, ip
 800e214:	e7be      	b.n	800e194 <__ieee754_sqrt+0xe0>
 800e216:	bf00      	nop
 800e218:	7ff00000 	.word	0x7ff00000
 800e21c:	00000000 	.word	0x00000000

0800e220 <__kernel_cos>:
 800e220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e224:	ec57 6b10 	vmov	r6, r7, d0
 800e228:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e22c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e230:	ed8d 1b00 	vstr	d1, [sp]
 800e234:	da07      	bge.n	800e246 <__kernel_cos+0x26>
 800e236:	ee10 0a10 	vmov	r0, s0
 800e23a:	4639      	mov	r1, r7
 800e23c:	f7f2 fc8c 	bl	8000b58 <__aeabi_d2iz>
 800e240:	2800      	cmp	r0, #0
 800e242:	f000 8088 	beq.w	800e356 <__kernel_cos+0x136>
 800e246:	4632      	mov	r2, r6
 800e248:	463b      	mov	r3, r7
 800e24a:	4630      	mov	r0, r6
 800e24c:	4639      	mov	r1, r7
 800e24e:	f7f2 f9d3 	bl	80005f8 <__aeabi_dmul>
 800e252:	4b51      	ldr	r3, [pc, #324]	; (800e398 <__kernel_cos+0x178>)
 800e254:	2200      	movs	r2, #0
 800e256:	4604      	mov	r4, r0
 800e258:	460d      	mov	r5, r1
 800e25a:	f7f2 f9cd 	bl	80005f8 <__aeabi_dmul>
 800e25e:	a340      	add	r3, pc, #256	; (adr r3, 800e360 <__kernel_cos+0x140>)
 800e260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e264:	4682      	mov	sl, r0
 800e266:	468b      	mov	fp, r1
 800e268:	4620      	mov	r0, r4
 800e26a:	4629      	mov	r1, r5
 800e26c:	f7f2 f9c4 	bl	80005f8 <__aeabi_dmul>
 800e270:	a33d      	add	r3, pc, #244	; (adr r3, 800e368 <__kernel_cos+0x148>)
 800e272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e276:	f7f2 f809 	bl	800028c <__adddf3>
 800e27a:	4622      	mov	r2, r4
 800e27c:	462b      	mov	r3, r5
 800e27e:	f7f2 f9bb 	bl	80005f8 <__aeabi_dmul>
 800e282:	a33b      	add	r3, pc, #236	; (adr r3, 800e370 <__kernel_cos+0x150>)
 800e284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e288:	f7f1 fffe 	bl	8000288 <__aeabi_dsub>
 800e28c:	4622      	mov	r2, r4
 800e28e:	462b      	mov	r3, r5
 800e290:	f7f2 f9b2 	bl	80005f8 <__aeabi_dmul>
 800e294:	a338      	add	r3, pc, #224	; (adr r3, 800e378 <__kernel_cos+0x158>)
 800e296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e29a:	f7f1 fff7 	bl	800028c <__adddf3>
 800e29e:	4622      	mov	r2, r4
 800e2a0:	462b      	mov	r3, r5
 800e2a2:	f7f2 f9a9 	bl	80005f8 <__aeabi_dmul>
 800e2a6:	a336      	add	r3, pc, #216	; (adr r3, 800e380 <__kernel_cos+0x160>)
 800e2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ac:	f7f1 ffec 	bl	8000288 <__aeabi_dsub>
 800e2b0:	4622      	mov	r2, r4
 800e2b2:	462b      	mov	r3, r5
 800e2b4:	f7f2 f9a0 	bl	80005f8 <__aeabi_dmul>
 800e2b8:	a333      	add	r3, pc, #204	; (adr r3, 800e388 <__kernel_cos+0x168>)
 800e2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2be:	f7f1 ffe5 	bl	800028c <__adddf3>
 800e2c2:	4622      	mov	r2, r4
 800e2c4:	462b      	mov	r3, r5
 800e2c6:	f7f2 f997 	bl	80005f8 <__aeabi_dmul>
 800e2ca:	4622      	mov	r2, r4
 800e2cc:	462b      	mov	r3, r5
 800e2ce:	f7f2 f993 	bl	80005f8 <__aeabi_dmul>
 800e2d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2d6:	4604      	mov	r4, r0
 800e2d8:	460d      	mov	r5, r1
 800e2da:	4630      	mov	r0, r6
 800e2dc:	4639      	mov	r1, r7
 800e2de:	f7f2 f98b 	bl	80005f8 <__aeabi_dmul>
 800e2e2:	460b      	mov	r3, r1
 800e2e4:	4602      	mov	r2, r0
 800e2e6:	4629      	mov	r1, r5
 800e2e8:	4620      	mov	r0, r4
 800e2ea:	f7f1 ffcd 	bl	8000288 <__aeabi_dsub>
 800e2ee:	4b2b      	ldr	r3, [pc, #172]	; (800e39c <__kernel_cos+0x17c>)
 800e2f0:	4598      	cmp	r8, r3
 800e2f2:	4606      	mov	r6, r0
 800e2f4:	460f      	mov	r7, r1
 800e2f6:	dc10      	bgt.n	800e31a <__kernel_cos+0xfa>
 800e2f8:	4602      	mov	r2, r0
 800e2fa:	460b      	mov	r3, r1
 800e2fc:	4650      	mov	r0, sl
 800e2fe:	4659      	mov	r1, fp
 800e300:	f7f1 ffc2 	bl	8000288 <__aeabi_dsub>
 800e304:	460b      	mov	r3, r1
 800e306:	4926      	ldr	r1, [pc, #152]	; (800e3a0 <__kernel_cos+0x180>)
 800e308:	4602      	mov	r2, r0
 800e30a:	2000      	movs	r0, #0
 800e30c:	f7f1 ffbc 	bl	8000288 <__aeabi_dsub>
 800e310:	ec41 0b10 	vmov	d0, r0, r1
 800e314:	b003      	add	sp, #12
 800e316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e31a:	4b22      	ldr	r3, [pc, #136]	; (800e3a4 <__kernel_cos+0x184>)
 800e31c:	4920      	ldr	r1, [pc, #128]	; (800e3a0 <__kernel_cos+0x180>)
 800e31e:	4598      	cmp	r8, r3
 800e320:	bfcc      	ite	gt
 800e322:	4d21      	ldrgt	r5, [pc, #132]	; (800e3a8 <__kernel_cos+0x188>)
 800e324:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800e328:	2400      	movs	r4, #0
 800e32a:	4622      	mov	r2, r4
 800e32c:	462b      	mov	r3, r5
 800e32e:	2000      	movs	r0, #0
 800e330:	f7f1 ffaa 	bl	8000288 <__aeabi_dsub>
 800e334:	4622      	mov	r2, r4
 800e336:	4680      	mov	r8, r0
 800e338:	4689      	mov	r9, r1
 800e33a:	462b      	mov	r3, r5
 800e33c:	4650      	mov	r0, sl
 800e33e:	4659      	mov	r1, fp
 800e340:	f7f1 ffa2 	bl	8000288 <__aeabi_dsub>
 800e344:	4632      	mov	r2, r6
 800e346:	463b      	mov	r3, r7
 800e348:	f7f1 ff9e 	bl	8000288 <__aeabi_dsub>
 800e34c:	4602      	mov	r2, r0
 800e34e:	460b      	mov	r3, r1
 800e350:	4640      	mov	r0, r8
 800e352:	4649      	mov	r1, r9
 800e354:	e7da      	b.n	800e30c <__kernel_cos+0xec>
 800e356:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e390 <__kernel_cos+0x170>
 800e35a:	e7db      	b.n	800e314 <__kernel_cos+0xf4>
 800e35c:	f3af 8000 	nop.w
 800e360:	be8838d4 	.word	0xbe8838d4
 800e364:	bda8fae9 	.word	0xbda8fae9
 800e368:	bdb4b1c4 	.word	0xbdb4b1c4
 800e36c:	3e21ee9e 	.word	0x3e21ee9e
 800e370:	809c52ad 	.word	0x809c52ad
 800e374:	3e927e4f 	.word	0x3e927e4f
 800e378:	19cb1590 	.word	0x19cb1590
 800e37c:	3efa01a0 	.word	0x3efa01a0
 800e380:	16c15177 	.word	0x16c15177
 800e384:	3f56c16c 	.word	0x3f56c16c
 800e388:	5555554c 	.word	0x5555554c
 800e38c:	3fa55555 	.word	0x3fa55555
 800e390:	00000000 	.word	0x00000000
 800e394:	3ff00000 	.word	0x3ff00000
 800e398:	3fe00000 	.word	0x3fe00000
 800e39c:	3fd33332 	.word	0x3fd33332
 800e3a0:	3ff00000 	.word	0x3ff00000
 800e3a4:	3fe90000 	.word	0x3fe90000
 800e3a8:	3fd20000 	.word	0x3fd20000
 800e3ac:	00000000 	.word	0x00000000

0800e3b0 <__kernel_rem_pio2>:
 800e3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3b4:	ed2d 8b02 	vpush	{d8}
 800e3b8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e3bc:	f112 0f14 	cmn.w	r2, #20
 800e3c0:	9308      	str	r3, [sp, #32]
 800e3c2:	9101      	str	r1, [sp, #4]
 800e3c4:	4bc6      	ldr	r3, [pc, #792]	; (800e6e0 <__kernel_rem_pio2+0x330>)
 800e3c6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e3c8:	9009      	str	r0, [sp, #36]	; 0x24
 800e3ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e3ce:	9304      	str	r3, [sp, #16]
 800e3d0:	9b08      	ldr	r3, [sp, #32]
 800e3d2:	f103 33ff 	add.w	r3, r3, #4294967295
 800e3d6:	bfa8      	it	ge
 800e3d8:	1ed4      	subge	r4, r2, #3
 800e3da:	9306      	str	r3, [sp, #24]
 800e3dc:	bfb2      	itee	lt
 800e3de:	2400      	movlt	r4, #0
 800e3e0:	2318      	movge	r3, #24
 800e3e2:	fb94 f4f3 	sdivge	r4, r4, r3
 800e3e6:	f06f 0317 	mvn.w	r3, #23
 800e3ea:	fb04 3303 	mla	r3, r4, r3, r3
 800e3ee:	eb03 0a02 	add.w	sl, r3, r2
 800e3f2:	9b04      	ldr	r3, [sp, #16]
 800e3f4:	9a06      	ldr	r2, [sp, #24]
 800e3f6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800e6d0 <__kernel_rem_pio2+0x320>
 800e3fa:	eb03 0802 	add.w	r8, r3, r2
 800e3fe:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e400:	1aa7      	subs	r7, r4, r2
 800e402:	ae20      	add	r6, sp, #128	; 0x80
 800e404:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e408:	2500      	movs	r5, #0
 800e40a:	4545      	cmp	r5, r8
 800e40c:	dd18      	ble.n	800e440 <__kernel_rem_pio2+0x90>
 800e40e:	9b08      	ldr	r3, [sp, #32]
 800e410:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800e414:	aa20      	add	r2, sp, #128	; 0x80
 800e416:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800e6d0 <__kernel_rem_pio2+0x320>
 800e41a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e41e:	f1c3 0301 	rsb	r3, r3, #1
 800e422:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e426:	9307      	str	r3, [sp, #28]
 800e428:	9b07      	ldr	r3, [sp, #28]
 800e42a:	9a04      	ldr	r2, [sp, #16]
 800e42c:	4443      	add	r3, r8
 800e42e:	429a      	cmp	r2, r3
 800e430:	db2f      	blt.n	800e492 <__kernel_rem_pio2+0xe2>
 800e432:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e436:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e43a:	462f      	mov	r7, r5
 800e43c:	2600      	movs	r6, #0
 800e43e:	e01b      	b.n	800e478 <__kernel_rem_pio2+0xc8>
 800e440:	42ef      	cmn	r7, r5
 800e442:	d407      	bmi.n	800e454 <__kernel_rem_pio2+0xa4>
 800e444:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e448:	f7f2 f86c 	bl	8000524 <__aeabi_i2d>
 800e44c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e450:	3501      	adds	r5, #1
 800e452:	e7da      	b.n	800e40a <__kernel_rem_pio2+0x5a>
 800e454:	ec51 0b18 	vmov	r0, r1, d8
 800e458:	e7f8      	b.n	800e44c <__kernel_rem_pio2+0x9c>
 800e45a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e45e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e462:	f7f2 f8c9 	bl	80005f8 <__aeabi_dmul>
 800e466:	4602      	mov	r2, r0
 800e468:	460b      	mov	r3, r1
 800e46a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e46e:	f7f1 ff0d 	bl	800028c <__adddf3>
 800e472:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e476:	3601      	adds	r6, #1
 800e478:	9b06      	ldr	r3, [sp, #24]
 800e47a:	429e      	cmp	r6, r3
 800e47c:	f1a7 0708 	sub.w	r7, r7, #8
 800e480:	ddeb      	ble.n	800e45a <__kernel_rem_pio2+0xaa>
 800e482:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e486:	3508      	adds	r5, #8
 800e488:	ecab 7b02 	vstmia	fp!, {d7}
 800e48c:	f108 0801 	add.w	r8, r8, #1
 800e490:	e7ca      	b.n	800e428 <__kernel_rem_pio2+0x78>
 800e492:	9b04      	ldr	r3, [sp, #16]
 800e494:	aa0c      	add	r2, sp, #48	; 0x30
 800e496:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e49a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e49c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e49e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e4a2:	9c04      	ldr	r4, [sp, #16]
 800e4a4:	930a      	str	r3, [sp, #40]	; 0x28
 800e4a6:	ab98      	add	r3, sp, #608	; 0x260
 800e4a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e4ac:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e4b0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800e4b4:	f8cd b008 	str.w	fp, [sp, #8]
 800e4b8:	4625      	mov	r5, r4
 800e4ba:	2d00      	cmp	r5, #0
 800e4bc:	dc78      	bgt.n	800e5b0 <__kernel_rem_pio2+0x200>
 800e4be:	ec47 6b10 	vmov	d0, r6, r7
 800e4c2:	4650      	mov	r0, sl
 800e4c4:	f000 fc8c 	bl	800ede0 <scalbn>
 800e4c8:	ec57 6b10 	vmov	r6, r7, d0
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e4d2:	ee10 0a10 	vmov	r0, s0
 800e4d6:	4639      	mov	r1, r7
 800e4d8:	f7f2 f88e 	bl	80005f8 <__aeabi_dmul>
 800e4dc:	ec41 0b10 	vmov	d0, r0, r1
 800e4e0:	f000 fb72 	bl	800ebc8 <floor>
 800e4e4:	4b7f      	ldr	r3, [pc, #508]	; (800e6e4 <__kernel_rem_pio2+0x334>)
 800e4e6:	ec51 0b10 	vmov	r0, r1, d0
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	f7f2 f884 	bl	80005f8 <__aeabi_dmul>
 800e4f0:	4602      	mov	r2, r0
 800e4f2:	460b      	mov	r3, r1
 800e4f4:	4630      	mov	r0, r6
 800e4f6:	4639      	mov	r1, r7
 800e4f8:	f7f1 fec6 	bl	8000288 <__aeabi_dsub>
 800e4fc:	460f      	mov	r7, r1
 800e4fe:	4606      	mov	r6, r0
 800e500:	f7f2 fb2a 	bl	8000b58 <__aeabi_d2iz>
 800e504:	9007      	str	r0, [sp, #28]
 800e506:	f7f2 f80d 	bl	8000524 <__aeabi_i2d>
 800e50a:	4602      	mov	r2, r0
 800e50c:	460b      	mov	r3, r1
 800e50e:	4630      	mov	r0, r6
 800e510:	4639      	mov	r1, r7
 800e512:	f7f1 feb9 	bl	8000288 <__aeabi_dsub>
 800e516:	f1ba 0f00 	cmp.w	sl, #0
 800e51a:	4606      	mov	r6, r0
 800e51c:	460f      	mov	r7, r1
 800e51e:	dd70      	ble.n	800e602 <__kernel_rem_pio2+0x252>
 800e520:	1e62      	subs	r2, r4, #1
 800e522:	ab0c      	add	r3, sp, #48	; 0x30
 800e524:	9d07      	ldr	r5, [sp, #28]
 800e526:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e52a:	f1ca 0118 	rsb	r1, sl, #24
 800e52e:	fa40 f301 	asr.w	r3, r0, r1
 800e532:	441d      	add	r5, r3
 800e534:	408b      	lsls	r3, r1
 800e536:	1ac0      	subs	r0, r0, r3
 800e538:	ab0c      	add	r3, sp, #48	; 0x30
 800e53a:	9507      	str	r5, [sp, #28]
 800e53c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e540:	f1ca 0317 	rsb	r3, sl, #23
 800e544:	fa40 f303 	asr.w	r3, r0, r3
 800e548:	9302      	str	r3, [sp, #8]
 800e54a:	9b02      	ldr	r3, [sp, #8]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	dd66      	ble.n	800e61e <__kernel_rem_pio2+0x26e>
 800e550:	9b07      	ldr	r3, [sp, #28]
 800e552:	2200      	movs	r2, #0
 800e554:	3301      	adds	r3, #1
 800e556:	9307      	str	r3, [sp, #28]
 800e558:	4615      	mov	r5, r2
 800e55a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e55e:	4294      	cmp	r4, r2
 800e560:	f300 8099 	bgt.w	800e696 <__kernel_rem_pio2+0x2e6>
 800e564:	f1ba 0f00 	cmp.w	sl, #0
 800e568:	dd07      	ble.n	800e57a <__kernel_rem_pio2+0x1ca>
 800e56a:	f1ba 0f01 	cmp.w	sl, #1
 800e56e:	f000 80a5 	beq.w	800e6bc <__kernel_rem_pio2+0x30c>
 800e572:	f1ba 0f02 	cmp.w	sl, #2
 800e576:	f000 80c1 	beq.w	800e6fc <__kernel_rem_pio2+0x34c>
 800e57a:	9b02      	ldr	r3, [sp, #8]
 800e57c:	2b02      	cmp	r3, #2
 800e57e:	d14e      	bne.n	800e61e <__kernel_rem_pio2+0x26e>
 800e580:	4632      	mov	r2, r6
 800e582:	463b      	mov	r3, r7
 800e584:	4958      	ldr	r1, [pc, #352]	; (800e6e8 <__kernel_rem_pio2+0x338>)
 800e586:	2000      	movs	r0, #0
 800e588:	f7f1 fe7e 	bl	8000288 <__aeabi_dsub>
 800e58c:	4606      	mov	r6, r0
 800e58e:	460f      	mov	r7, r1
 800e590:	2d00      	cmp	r5, #0
 800e592:	d044      	beq.n	800e61e <__kernel_rem_pio2+0x26e>
 800e594:	4650      	mov	r0, sl
 800e596:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800e6d8 <__kernel_rem_pio2+0x328>
 800e59a:	f000 fc21 	bl	800ede0 <scalbn>
 800e59e:	4630      	mov	r0, r6
 800e5a0:	4639      	mov	r1, r7
 800e5a2:	ec53 2b10 	vmov	r2, r3, d0
 800e5a6:	f7f1 fe6f 	bl	8000288 <__aeabi_dsub>
 800e5aa:	4606      	mov	r6, r0
 800e5ac:	460f      	mov	r7, r1
 800e5ae:	e036      	b.n	800e61e <__kernel_rem_pio2+0x26e>
 800e5b0:	4b4e      	ldr	r3, [pc, #312]	; (800e6ec <__kernel_rem_pio2+0x33c>)
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	4630      	mov	r0, r6
 800e5b6:	4639      	mov	r1, r7
 800e5b8:	f7f2 f81e 	bl	80005f8 <__aeabi_dmul>
 800e5bc:	f7f2 facc 	bl	8000b58 <__aeabi_d2iz>
 800e5c0:	f7f1 ffb0 	bl	8000524 <__aeabi_i2d>
 800e5c4:	4b4a      	ldr	r3, [pc, #296]	; (800e6f0 <__kernel_rem_pio2+0x340>)
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	4680      	mov	r8, r0
 800e5ca:	4689      	mov	r9, r1
 800e5cc:	f7f2 f814 	bl	80005f8 <__aeabi_dmul>
 800e5d0:	4602      	mov	r2, r0
 800e5d2:	460b      	mov	r3, r1
 800e5d4:	4630      	mov	r0, r6
 800e5d6:	4639      	mov	r1, r7
 800e5d8:	f7f1 fe56 	bl	8000288 <__aeabi_dsub>
 800e5dc:	f7f2 fabc 	bl	8000b58 <__aeabi_d2iz>
 800e5e0:	9b02      	ldr	r3, [sp, #8]
 800e5e2:	f843 0b04 	str.w	r0, [r3], #4
 800e5e6:	3d01      	subs	r5, #1
 800e5e8:	9302      	str	r3, [sp, #8]
 800e5ea:	ab70      	add	r3, sp, #448	; 0x1c0
 800e5ec:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f4:	4640      	mov	r0, r8
 800e5f6:	4649      	mov	r1, r9
 800e5f8:	f7f1 fe48 	bl	800028c <__adddf3>
 800e5fc:	4606      	mov	r6, r0
 800e5fe:	460f      	mov	r7, r1
 800e600:	e75b      	b.n	800e4ba <__kernel_rem_pio2+0x10a>
 800e602:	d105      	bne.n	800e610 <__kernel_rem_pio2+0x260>
 800e604:	1e63      	subs	r3, r4, #1
 800e606:	aa0c      	add	r2, sp, #48	; 0x30
 800e608:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e60c:	15c3      	asrs	r3, r0, #23
 800e60e:	e79b      	b.n	800e548 <__kernel_rem_pio2+0x198>
 800e610:	4b38      	ldr	r3, [pc, #224]	; (800e6f4 <__kernel_rem_pio2+0x344>)
 800e612:	2200      	movs	r2, #0
 800e614:	f7f2 fa76 	bl	8000b04 <__aeabi_dcmpge>
 800e618:	2800      	cmp	r0, #0
 800e61a:	d139      	bne.n	800e690 <__kernel_rem_pio2+0x2e0>
 800e61c:	9002      	str	r0, [sp, #8]
 800e61e:	2200      	movs	r2, #0
 800e620:	2300      	movs	r3, #0
 800e622:	4630      	mov	r0, r6
 800e624:	4639      	mov	r1, r7
 800e626:	f7f2 fa4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800e62a:	2800      	cmp	r0, #0
 800e62c:	f000 80b4 	beq.w	800e798 <__kernel_rem_pio2+0x3e8>
 800e630:	f104 3bff 	add.w	fp, r4, #4294967295
 800e634:	465b      	mov	r3, fp
 800e636:	2200      	movs	r2, #0
 800e638:	9904      	ldr	r1, [sp, #16]
 800e63a:	428b      	cmp	r3, r1
 800e63c:	da65      	bge.n	800e70a <__kernel_rem_pio2+0x35a>
 800e63e:	2a00      	cmp	r2, #0
 800e640:	d07b      	beq.n	800e73a <__kernel_rem_pio2+0x38a>
 800e642:	ab0c      	add	r3, sp, #48	; 0x30
 800e644:	f1aa 0a18 	sub.w	sl, sl, #24
 800e648:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	f000 80a0 	beq.w	800e792 <__kernel_rem_pio2+0x3e2>
 800e652:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800e6d8 <__kernel_rem_pio2+0x328>
 800e656:	4650      	mov	r0, sl
 800e658:	f000 fbc2 	bl	800ede0 <scalbn>
 800e65c:	4f23      	ldr	r7, [pc, #140]	; (800e6ec <__kernel_rem_pio2+0x33c>)
 800e65e:	ec55 4b10 	vmov	r4, r5, d0
 800e662:	46d8      	mov	r8, fp
 800e664:	2600      	movs	r6, #0
 800e666:	f1b8 0f00 	cmp.w	r8, #0
 800e66a:	f280 80cf 	bge.w	800e80c <__kernel_rem_pio2+0x45c>
 800e66e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800e6d0 <__kernel_rem_pio2+0x320>
 800e672:	465f      	mov	r7, fp
 800e674:	f04f 0800 	mov.w	r8, #0
 800e678:	2f00      	cmp	r7, #0
 800e67a:	f2c0 80fd 	blt.w	800e878 <__kernel_rem_pio2+0x4c8>
 800e67e:	ab70      	add	r3, sp, #448	; 0x1c0
 800e680:	f8df a074 	ldr.w	sl, [pc, #116]	; 800e6f8 <__kernel_rem_pio2+0x348>
 800e684:	ec55 4b18 	vmov	r4, r5, d8
 800e688:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800e68c:	2600      	movs	r6, #0
 800e68e:	e0e5      	b.n	800e85c <__kernel_rem_pio2+0x4ac>
 800e690:	2302      	movs	r3, #2
 800e692:	9302      	str	r3, [sp, #8]
 800e694:	e75c      	b.n	800e550 <__kernel_rem_pio2+0x1a0>
 800e696:	f8db 3000 	ldr.w	r3, [fp]
 800e69a:	b955      	cbnz	r5, 800e6b2 <__kernel_rem_pio2+0x302>
 800e69c:	b123      	cbz	r3, 800e6a8 <__kernel_rem_pio2+0x2f8>
 800e69e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e6a2:	f8cb 3000 	str.w	r3, [fp]
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	3201      	adds	r2, #1
 800e6aa:	f10b 0b04 	add.w	fp, fp, #4
 800e6ae:	461d      	mov	r5, r3
 800e6b0:	e755      	b.n	800e55e <__kernel_rem_pio2+0x1ae>
 800e6b2:	1acb      	subs	r3, r1, r3
 800e6b4:	f8cb 3000 	str.w	r3, [fp]
 800e6b8:	462b      	mov	r3, r5
 800e6ba:	e7f5      	b.n	800e6a8 <__kernel_rem_pio2+0x2f8>
 800e6bc:	1e62      	subs	r2, r4, #1
 800e6be:	ab0c      	add	r3, sp, #48	; 0x30
 800e6c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6c4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e6c8:	a90c      	add	r1, sp, #48	; 0x30
 800e6ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e6ce:	e754      	b.n	800e57a <__kernel_rem_pio2+0x1ca>
	...
 800e6dc:	3ff00000 	.word	0x3ff00000
 800e6e0:	0800f688 	.word	0x0800f688
 800e6e4:	40200000 	.word	0x40200000
 800e6e8:	3ff00000 	.word	0x3ff00000
 800e6ec:	3e700000 	.word	0x3e700000
 800e6f0:	41700000 	.word	0x41700000
 800e6f4:	3fe00000 	.word	0x3fe00000
 800e6f8:	0800f648 	.word	0x0800f648
 800e6fc:	1e62      	subs	r2, r4, #1
 800e6fe:	ab0c      	add	r3, sp, #48	; 0x30
 800e700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e704:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e708:	e7de      	b.n	800e6c8 <__kernel_rem_pio2+0x318>
 800e70a:	a90c      	add	r1, sp, #48	; 0x30
 800e70c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e710:	3b01      	subs	r3, #1
 800e712:	430a      	orrs	r2, r1
 800e714:	e790      	b.n	800e638 <__kernel_rem_pio2+0x288>
 800e716:	3301      	adds	r3, #1
 800e718:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e71c:	2900      	cmp	r1, #0
 800e71e:	d0fa      	beq.n	800e716 <__kernel_rem_pio2+0x366>
 800e720:	9a08      	ldr	r2, [sp, #32]
 800e722:	18e3      	adds	r3, r4, r3
 800e724:	18a6      	adds	r6, r4, r2
 800e726:	aa20      	add	r2, sp, #128	; 0x80
 800e728:	1c65      	adds	r5, r4, #1
 800e72a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800e72e:	9302      	str	r3, [sp, #8]
 800e730:	9b02      	ldr	r3, [sp, #8]
 800e732:	42ab      	cmp	r3, r5
 800e734:	da04      	bge.n	800e740 <__kernel_rem_pio2+0x390>
 800e736:	461c      	mov	r4, r3
 800e738:	e6b5      	b.n	800e4a6 <__kernel_rem_pio2+0xf6>
 800e73a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e73c:	2301      	movs	r3, #1
 800e73e:	e7eb      	b.n	800e718 <__kernel_rem_pio2+0x368>
 800e740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e742:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e746:	f7f1 feed 	bl	8000524 <__aeabi_i2d>
 800e74a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e74e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e750:	46b3      	mov	fp, r6
 800e752:	461c      	mov	r4, r3
 800e754:	2700      	movs	r7, #0
 800e756:	f04f 0800 	mov.w	r8, #0
 800e75a:	f04f 0900 	mov.w	r9, #0
 800e75e:	9b06      	ldr	r3, [sp, #24]
 800e760:	429f      	cmp	r7, r3
 800e762:	dd06      	ble.n	800e772 <__kernel_rem_pio2+0x3c2>
 800e764:	ab70      	add	r3, sp, #448	; 0x1c0
 800e766:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e76a:	e9c3 8900 	strd	r8, r9, [r3]
 800e76e:	3501      	adds	r5, #1
 800e770:	e7de      	b.n	800e730 <__kernel_rem_pio2+0x380>
 800e772:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e776:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e77a:	f7f1 ff3d 	bl	80005f8 <__aeabi_dmul>
 800e77e:	4602      	mov	r2, r0
 800e780:	460b      	mov	r3, r1
 800e782:	4640      	mov	r0, r8
 800e784:	4649      	mov	r1, r9
 800e786:	f7f1 fd81 	bl	800028c <__adddf3>
 800e78a:	3701      	adds	r7, #1
 800e78c:	4680      	mov	r8, r0
 800e78e:	4689      	mov	r9, r1
 800e790:	e7e5      	b.n	800e75e <__kernel_rem_pio2+0x3ae>
 800e792:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e796:	e754      	b.n	800e642 <__kernel_rem_pio2+0x292>
 800e798:	ec47 6b10 	vmov	d0, r6, r7
 800e79c:	f1ca 0000 	rsb	r0, sl, #0
 800e7a0:	f000 fb1e 	bl	800ede0 <scalbn>
 800e7a4:	ec57 6b10 	vmov	r6, r7, d0
 800e7a8:	4b9f      	ldr	r3, [pc, #636]	; (800ea28 <__kernel_rem_pio2+0x678>)
 800e7aa:	ee10 0a10 	vmov	r0, s0
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	4639      	mov	r1, r7
 800e7b2:	f7f2 f9a7 	bl	8000b04 <__aeabi_dcmpge>
 800e7b6:	b300      	cbz	r0, 800e7fa <__kernel_rem_pio2+0x44a>
 800e7b8:	4b9c      	ldr	r3, [pc, #624]	; (800ea2c <__kernel_rem_pio2+0x67c>)
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	4630      	mov	r0, r6
 800e7be:	4639      	mov	r1, r7
 800e7c0:	f7f1 ff1a 	bl	80005f8 <__aeabi_dmul>
 800e7c4:	f7f2 f9c8 	bl	8000b58 <__aeabi_d2iz>
 800e7c8:	4605      	mov	r5, r0
 800e7ca:	f7f1 feab 	bl	8000524 <__aeabi_i2d>
 800e7ce:	4b96      	ldr	r3, [pc, #600]	; (800ea28 <__kernel_rem_pio2+0x678>)
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	f7f1 ff11 	bl	80005f8 <__aeabi_dmul>
 800e7d6:	460b      	mov	r3, r1
 800e7d8:	4602      	mov	r2, r0
 800e7da:	4639      	mov	r1, r7
 800e7dc:	4630      	mov	r0, r6
 800e7de:	f7f1 fd53 	bl	8000288 <__aeabi_dsub>
 800e7e2:	f7f2 f9b9 	bl	8000b58 <__aeabi_d2iz>
 800e7e6:	f104 0b01 	add.w	fp, r4, #1
 800e7ea:	ab0c      	add	r3, sp, #48	; 0x30
 800e7ec:	f10a 0a18 	add.w	sl, sl, #24
 800e7f0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e7f4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800e7f8:	e72b      	b.n	800e652 <__kernel_rem_pio2+0x2a2>
 800e7fa:	4630      	mov	r0, r6
 800e7fc:	4639      	mov	r1, r7
 800e7fe:	f7f2 f9ab 	bl	8000b58 <__aeabi_d2iz>
 800e802:	ab0c      	add	r3, sp, #48	; 0x30
 800e804:	46a3      	mov	fp, r4
 800e806:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e80a:	e722      	b.n	800e652 <__kernel_rem_pio2+0x2a2>
 800e80c:	ab70      	add	r3, sp, #448	; 0x1c0
 800e80e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800e812:	ab0c      	add	r3, sp, #48	; 0x30
 800e814:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e818:	f7f1 fe84 	bl	8000524 <__aeabi_i2d>
 800e81c:	4622      	mov	r2, r4
 800e81e:	462b      	mov	r3, r5
 800e820:	f7f1 feea 	bl	80005f8 <__aeabi_dmul>
 800e824:	4632      	mov	r2, r6
 800e826:	e9c9 0100 	strd	r0, r1, [r9]
 800e82a:	463b      	mov	r3, r7
 800e82c:	4620      	mov	r0, r4
 800e82e:	4629      	mov	r1, r5
 800e830:	f7f1 fee2 	bl	80005f8 <__aeabi_dmul>
 800e834:	f108 38ff 	add.w	r8, r8, #4294967295
 800e838:	4604      	mov	r4, r0
 800e83a:	460d      	mov	r5, r1
 800e83c:	e713      	b.n	800e666 <__kernel_rem_pio2+0x2b6>
 800e83e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800e842:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800e846:	f7f1 fed7 	bl	80005f8 <__aeabi_dmul>
 800e84a:	4602      	mov	r2, r0
 800e84c:	460b      	mov	r3, r1
 800e84e:	4620      	mov	r0, r4
 800e850:	4629      	mov	r1, r5
 800e852:	f7f1 fd1b 	bl	800028c <__adddf3>
 800e856:	3601      	adds	r6, #1
 800e858:	4604      	mov	r4, r0
 800e85a:	460d      	mov	r5, r1
 800e85c:	9b04      	ldr	r3, [sp, #16]
 800e85e:	429e      	cmp	r6, r3
 800e860:	dc01      	bgt.n	800e866 <__kernel_rem_pio2+0x4b6>
 800e862:	45b0      	cmp	r8, r6
 800e864:	daeb      	bge.n	800e83e <__kernel_rem_pio2+0x48e>
 800e866:	ab48      	add	r3, sp, #288	; 0x120
 800e868:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e86c:	e9c3 4500 	strd	r4, r5, [r3]
 800e870:	3f01      	subs	r7, #1
 800e872:	f108 0801 	add.w	r8, r8, #1
 800e876:	e6ff      	b.n	800e678 <__kernel_rem_pio2+0x2c8>
 800e878:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e87a:	2b02      	cmp	r3, #2
 800e87c:	dc0b      	bgt.n	800e896 <__kernel_rem_pio2+0x4e6>
 800e87e:	2b00      	cmp	r3, #0
 800e880:	dc6e      	bgt.n	800e960 <__kernel_rem_pio2+0x5b0>
 800e882:	d045      	beq.n	800e910 <__kernel_rem_pio2+0x560>
 800e884:	9b07      	ldr	r3, [sp, #28]
 800e886:	f003 0007 	and.w	r0, r3, #7
 800e88a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800e88e:	ecbd 8b02 	vpop	{d8}
 800e892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e896:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e898:	2b03      	cmp	r3, #3
 800e89a:	d1f3      	bne.n	800e884 <__kernel_rem_pio2+0x4d4>
 800e89c:	ab48      	add	r3, sp, #288	; 0x120
 800e89e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800e8a2:	46d0      	mov	r8, sl
 800e8a4:	46d9      	mov	r9, fp
 800e8a6:	f1b9 0f00 	cmp.w	r9, #0
 800e8aa:	f1a8 0808 	sub.w	r8, r8, #8
 800e8ae:	dc64      	bgt.n	800e97a <__kernel_rem_pio2+0x5ca>
 800e8b0:	465c      	mov	r4, fp
 800e8b2:	2c01      	cmp	r4, #1
 800e8b4:	f1aa 0a08 	sub.w	sl, sl, #8
 800e8b8:	dc7e      	bgt.n	800e9b8 <__kernel_rem_pio2+0x608>
 800e8ba:	2000      	movs	r0, #0
 800e8bc:	2100      	movs	r1, #0
 800e8be:	f1bb 0f01 	cmp.w	fp, #1
 800e8c2:	f300 8097 	bgt.w	800e9f4 <__kernel_rem_pio2+0x644>
 800e8c6:	9b02      	ldr	r3, [sp, #8]
 800e8c8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800e8cc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	f040 8099 	bne.w	800ea08 <__kernel_rem_pio2+0x658>
 800e8d6:	9b01      	ldr	r3, [sp, #4]
 800e8d8:	e9c3 5600 	strd	r5, r6, [r3]
 800e8dc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800e8e0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e8e4:	e7ce      	b.n	800e884 <__kernel_rem_pio2+0x4d4>
 800e8e6:	ab48      	add	r3, sp, #288	; 0x120
 800e8e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8f0:	f7f1 fccc 	bl	800028c <__adddf3>
 800e8f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e8f8:	f1bb 0f00 	cmp.w	fp, #0
 800e8fc:	daf3      	bge.n	800e8e6 <__kernel_rem_pio2+0x536>
 800e8fe:	9b02      	ldr	r3, [sp, #8]
 800e900:	b113      	cbz	r3, 800e908 <__kernel_rem_pio2+0x558>
 800e902:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e906:	4619      	mov	r1, r3
 800e908:	9b01      	ldr	r3, [sp, #4]
 800e90a:	e9c3 0100 	strd	r0, r1, [r3]
 800e90e:	e7b9      	b.n	800e884 <__kernel_rem_pio2+0x4d4>
 800e910:	2000      	movs	r0, #0
 800e912:	2100      	movs	r1, #0
 800e914:	e7f0      	b.n	800e8f8 <__kernel_rem_pio2+0x548>
 800e916:	ab48      	add	r3, sp, #288	; 0x120
 800e918:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e920:	f7f1 fcb4 	bl	800028c <__adddf3>
 800e924:	3c01      	subs	r4, #1
 800e926:	2c00      	cmp	r4, #0
 800e928:	daf5      	bge.n	800e916 <__kernel_rem_pio2+0x566>
 800e92a:	9b02      	ldr	r3, [sp, #8]
 800e92c:	b1e3      	cbz	r3, 800e968 <__kernel_rem_pio2+0x5b8>
 800e92e:	4602      	mov	r2, r0
 800e930:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e934:	9c01      	ldr	r4, [sp, #4]
 800e936:	e9c4 2300 	strd	r2, r3, [r4]
 800e93a:	4602      	mov	r2, r0
 800e93c:	460b      	mov	r3, r1
 800e93e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800e942:	f7f1 fca1 	bl	8000288 <__aeabi_dsub>
 800e946:	ad4a      	add	r5, sp, #296	; 0x128
 800e948:	2401      	movs	r4, #1
 800e94a:	45a3      	cmp	fp, r4
 800e94c:	da0f      	bge.n	800e96e <__kernel_rem_pio2+0x5be>
 800e94e:	9b02      	ldr	r3, [sp, #8]
 800e950:	b113      	cbz	r3, 800e958 <__kernel_rem_pio2+0x5a8>
 800e952:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e956:	4619      	mov	r1, r3
 800e958:	9b01      	ldr	r3, [sp, #4]
 800e95a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e95e:	e791      	b.n	800e884 <__kernel_rem_pio2+0x4d4>
 800e960:	465c      	mov	r4, fp
 800e962:	2000      	movs	r0, #0
 800e964:	2100      	movs	r1, #0
 800e966:	e7de      	b.n	800e926 <__kernel_rem_pio2+0x576>
 800e968:	4602      	mov	r2, r0
 800e96a:	460b      	mov	r3, r1
 800e96c:	e7e2      	b.n	800e934 <__kernel_rem_pio2+0x584>
 800e96e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800e972:	f7f1 fc8b 	bl	800028c <__adddf3>
 800e976:	3401      	adds	r4, #1
 800e978:	e7e7      	b.n	800e94a <__kernel_rem_pio2+0x59a>
 800e97a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800e97e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800e982:	4620      	mov	r0, r4
 800e984:	4632      	mov	r2, r6
 800e986:	463b      	mov	r3, r7
 800e988:	4629      	mov	r1, r5
 800e98a:	f7f1 fc7f 	bl	800028c <__adddf3>
 800e98e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e992:	4602      	mov	r2, r0
 800e994:	460b      	mov	r3, r1
 800e996:	4620      	mov	r0, r4
 800e998:	4629      	mov	r1, r5
 800e99a:	f7f1 fc75 	bl	8000288 <__aeabi_dsub>
 800e99e:	4632      	mov	r2, r6
 800e9a0:	463b      	mov	r3, r7
 800e9a2:	f7f1 fc73 	bl	800028c <__adddf3>
 800e9a6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e9aa:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800e9ae:	ed88 7b00 	vstr	d7, [r8]
 800e9b2:	f109 39ff 	add.w	r9, r9, #4294967295
 800e9b6:	e776      	b.n	800e8a6 <__kernel_rem_pio2+0x4f6>
 800e9b8:	e9da 8900 	ldrd	r8, r9, [sl]
 800e9bc:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e9c0:	4640      	mov	r0, r8
 800e9c2:	4632      	mov	r2, r6
 800e9c4:	463b      	mov	r3, r7
 800e9c6:	4649      	mov	r1, r9
 800e9c8:	f7f1 fc60 	bl	800028c <__adddf3>
 800e9cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e9d0:	4602      	mov	r2, r0
 800e9d2:	460b      	mov	r3, r1
 800e9d4:	4640      	mov	r0, r8
 800e9d6:	4649      	mov	r1, r9
 800e9d8:	f7f1 fc56 	bl	8000288 <__aeabi_dsub>
 800e9dc:	4632      	mov	r2, r6
 800e9de:	463b      	mov	r3, r7
 800e9e0:	f7f1 fc54 	bl	800028c <__adddf3>
 800e9e4:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e9e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e9ec:	ed8a 7b00 	vstr	d7, [sl]
 800e9f0:	3c01      	subs	r4, #1
 800e9f2:	e75e      	b.n	800e8b2 <__kernel_rem_pio2+0x502>
 800e9f4:	ab48      	add	r3, sp, #288	; 0x120
 800e9f6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9fe:	f7f1 fc45 	bl	800028c <__adddf3>
 800ea02:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ea06:	e75a      	b.n	800e8be <__kernel_rem_pio2+0x50e>
 800ea08:	9b01      	ldr	r3, [sp, #4]
 800ea0a:	9a01      	ldr	r2, [sp, #4]
 800ea0c:	601d      	str	r5, [r3, #0]
 800ea0e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800ea12:	605c      	str	r4, [r3, #4]
 800ea14:	609f      	str	r7, [r3, #8]
 800ea16:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ea1a:	60d3      	str	r3, [r2, #12]
 800ea1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ea20:	6110      	str	r0, [r2, #16]
 800ea22:	6153      	str	r3, [r2, #20]
 800ea24:	e72e      	b.n	800e884 <__kernel_rem_pio2+0x4d4>
 800ea26:	bf00      	nop
 800ea28:	41700000 	.word	0x41700000
 800ea2c:	3e700000 	.word	0x3e700000

0800ea30 <__kernel_sin>:
 800ea30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea34:	ed2d 8b04 	vpush	{d8-d9}
 800ea38:	eeb0 8a41 	vmov.f32	s16, s2
 800ea3c:	eef0 8a61 	vmov.f32	s17, s3
 800ea40:	ec55 4b10 	vmov	r4, r5, d0
 800ea44:	b083      	sub	sp, #12
 800ea46:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ea4a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ea4e:	9001      	str	r0, [sp, #4]
 800ea50:	da06      	bge.n	800ea60 <__kernel_sin+0x30>
 800ea52:	ee10 0a10 	vmov	r0, s0
 800ea56:	4629      	mov	r1, r5
 800ea58:	f7f2 f87e 	bl	8000b58 <__aeabi_d2iz>
 800ea5c:	2800      	cmp	r0, #0
 800ea5e:	d051      	beq.n	800eb04 <__kernel_sin+0xd4>
 800ea60:	4622      	mov	r2, r4
 800ea62:	462b      	mov	r3, r5
 800ea64:	4620      	mov	r0, r4
 800ea66:	4629      	mov	r1, r5
 800ea68:	f7f1 fdc6 	bl	80005f8 <__aeabi_dmul>
 800ea6c:	4682      	mov	sl, r0
 800ea6e:	468b      	mov	fp, r1
 800ea70:	4602      	mov	r2, r0
 800ea72:	460b      	mov	r3, r1
 800ea74:	4620      	mov	r0, r4
 800ea76:	4629      	mov	r1, r5
 800ea78:	f7f1 fdbe 	bl	80005f8 <__aeabi_dmul>
 800ea7c:	a341      	add	r3, pc, #260	; (adr r3, 800eb84 <__kernel_sin+0x154>)
 800ea7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea82:	4680      	mov	r8, r0
 800ea84:	4689      	mov	r9, r1
 800ea86:	4650      	mov	r0, sl
 800ea88:	4659      	mov	r1, fp
 800ea8a:	f7f1 fdb5 	bl	80005f8 <__aeabi_dmul>
 800ea8e:	a33f      	add	r3, pc, #252	; (adr r3, 800eb8c <__kernel_sin+0x15c>)
 800ea90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea94:	f7f1 fbf8 	bl	8000288 <__aeabi_dsub>
 800ea98:	4652      	mov	r2, sl
 800ea9a:	465b      	mov	r3, fp
 800ea9c:	f7f1 fdac 	bl	80005f8 <__aeabi_dmul>
 800eaa0:	a33c      	add	r3, pc, #240	; (adr r3, 800eb94 <__kernel_sin+0x164>)
 800eaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa6:	f7f1 fbf1 	bl	800028c <__adddf3>
 800eaaa:	4652      	mov	r2, sl
 800eaac:	465b      	mov	r3, fp
 800eaae:	f7f1 fda3 	bl	80005f8 <__aeabi_dmul>
 800eab2:	a33a      	add	r3, pc, #232	; (adr r3, 800eb9c <__kernel_sin+0x16c>)
 800eab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab8:	f7f1 fbe6 	bl	8000288 <__aeabi_dsub>
 800eabc:	4652      	mov	r2, sl
 800eabe:	465b      	mov	r3, fp
 800eac0:	f7f1 fd9a 	bl	80005f8 <__aeabi_dmul>
 800eac4:	a337      	add	r3, pc, #220	; (adr r3, 800eba4 <__kernel_sin+0x174>)
 800eac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaca:	f7f1 fbdf 	bl	800028c <__adddf3>
 800eace:	9b01      	ldr	r3, [sp, #4]
 800ead0:	4606      	mov	r6, r0
 800ead2:	460f      	mov	r7, r1
 800ead4:	b9eb      	cbnz	r3, 800eb12 <__kernel_sin+0xe2>
 800ead6:	4602      	mov	r2, r0
 800ead8:	460b      	mov	r3, r1
 800eada:	4650      	mov	r0, sl
 800eadc:	4659      	mov	r1, fp
 800eade:	f7f1 fd8b 	bl	80005f8 <__aeabi_dmul>
 800eae2:	a325      	add	r3, pc, #148	; (adr r3, 800eb78 <__kernel_sin+0x148>)
 800eae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae8:	f7f1 fbce 	bl	8000288 <__aeabi_dsub>
 800eaec:	4642      	mov	r2, r8
 800eaee:	464b      	mov	r3, r9
 800eaf0:	f7f1 fd82 	bl	80005f8 <__aeabi_dmul>
 800eaf4:	4602      	mov	r2, r0
 800eaf6:	460b      	mov	r3, r1
 800eaf8:	4620      	mov	r0, r4
 800eafa:	4629      	mov	r1, r5
 800eafc:	f7f1 fbc6 	bl	800028c <__adddf3>
 800eb00:	4604      	mov	r4, r0
 800eb02:	460d      	mov	r5, r1
 800eb04:	ec45 4b10 	vmov	d0, r4, r5
 800eb08:	b003      	add	sp, #12
 800eb0a:	ecbd 8b04 	vpop	{d8-d9}
 800eb0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb12:	4b1b      	ldr	r3, [pc, #108]	; (800eb80 <__kernel_sin+0x150>)
 800eb14:	ec51 0b18 	vmov	r0, r1, d8
 800eb18:	2200      	movs	r2, #0
 800eb1a:	f7f1 fd6d 	bl	80005f8 <__aeabi_dmul>
 800eb1e:	4632      	mov	r2, r6
 800eb20:	ec41 0b19 	vmov	d9, r0, r1
 800eb24:	463b      	mov	r3, r7
 800eb26:	4640      	mov	r0, r8
 800eb28:	4649      	mov	r1, r9
 800eb2a:	f7f1 fd65 	bl	80005f8 <__aeabi_dmul>
 800eb2e:	4602      	mov	r2, r0
 800eb30:	460b      	mov	r3, r1
 800eb32:	ec51 0b19 	vmov	r0, r1, d9
 800eb36:	f7f1 fba7 	bl	8000288 <__aeabi_dsub>
 800eb3a:	4652      	mov	r2, sl
 800eb3c:	465b      	mov	r3, fp
 800eb3e:	f7f1 fd5b 	bl	80005f8 <__aeabi_dmul>
 800eb42:	ec53 2b18 	vmov	r2, r3, d8
 800eb46:	f7f1 fb9f 	bl	8000288 <__aeabi_dsub>
 800eb4a:	a30b      	add	r3, pc, #44	; (adr r3, 800eb78 <__kernel_sin+0x148>)
 800eb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb50:	4606      	mov	r6, r0
 800eb52:	460f      	mov	r7, r1
 800eb54:	4640      	mov	r0, r8
 800eb56:	4649      	mov	r1, r9
 800eb58:	f7f1 fd4e 	bl	80005f8 <__aeabi_dmul>
 800eb5c:	4602      	mov	r2, r0
 800eb5e:	460b      	mov	r3, r1
 800eb60:	4630      	mov	r0, r6
 800eb62:	4639      	mov	r1, r7
 800eb64:	f7f1 fb92 	bl	800028c <__adddf3>
 800eb68:	4602      	mov	r2, r0
 800eb6a:	460b      	mov	r3, r1
 800eb6c:	4620      	mov	r0, r4
 800eb6e:	4629      	mov	r1, r5
 800eb70:	f7f1 fb8a 	bl	8000288 <__aeabi_dsub>
 800eb74:	e7c4      	b.n	800eb00 <__kernel_sin+0xd0>
 800eb76:	bf00      	nop
 800eb78:	55555549 	.word	0x55555549
 800eb7c:	3fc55555 	.word	0x3fc55555
 800eb80:	3fe00000 	.word	0x3fe00000
 800eb84:	5acfd57c 	.word	0x5acfd57c
 800eb88:	3de5d93a 	.word	0x3de5d93a
 800eb8c:	8a2b9ceb 	.word	0x8a2b9ceb
 800eb90:	3e5ae5e6 	.word	0x3e5ae5e6
 800eb94:	57b1fe7d 	.word	0x57b1fe7d
 800eb98:	3ec71de3 	.word	0x3ec71de3
 800eb9c:	19c161d5 	.word	0x19c161d5
 800eba0:	3f2a01a0 	.word	0x3f2a01a0
 800eba4:	1110f8a6 	.word	0x1110f8a6
 800eba8:	3f811111 	.word	0x3f811111

0800ebac <finite>:
 800ebac:	b082      	sub	sp, #8
 800ebae:	ed8d 0b00 	vstr	d0, [sp]
 800ebb2:	9801      	ldr	r0, [sp, #4]
 800ebb4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ebb8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ebbc:	0fc0      	lsrs	r0, r0, #31
 800ebbe:	b002      	add	sp, #8
 800ebc0:	4770      	bx	lr
 800ebc2:	0000      	movs	r0, r0
 800ebc4:	0000      	movs	r0, r0
	...

0800ebc8 <floor>:
 800ebc8:	ec51 0b10 	vmov	r0, r1, d0
 800ebcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebd0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ebd4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ebd8:	2e13      	cmp	r6, #19
 800ebda:	ee10 5a10 	vmov	r5, s0
 800ebde:	ee10 8a10 	vmov	r8, s0
 800ebe2:	460c      	mov	r4, r1
 800ebe4:	dc32      	bgt.n	800ec4c <floor+0x84>
 800ebe6:	2e00      	cmp	r6, #0
 800ebe8:	da14      	bge.n	800ec14 <floor+0x4c>
 800ebea:	a333      	add	r3, pc, #204	; (adr r3, 800ecb8 <floor+0xf0>)
 800ebec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf0:	f7f1 fb4c 	bl	800028c <__adddf3>
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	f7f1 ff8e 	bl	8000b18 <__aeabi_dcmpgt>
 800ebfc:	b138      	cbz	r0, 800ec0e <floor+0x46>
 800ebfe:	2c00      	cmp	r4, #0
 800ec00:	da57      	bge.n	800ecb2 <floor+0xea>
 800ec02:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ec06:	431d      	orrs	r5, r3
 800ec08:	d001      	beq.n	800ec0e <floor+0x46>
 800ec0a:	4c2d      	ldr	r4, [pc, #180]	; (800ecc0 <floor+0xf8>)
 800ec0c:	2500      	movs	r5, #0
 800ec0e:	4621      	mov	r1, r4
 800ec10:	4628      	mov	r0, r5
 800ec12:	e025      	b.n	800ec60 <floor+0x98>
 800ec14:	4f2b      	ldr	r7, [pc, #172]	; (800ecc4 <floor+0xfc>)
 800ec16:	4137      	asrs	r7, r6
 800ec18:	ea01 0307 	and.w	r3, r1, r7
 800ec1c:	4303      	orrs	r3, r0
 800ec1e:	d01f      	beq.n	800ec60 <floor+0x98>
 800ec20:	a325      	add	r3, pc, #148	; (adr r3, 800ecb8 <floor+0xf0>)
 800ec22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec26:	f7f1 fb31 	bl	800028c <__adddf3>
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	f7f1 ff73 	bl	8000b18 <__aeabi_dcmpgt>
 800ec32:	2800      	cmp	r0, #0
 800ec34:	d0eb      	beq.n	800ec0e <floor+0x46>
 800ec36:	2c00      	cmp	r4, #0
 800ec38:	bfbe      	ittt	lt
 800ec3a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ec3e:	fa43 f606 	asrlt.w	r6, r3, r6
 800ec42:	19a4      	addlt	r4, r4, r6
 800ec44:	ea24 0407 	bic.w	r4, r4, r7
 800ec48:	2500      	movs	r5, #0
 800ec4a:	e7e0      	b.n	800ec0e <floor+0x46>
 800ec4c:	2e33      	cmp	r6, #51	; 0x33
 800ec4e:	dd0b      	ble.n	800ec68 <floor+0xa0>
 800ec50:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ec54:	d104      	bne.n	800ec60 <floor+0x98>
 800ec56:	ee10 2a10 	vmov	r2, s0
 800ec5a:	460b      	mov	r3, r1
 800ec5c:	f7f1 fb16 	bl	800028c <__adddf3>
 800ec60:	ec41 0b10 	vmov	d0, r0, r1
 800ec64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec68:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ec6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ec70:	fa23 f707 	lsr.w	r7, r3, r7
 800ec74:	4207      	tst	r7, r0
 800ec76:	d0f3      	beq.n	800ec60 <floor+0x98>
 800ec78:	a30f      	add	r3, pc, #60	; (adr r3, 800ecb8 <floor+0xf0>)
 800ec7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec7e:	f7f1 fb05 	bl	800028c <__adddf3>
 800ec82:	2200      	movs	r2, #0
 800ec84:	2300      	movs	r3, #0
 800ec86:	f7f1 ff47 	bl	8000b18 <__aeabi_dcmpgt>
 800ec8a:	2800      	cmp	r0, #0
 800ec8c:	d0bf      	beq.n	800ec0e <floor+0x46>
 800ec8e:	2c00      	cmp	r4, #0
 800ec90:	da02      	bge.n	800ec98 <floor+0xd0>
 800ec92:	2e14      	cmp	r6, #20
 800ec94:	d103      	bne.n	800ec9e <floor+0xd6>
 800ec96:	3401      	adds	r4, #1
 800ec98:	ea25 0507 	bic.w	r5, r5, r7
 800ec9c:	e7b7      	b.n	800ec0e <floor+0x46>
 800ec9e:	2301      	movs	r3, #1
 800eca0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800eca4:	fa03 f606 	lsl.w	r6, r3, r6
 800eca8:	4435      	add	r5, r6
 800ecaa:	4545      	cmp	r5, r8
 800ecac:	bf38      	it	cc
 800ecae:	18e4      	addcc	r4, r4, r3
 800ecb0:	e7f2      	b.n	800ec98 <floor+0xd0>
 800ecb2:	2500      	movs	r5, #0
 800ecb4:	462c      	mov	r4, r5
 800ecb6:	e7aa      	b.n	800ec0e <floor+0x46>
 800ecb8:	8800759c 	.word	0x8800759c
 800ecbc:	7e37e43c 	.word	0x7e37e43c
 800ecc0:	bff00000 	.word	0xbff00000
 800ecc4:	000fffff 	.word	0x000fffff

0800ecc8 <rint>:
 800ecc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ecca:	ec51 0b10 	vmov	r0, r1, d0
 800ecce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ecd2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ecd6:	2e13      	cmp	r6, #19
 800ecd8:	ee10 4a10 	vmov	r4, s0
 800ecdc:	460b      	mov	r3, r1
 800ecde:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800ece2:	dc58      	bgt.n	800ed96 <rint+0xce>
 800ece4:	2e00      	cmp	r6, #0
 800ece6:	da2b      	bge.n	800ed40 <rint+0x78>
 800ece8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800ecec:	4302      	orrs	r2, r0
 800ecee:	d023      	beq.n	800ed38 <rint+0x70>
 800ecf0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800ecf4:	4302      	orrs	r2, r0
 800ecf6:	4254      	negs	r4, r2
 800ecf8:	4314      	orrs	r4, r2
 800ecfa:	0c4b      	lsrs	r3, r1, #17
 800ecfc:	0b24      	lsrs	r4, r4, #12
 800ecfe:	045b      	lsls	r3, r3, #17
 800ed00:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800ed04:	ea44 0103 	orr.w	r1, r4, r3
 800ed08:	4b32      	ldr	r3, [pc, #200]	; (800edd4 <rint+0x10c>)
 800ed0a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ed0e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ed12:	4602      	mov	r2, r0
 800ed14:	460b      	mov	r3, r1
 800ed16:	4630      	mov	r0, r6
 800ed18:	4639      	mov	r1, r7
 800ed1a:	f7f1 fab7 	bl	800028c <__adddf3>
 800ed1e:	e9cd 0100 	strd	r0, r1, [sp]
 800ed22:	463b      	mov	r3, r7
 800ed24:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed28:	4632      	mov	r2, r6
 800ed2a:	f7f1 faad 	bl	8000288 <__aeabi_dsub>
 800ed2e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ed32:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800ed36:	4639      	mov	r1, r7
 800ed38:	ec41 0b10 	vmov	d0, r0, r1
 800ed3c:	b003      	add	sp, #12
 800ed3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed40:	4a25      	ldr	r2, [pc, #148]	; (800edd8 <rint+0x110>)
 800ed42:	4132      	asrs	r2, r6
 800ed44:	ea01 0702 	and.w	r7, r1, r2
 800ed48:	4307      	orrs	r7, r0
 800ed4a:	d0f5      	beq.n	800ed38 <rint+0x70>
 800ed4c:	0851      	lsrs	r1, r2, #1
 800ed4e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800ed52:	4314      	orrs	r4, r2
 800ed54:	d00c      	beq.n	800ed70 <rint+0xa8>
 800ed56:	ea23 0201 	bic.w	r2, r3, r1
 800ed5a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ed5e:	2e13      	cmp	r6, #19
 800ed60:	fa43 f606 	asr.w	r6, r3, r6
 800ed64:	bf0c      	ite	eq
 800ed66:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800ed6a:	2400      	movne	r4, #0
 800ed6c:	ea42 0306 	orr.w	r3, r2, r6
 800ed70:	4918      	ldr	r1, [pc, #96]	; (800edd4 <rint+0x10c>)
 800ed72:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800ed76:	4622      	mov	r2, r4
 800ed78:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ed7c:	4620      	mov	r0, r4
 800ed7e:	4629      	mov	r1, r5
 800ed80:	f7f1 fa84 	bl	800028c <__adddf3>
 800ed84:	e9cd 0100 	strd	r0, r1, [sp]
 800ed88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed8c:	4622      	mov	r2, r4
 800ed8e:	462b      	mov	r3, r5
 800ed90:	f7f1 fa7a 	bl	8000288 <__aeabi_dsub>
 800ed94:	e7d0      	b.n	800ed38 <rint+0x70>
 800ed96:	2e33      	cmp	r6, #51	; 0x33
 800ed98:	dd07      	ble.n	800edaa <rint+0xe2>
 800ed9a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ed9e:	d1cb      	bne.n	800ed38 <rint+0x70>
 800eda0:	ee10 2a10 	vmov	r2, s0
 800eda4:	f7f1 fa72 	bl	800028c <__adddf3>
 800eda8:	e7c6      	b.n	800ed38 <rint+0x70>
 800edaa:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800edae:	f04f 36ff 	mov.w	r6, #4294967295
 800edb2:	40d6      	lsrs	r6, r2
 800edb4:	4230      	tst	r0, r6
 800edb6:	d0bf      	beq.n	800ed38 <rint+0x70>
 800edb8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800edbc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800edc0:	bf1f      	itttt	ne
 800edc2:	ea24 0101 	bicne.w	r1, r4, r1
 800edc6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800edca:	fa44 f202 	asrne.w	r2, r4, r2
 800edce:	ea41 0402 	orrne.w	r4, r1, r2
 800edd2:	e7cd      	b.n	800ed70 <rint+0xa8>
 800edd4:	0800f698 	.word	0x0800f698
 800edd8:	000fffff 	.word	0x000fffff
 800eddc:	00000000 	.word	0x00000000

0800ede0 <scalbn>:
 800ede0:	b570      	push	{r4, r5, r6, lr}
 800ede2:	ec55 4b10 	vmov	r4, r5, d0
 800ede6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800edea:	4606      	mov	r6, r0
 800edec:	462b      	mov	r3, r5
 800edee:	b99a      	cbnz	r2, 800ee18 <scalbn+0x38>
 800edf0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800edf4:	4323      	orrs	r3, r4
 800edf6:	d036      	beq.n	800ee66 <scalbn+0x86>
 800edf8:	4b39      	ldr	r3, [pc, #228]	; (800eee0 <scalbn+0x100>)
 800edfa:	4629      	mov	r1, r5
 800edfc:	ee10 0a10 	vmov	r0, s0
 800ee00:	2200      	movs	r2, #0
 800ee02:	f7f1 fbf9 	bl	80005f8 <__aeabi_dmul>
 800ee06:	4b37      	ldr	r3, [pc, #220]	; (800eee4 <scalbn+0x104>)
 800ee08:	429e      	cmp	r6, r3
 800ee0a:	4604      	mov	r4, r0
 800ee0c:	460d      	mov	r5, r1
 800ee0e:	da10      	bge.n	800ee32 <scalbn+0x52>
 800ee10:	a32b      	add	r3, pc, #172	; (adr r3, 800eec0 <scalbn+0xe0>)
 800ee12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee16:	e03a      	b.n	800ee8e <scalbn+0xae>
 800ee18:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ee1c:	428a      	cmp	r2, r1
 800ee1e:	d10c      	bne.n	800ee3a <scalbn+0x5a>
 800ee20:	ee10 2a10 	vmov	r2, s0
 800ee24:	4620      	mov	r0, r4
 800ee26:	4629      	mov	r1, r5
 800ee28:	f7f1 fa30 	bl	800028c <__adddf3>
 800ee2c:	4604      	mov	r4, r0
 800ee2e:	460d      	mov	r5, r1
 800ee30:	e019      	b.n	800ee66 <scalbn+0x86>
 800ee32:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ee36:	460b      	mov	r3, r1
 800ee38:	3a36      	subs	r2, #54	; 0x36
 800ee3a:	4432      	add	r2, r6
 800ee3c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ee40:	428a      	cmp	r2, r1
 800ee42:	dd08      	ble.n	800ee56 <scalbn+0x76>
 800ee44:	2d00      	cmp	r5, #0
 800ee46:	a120      	add	r1, pc, #128	; (adr r1, 800eec8 <scalbn+0xe8>)
 800ee48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee4c:	da1c      	bge.n	800ee88 <scalbn+0xa8>
 800ee4e:	a120      	add	r1, pc, #128	; (adr r1, 800eed0 <scalbn+0xf0>)
 800ee50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee54:	e018      	b.n	800ee88 <scalbn+0xa8>
 800ee56:	2a00      	cmp	r2, #0
 800ee58:	dd08      	ble.n	800ee6c <scalbn+0x8c>
 800ee5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ee5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ee62:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ee66:	ec45 4b10 	vmov	d0, r4, r5
 800ee6a:	bd70      	pop	{r4, r5, r6, pc}
 800ee6c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ee70:	da19      	bge.n	800eea6 <scalbn+0xc6>
 800ee72:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ee76:	429e      	cmp	r6, r3
 800ee78:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ee7c:	dd0a      	ble.n	800ee94 <scalbn+0xb4>
 800ee7e:	a112      	add	r1, pc, #72	; (adr r1, 800eec8 <scalbn+0xe8>)
 800ee80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d1e2      	bne.n	800ee4e <scalbn+0x6e>
 800ee88:	a30f      	add	r3, pc, #60	; (adr r3, 800eec8 <scalbn+0xe8>)
 800ee8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee8e:	f7f1 fbb3 	bl	80005f8 <__aeabi_dmul>
 800ee92:	e7cb      	b.n	800ee2c <scalbn+0x4c>
 800ee94:	a10a      	add	r1, pc, #40	; (adr r1, 800eec0 <scalbn+0xe0>)
 800ee96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d0b8      	beq.n	800ee10 <scalbn+0x30>
 800ee9e:	a10e      	add	r1, pc, #56	; (adr r1, 800eed8 <scalbn+0xf8>)
 800eea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eea4:	e7b4      	b.n	800ee10 <scalbn+0x30>
 800eea6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eeaa:	3236      	adds	r2, #54	; 0x36
 800eeac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800eeb0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800eeb4:	4620      	mov	r0, r4
 800eeb6:	4b0c      	ldr	r3, [pc, #48]	; (800eee8 <scalbn+0x108>)
 800eeb8:	2200      	movs	r2, #0
 800eeba:	e7e8      	b.n	800ee8e <scalbn+0xae>
 800eebc:	f3af 8000 	nop.w
 800eec0:	c2f8f359 	.word	0xc2f8f359
 800eec4:	01a56e1f 	.word	0x01a56e1f
 800eec8:	8800759c 	.word	0x8800759c
 800eecc:	7e37e43c 	.word	0x7e37e43c
 800eed0:	8800759c 	.word	0x8800759c
 800eed4:	fe37e43c 	.word	0xfe37e43c
 800eed8:	c2f8f359 	.word	0xc2f8f359
 800eedc:	81a56e1f 	.word	0x81a56e1f
 800eee0:	43500000 	.word	0x43500000
 800eee4:	ffff3cb0 	.word	0xffff3cb0
 800eee8:	3c900000 	.word	0x3c900000

0800eeec <_init>:
 800eeec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeee:	bf00      	nop
 800eef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eef2:	bc08      	pop	{r3}
 800eef4:	469e      	mov	lr, r3
 800eef6:	4770      	bx	lr

0800eef8 <_fini>:
 800eef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eefa:	bf00      	nop
 800eefc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eefe:	bc08      	pop	{r3}
 800ef00:	469e      	mov	lr, r3
 800ef02:	4770      	bx	lr
