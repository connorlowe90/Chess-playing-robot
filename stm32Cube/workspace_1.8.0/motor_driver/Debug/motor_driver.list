
motor_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b7c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007d04  08007d04  00017d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d3c  08007d3c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007d3c  08007d3c  00017d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d44  08007d44  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d44  08007d44  00017d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d48  08007d48  00017d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007d4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          0000081c  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008ac  200008ac  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ccb6  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b68  00000000  00000000  0003cd76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e0  00000000  00000000  000408e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001188  00000000  00000000  00041bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024258  00000000  00000000  00042d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000178b6  00000000  00000000  00066fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0d55  00000000  00000000  0007e856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014f5ab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005120  00000000  00000000  0014f600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007cec 	.word	0x08007cec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007cec 	.word	0x08007cec

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <initPins>:
// Z_step_pin = PA3
// Z_dir0_pin = PA3

// Z endstop = PE4

void initPins(){
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  TIM6->PSC = 89;
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <initPins+0x28>)
 80004d6:	2259      	movs	r2, #89	; 0x59
 80004d8:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 0xffff;
 80004da:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <initPins+0x28>)
 80004dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004e0:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM6->CR1 |= (1 << 0);
 80004e2:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <initPins+0x28>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <initPins+0x28>)
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	6013      	str	r3, [r2, #0]
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	40001000 	.word	0x40001000

080004fc <checkEndstop>:
		}
		break;
  }
}

int checkEndstop(){
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
	return GPIOC->IDR & (1 << 8);
 8000500:	4b04      	ldr	r3, [pc, #16]	; (8000514 <checkEndstop+0x18>)
 8000502:	691b      	ldr	r3, [r3, #16]
 8000504:	f403 7380 	and.w	r3, r3, #256	; 0x100
}
 8000508:	4618      	mov	r0, r3
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	40020800 	.word	0x40020800

08000518 <delayMicro>:

void delayMicro(long time){
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	TIM6->CNT = 0;
 8000520:	4b07      	ldr	r3, [pc, #28]	; (8000540 <delayMicro+0x28>)
 8000522:	2200      	movs	r2, #0
 8000524:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM6->CNT < time){}
 8000526:	bf00      	nop
 8000528:	4b05      	ldr	r3, [pc, #20]	; (8000540 <delayMicro+0x28>)
 800052a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	429a      	cmp	r2, r3
 8000530:	d3fa      	bcc.n	8000528 <delayMicro+0x10>
}
 8000532:	bf00      	nop
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	40001000 	.word	0x40001000

08000544 <printMessage>:
			strncat(buffer, &incomingChar,1);
		}
	}
}

void printMessage(char* buffer){
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i<strlen(buffer); i++){
 800054c:	2300      	movs	r3, #0
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	e00e      	b.n	8000570 <printMessage+0x2c>
		HAL_UART_Transmit (&huart3, (uint8_t*) buffer+i, 1, 10);
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	18d1      	adds	r1, r2, r3
 8000558:	230a      	movs	r3, #10
 800055a:	2201      	movs	r2, #1
 800055c:	480c      	ldr	r0, [pc, #48]	; (8000590 <printMessage+0x4c>)
 800055e:	f003 fe3e 	bl	80041de <HAL_UART_Transmit>
		delayMicro(pow(2,10));
 8000562:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000566:	f7ff ffd7 	bl	8000518 <delayMicro>
	for(int i = 0; i<strlen(buffer); i++){
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	3301      	adds	r3, #1
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f7ff fe29 	bl	80001c8 <strlen>
 8000576:	4602      	mov	r2, r0
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	429a      	cmp	r2, r3
 800057c:	d8e9      	bhi.n	8000552 <printMessage+0xe>
	}
	delayMicro(pow(2,15));
 800057e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000582:	f7ff ffc9 	bl	8000518 <delayMicro>

}
 8000586:	bf00      	nop
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	2000011c 	.word	0x2000011c

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f000 fc3b 	bl	8000e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f81f 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 f90b 	bl	80007bc <MX_GPIO_Init>
  MX_USB_HOST_Init();
 80005a6:	f006 ff8f 	bl	80074c8 <MX_USB_HOST_Init>
  MX_TIM6_Init();
 80005aa:	f000 f887 	bl	80006bc <MX_TIM6_Init>
  MX_DMA_Init();
 80005ae:	f000 f8e5 	bl	800077c <MX_DMA_Init>
  MX_USART3_UART_Init();
 80005b2:	f000 f8b9 	bl	8000728 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	initPins();
 80005b6:	f7ff ff8b 	bl	80004d0 <initPins>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005ba:	f006 ffab 	bl	8007514 <MX_USB_HOST_Process>

//    getMessage(messageBuffer);
//	printMessage(messageBuffer);


    if(checkEndstop()){
 80005be:	f7ff ff9d 	bl	80004fc <checkEndstop>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d0f8      	beq.n	80005ba <main+0x26>
//    	moveAxisRelative(Z,50,120,500);
    	char* message = "Endstop triggered\r\n";
 80005c8:	4b04      	ldr	r3, [pc, #16]	; (80005dc <main+0x48>)
 80005ca:	607b      	str	r3, [r7, #4]
    	printMessage(message);
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f7ff ffb9 	bl	8000544 <printMessage>
    	delayMicro(pow(2,15));
 80005d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80005d6:	f7ff ff9f 	bl	8000518 <delayMicro>
    MX_USB_HOST_Process();
 80005da:	e7ee      	b.n	80005ba <main+0x26>
 80005dc:	08007d04 	.word	0x08007d04

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	; 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	2230      	movs	r2, #48	; 0x30
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f007 faac 	bl	8007b4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	4b2a      	ldr	r3, [pc, #168]	; (80006b4 <SystemClock_Config+0xd4>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	4a29      	ldr	r2, [pc, #164]	; (80006b4 <SystemClock_Config+0xd4>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	; 0x40
 8000614:	4b27      	ldr	r3, [pc, #156]	; (80006b4 <SystemClock_Config+0xd4>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	4b24      	ldr	r3, [pc, #144]	; (80006b8 <SystemClock_Config+0xd8>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a23      	ldr	r2, [pc, #140]	; (80006b8 <SystemClock_Config+0xd8>)
 800062a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <SystemClock_Config+0xd8>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800063c:	2303      	movs	r3, #3
 800063e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000640:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000646:	2301      	movs	r3, #1
 8000648:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064a:	2310      	movs	r3, #16
 800064c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000652:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000658:	2304      	movs	r3, #4
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800065c:	23a8      	movs	r3, #168	; 0xa8
 800065e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000664:	2307      	movs	r3, #7
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f002 ff89 	bl	8003584 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000678:	f000 fa30 	bl	8000adc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000688:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800068c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000692:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f003 f9ea 	bl	8003a74 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006a6:	f000 fa19 	bl	8000adc <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	; 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_TIM6_Init+0x64>)
 80006cc:	4a15      	ldr	r2, [pc, #84]	; (8000724 <MX_TIM6_Init+0x68>)
 80006ce:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <MX_TIM6_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_TIM6_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80006dc:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_TIM6_Init+0x64>)
 80006de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006e2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e4:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_TIM6_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80006ea:	480d      	ldr	r0, [pc, #52]	; (8000720 <MX_TIM6_Init+0x64>)
 80006ec:	f003 fbbe 	bl	8003e6c <HAL_TIM_Base_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80006f6:	f000 f9f1 	bl	8000adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006fa:	2300      	movs	r3, #0
 80006fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000702:	463b      	mov	r3, r7
 8000704:	4619      	mov	r1, r3
 8000706:	4806      	ldr	r0, [pc, #24]	; (8000720 <MX_TIM6_Init+0x64>)
 8000708:	f003 fca0 	bl	800404c <HAL_TIMEx_MasterConfigSynchronization>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000712:	f000 f9e3 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000160 	.word	0x20000160
 8000724:	40001000 	.word	0x40001000

08000728 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 800072e:	4a12      	ldr	r2, [pc, #72]	; (8000778 <MX_USART3_UART_Init+0x50>)
 8000730:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 8000734:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000738:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 8000760:	f003 fcf0 	bl	8004144 <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800076a:	f000 f9b7 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	2000011c 	.word	0x2000011c
 8000778:	40004800 	.word	0x40004800

0800077c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_DMA_Init+0x3c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a0b      	ldr	r2, [pc, #44]	; (80007b8 <MX_DMA_Init+0x3c>)
 800078c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_DMA_Init+0x3c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2100      	movs	r1, #0
 80007a2:	200c      	movs	r0, #12
 80007a4:	f000 fca7 	bl	80010f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80007a8:	200c      	movs	r0, #12
 80007aa:	f000 fcc0 	bl	800112e <HAL_NVIC_EnableIRQ>

}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08c      	sub	sp, #48	; 0x30
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]
 80007d6:	4bb6      	ldr	r3, [pc, #728]	; (8000ab0 <MX_GPIO_Init+0x2f4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4ab5      	ldr	r2, [pc, #724]	; (8000ab0 <MX_GPIO_Init+0x2f4>)
 80007dc:	f043 0310 	orr.w	r3, r3, #16
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4bb3      	ldr	r3, [pc, #716]	; (8000ab0 <MX_GPIO_Init+0x2f4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0310 	and.w	r3, r3, #16
 80007ea:	61bb      	str	r3, [r7, #24]
 80007ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	4baf      	ldr	r3, [pc, #700]	; (8000ab0 <MX_GPIO_Init+0x2f4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4aae      	ldr	r2, [pc, #696]	; (8000ab0 <MX_GPIO_Init+0x2f4>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4bac      	ldr	r3, [pc, #688]	; (8000ab0 <MX_GPIO_Init+0x2f4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	4ba8      	ldr	r3, [pc, #672]	; (8000ab0 <MX_GPIO_Init+0x2f4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4aa7      	ldr	r2, [pc, #668]	; (8000ab0 <MX_GPIO_Init+0x2f4>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4ba5      	ldr	r3, [pc, #660]	; (8000ab0 <MX_GPIO_Init+0x2f4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	4ba1      	ldr	r3, [pc, #644]	; (8000ab0 <MX_GPIO_Init+0x2f4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4aa0      	ldr	r2, [pc, #640]	; (8000ab0 <MX_GPIO_Init+0x2f4>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b9e      	ldr	r3, [pc, #632]	; (8000ab0 <MX_GPIO_Init+0x2f4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	4b9a      	ldr	r3, [pc, #616]	; (8000ab0 <MX_GPIO_Init+0x2f4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a99      	ldr	r2, [pc, #612]	; (8000ab0 <MX_GPIO_Init+0x2f4>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b97      	ldr	r3, [pc, #604]	; (8000ab0 <MX_GPIO_Init+0x2f4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b93      	ldr	r3, [pc, #588]	; (8000ab0 <MX_GPIO_Init+0x2f4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a92      	ldr	r2, [pc, #584]	; (8000ab0 <MX_GPIO_Init+0x2f4>)
 8000868:	f043 0308 	orr.w	r3, r3, #8
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b90      	ldr	r3, [pc, #576]	; (8000ab0 <MX_GPIO_Init+0x2f4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0308 	and.w	r3, r3, #8
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 7184 	mov.w	r1, #264	; 0x108
 8000880:	488c      	ldr	r0, [pc, #560]	; (8000ab4 <MX_GPIO_Init+0x2f8>)
 8000882:	f001 f8f5 	bl	8001a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5
 8000886:	2200      	movs	r2, #0
 8000888:	f24e 01e0 	movw	r1, #57568	; 0xe0e0
 800088c:	488a      	ldr	r0, [pc, #552]	; (8000ab8 <MX_GPIO_Init+0x2fc>)
 800088e:	f001 f8ef 	bl	8001a70 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000892:	2201      	movs	r2, #1
 8000894:	2101      	movs	r1, #1
 8000896:	4888      	ldr	r0, [pc, #544]	; (8000ab8 <MX_GPIO_Init+0x2fc>)
 8000898:	f001 f8ea 	bl	8001a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 800089c:	2200      	movs	r2, #0
 800089e:	21ae      	movs	r1, #174	; 0xae
 80008a0:	4886      	ldr	r0, [pc, #536]	; (8000abc <MX_GPIO_Init+0x300>)
 80008a2:	f001 f8e5 	bl	8001a70 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2102      	movs	r1, #2
 80008aa:	4885      	ldr	r0, [pc, #532]	; (8000ac0 <MX_GPIO_Init+0x304>)
 80008ac:	f001 f8e0 	bl	8001a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008b0:	2200      	movs	r2, #0
 80008b2:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008b6:	4883      	ldr	r0, [pc, #524]	; (8000ac4 <MX_GPIO_Init+0x308>)
 80008b8:	f001 f8da 	bl	8001a70 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE8 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_8;
 80008bc:	f44f 7384 	mov.w	r3, #264	; 0x108
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	4877      	ldr	r0, [pc, #476]	; (8000ab4 <MX_GPIO_Init+0x2f8>)
 80008d6:	f000 ff2f 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 OTG_FS_PowerSwitchOn_Pin
                           PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|OTG_FS_PowerSwitchOn_Pin
 80008da:	f24e 03e1 	movw	r3, #57569	; 0xe0e1
 80008de:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	4871      	ldr	r0, [pc, #452]	; (8000ab8 <MX_GPIO_Init+0x2fc>)
 80008f4:	f000 ff20 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008f8:	2308      	movs	r3, #8
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000908:	2305      	movs	r3, #5
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	4869      	ldr	r0, [pc, #420]	; (8000ab8 <MX_GPIO_Init+0x2fc>)
 8000914:	f000 ff10 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000918:	2301      	movs	r3, #1
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800091c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4863      	ldr	r0, [pc, #396]	; (8000abc <MX_GPIO_Init+0x300>)
 800092e:	f000 ff03 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA5
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 8000932:	23ae      	movs	r3, #174	; 0xae
 8000934:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	485c      	ldr	r0, [pc, #368]	; (8000abc <MX_GPIO_Init+0x300>)
 800094a:	f000 fef5 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800094e:	2310      	movs	r3, #16
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800095e:	2306      	movs	r3, #6
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	4854      	ldr	r0, [pc, #336]	; (8000abc <MX_GPIO_Init+0x300>)
 800096a:	f000 fee5 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_MISO_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 800096e:	2340      	movs	r3, #64	; 0x40
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800097e:	2305      	movs	r3, #5
 8000980:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	484c      	ldr	r0, [pc, #304]	; (8000abc <MX_GPIO_Init+0x300>)
 800098a:	f000 fed5 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800098e:	2302      	movs	r3, #2
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4846      	ldr	r0, [pc, #280]	; (8000ac0 <MX_GPIO_Init+0x304>)
 80009a6:	f000 fec7 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009aa:	2304      	movs	r3, #4
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ae:	2300      	movs	r3, #0
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	4840      	ldr	r0, [pc, #256]	; (8000ac0 <MX_GPIO_Init+0x304>)
 80009be:	f000 febb 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009d4:	2305      	movs	r3, #5
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	4838      	ldr	r0, [pc, #224]	; (8000ac0 <MX_GPIO_Init+0x304>)
 80009e0:	f000 feaa 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009e4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009e8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4831      	ldr	r0, [pc, #196]	; (8000ac4 <MX_GPIO_Init+0x308>)
 80009fe:	f000 fe9b 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	4828      	ldr	r0, [pc, #160]	; (8000ab8 <MX_GPIO_Init+0x2fc>)
 8000a18:	f000 fe8e 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a1c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a2e:	2306      	movs	r3, #6
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	481f      	ldr	r0, [pc, #124]	; (8000ab8 <MX_GPIO_Init+0x2fc>)
 8000a3a:	f000 fe7d 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a3e:	2320      	movs	r3, #32
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	481c      	ldr	r0, [pc, #112]	; (8000ac4 <MX_GPIO_Init+0x308>)
 8000a52:	f000 fe71 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a56:	2340      	movs	r3, #64	; 0x40
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a62:	2303      	movs	r3, #3
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a66:	2307      	movs	r3, #7
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4813      	ldr	r0, [pc, #76]	; (8000ac0 <MX_GPIO_Init+0x304>)
 8000a72:	f000 fe61 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8000a76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a7c:	2312      	movs	r3, #18
 8000a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	480b      	ldr	r0, [pc, #44]	; (8000ac0 <MX_GPIO_Init+0x304>)
 8000a94:	f000 fe50 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a9c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	e00c      	b.n	8000ac8 <MX_GPIO_Init+0x30c>
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40020800 	.word	0x40020800
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	40020400 	.word	0x40020400
 8000ac4:	40020c00 	.word	0x40020c00
 8000ac8:	4803      	ldr	r0, [pc, #12]	; (8000ad8 <MX_GPIO_Init+0x31c>)
 8000aca:	f000 fe35 	bl	8001738 <HAL_GPIO_Init>

}
 8000ace:	bf00      	nop
 8000ad0:	3730      	adds	r7, #48	; 0x30
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40021000 	.word	0x40021000

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
}
 8000ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ae4:	e7fe      	b.n	8000ae4 <Error_Handler+0x8>
	...

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <HAL_MspInit+0x4c>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <HAL_MspInit+0x4c>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afc:	6453      	str	r3, [r2, #68]	; 0x44
 8000afe:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b26:	2007      	movs	r0, #7
 8000b28:	f000 fada 	bl	80010e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40023800 	.word	0x40023800

08000b38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <HAL_TIM_Base_MspInit+0x3c>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d10d      	bne.n	8000b66 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <HAL_TIM_Base_MspInit+0x40>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	4a09      	ldr	r2, [pc, #36]	; (8000b78 <HAL_TIM_Base_MspInit+0x40>)
 8000b54:	f043 0310 	orr.w	r3, r3, #16
 8000b58:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5a:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <HAL_TIM_Base_MspInit+0x40>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	f003 0310 	and.w	r3, r3, #16
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000b66:	bf00      	nop
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	40001000 	.word	0x40001000
 8000b78:	40023800 	.word	0x40023800

08000b7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a40      	ldr	r2, [pc, #256]	; (8000c9c <HAL_UART_MspInit+0x120>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d17a      	bne.n	8000c94 <HAL_UART_MspInit+0x118>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	4b3f      	ldr	r3, [pc, #252]	; (8000ca0 <HAL_UART_MspInit+0x124>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a3e      	ldr	r2, [pc, #248]	; (8000ca0 <HAL_UART_MspInit+0x124>)
 8000ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
 8000bae:	4b3c      	ldr	r3, [pc, #240]	; (8000ca0 <HAL_UART_MspInit+0x124>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b38      	ldr	r3, [pc, #224]	; (8000ca0 <HAL_UART_MspInit+0x124>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a37      	ldr	r2, [pc, #220]	; (8000ca0 <HAL_UART_MspInit+0x124>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b35      	ldr	r3, [pc, #212]	; (8000ca0 <HAL_UART_MspInit+0x124>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	4b31      	ldr	r3, [pc, #196]	; (8000ca0 <HAL_UART_MspInit+0x124>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a30      	ldr	r2, [pc, #192]	; (8000ca0 <HAL_UART_MspInit+0x124>)
 8000be0:	f043 0308 	orr.w	r3, r3, #8
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b2e      	ldr	r3, [pc, #184]	; (8000ca0 <HAL_UART_MspInit+0x124>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0308 	and.w	r3, r3, #8
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000bf2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c04:	2307      	movs	r3, #7
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4825      	ldr	r0, [pc, #148]	; (8000ca4 <HAL_UART_MspInit+0x128>)
 8000c10:	f000 fd92 	bl	8001738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c26:	2307      	movs	r3, #7
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	481d      	ldr	r0, [pc, #116]	; (8000ca8 <HAL_UART_MspInit+0x12c>)
 8000c32:	f000 fd81 	bl	8001738 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000c36:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <HAL_UART_MspInit+0x130>)
 8000c38:	4a1d      	ldr	r2, [pc, #116]	; (8000cb0 <HAL_UART_MspInit+0x134>)
 8000c3a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <HAL_UART_MspInit+0x130>)
 8000c3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c42:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c44:	4b19      	ldr	r3, [pc, #100]	; (8000cac <HAL_UART_MspInit+0x130>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <HAL_UART_MspInit+0x130>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c50:	4b16      	ldr	r3, [pc, #88]	; (8000cac <HAL_UART_MspInit+0x130>)
 8000c52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c56:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c58:	4b14      	ldr	r3, [pc, #80]	; (8000cac <HAL_UART_MspInit+0x130>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c5e:	4b13      	ldr	r3, [pc, #76]	; (8000cac <HAL_UART_MspInit+0x130>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <HAL_UART_MspInit+0x130>)
 8000c66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c6a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <HAL_UART_MspInit+0x130>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <HAL_UART_MspInit+0x130>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000c78:	480c      	ldr	r0, [pc, #48]	; (8000cac <HAL_UART_MspInit+0x130>)
 8000c7a:	f000 fa73 	bl	8001164 <HAL_DMA_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8000c84:	f7ff ff2a 	bl	8000adc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a08      	ldr	r2, [pc, #32]	; (8000cac <HAL_UART_MspInit+0x130>)
 8000c8c:	639a      	str	r2, [r3, #56]	; 0x38
 8000c8e:	4a07      	ldr	r2, [pc, #28]	; (8000cac <HAL_UART_MspInit+0x130>)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	; 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40004800 	.word	0x40004800
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020400 	.word	0x40020400
 8000ca8:	40020c00 	.word	0x40020c00
 8000cac:	200000bc 	.word	0x200000bc
 8000cb0:	40026028 	.word	0x40026028

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <NMI_Handler+0x4>

08000cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <HardFault_Handler+0x4>

08000cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <MemManage_Handler+0x4>

08000cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d00:	f000 f8da 	bl	8000eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <DMA1_Stream1_IRQHandler+0x10>)
 8000d0e:	f000 fad7 	bl	80012c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200000bc 	.word	0x200000bc

08000d1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <OTG_FS_IRQHandler+0x10>)
 8000d22:	f001 f929 	bl	8001f78 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000598 	.word	0x20000598

08000d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d38:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <_sbrk+0x5c>)
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <_sbrk+0x60>)
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d102      	bne.n	8000d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <_sbrk+0x64>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <_sbrk+0x68>)
 8000d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d207      	bcs.n	8000d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d60:	f006 feba 	bl	8007ad8 <__errno>
 8000d64:	4603      	mov	r3, r0
 8000d66:	220c      	movs	r2, #12
 8000d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6e:	e009      	b.n	8000d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <_sbrk+0x64>)
 8000d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d82:	68fb      	ldr	r3, [r7, #12]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20020000 	.word	0x20020000
 8000d90:	00000400 	.word	0x00000400
 8000d94:	200000ac 	.word	0x200000ac
 8000d98:	200008b0 	.word	0x200008b0

08000d9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <SystemInit+0x20>)
 8000da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <SystemInit+0x20>)
 8000da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc4:	480d      	ldr	r0, [pc, #52]	; (8000dfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dc6:	490e      	ldr	r1, [pc, #56]	; (8000e00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dc8:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ddc:	4c0b      	ldr	r4, [pc, #44]	; (8000e0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dea:	f7ff ffd7 	bl	8000d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dee:	f006 fe79 	bl	8007ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000df2:	f7ff fbcf 	bl	8000594 <main>
  bx  lr    
 8000df6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000df8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e00:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000e04:	08007d4c 	.word	0x08007d4c
  ldr r2, =_sbss
 8000e08:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000e0c:	200008ac 	.word	0x200008ac

08000e10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e10:	e7fe      	b.n	8000e10 <ADC_IRQHandler>
	...

08000e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e18:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	; (8000e54 <HAL_Init+0x40>)
 8000e1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <HAL_Init+0x40>)
 8000e2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <HAL_Init+0x40>)
 8000e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	f000 f94f 	bl	80010e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e42:	2000      	movs	r0, #0
 8000e44:	f000 f808 	bl	8000e58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e48:	f7ff fe4e 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023c00 	.word	0x40023c00

08000e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_InitTick+0x54>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_InitTick+0x58>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 f967 	bl	800114a <HAL_SYSTICK_Config>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e00e      	b.n	8000ea4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b0f      	cmp	r3, #15
 8000e8a:	d80a      	bhi.n	8000ea2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295
 8000e94:	f000 f92f 	bl	80010f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e98:	4a06      	ldr	r2, [pc, #24]	; (8000eb4 <HAL_InitTick+0x5c>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e000      	b.n	8000ea4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	20000008 	.word	0x20000008
 8000eb4:	20000004 	.word	0x20000004

08000eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x20>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x24>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <HAL_IncTick+0x24>)
 8000eca:	6013      	str	r3, [r2, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	200001bc 	.word	0x200001bc

08000ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <HAL_GetTick+0x14>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	200001bc 	.word	0x200001bc

08000ef8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f00:	f7ff ffee 	bl	8000ee0 <HAL_GetTick>
 8000f04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f10:	d005      	beq.n	8000f1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f12:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <HAL_Delay+0x44>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	461a      	mov	r2, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f1e:	bf00      	nop
 8000f20:	f7ff ffde 	bl	8000ee0 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d8f7      	bhi.n	8000f20 <HAL_Delay+0x28>
  {
  }
}
 8000f30:	bf00      	nop
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000008 	.word	0x20000008

08000f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <__NVIC_SetPriorityGrouping+0x44>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f72:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <__NVIC_SetPriorityGrouping+0x44>)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	60d3      	str	r3, [r2, #12]
}
 8000f78:	bf00      	nop
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	0a1b      	lsrs	r3, r3, #8
 8000f92:	f003 0307 	and.w	r3, r3, #7
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	db0b      	blt.n	8000fce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	f003 021f 	and.w	r2, r3, #31
 8000fbc:	4907      	ldr	r1, [pc, #28]	; (8000fdc <__NVIC_EnableIRQ+0x38>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	095b      	lsrs	r3, r3, #5
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000e100 	.word	0xe000e100

08000fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	db0a      	blt.n	800100a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	490c      	ldr	r1, [pc, #48]	; (800102c <__NVIC_SetPriority+0x4c>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	0112      	lsls	r2, r2, #4
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	440b      	add	r3, r1
 8001004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001008:	e00a      	b.n	8001020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4908      	ldr	r1, [pc, #32]	; (8001030 <__NVIC_SetPriority+0x50>)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f003 030f 	and.w	r3, r3, #15
 8001016:	3b04      	subs	r3, #4
 8001018:	0112      	lsls	r2, r2, #4
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	440b      	add	r3, r1
 800101e:	761a      	strb	r2, [r3, #24]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000e100 	.word	0xe000e100
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	; 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f1c3 0307 	rsb	r3, r3, #7
 800104e:	2b04      	cmp	r3, #4
 8001050:	bf28      	it	cs
 8001052:	2304      	movcs	r3, #4
 8001054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3304      	adds	r3, #4
 800105a:	2b06      	cmp	r3, #6
 800105c:	d902      	bls.n	8001064 <NVIC_EncodePriority+0x30>
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3b03      	subs	r3, #3
 8001062:	e000      	b.n	8001066 <NVIC_EncodePriority+0x32>
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	f04f 32ff 	mov.w	r2, #4294967295
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43da      	mvns	r2, r3
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	401a      	ands	r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800107c:	f04f 31ff 	mov.w	r1, #4294967295
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa01 f303 	lsl.w	r3, r1, r3
 8001086:	43d9      	mvns	r1, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	4313      	orrs	r3, r2
         );
}
 800108e:	4618      	mov	r0, r3
 8001090:	3724      	adds	r7, #36	; 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010ac:	d301      	bcc.n	80010b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00f      	b.n	80010d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <SysTick_Config+0x40>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ba:	210f      	movs	r1, #15
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f7ff ff8e 	bl	8000fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <SysTick_Config+0x40>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ca:	4b04      	ldr	r3, [pc, #16]	; (80010dc <SysTick_Config+0x40>)
 80010cc:	2207      	movs	r2, #7
 80010ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	e000e010 	.word	0xe000e010

080010e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff29 	bl	8000f40 <__NVIC_SetPriorityGrouping>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001108:	f7ff ff3e 	bl	8000f88 <__NVIC_GetPriorityGrouping>
 800110c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	68b9      	ldr	r1, [r7, #8]
 8001112:	6978      	ldr	r0, [r7, #20]
 8001114:	f7ff ff8e 	bl	8001034 <NVIC_EncodePriority>
 8001118:	4602      	mov	r2, r0
 800111a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff5d 	bl	8000fe0 <__NVIC_SetPriority>
}
 8001126:	bf00      	nop
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff31 	bl	8000fa4 <__NVIC_EnableIRQ>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ffa2 	bl	800109c <SysTick_Config>
 8001158:	4603      	mov	r3, r0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001170:	f7ff feb6 	bl	8000ee0 <HAL_GetTick>
 8001174:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d101      	bne.n	8001180 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e099      	b.n	80012b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2202      	movs	r2, #2
 8001184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0201 	bic.w	r2, r2, #1
 800119e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011a0:	e00f      	b.n	80011c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011a2:	f7ff fe9d 	bl	8000ee0 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b05      	cmp	r3, #5
 80011ae:	d908      	bls.n	80011c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2220      	movs	r2, #32
 80011b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2203      	movs	r2, #3
 80011ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e078      	b.n	80012b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1e8      	bne.n	80011a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	4b38      	ldr	r3, [pc, #224]	; (80012bc <HAL_DMA_Init+0x158>)
 80011dc:	4013      	ands	r3, r2
 80011de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001206:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	4313      	orrs	r3, r2
 8001212:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001218:	2b04      	cmp	r3, #4
 800121a:	d107      	bne.n	800122c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001224:	4313      	orrs	r3, r2
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	4313      	orrs	r3, r2
 800122a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	f023 0307 	bic.w	r3, r3, #7
 8001242:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	4313      	orrs	r3, r2
 800124c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001252:	2b04      	cmp	r3, #4
 8001254:	d117      	bne.n	8001286 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	4313      	orrs	r3, r2
 800125e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001264:	2b00      	cmp	r3, #0
 8001266:	d00e      	beq.n	8001286 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 f9e9 	bl	8001640 <DMA_CheckFifoParam>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d008      	beq.n	8001286 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2240      	movs	r2, #64	; 0x40
 8001278:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001282:	2301      	movs	r3, #1
 8001284:	e016      	b.n	80012b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	697a      	ldr	r2, [r7, #20]
 800128c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 f9a0 	bl	80015d4 <DMA_CalcBaseAndBitshift>
 8001294:	4603      	mov	r3, r0
 8001296:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800129c:	223f      	movs	r2, #63	; 0x3f
 800129e:	409a      	lsls	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2201      	movs	r2, #1
 80012ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	f010803f 	.word	0xf010803f

080012c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80012cc:	4b92      	ldr	r3, [pc, #584]	; (8001518 <HAL_DMA_IRQHandler+0x258>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a92      	ldr	r2, [pc, #584]	; (800151c <HAL_DMA_IRQHandler+0x25c>)
 80012d2:	fba2 2303 	umull	r2, r3, r2, r3
 80012d6:	0a9b      	lsrs	r3, r3, #10
 80012d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ea:	2208      	movs	r2, #8
 80012ec:	409a      	lsls	r2, r3
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d01a      	beq.n	800132c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	2b00      	cmp	r3, #0
 8001302:	d013      	beq.n	800132c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 0204 	bic.w	r2, r2, #4
 8001312:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001318:	2208      	movs	r2, #8
 800131a:	409a      	lsls	r2, r3
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001324:	f043 0201 	orr.w	r2, r3, #1
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001330:	2201      	movs	r2, #1
 8001332:	409a      	lsls	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4013      	ands	r3, r2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d012      	beq.n	8001362 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001346:	2b00      	cmp	r3, #0
 8001348:	d00b      	beq.n	8001362 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134e:	2201      	movs	r2, #1
 8001350:	409a      	lsls	r2, r3
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800135a:	f043 0202 	orr.w	r2, r3, #2
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001366:	2204      	movs	r2, #4
 8001368:	409a      	lsls	r2, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4013      	ands	r3, r2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d012      	beq.n	8001398 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d00b      	beq.n	8001398 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001384:	2204      	movs	r2, #4
 8001386:	409a      	lsls	r2, r3
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001390:	f043 0204 	orr.w	r2, r3, #4
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139c:	2210      	movs	r2, #16
 800139e:	409a      	lsls	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4013      	ands	r3, r2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d043      	beq.n	8001430 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d03c      	beq.n	8001430 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ba:	2210      	movs	r2, #16
 80013bc:	409a      	lsls	r2, r3
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d018      	beq.n	8001402 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d108      	bne.n	80013f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d024      	beq.n	8001430 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	4798      	blx	r3
 80013ee:	e01f      	b.n	8001430 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d01b      	beq.n	8001430 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	4798      	blx	r3
 8001400:	e016      	b.n	8001430 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140c:	2b00      	cmp	r3, #0
 800140e:	d107      	bne.n	8001420 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 0208 	bic.w	r2, r2, #8
 800141e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001434:	2220      	movs	r2, #32
 8001436:	409a      	lsls	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4013      	ands	r3, r2
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 808e 	beq.w	800155e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0310 	and.w	r3, r3, #16
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 8086 	beq.w	800155e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001456:	2220      	movs	r2, #32
 8001458:	409a      	lsls	r2, r3
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b05      	cmp	r3, #5
 8001468:	d136      	bne.n	80014d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0216 	bic.w	r2, r2, #22
 8001478:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	695a      	ldr	r2, [r3, #20]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001488:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	2b00      	cmp	r3, #0
 8001490:	d103      	bne.n	800149a <HAL_DMA_IRQHandler+0x1da>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001496:	2b00      	cmp	r3, #0
 8001498:	d007      	beq.n	80014aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0208 	bic.w	r2, r2, #8
 80014a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ae:	223f      	movs	r2, #63	; 0x3f
 80014b0:	409a      	lsls	r2, r3
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d07d      	beq.n	80015ca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	4798      	blx	r3
        }
        return;
 80014d6:	e078      	b.n	80015ca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d01c      	beq.n	8001520 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d108      	bne.n	8001506 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d030      	beq.n	800155e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	4798      	blx	r3
 8001504:	e02b      	b.n	800155e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800150a:	2b00      	cmp	r3, #0
 800150c:	d027      	beq.n	800155e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	4798      	blx	r3
 8001516:	e022      	b.n	800155e <HAL_DMA_IRQHandler+0x29e>
 8001518:	20000000 	.word	0x20000000
 800151c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10f      	bne.n	800154e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 0210 	bic.w	r2, r2, #16
 800153c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001562:	2b00      	cmp	r3, #0
 8001564:	d032      	beq.n	80015cc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d022      	beq.n	80015b8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2205      	movs	r2, #5
 8001576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 0201 	bic.w	r2, r2, #1
 8001588:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	3301      	adds	r3, #1
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	429a      	cmp	r2, r3
 8001594:	d307      	bcc.n	80015a6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1f2      	bne.n	800158a <HAL_DMA_IRQHandler+0x2ca>
 80015a4:	e000      	b.n	80015a8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80015a6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	4798      	blx	r3
 80015c8:	e000      	b.n	80015cc <HAL_DMA_IRQHandler+0x30c>
        return;
 80015ca:	bf00      	nop
    }
  }
}
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop

080015d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	3b10      	subs	r3, #16
 80015e4:	4a14      	ldr	r2, [pc, #80]	; (8001638 <DMA_CalcBaseAndBitshift+0x64>)
 80015e6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ea:	091b      	lsrs	r3, r3, #4
 80015ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015ee:	4a13      	ldr	r2, [pc, #76]	; (800163c <DMA_CalcBaseAndBitshift+0x68>)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4413      	add	r3, r2
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2b03      	cmp	r3, #3
 8001600:	d909      	bls.n	8001616 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800160a:	f023 0303 	bic.w	r3, r3, #3
 800160e:	1d1a      	adds	r2, r3, #4
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	659a      	str	r2, [r3, #88]	; 0x58
 8001614:	e007      	b.n	8001626 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800161e:	f023 0303 	bic.w	r3, r3, #3
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800162a:	4618      	mov	r0, r3
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	aaaaaaab 	.word	0xaaaaaaab
 800163c:	08007d34 	.word	0x08007d34

08001640 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001648:	2300      	movs	r3, #0
 800164a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001650:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d11f      	bne.n	800169a <DMA_CheckFifoParam+0x5a>
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	2b03      	cmp	r3, #3
 800165e:	d856      	bhi.n	800170e <DMA_CheckFifoParam+0xce>
 8001660:	a201      	add	r2, pc, #4	; (adr r2, 8001668 <DMA_CheckFifoParam+0x28>)
 8001662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001666:	bf00      	nop
 8001668:	08001679 	.word	0x08001679
 800166c:	0800168b 	.word	0x0800168b
 8001670:	08001679 	.word	0x08001679
 8001674:	0800170f 	.word	0x0800170f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d046      	beq.n	8001712 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001688:	e043      	b.n	8001712 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001692:	d140      	bne.n	8001716 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001698:	e03d      	b.n	8001716 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016a2:	d121      	bne.n	80016e8 <DMA_CheckFifoParam+0xa8>
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d837      	bhi.n	800171a <DMA_CheckFifoParam+0xda>
 80016aa:	a201      	add	r2, pc, #4	; (adr r2, 80016b0 <DMA_CheckFifoParam+0x70>)
 80016ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b0:	080016c1 	.word	0x080016c1
 80016b4:	080016c7 	.word	0x080016c7
 80016b8:	080016c1 	.word	0x080016c1
 80016bc:	080016d9 	.word	0x080016d9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	73fb      	strb	r3, [r7, #15]
      break;
 80016c4:	e030      	b.n	8001728 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d025      	beq.n	800171e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016d6:	e022      	b.n	800171e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016e0:	d11f      	bne.n	8001722 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80016e6:	e01c      	b.n	8001722 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d903      	bls.n	80016f6 <DMA_CheckFifoParam+0xb6>
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	d003      	beq.n	80016fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80016f4:	e018      	b.n	8001728 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	73fb      	strb	r3, [r7, #15]
      break;
 80016fa:	e015      	b.n	8001728 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00e      	beq.n	8001726 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	73fb      	strb	r3, [r7, #15]
      break;
 800170c:	e00b      	b.n	8001726 <DMA_CheckFifoParam+0xe6>
      break;
 800170e:	bf00      	nop
 8001710:	e00a      	b.n	8001728 <DMA_CheckFifoParam+0xe8>
      break;
 8001712:	bf00      	nop
 8001714:	e008      	b.n	8001728 <DMA_CheckFifoParam+0xe8>
      break;
 8001716:	bf00      	nop
 8001718:	e006      	b.n	8001728 <DMA_CheckFifoParam+0xe8>
      break;
 800171a:	bf00      	nop
 800171c:	e004      	b.n	8001728 <DMA_CheckFifoParam+0xe8>
      break;
 800171e:	bf00      	nop
 8001720:	e002      	b.n	8001728 <DMA_CheckFifoParam+0xe8>
      break;   
 8001722:	bf00      	nop
 8001724:	e000      	b.n	8001728 <DMA_CheckFifoParam+0xe8>
      break;
 8001726:	bf00      	nop
    }
  } 
  
  return status; 
 8001728:	7bfb      	ldrb	r3, [r7, #15]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop

08001738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001738:	b480      	push	{r7}
 800173a:	b089      	sub	sp, #36	; 0x24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800174a:	2300      	movs	r3, #0
 800174c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
 8001752:	e16b      	b.n	8001a2c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001754:	2201      	movs	r2, #1
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	429a      	cmp	r2, r3
 800176e:	f040 815a 	bne.w	8001a26 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	2b01      	cmp	r3, #1
 800177c:	d005      	beq.n	800178a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001786:	2b02      	cmp	r3, #2
 8001788:	d130      	bne.n	80017ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	2203      	movs	r2, #3
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4013      	ands	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	68da      	ldr	r2, [r3, #12]
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017c0:	2201      	movs	r2, #1
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	091b      	lsrs	r3, r3, #4
 80017d6:	f003 0201 	and.w	r2, r3, #1
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	2b03      	cmp	r3, #3
 80017f6:	d017      	beq.n	8001828 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	2203      	movs	r2, #3
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d123      	bne.n	800187c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	08da      	lsrs	r2, r3, #3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3208      	adds	r2, #8
 800183c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001840:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	220f      	movs	r2, #15
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	691a      	ldr	r2, [r3, #16]
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	08da      	lsrs	r2, r3, #3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3208      	adds	r2, #8
 8001876:	69b9      	ldr	r1, [r7, #24]
 8001878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	2203      	movs	r2, #3
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 0203 	and.w	r2, r3, #3
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 80b4 	beq.w	8001a26 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	4b60      	ldr	r3, [pc, #384]	; (8001a44 <HAL_GPIO_Init+0x30c>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	4a5f      	ldr	r2, [pc, #380]	; (8001a44 <HAL_GPIO_Init+0x30c>)
 80018c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018cc:	6453      	str	r3, [r2, #68]	; 0x44
 80018ce:	4b5d      	ldr	r3, [pc, #372]	; (8001a44 <HAL_GPIO_Init+0x30c>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018da:	4a5b      	ldr	r2, [pc, #364]	; (8001a48 <HAL_GPIO_Init+0x310>)
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	089b      	lsrs	r3, r3, #2
 80018e0:	3302      	adds	r3, #2
 80018e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	220f      	movs	r2, #15
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4013      	ands	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a52      	ldr	r2, [pc, #328]	; (8001a4c <HAL_GPIO_Init+0x314>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d02b      	beq.n	800195e <HAL_GPIO_Init+0x226>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a51      	ldr	r2, [pc, #324]	; (8001a50 <HAL_GPIO_Init+0x318>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d025      	beq.n	800195a <HAL_GPIO_Init+0x222>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a50      	ldr	r2, [pc, #320]	; (8001a54 <HAL_GPIO_Init+0x31c>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d01f      	beq.n	8001956 <HAL_GPIO_Init+0x21e>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a4f      	ldr	r2, [pc, #316]	; (8001a58 <HAL_GPIO_Init+0x320>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d019      	beq.n	8001952 <HAL_GPIO_Init+0x21a>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a4e      	ldr	r2, [pc, #312]	; (8001a5c <HAL_GPIO_Init+0x324>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d013      	beq.n	800194e <HAL_GPIO_Init+0x216>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a4d      	ldr	r2, [pc, #308]	; (8001a60 <HAL_GPIO_Init+0x328>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d00d      	beq.n	800194a <HAL_GPIO_Init+0x212>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a4c      	ldr	r2, [pc, #304]	; (8001a64 <HAL_GPIO_Init+0x32c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d007      	beq.n	8001946 <HAL_GPIO_Init+0x20e>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a4b      	ldr	r2, [pc, #300]	; (8001a68 <HAL_GPIO_Init+0x330>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d101      	bne.n	8001942 <HAL_GPIO_Init+0x20a>
 800193e:	2307      	movs	r3, #7
 8001940:	e00e      	b.n	8001960 <HAL_GPIO_Init+0x228>
 8001942:	2308      	movs	r3, #8
 8001944:	e00c      	b.n	8001960 <HAL_GPIO_Init+0x228>
 8001946:	2306      	movs	r3, #6
 8001948:	e00a      	b.n	8001960 <HAL_GPIO_Init+0x228>
 800194a:	2305      	movs	r3, #5
 800194c:	e008      	b.n	8001960 <HAL_GPIO_Init+0x228>
 800194e:	2304      	movs	r3, #4
 8001950:	e006      	b.n	8001960 <HAL_GPIO_Init+0x228>
 8001952:	2303      	movs	r3, #3
 8001954:	e004      	b.n	8001960 <HAL_GPIO_Init+0x228>
 8001956:	2302      	movs	r3, #2
 8001958:	e002      	b.n	8001960 <HAL_GPIO_Init+0x228>
 800195a:	2301      	movs	r3, #1
 800195c:	e000      	b.n	8001960 <HAL_GPIO_Init+0x228>
 800195e:	2300      	movs	r3, #0
 8001960:	69fa      	ldr	r2, [r7, #28]
 8001962:	f002 0203 	and.w	r2, r2, #3
 8001966:	0092      	lsls	r2, r2, #2
 8001968:	4093      	lsls	r3, r2
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001970:	4935      	ldr	r1, [pc, #212]	; (8001a48 <HAL_GPIO_Init+0x310>)
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	089b      	lsrs	r3, r3, #2
 8001976:	3302      	adds	r3, #2
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800197e:	4b3b      	ldr	r3, [pc, #236]	; (8001a6c <HAL_GPIO_Init+0x334>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	43db      	mvns	r3, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4013      	ands	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019a2:	4a32      	ldr	r2, [pc, #200]	; (8001a6c <HAL_GPIO_Init+0x334>)
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019a8:	4b30      	ldr	r3, [pc, #192]	; (8001a6c <HAL_GPIO_Init+0x334>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019cc:	4a27      	ldr	r2, [pc, #156]	; (8001a6c <HAL_GPIO_Init+0x334>)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019d2:	4b26      	ldr	r3, [pc, #152]	; (8001a6c <HAL_GPIO_Init+0x334>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019f6:	4a1d      	ldr	r2, [pc, #116]	; (8001a6c <HAL_GPIO_Init+0x334>)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <HAL_GPIO_Init+0x334>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a20:	4a12      	ldr	r2, [pc, #72]	; (8001a6c <HAL_GPIO_Init+0x334>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	61fb      	str	r3, [r7, #28]
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	2b0f      	cmp	r3, #15
 8001a30:	f67f ae90 	bls.w	8001754 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a34:	bf00      	nop
 8001a36:	bf00      	nop
 8001a38:	3724      	adds	r7, #36	; 0x24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40013800 	.word	0x40013800
 8001a4c:	40020000 	.word	0x40020000
 8001a50:	40020400 	.word	0x40020400
 8001a54:	40020800 	.word	0x40020800
 8001a58:	40020c00 	.word	0x40020c00
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40021400 	.word	0x40021400
 8001a64:	40021800 	.word	0x40021800
 8001a68:	40021c00 	.word	0x40021c00
 8001a6c:	40013c00 	.word	0x40013c00

08001a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	807b      	strh	r3, [r7, #2]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a80:	787b      	ldrb	r3, [r7, #1]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a86:	887a      	ldrh	r2, [r7, #2]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a8c:	e003      	b.n	8001a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a8e:	887b      	ldrh	r3, [r7, #2]
 8001a90:	041a      	lsls	r2, r3, #16
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	619a      	str	r2, [r3, #24]
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001aa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aa4:	b08f      	sub	sp, #60	; 0x3c
 8001aa6:	af0a      	add	r7, sp, #40	; 0x28
 8001aa8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e054      	b.n	8001b5e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d106      	bne.n	8001ad4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f005 fd58 	bl	8007584 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d102      	bne.n	8001aee <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f002 feae 	bl	8004854 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	603b      	str	r3, [r7, #0]
 8001afe:	687e      	ldr	r6, [r7, #4]
 8001b00:	466d      	mov	r5, sp
 8001b02:	f106 0410 	add.w	r4, r6, #16
 8001b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b12:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b16:	1d33      	adds	r3, r6, #4
 8001b18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b1a:	6838      	ldr	r0, [r7, #0]
 8001b1c:	f002 fe28 	bl	8004770 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2101      	movs	r1, #1
 8001b26:	4618      	mov	r0, r3
 8001b28:	f002 fea5 	bl	8004876 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	603b      	str	r3, [r7, #0]
 8001b32:	687e      	ldr	r6, [r7, #4]
 8001b34:	466d      	mov	r5, sp
 8001b36:	f106 0410 	add.w	r4, r6, #16
 8001b3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b46:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b4a:	1d33      	adds	r3, r6, #4
 8001b4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b4e:	6838      	ldr	r0, [r7, #0]
 8001b50:	f003 f80c 	bl	8004b6c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b66 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001b66:	b590      	push	{r4, r7, lr}
 8001b68:	b089      	sub	sp, #36	; 0x24
 8001b6a:	af04      	add	r7, sp, #16
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	4608      	mov	r0, r1
 8001b70:	4611      	mov	r1, r2
 8001b72:	461a      	mov	r2, r3
 8001b74:	4603      	mov	r3, r0
 8001b76:	70fb      	strb	r3, [r7, #3]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	70bb      	strb	r3, [r7, #2]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d101      	bne.n	8001b8e <HAL_HCD_HC_Init+0x28>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e076      	b.n	8001c7c <HAL_HCD_HC_Init+0x116>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001b96:	78fb      	ldrb	r3, [r7, #3]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	212c      	movs	r1, #44	; 0x2c
 8001b9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	333d      	adds	r3, #61	; 0x3d
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001ba8:	78fb      	ldrb	r3, [r7, #3]
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	212c      	movs	r1, #44	; 0x2c
 8001bae:	fb01 f303 	mul.w	r3, r1, r3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3338      	adds	r3, #56	; 0x38
 8001bb6:	787a      	ldrb	r2, [r7, #1]
 8001bb8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	212c      	movs	r1, #44	; 0x2c
 8001bc0:	fb01 f303 	mul.w	r3, r1, r3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3340      	adds	r3, #64	; 0x40
 8001bc8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001bca:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	212c      	movs	r1, #44	; 0x2c
 8001bd2:	fb01 f303 	mul.w	r3, r1, r3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3339      	adds	r3, #57	; 0x39
 8001bda:	78fa      	ldrb	r2, [r7, #3]
 8001bdc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001bde:	78fb      	ldrb	r3, [r7, #3]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	212c      	movs	r1, #44	; 0x2c
 8001be4:	fb01 f303 	mul.w	r3, r1, r3
 8001be8:	4413      	add	r3, r2
 8001bea:	333f      	adds	r3, #63	; 0x3f
 8001bec:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001bf0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001bf2:	78fb      	ldrb	r3, [r7, #3]
 8001bf4:	78ba      	ldrb	r2, [r7, #2]
 8001bf6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bfa:	b2d0      	uxtb	r0, r2
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	212c      	movs	r1, #44	; 0x2c
 8001c00:	fb01 f303 	mul.w	r3, r1, r3
 8001c04:	4413      	add	r3, r2
 8001c06:	333a      	adds	r3, #58	; 0x3a
 8001c08:	4602      	mov	r2, r0
 8001c0a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001c0c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	da09      	bge.n	8001c28 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	212c      	movs	r1, #44	; 0x2c
 8001c1a:	fb01 f303 	mul.w	r3, r1, r3
 8001c1e:	4413      	add	r3, r2
 8001c20:	333b      	adds	r3, #59	; 0x3b
 8001c22:	2201      	movs	r2, #1
 8001c24:	701a      	strb	r2, [r3, #0]
 8001c26:	e008      	b.n	8001c3a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001c28:	78fb      	ldrb	r3, [r7, #3]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	212c      	movs	r1, #44	; 0x2c
 8001c2e:	fb01 f303 	mul.w	r3, r1, r3
 8001c32:	4413      	add	r3, r2
 8001c34:	333b      	adds	r3, #59	; 0x3b
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001c3a:	78fb      	ldrb	r3, [r7, #3]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	212c      	movs	r1, #44	; 0x2c
 8001c40:	fb01 f303 	mul.w	r3, r1, r3
 8001c44:	4413      	add	r3, r2
 8001c46:	333c      	adds	r3, #60	; 0x3c
 8001c48:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001c4c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6818      	ldr	r0, [r3, #0]
 8001c52:	787c      	ldrb	r4, [r7, #1]
 8001c54:	78ba      	ldrb	r2, [r7, #2]
 8001c56:	78f9      	ldrb	r1, [r7, #3]
 8001c58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c5a:	9302      	str	r3, [sp, #8]
 8001c5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	4623      	mov	r3, r4
 8001c6a:	f003 f8f9 	bl	8004e60 <USB_HC_Init>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd90      	pop	{r4, r7, pc}

08001c84 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d101      	bne.n	8001ca2 <HAL_HCD_HC_Halt+0x1e>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e00f      	b.n	8001cc2 <HAL_HCD_HC_Halt+0x3e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	78fa      	ldrb	r2, [r7, #3]
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f003 fb35 	bl	8005322 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	4608      	mov	r0, r1
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4603      	mov	r3, r0
 8001cdc:	70fb      	strb	r3, [r7, #3]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	70bb      	strb	r3, [r7, #2]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001ce6:	78fb      	ldrb	r3, [r7, #3]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	212c      	movs	r1, #44	; 0x2c
 8001cec:	fb01 f303 	mul.w	r3, r1, r3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	333b      	adds	r3, #59	; 0x3b
 8001cf4:	78ba      	ldrb	r2, [r7, #2]
 8001cf6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001cf8:	78fb      	ldrb	r3, [r7, #3]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	212c      	movs	r1, #44	; 0x2c
 8001cfe:	fb01 f303 	mul.w	r3, r1, r3
 8001d02:	4413      	add	r3, r2
 8001d04:	333f      	adds	r3, #63	; 0x3f
 8001d06:	787a      	ldrb	r2, [r7, #1]
 8001d08:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001d0a:	7c3b      	ldrb	r3, [r7, #16]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d112      	bne.n	8001d36 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	212c      	movs	r1, #44	; 0x2c
 8001d16:	fb01 f303 	mul.w	r3, r1, r3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	3342      	adds	r3, #66	; 0x42
 8001d1e:	2203      	movs	r2, #3
 8001d20:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001d22:	78fb      	ldrb	r3, [r7, #3]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	212c      	movs	r1, #44	; 0x2c
 8001d28:	fb01 f303 	mul.w	r3, r1, r3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	333d      	adds	r3, #61	; 0x3d
 8001d30:	7f3a      	ldrb	r2, [r7, #28]
 8001d32:	701a      	strb	r2, [r3, #0]
 8001d34:	e008      	b.n	8001d48 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	212c      	movs	r1, #44	; 0x2c
 8001d3c:	fb01 f303 	mul.w	r3, r1, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	3342      	adds	r3, #66	; 0x42
 8001d44:	2202      	movs	r2, #2
 8001d46:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001d48:	787b      	ldrb	r3, [r7, #1]
 8001d4a:	2b03      	cmp	r3, #3
 8001d4c:	f200 80c6 	bhi.w	8001edc <HAL_HCD_HC_SubmitRequest+0x210>
 8001d50:	a201      	add	r2, pc, #4	; (adr r2, 8001d58 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d56:	bf00      	nop
 8001d58:	08001d69 	.word	0x08001d69
 8001d5c:	08001ec9 	.word	0x08001ec9
 8001d60:	08001dcd 	.word	0x08001dcd
 8001d64:	08001e4b 	.word	0x08001e4b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001d68:	7c3b      	ldrb	r3, [r7, #16]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	f040 80b8 	bne.w	8001ee0 <HAL_HCD_HC_SubmitRequest+0x214>
 8001d70:	78bb      	ldrb	r3, [r7, #2]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f040 80b4 	bne.w	8001ee0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001d78:	8b3b      	ldrh	r3, [r7, #24]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d108      	bne.n	8001d90 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001d7e:	78fb      	ldrb	r3, [r7, #3]
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	212c      	movs	r1, #44	; 0x2c
 8001d84:	fb01 f303 	mul.w	r3, r1, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	3355      	adds	r3, #85	; 0x55
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d90:	78fb      	ldrb	r3, [r7, #3]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	212c      	movs	r1, #44	; 0x2c
 8001d96:	fb01 f303 	mul.w	r3, r1, r3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3355      	adds	r3, #85	; 0x55
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d109      	bne.n	8001db8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001da4:	78fb      	ldrb	r3, [r7, #3]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	212c      	movs	r1, #44	; 0x2c
 8001daa:	fb01 f303 	mul.w	r3, r1, r3
 8001dae:	4413      	add	r3, r2
 8001db0:	3342      	adds	r3, #66	; 0x42
 8001db2:	2200      	movs	r2, #0
 8001db4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001db6:	e093      	b.n	8001ee0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	212c      	movs	r1, #44	; 0x2c
 8001dbe:	fb01 f303 	mul.w	r3, r1, r3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3342      	adds	r3, #66	; 0x42
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	701a      	strb	r2, [r3, #0]
      break;
 8001dca:	e089      	b.n	8001ee0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001dcc:	78bb      	ldrb	r3, [r7, #2]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d11d      	bne.n	8001e0e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001dd2:	78fb      	ldrb	r3, [r7, #3]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	212c      	movs	r1, #44	; 0x2c
 8001dd8:	fb01 f303 	mul.w	r3, r1, r3
 8001ddc:	4413      	add	r3, r2
 8001dde:	3355      	adds	r3, #85	; 0x55
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d109      	bne.n	8001dfa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001de6:	78fb      	ldrb	r3, [r7, #3]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	212c      	movs	r1, #44	; 0x2c
 8001dec:	fb01 f303 	mul.w	r3, r1, r3
 8001df0:	4413      	add	r3, r2
 8001df2:	3342      	adds	r3, #66	; 0x42
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001df8:	e073      	b.n	8001ee2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dfa:	78fb      	ldrb	r3, [r7, #3]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	212c      	movs	r1, #44	; 0x2c
 8001e00:	fb01 f303 	mul.w	r3, r1, r3
 8001e04:	4413      	add	r3, r2
 8001e06:	3342      	adds	r3, #66	; 0x42
 8001e08:	2202      	movs	r2, #2
 8001e0a:	701a      	strb	r2, [r3, #0]
      break;
 8001e0c:	e069      	b.n	8001ee2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	212c      	movs	r1, #44	; 0x2c
 8001e14:	fb01 f303 	mul.w	r3, r1, r3
 8001e18:	4413      	add	r3, r2
 8001e1a:	3354      	adds	r3, #84	; 0x54
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d109      	bne.n	8001e36 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e22:	78fb      	ldrb	r3, [r7, #3]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	212c      	movs	r1, #44	; 0x2c
 8001e28:	fb01 f303 	mul.w	r3, r1, r3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3342      	adds	r3, #66	; 0x42
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
      break;
 8001e34:	e055      	b.n	8001ee2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e36:	78fb      	ldrb	r3, [r7, #3]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	212c      	movs	r1, #44	; 0x2c
 8001e3c:	fb01 f303 	mul.w	r3, r1, r3
 8001e40:	4413      	add	r3, r2
 8001e42:	3342      	adds	r3, #66	; 0x42
 8001e44:	2202      	movs	r2, #2
 8001e46:	701a      	strb	r2, [r3, #0]
      break;
 8001e48:	e04b      	b.n	8001ee2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001e4a:	78bb      	ldrb	r3, [r7, #2]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d11d      	bne.n	8001e8c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e50:	78fb      	ldrb	r3, [r7, #3]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	212c      	movs	r1, #44	; 0x2c
 8001e56:	fb01 f303 	mul.w	r3, r1, r3
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3355      	adds	r3, #85	; 0x55
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d109      	bne.n	8001e78 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	212c      	movs	r1, #44	; 0x2c
 8001e6a:	fb01 f303 	mul.w	r3, r1, r3
 8001e6e:	4413      	add	r3, r2
 8001e70:	3342      	adds	r3, #66	; 0x42
 8001e72:	2200      	movs	r2, #0
 8001e74:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001e76:	e034      	b.n	8001ee2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	212c      	movs	r1, #44	; 0x2c
 8001e7e:	fb01 f303 	mul.w	r3, r1, r3
 8001e82:	4413      	add	r3, r2
 8001e84:	3342      	adds	r3, #66	; 0x42
 8001e86:	2202      	movs	r2, #2
 8001e88:	701a      	strb	r2, [r3, #0]
      break;
 8001e8a:	e02a      	b.n	8001ee2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	212c      	movs	r1, #44	; 0x2c
 8001e92:	fb01 f303 	mul.w	r3, r1, r3
 8001e96:	4413      	add	r3, r2
 8001e98:	3354      	adds	r3, #84	; 0x54
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d109      	bne.n	8001eb4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	212c      	movs	r1, #44	; 0x2c
 8001ea6:	fb01 f303 	mul.w	r3, r1, r3
 8001eaa:	4413      	add	r3, r2
 8001eac:	3342      	adds	r3, #66	; 0x42
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
      break;
 8001eb2:	e016      	b.n	8001ee2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	212c      	movs	r1, #44	; 0x2c
 8001eba:	fb01 f303 	mul.w	r3, r1, r3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3342      	adds	r3, #66	; 0x42
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	701a      	strb	r2, [r3, #0]
      break;
 8001ec6:	e00c      	b.n	8001ee2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	212c      	movs	r1, #44	; 0x2c
 8001ece:	fb01 f303 	mul.w	r3, r1, r3
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3342      	adds	r3, #66	; 0x42
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	701a      	strb	r2, [r3, #0]
      break;
 8001eda:	e002      	b.n	8001ee2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001edc:	bf00      	nop
 8001ede:	e000      	b.n	8001ee2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001ee0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001ee2:	78fb      	ldrb	r3, [r7, #3]
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	212c      	movs	r1, #44	; 0x2c
 8001ee8:	fb01 f303 	mul.w	r3, r1, r3
 8001eec:	4413      	add	r3, r2
 8001eee:	3344      	adds	r3, #68	; 0x44
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	8b3a      	ldrh	r2, [r7, #24]
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	202c      	movs	r0, #44	; 0x2c
 8001efc:	fb00 f303 	mul.w	r3, r0, r3
 8001f00:	440b      	add	r3, r1
 8001f02:	334c      	adds	r3, #76	; 0x4c
 8001f04:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	212c      	movs	r1, #44	; 0x2c
 8001f0c:	fb01 f303 	mul.w	r3, r1, r3
 8001f10:	4413      	add	r3, r2
 8001f12:	3360      	adds	r3, #96	; 0x60
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	212c      	movs	r1, #44	; 0x2c
 8001f1e:	fb01 f303 	mul.w	r3, r1, r3
 8001f22:	4413      	add	r3, r2
 8001f24:	3350      	adds	r3, #80	; 0x50
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f2a:	78fb      	ldrb	r3, [r7, #3]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	212c      	movs	r1, #44	; 0x2c
 8001f30:	fb01 f303 	mul.w	r3, r1, r3
 8001f34:	4413      	add	r3, r2
 8001f36:	3339      	adds	r3, #57	; 0x39
 8001f38:	78fa      	ldrb	r2, [r7, #3]
 8001f3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001f3c:	78fb      	ldrb	r3, [r7, #3]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	212c      	movs	r1, #44	; 0x2c
 8001f42:	fb01 f303 	mul.w	r3, r1, r3
 8001f46:	4413      	add	r3, r2
 8001f48:	3361      	adds	r3, #97	; 0x61
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6818      	ldr	r0, [r3, #0]
 8001f52:	78fb      	ldrb	r3, [r7, #3]
 8001f54:	222c      	movs	r2, #44	; 0x2c
 8001f56:	fb02 f303 	mul.w	r3, r2, r3
 8001f5a:	3338      	adds	r3, #56	; 0x38
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	18d1      	adds	r1, r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	461a      	mov	r2, r3
 8001f68:	f003 f888 	bl	800507c <USB_HC_StartXfer>
 8001f6c:	4603      	mov	r3, r0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop

08001f78 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f002 fdab 	bl	8004aea <USB_GetMode>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	f040 80f6 	bne.w	8002188 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f002 fd8f 	bl	8004ac4 <USB_ReadInterrupts>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 80ec 	beq.w	8002186 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f002 fd86 	bl	8004ac4 <USB_ReadInterrupts>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001fc2:	d104      	bne.n	8001fce <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001fcc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f002 fd76 	bl	8004ac4 <USB_ReadInterrupts>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fe2:	d104      	bne.n	8001fee <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001fec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f002 fd66 	bl	8004ac4 <USB_ReadInterrupts>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ffe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002002:	d104      	bne.n	800200e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800200c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f002 fd56 	bl	8004ac4 <USB_ReadInterrupts>
 8002018:	4603      	mov	r3, r0
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b02      	cmp	r3, #2
 8002020:	d103      	bne.n	800202a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2202      	movs	r2, #2
 8002028:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f002 fd48 	bl	8004ac4 <USB_ReadInterrupts>
 8002034:	4603      	mov	r3, r0
 8002036:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800203a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800203e:	d11c      	bne.n	800207a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002048:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10f      	bne.n	800207a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800205a:	2110      	movs	r1, #16
 800205c:	6938      	ldr	r0, [r7, #16]
 800205e:	f002 fc57 	bl	8004910 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002062:	6938      	ldr	r0, [r7, #16]
 8002064:	f002 fc78 	bl	8004958 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2101      	movs	r1, #1
 800206e:	4618      	mov	r0, r3
 8002070:	f002 fe30 	bl	8004cd4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f005 fb03 	bl	8007680 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f002 fd20 	bl	8004ac4 <USB_ReadInterrupts>
 8002084:	4603      	mov	r3, r0
 8002086:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800208a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800208e:	d102      	bne.n	8002096 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f001 fa03 	bl	800349c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f002 fd12 	bl	8004ac4 <USB_ReadInterrupts>
 80020a0:	4603      	mov	r3, r0
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	d106      	bne.n	80020b8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f005 facc 	bl	8007648 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2208      	movs	r2, #8
 80020b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f002 fd01 	bl	8004ac4 <USB_ReadInterrupts>
 80020c2:	4603      	mov	r3, r0
 80020c4:	f003 0310 	and.w	r3, r3, #16
 80020c8:	2b10      	cmp	r3, #16
 80020ca:	d101      	bne.n	80020d0 <HAL_HCD_IRQHandler+0x158>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <HAL_HCD_IRQHandler+0x15a>
 80020d0:	2300      	movs	r3, #0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d012      	beq.n	80020fc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	699a      	ldr	r2, [r3, #24]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0210 	bic.w	r2, r2, #16
 80020e4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f001 f906 	bl	80032f8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	699a      	ldr	r2, [r3, #24]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 0210 	orr.w	r2, r2, #16
 80020fa:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f002 fcdf 	bl	8004ac4 <USB_ReadInterrupts>
 8002106:	4603      	mov	r3, r0
 8002108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002110:	d13a      	bne.n	8002188 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f003 f8f2 	bl	8005300 <USB_HC_ReadInterrupt>
 800211c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	e025      	b.n	8002170 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	fa22 f303 	lsr.w	r3, r2, r3
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b00      	cmp	r3, #0
 8002136:	d018      	beq.n	800216a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	015a      	lsls	r2, r3, #5
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4413      	add	r3, r2
 8002140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800214a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800214e:	d106      	bne.n	800215e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	4619      	mov	r1, r3
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f8ab 	bl	80022b2 <HCD_HC_IN_IRQHandler>
 800215c:	e005      	b.n	800216a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	b2db      	uxtb	r3, r3
 8002162:	4619      	mov	r1, r3
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 fcc6 	bl	8002af6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	3301      	adds	r3, #1
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	429a      	cmp	r2, r3
 8002178:	d3d4      	bcc.n	8002124 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002182:	615a      	str	r2, [r3, #20]
 8002184:	e000      	b.n	8002188 <HAL_HCD_IRQHandler+0x210>
      return;
 8002186:	bf00      	nop
    }
  }
}
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_HCD_Start+0x16>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e013      	b.n	80021cc <HAL_HCD_Start+0x3e>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2101      	movs	r1, #1
 80021b2:	4618      	mov	r0, r3
 80021b4:	f002 fdf2 	bl	8004d9c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f002 fb38 	bl	8004832 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d101      	bne.n	80021ea <HAL_HCD_Stop+0x16>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e00d      	b.n	8002206 <HAL_HCD_Stop+0x32>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f003 f9ec 	bl	80055d4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f002 fd94 	bl	8004d48 <USB_ResetPort>
 8002220:	4603      	mov	r3, r0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	460b      	mov	r3, r1
 8002234:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002236:	78fb      	ldrb	r3, [r7, #3]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	212c      	movs	r1, #44	; 0x2c
 800223c:	fb01 f303 	mul.w	r3, r1, r3
 8002240:	4413      	add	r3, r2
 8002242:	3360      	adds	r3, #96	; 0x60
 8002244:	781b      	ldrb	r3, [r3, #0]
}
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	460b      	mov	r3, r1
 800225c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800225e:	78fb      	ldrb	r3, [r7, #3]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	212c      	movs	r1, #44	; 0x2c
 8002264:	fb01 f303 	mul.w	r3, r1, r3
 8002268:	4413      	add	r3, r2
 800226a:	3350      	adds	r3, #80	; 0x50
 800226c:	681b      	ldr	r3, [r3, #0]
}
 800226e:	4618      	mov	r0, r3
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f002 fdd8 	bl	8004e3c <USB_GetCurrentFrame>
 800228c:	4603      	mov	r3, r0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f002 fdb3 	bl	8004e0e <USB_GetHostSpeed>
 80022a8:	4603      	mov	r3, r0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b086      	sub	sp, #24
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	460b      	mov	r3, r1
 80022bc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80022c8:	78fb      	ldrb	r3, [r7, #3]
 80022ca:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	015a      	lsls	r2, r3, #5
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4413      	add	r3, r2
 80022d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 0304 	and.w	r3, r3, #4
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d119      	bne.n	8002316 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ee:	461a      	mov	r2, r3
 80022f0:	2304      	movs	r3, #4
 80022f2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	015a      	lsls	r2, r3, #5
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	0151      	lsls	r1, r2, #5
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	440a      	add	r2, r1
 800230a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800230e:	f043 0302 	orr.w	r3, r3, #2
 8002312:	60d3      	str	r3, [r2, #12]
 8002314:	e101      	b.n	800251a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4413      	add	r3, r2
 800231e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800232c:	d12b      	bne.n	8002386 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4413      	add	r3, r2
 8002336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233a:	461a      	mov	r2, r3
 800233c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002340:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	212c      	movs	r1, #44	; 0x2c
 8002348:	fb01 f303 	mul.w	r3, r1, r3
 800234c:	4413      	add	r3, r2
 800234e:	3361      	adds	r3, #97	; 0x61
 8002350:	2207      	movs	r2, #7
 8002352:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	015a      	lsls	r2, r3, #5
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4413      	add	r3, r2
 800235c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	0151      	lsls	r1, r2, #5
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	440a      	add	r2, r1
 800236a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800236e:	f043 0302 	orr.w	r3, r3, #2
 8002372:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	4611      	mov	r1, r2
 800237e:	4618      	mov	r0, r3
 8002380:	f002 ffcf 	bl	8005322 <USB_HC_Halt>
 8002384:	e0c9      	b.n	800251a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	015a      	lsls	r2, r3, #5
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4413      	add	r3, r2
 800238e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0320 	and.w	r3, r3, #32
 8002398:	2b20      	cmp	r3, #32
 800239a:	d109      	bne.n	80023b0 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a8:	461a      	mov	r2, r3
 80023aa:	2320      	movs	r3, #32
 80023ac:	6093      	str	r3, [r2, #8]
 80023ae:	e0b4      	b.n	800251a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	015a      	lsls	r2, r3, #5
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	4413      	add	r3, r2
 80023b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d133      	bne.n	800242e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	015a      	lsls	r2, r3, #5
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	0151      	lsls	r1, r2, #5
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	440a      	add	r2, r1
 80023dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023e0:	f043 0302 	orr.w	r3, r3, #2
 80023e4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	212c      	movs	r1, #44	; 0x2c
 80023ec:	fb01 f303 	mul.w	r3, r1, r3
 80023f0:	4413      	add	r3, r2
 80023f2:	3361      	adds	r3, #97	; 0x61
 80023f4:	2205      	movs	r2, #5
 80023f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	015a      	lsls	r2, r3, #5
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4413      	add	r3, r2
 8002400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002404:	461a      	mov	r2, r3
 8002406:	2310      	movs	r3, #16
 8002408:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	015a      	lsls	r2, r3, #5
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4413      	add	r3, r2
 8002412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002416:	461a      	mov	r2, r3
 8002418:	2308      	movs	r3, #8
 800241a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	4611      	mov	r1, r2
 8002426:	4618      	mov	r0, r3
 8002428:	f002 ff7b 	bl	8005322 <USB_HC_Halt>
 800242c:	e075      	b.n	800251a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	015a      	lsls	r2, r3, #5
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4413      	add	r3, r2
 8002436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002444:	d134      	bne.n	80024b0 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	015a      	lsls	r2, r3, #5
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4413      	add	r3, r2
 800244e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	0151      	lsls	r1, r2, #5
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	440a      	add	r2, r1
 800245c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002460:	f043 0302 	orr.w	r3, r3, #2
 8002464:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	212c      	movs	r1, #44	; 0x2c
 800246c:	fb01 f303 	mul.w	r3, r1, r3
 8002470:	4413      	add	r3, r2
 8002472:	3361      	adds	r3, #97	; 0x61
 8002474:	2208      	movs	r2, #8
 8002476:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4413      	add	r3, r2
 8002480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002484:	461a      	mov	r2, r3
 8002486:	2310      	movs	r3, #16
 8002488:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	015a      	lsls	r2, r3, #5
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	4413      	add	r3, r2
 8002492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002496:	461a      	mov	r2, r3
 8002498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800249c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	4611      	mov	r1, r2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f002 ff3a 	bl	8005322 <USB_HC_Halt>
 80024ae:	e034      	b.n	800251a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	015a      	lsls	r2, r3, #5
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c2:	2b80      	cmp	r3, #128	; 0x80
 80024c4:	d129      	bne.n	800251a <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	015a      	lsls	r2, r3, #5
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	0151      	lsls	r1, r2, #5
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	440a      	add	r2, r1
 80024dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024e0:	f043 0302 	orr.w	r3, r3, #2
 80024e4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	212c      	movs	r1, #44	; 0x2c
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	4413      	add	r3, r2
 80024f2:	3361      	adds	r3, #97	; 0x61
 80024f4:	2206      	movs	r2, #6
 80024f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	4611      	mov	r1, r2
 8002502:	4618      	mov	r0, r3
 8002504:	f002 ff0d 	bl	8005322 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4413      	add	r3, r2
 8002510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002514:	461a      	mov	r2, r3
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4413      	add	r3, r2
 8002522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800252c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002530:	d122      	bne.n	8002578 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	015a      	lsls	r2, r3, #5
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4413      	add	r3, r2
 800253a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	0151      	lsls	r1, r2, #5
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	440a      	add	r2, r1
 8002548:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800254c:	f043 0302 	orr.w	r3, r3, #2
 8002550:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	4611      	mov	r1, r2
 800255c:	4618      	mov	r0, r3
 800255e:	f002 fee0 	bl	8005322 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	015a      	lsls	r2, r3, #5
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4413      	add	r3, r2
 800256a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256e:	461a      	mov	r2, r3
 8002570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002574:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002576:	e2ba      	b.n	8002aee <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	015a      	lsls	r2, r3, #5
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4413      	add	r3, r2
 8002580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b01      	cmp	r3, #1
 800258c:	f040 811b 	bne.w	80027c6 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d019      	beq.n	80025cc <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	212c      	movs	r1, #44	; 0x2c
 800259e:	fb01 f303 	mul.w	r3, r1, r3
 80025a2:	4413      	add	r3, r2
 80025a4:	3348      	adds	r3, #72	; 0x48
 80025a6:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	0159      	lsls	r1, r3, #5
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	440b      	add	r3, r1
 80025b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80025ba:	1ad2      	subs	r2, r2, r3
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	202c      	movs	r0, #44	; 0x2c
 80025c2:	fb00 f303 	mul.w	r3, r0, r3
 80025c6:	440b      	add	r3, r1
 80025c8:	3350      	adds	r3, #80	; 0x50
 80025ca:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	212c      	movs	r1, #44	; 0x2c
 80025d2:	fb01 f303 	mul.w	r3, r1, r3
 80025d6:	4413      	add	r3, r2
 80025d8:	3361      	adds	r3, #97	; 0x61
 80025da:	2201      	movs	r2, #1
 80025dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	212c      	movs	r1, #44	; 0x2c
 80025e4:	fb01 f303 	mul.w	r3, r1, r3
 80025e8:	4413      	add	r3, r2
 80025ea:	335c      	adds	r3, #92	; 0x5c
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	015a      	lsls	r2, r3, #5
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	4413      	add	r3, r2
 80025f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fc:	461a      	mov	r2, r3
 80025fe:	2301      	movs	r3, #1
 8002600:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	212c      	movs	r1, #44	; 0x2c
 8002608:	fb01 f303 	mul.w	r3, r1, r3
 800260c:	4413      	add	r3, r2
 800260e:	333f      	adds	r3, #63	; 0x3f
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d009      	beq.n	800262a <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	212c      	movs	r1, #44	; 0x2c
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	4413      	add	r3, r2
 8002622:	333f      	adds	r3, #63	; 0x3f
 8002624:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002626:	2b02      	cmp	r3, #2
 8002628:	d121      	bne.n	800266e <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4413      	add	r3, r2
 8002632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	0151      	lsls	r1, r2, #5
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	440a      	add	r2, r1
 8002640:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002644:	f043 0302 	orr.w	r3, r3, #2
 8002648:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	4611      	mov	r1, r2
 8002654:	4618      	mov	r0, r3
 8002656:	f002 fe64 	bl	8005322 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	015a      	lsls	r2, r3, #5
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4413      	add	r3, r2
 8002662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002666:	461a      	mov	r2, r3
 8002668:	2310      	movs	r3, #16
 800266a:	6093      	str	r3, [r2, #8]
 800266c:	e066      	b.n	800273c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	212c      	movs	r1, #44	; 0x2c
 8002674:	fb01 f303 	mul.w	r3, r1, r3
 8002678:	4413      	add	r3, r2
 800267a:	333f      	adds	r3, #63	; 0x3f
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b03      	cmp	r3, #3
 8002680:	d127      	bne.n	80026d2 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4413      	add	r3, r2
 800268a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	0151      	lsls	r1, r2, #5
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	440a      	add	r2, r1
 8002698:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800269c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80026a0:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	212c      	movs	r1, #44	; 0x2c
 80026a8:	fb01 f303 	mul.w	r3, r1, r3
 80026ac:	4413      	add	r3, r2
 80026ae:	3360      	adds	r3, #96	; 0x60
 80026b0:	2201      	movs	r2, #1
 80026b2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	b2d9      	uxtb	r1, r3
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	202c      	movs	r0, #44	; 0x2c
 80026be:	fb00 f303 	mul.w	r3, r0, r3
 80026c2:	4413      	add	r3, r2
 80026c4:	3360      	adds	r3, #96	; 0x60
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	461a      	mov	r2, r3
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f004 ffe6 	bl	800769c <HAL_HCD_HC_NotifyURBChange_Callback>
 80026d0:	e034      	b.n	800273c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	212c      	movs	r1, #44	; 0x2c
 80026d8:	fb01 f303 	mul.w	r3, r1, r3
 80026dc:	4413      	add	r3, r2
 80026de:	333f      	adds	r3, #63	; 0x3f
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d12a      	bne.n	800273c <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	212c      	movs	r1, #44	; 0x2c
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	4413      	add	r3, r2
 80026f2:	3360      	adds	r3, #96	; 0x60
 80026f4:	2201      	movs	r2, #1
 80026f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	212c      	movs	r1, #44	; 0x2c
 80026fe:	fb01 f303 	mul.w	r3, r1, r3
 8002702:	4413      	add	r3, r2
 8002704:	3354      	adds	r3, #84	; 0x54
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	f083 0301 	eor.w	r3, r3, #1
 800270c:	b2d8      	uxtb	r0, r3
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	212c      	movs	r1, #44	; 0x2c
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	4413      	add	r3, r2
 800271a:	3354      	adds	r3, #84	; 0x54
 800271c:	4602      	mov	r2, r0
 800271e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	b2d9      	uxtb	r1, r3
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	202c      	movs	r0, #44	; 0x2c
 800272a:	fb00 f303 	mul.w	r3, r0, r3
 800272e:	4413      	add	r3, r2
 8002730:	3360      	adds	r3, #96	; 0x60
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	461a      	mov	r2, r3
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f004 ffb0 	bl	800769c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d12b      	bne.n	800279c <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	212c      	movs	r1, #44	; 0x2c
 800274a:	fb01 f303 	mul.w	r3, r1, r3
 800274e:	4413      	add	r3, r2
 8002750:	3348      	adds	r3, #72	; 0x48
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	202c      	movs	r0, #44	; 0x2c
 800275a:	fb00 f202 	mul.w	r2, r0, r2
 800275e:	440a      	add	r2, r1
 8002760:	3240      	adds	r2, #64	; 0x40
 8002762:	8812      	ldrh	r2, [r2, #0]
 8002764:	fbb3 f3f2 	udiv	r3, r3, r2
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 81be 	beq.w	8002aee <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	212c      	movs	r1, #44	; 0x2c
 8002778:	fb01 f303 	mul.w	r3, r1, r3
 800277c:	4413      	add	r3, r2
 800277e:	3354      	adds	r3, #84	; 0x54
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	f083 0301 	eor.w	r3, r3, #1
 8002786:	b2d8      	uxtb	r0, r3
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	212c      	movs	r1, #44	; 0x2c
 800278e:	fb01 f303 	mul.w	r3, r1, r3
 8002792:	4413      	add	r3, r2
 8002794:	3354      	adds	r3, #84	; 0x54
 8002796:	4602      	mov	r2, r0
 8002798:	701a      	strb	r2, [r3, #0]
}
 800279a:	e1a8      	b.n	8002aee <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	212c      	movs	r1, #44	; 0x2c
 80027a2:	fb01 f303 	mul.w	r3, r1, r3
 80027a6:	4413      	add	r3, r2
 80027a8:	3354      	adds	r3, #84	; 0x54
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	f083 0301 	eor.w	r3, r3, #1
 80027b0:	b2d8      	uxtb	r0, r3
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	212c      	movs	r1, #44	; 0x2c
 80027b8:	fb01 f303 	mul.w	r3, r1, r3
 80027bc:	4413      	add	r3, r2
 80027be:	3354      	adds	r3, #84	; 0x54
 80027c0:	4602      	mov	r2, r0
 80027c2:	701a      	strb	r2, [r3, #0]
}
 80027c4:	e193      	b.n	8002aee <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b02      	cmp	r3, #2
 80027da:	f040 8106 	bne.w	80029ea <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	0151      	lsls	r1, r2, #5
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	440a      	add	r2, r1
 80027f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027f8:	f023 0302 	bic.w	r3, r3, #2
 80027fc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	212c      	movs	r1, #44	; 0x2c
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	4413      	add	r3, r2
 800280a:	3361      	adds	r3, #97	; 0x61
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d109      	bne.n	8002826 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	212c      	movs	r1, #44	; 0x2c
 8002818:	fb01 f303 	mul.w	r3, r1, r3
 800281c:	4413      	add	r3, r2
 800281e:	3360      	adds	r3, #96	; 0x60
 8002820:	2201      	movs	r2, #1
 8002822:	701a      	strb	r2, [r3, #0]
 8002824:	e0c9      	b.n	80029ba <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	212c      	movs	r1, #44	; 0x2c
 800282c:	fb01 f303 	mul.w	r3, r1, r3
 8002830:	4413      	add	r3, r2
 8002832:	3361      	adds	r3, #97	; 0x61
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b05      	cmp	r3, #5
 8002838:	d109      	bne.n	800284e <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	212c      	movs	r1, #44	; 0x2c
 8002840:	fb01 f303 	mul.w	r3, r1, r3
 8002844:	4413      	add	r3, r2
 8002846:	3360      	adds	r3, #96	; 0x60
 8002848:	2205      	movs	r2, #5
 800284a:	701a      	strb	r2, [r3, #0]
 800284c:	e0b5      	b.n	80029ba <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	212c      	movs	r1, #44	; 0x2c
 8002854:	fb01 f303 	mul.w	r3, r1, r3
 8002858:	4413      	add	r3, r2
 800285a:	3361      	adds	r3, #97	; 0x61
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b06      	cmp	r3, #6
 8002860:	d009      	beq.n	8002876 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	212c      	movs	r1, #44	; 0x2c
 8002868:	fb01 f303 	mul.w	r3, r1, r3
 800286c:	4413      	add	r3, r2
 800286e:	3361      	adds	r3, #97	; 0x61
 8002870:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002872:	2b08      	cmp	r3, #8
 8002874:	d150      	bne.n	8002918 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	212c      	movs	r1, #44	; 0x2c
 800287c:	fb01 f303 	mul.w	r3, r1, r3
 8002880:	4413      	add	r3, r2
 8002882:	335c      	adds	r3, #92	; 0x5c
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	202c      	movs	r0, #44	; 0x2c
 800288e:	fb00 f303 	mul.w	r3, r0, r3
 8002892:	440b      	add	r3, r1
 8002894:	335c      	adds	r3, #92	; 0x5c
 8002896:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	212c      	movs	r1, #44	; 0x2c
 800289e:	fb01 f303 	mul.w	r3, r1, r3
 80028a2:	4413      	add	r3, r2
 80028a4:	335c      	adds	r3, #92	; 0x5c
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d912      	bls.n	80028d2 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	212c      	movs	r1, #44	; 0x2c
 80028b2:	fb01 f303 	mul.w	r3, r1, r3
 80028b6:	4413      	add	r3, r2
 80028b8:	335c      	adds	r3, #92	; 0x5c
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	212c      	movs	r1, #44	; 0x2c
 80028c4:	fb01 f303 	mul.w	r3, r1, r3
 80028c8:	4413      	add	r3, r2
 80028ca:	3360      	adds	r3, #96	; 0x60
 80028cc:	2204      	movs	r2, #4
 80028ce:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80028d0:	e073      	b.n	80029ba <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	212c      	movs	r1, #44	; 0x2c
 80028d8:	fb01 f303 	mul.w	r3, r1, r3
 80028dc:	4413      	add	r3, r2
 80028de:	3360      	adds	r3, #96	; 0x60
 80028e0:	2202      	movs	r2, #2
 80028e2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	015a      	lsls	r2, r3, #5
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028fa:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002902:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	015a      	lsls	r2, r3, #5
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	4413      	add	r3, r2
 800290c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002910:	461a      	mov	r2, r3
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002916:	e050      	b.n	80029ba <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	212c      	movs	r1, #44	; 0x2c
 800291e:	fb01 f303 	mul.w	r3, r1, r3
 8002922:	4413      	add	r3, r2
 8002924:	3361      	adds	r3, #97	; 0x61
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b03      	cmp	r3, #3
 800292a:	d122      	bne.n	8002972 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	212c      	movs	r1, #44	; 0x2c
 8002932:	fb01 f303 	mul.w	r3, r1, r3
 8002936:	4413      	add	r3, r2
 8002938:	3360      	adds	r3, #96	; 0x60
 800293a:	2202      	movs	r2, #2
 800293c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	015a      	lsls	r2, r3, #5
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4413      	add	r3, r2
 8002946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002954:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800295c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	015a      	lsls	r2, r3, #5
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	4413      	add	r3, r2
 8002966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296a:	461a      	mov	r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	e023      	b.n	80029ba <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	212c      	movs	r1, #44	; 0x2c
 8002978:	fb01 f303 	mul.w	r3, r1, r3
 800297c:	4413      	add	r3, r2
 800297e:	3361      	adds	r3, #97	; 0x61
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b07      	cmp	r3, #7
 8002984:	d119      	bne.n	80029ba <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	212c      	movs	r1, #44	; 0x2c
 800298c:	fb01 f303 	mul.w	r3, r1, r3
 8002990:	4413      	add	r3, r2
 8002992:	335c      	adds	r3, #92	; 0x5c
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	202c      	movs	r0, #44	; 0x2c
 800299e:	fb00 f303 	mul.w	r3, r0, r3
 80029a2:	440b      	add	r3, r1
 80029a4:	335c      	adds	r3, #92	; 0x5c
 80029a6:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	212c      	movs	r1, #44	; 0x2c
 80029ae:	fb01 f303 	mul.w	r3, r1, r3
 80029b2:	4413      	add	r3, r2
 80029b4:	3360      	adds	r3, #96	; 0x60
 80029b6:	2204      	movs	r2, #4
 80029b8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	015a      	lsls	r2, r3, #5
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4413      	add	r3, r2
 80029c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c6:	461a      	mov	r2, r3
 80029c8:	2302      	movs	r3, #2
 80029ca:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	b2d9      	uxtb	r1, r3
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	202c      	movs	r0, #44	; 0x2c
 80029d6:	fb00 f303 	mul.w	r3, r0, r3
 80029da:	4413      	add	r3, r2
 80029dc:	3360      	adds	r3, #96	; 0x60
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	461a      	mov	r2, r3
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f004 fe5a 	bl	800769c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80029e8:	e081      	b.n	8002aee <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 0310 	and.w	r3, r3, #16
 80029fc:	2b10      	cmp	r3, #16
 80029fe:	d176      	bne.n	8002aee <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	212c      	movs	r1, #44	; 0x2c
 8002a06:	fb01 f303 	mul.w	r3, r1, r3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	333f      	adds	r3, #63	; 0x3f
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	d121      	bne.n	8002a58 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	212c      	movs	r1, #44	; 0x2c
 8002a1a:	fb01 f303 	mul.w	r3, r1, r3
 8002a1e:	4413      	add	r3, r2
 8002a20:	335c      	adds	r3, #92	; 0x5c
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	0151      	lsls	r1, r2, #5
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	440a      	add	r2, r1
 8002a3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a40:	f043 0302 	orr.w	r3, r3, #2
 8002a44:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	4611      	mov	r1, r2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f002 fc66 	bl	8005322 <USB_HC_Halt>
 8002a56:	e041      	b.n	8002adc <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	212c      	movs	r1, #44	; 0x2c
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	333f      	adds	r3, #63	; 0x3f
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d009      	beq.n	8002a80 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	212c      	movs	r1, #44	; 0x2c
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	333f      	adds	r3, #63	; 0x3f
 8002a7a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d12d      	bne.n	8002adc <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	212c      	movs	r1, #44	; 0x2c
 8002a86:	fb01 f303 	mul.w	r3, r1, r3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	335c      	adds	r3, #92	; 0x5c
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d120      	bne.n	8002adc <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	212c      	movs	r1, #44	; 0x2c
 8002aa0:	fb01 f303 	mul.w	r3, r1, r3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3361      	adds	r3, #97	; 0x61
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	015a      	lsls	r2, r3, #5
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	0151      	lsls	r1, r2, #5
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	440a      	add	r2, r1
 8002ac2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ac6:	f043 0302 	orr.w	r3, r3, #2
 8002aca:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f002 fc23 	bl	8005322 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	015a      	lsls	r2, r3, #5
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae8:	461a      	mov	r2, r3
 8002aea:	2310      	movs	r3, #16
 8002aec:	6093      	str	r3, [r2, #8]
}
 8002aee:	bf00      	nop
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b088      	sub	sp, #32
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	460b      	mov	r3, r1
 8002b00:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002b0c:	78fb      	ldrb	r3, [r7, #3]
 8002b0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d119      	bne.n	8002b5a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	015a      	lsls	r2, r3, #5
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b32:	461a      	mov	r2, r3
 8002b34:	2304      	movs	r3, #4
 8002b36:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	015a      	lsls	r2, r3, #5
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	0151      	lsls	r1, r2, #5
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	440a      	add	r2, r1
 8002b4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b52:	f043 0302 	orr.w	r3, r3, #2
 8002b56:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002b58:	e3ca      	b.n	80032f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	015a      	lsls	r2, r3, #5
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	4413      	add	r3, r2
 8002b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 0320 	and.w	r3, r3, #32
 8002b6c:	2b20      	cmp	r3, #32
 8002b6e:	d13e      	bne.n	8002bee <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	015a      	lsls	r2, r3, #5
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	4413      	add	r3, r2
 8002b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	2320      	movs	r3, #32
 8002b80:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	212c      	movs	r1, #44	; 0x2c
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	333d      	adds	r3, #61	; 0x3d
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	f040 83ac 	bne.w	80032f0 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	212c      	movs	r1, #44	; 0x2c
 8002b9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	333d      	adds	r3, #61	; 0x3d
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	212c      	movs	r1, #44	; 0x2c
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3360      	adds	r3, #96	; 0x60
 8002bb8:	2202      	movs	r2, #2
 8002bba:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	015a      	lsls	r2, r3, #5
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	0151      	lsls	r1, r2, #5
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	440a      	add	r2, r1
 8002bd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bd6:	f043 0302 	orr.w	r3, r3, #2
 8002bda:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	4611      	mov	r1, r2
 8002be6:	4618      	mov	r0, r3
 8002be8:	f002 fb9b 	bl	8005322 <USB_HC_Halt>
}
 8002bec:	e380      	b.n	80032f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	015a      	lsls	r2, r3, #5
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c04:	d122      	bne.n	8002c4c <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	015a      	lsls	r2, r3, #5
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	0151      	lsls	r1, r2, #5
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	440a      	add	r2, r1
 8002c1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c20:	f043 0302 	orr.w	r3, r3, #2
 8002c24:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	b2d2      	uxtb	r2, r2
 8002c2e:	4611      	mov	r1, r2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f002 fb76 	bl	8005322 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	015a      	lsls	r2, r3, #5
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c42:	461a      	mov	r2, r3
 8002c44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c48:	6093      	str	r3, [r2, #8]
}
 8002c4a:	e351      	b.n	80032f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	015a      	lsls	r2, r3, #5
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	4413      	add	r3, r2
 8002c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d150      	bne.n	8002d04 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	212c      	movs	r1, #44	; 0x2c
 8002c68:	fb01 f303 	mul.w	r3, r1, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	335c      	adds	r3, #92	; 0x5c
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c86:	2b40      	cmp	r3, #64	; 0x40
 8002c88:	d111      	bne.n	8002cae <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	212c      	movs	r1, #44	; 0x2c
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	333d      	adds	r3, #61	; 0x3d
 8002c98:	2201      	movs	r2, #1
 8002c9a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2340      	movs	r3, #64	; 0x40
 8002cac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	015a      	lsls	r2, r3, #5
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	0151      	lsls	r1, r2, #5
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	440a      	add	r2, r1
 8002cc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cc8:	f043 0302 	orr.w	r3, r3, #2
 8002ccc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f002 fb22 	bl	8005322 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	015a      	lsls	r2, r3, #5
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cea:	461a      	mov	r2, r3
 8002cec:	2301      	movs	r3, #1
 8002cee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	212c      	movs	r1, #44	; 0x2c
 8002cf6:	fb01 f303 	mul.w	r3, r1, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3361      	adds	r3, #97	; 0x61
 8002cfe:	2201      	movs	r2, #1
 8002d00:	701a      	strb	r2, [r3, #0]
}
 8002d02:	e2f5      	b.n	80032f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	015a      	lsls	r2, r3, #5
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d16:	2b40      	cmp	r3, #64	; 0x40
 8002d18:	d13c      	bne.n	8002d94 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	212c      	movs	r1, #44	; 0x2c
 8002d20:	fb01 f303 	mul.w	r3, r1, r3
 8002d24:	4413      	add	r3, r2
 8002d26:	3361      	adds	r3, #97	; 0x61
 8002d28:	2204      	movs	r2, #4
 8002d2a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	212c      	movs	r1, #44	; 0x2c
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	4413      	add	r3, r2
 8002d38:	333d      	adds	r3, #61	; 0x3d
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	212c      	movs	r1, #44	; 0x2c
 8002d44:	fb01 f303 	mul.w	r3, r1, r3
 8002d48:	4413      	add	r3, r2
 8002d4a:	335c      	adds	r3, #92	; 0x5c
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	015a      	lsls	r2, r3, #5
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	4413      	add	r3, r2
 8002d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	0151      	lsls	r1, r2, #5
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	440a      	add	r2, r1
 8002d66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d6a:	f043 0302 	orr.w	r3, r3, #2
 8002d6e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	4611      	mov	r1, r2
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f002 fad1 	bl	8005322 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	015a      	lsls	r2, r3, #5
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	4413      	add	r3, r2
 8002d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	2340      	movs	r3, #64	; 0x40
 8002d90:	6093      	str	r3, [r2, #8]
}
 8002d92:	e2ad      	b.n	80032f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	015a      	lsls	r2, r3, #5
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b08      	cmp	r3, #8
 8002da8:	d12a      	bne.n	8002e00 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db6:	461a      	mov	r2, r3
 8002db8:	2308      	movs	r3, #8
 8002dba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	0151      	lsls	r1, r2, #5
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	440a      	add	r2, r1
 8002dd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dd6:	f043 0302 	orr.w	r3, r3, #2
 8002dda:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	4611      	mov	r1, r2
 8002de6:	4618      	mov	r0, r3
 8002de8:	f002 fa9b 	bl	8005322 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	212c      	movs	r1, #44	; 0x2c
 8002df2:	fb01 f303 	mul.w	r3, r1, r3
 8002df6:	4413      	add	r3, r2
 8002df8:	3361      	adds	r3, #97	; 0x61
 8002dfa:	2205      	movs	r2, #5
 8002dfc:	701a      	strb	r2, [r3, #0]
}
 8002dfe:	e277      	b.n	80032f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	015a      	lsls	r2, r3, #5
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 0310 	and.w	r3, r3, #16
 8002e12:	2b10      	cmp	r3, #16
 8002e14:	d150      	bne.n	8002eb8 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	212c      	movs	r1, #44	; 0x2c
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	4413      	add	r3, r2
 8002e22:	335c      	adds	r3, #92	; 0x5c
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	212c      	movs	r1, #44	; 0x2c
 8002e2e:	fb01 f303 	mul.w	r3, r1, r3
 8002e32:	4413      	add	r3, r2
 8002e34:	3361      	adds	r3, #97	; 0x61
 8002e36:	2203      	movs	r2, #3
 8002e38:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	212c      	movs	r1, #44	; 0x2c
 8002e40:	fb01 f303 	mul.w	r3, r1, r3
 8002e44:	4413      	add	r3, r2
 8002e46:	333d      	adds	r3, #61	; 0x3d
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d112      	bne.n	8002e74 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	212c      	movs	r1, #44	; 0x2c
 8002e54:	fb01 f303 	mul.w	r3, r1, r3
 8002e58:	4413      	add	r3, r2
 8002e5a:	333c      	adds	r3, #60	; 0x3c
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d108      	bne.n	8002e74 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	212c      	movs	r1, #44	; 0x2c
 8002e68:	fb01 f303 	mul.w	r3, r1, r3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	333d      	adds	r3, #61	; 0x3d
 8002e70:	2201      	movs	r2, #1
 8002e72:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	015a      	lsls	r2, r3, #5
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	0151      	lsls	r1, r2, #5
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	440a      	add	r2, r1
 8002e8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e8e:	f043 0302 	orr.w	r3, r3, #2
 8002e92:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f002 fa3f 	bl	8005322 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	2310      	movs	r3, #16
 8002eb4:	6093      	str	r3, [r2, #8]
}
 8002eb6:	e21b      	b.n	80032f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eca:	2b80      	cmp	r3, #128	; 0x80
 8002ecc:	d174      	bne.n	8002fb8 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d121      	bne.n	8002f1a <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	212c      	movs	r1, #44	; 0x2c
 8002edc:	fb01 f303 	mul.w	r3, r1, r3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	3361      	adds	r3, #97	; 0x61
 8002ee4:	2206      	movs	r2, #6
 8002ee6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	015a      	lsls	r2, r3, #5
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	0151      	lsls	r1, r2, #5
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	440a      	add	r2, r1
 8002efe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f02:	f043 0302 	orr.w	r3, r3, #2
 8002f06:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	4611      	mov	r1, r2
 8002f12:	4618      	mov	r0, r3
 8002f14:	f002 fa05 	bl	8005322 <USB_HC_Halt>
 8002f18:	e044      	b.n	8002fa4 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	212c      	movs	r1, #44	; 0x2c
 8002f20:	fb01 f303 	mul.w	r3, r1, r3
 8002f24:	4413      	add	r3, r2
 8002f26:	335c      	adds	r3, #92	; 0x5c
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	202c      	movs	r0, #44	; 0x2c
 8002f32:	fb00 f303 	mul.w	r3, r0, r3
 8002f36:	440b      	add	r3, r1
 8002f38:	335c      	adds	r3, #92	; 0x5c
 8002f3a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	212c      	movs	r1, #44	; 0x2c
 8002f42:	fb01 f303 	mul.w	r3, r1, r3
 8002f46:	4413      	add	r3, r2
 8002f48:	335c      	adds	r3, #92	; 0x5c
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d920      	bls.n	8002f92 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	212c      	movs	r1, #44	; 0x2c
 8002f56:	fb01 f303 	mul.w	r3, r1, r3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	335c      	adds	r3, #92	; 0x5c
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	212c      	movs	r1, #44	; 0x2c
 8002f68:	fb01 f303 	mul.w	r3, r1, r3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3360      	adds	r3, #96	; 0x60
 8002f70:	2204      	movs	r2, #4
 8002f72:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	b2d9      	uxtb	r1, r3
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	202c      	movs	r0, #44	; 0x2c
 8002f7e:	fb00 f303 	mul.w	r3, r0, r3
 8002f82:	4413      	add	r3, r2
 8002f84:	3360      	adds	r3, #96	; 0x60
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f004 fb86 	bl	800769c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f90:	e008      	b.n	8002fa4 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	212c      	movs	r1, #44	; 0x2c
 8002f98:	fb01 f303 	mul.w	r3, r1, r3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3360      	adds	r3, #96	; 0x60
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	015a      	lsls	r2, r3, #5
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	6093      	str	r3, [r2, #8]
}
 8002fb6:	e19b      	b.n	80032f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	015a      	lsls	r2, r3, #5
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fce:	d134      	bne.n	800303a <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	0151      	lsls	r1, r2, #5
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	440a      	add	r2, r1
 8002fe6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fea:	f043 0302 	orr.w	r3, r3, #2
 8002fee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f002 f991 	bl	8005322 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	4413      	add	r3, r2
 8003008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300c:	461a      	mov	r2, r3
 800300e:	2310      	movs	r3, #16
 8003010:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	4413      	add	r3, r2
 800301a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301e:	461a      	mov	r2, r3
 8003020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003024:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	212c      	movs	r1, #44	; 0x2c
 800302c:	fb01 f303 	mul.w	r3, r1, r3
 8003030:	4413      	add	r3, r2
 8003032:	3361      	adds	r3, #97	; 0x61
 8003034:	2208      	movs	r2, #8
 8003036:	701a      	strb	r2, [r3, #0]
}
 8003038:	e15a      	b.n	80032f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	015a      	lsls	r2, r3, #5
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	4413      	add	r3, r2
 8003042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b02      	cmp	r3, #2
 800304e:	f040 814f 	bne.w	80032f0 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	4413      	add	r3, r2
 800305a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	0151      	lsls	r1, r2, #5
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	440a      	add	r2, r1
 8003068:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800306c:	f023 0302 	bic.w	r3, r3, #2
 8003070:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	212c      	movs	r1, #44	; 0x2c
 8003078:	fb01 f303 	mul.w	r3, r1, r3
 800307c:	4413      	add	r3, r2
 800307e:	3361      	adds	r3, #97	; 0x61
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d17d      	bne.n	8003182 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	212c      	movs	r1, #44	; 0x2c
 800308c:	fb01 f303 	mul.w	r3, r1, r3
 8003090:	4413      	add	r3, r2
 8003092:	3360      	adds	r3, #96	; 0x60
 8003094:	2201      	movs	r2, #1
 8003096:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	212c      	movs	r1, #44	; 0x2c
 800309e:	fb01 f303 	mul.w	r3, r1, r3
 80030a2:	4413      	add	r3, r2
 80030a4:	333f      	adds	r3, #63	; 0x3f
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d00a      	beq.n	80030c2 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	212c      	movs	r1, #44	; 0x2c
 80030b2:	fb01 f303 	mul.w	r3, r1, r3
 80030b6:	4413      	add	r3, r2
 80030b8:	333f      	adds	r3, #63	; 0x3f
 80030ba:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80030bc:	2b03      	cmp	r3, #3
 80030be:	f040 8100 	bne.w	80032c2 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d113      	bne.n	80030f2 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	212c      	movs	r1, #44	; 0x2c
 80030d0:	fb01 f303 	mul.w	r3, r1, r3
 80030d4:	4413      	add	r3, r2
 80030d6:	3355      	adds	r3, #85	; 0x55
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	f083 0301 	eor.w	r3, r3, #1
 80030de:	b2d8      	uxtb	r0, r3
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	212c      	movs	r1, #44	; 0x2c
 80030e6:	fb01 f303 	mul.w	r3, r1, r3
 80030ea:	4413      	add	r3, r2
 80030ec:	3355      	adds	r3, #85	; 0x55
 80030ee:	4602      	mov	r2, r0
 80030f0:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	f040 80e3 	bne.w	80032c2 <HCD_HC_OUT_IRQHandler+0x7cc>
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	212c      	movs	r1, #44	; 0x2c
 8003102:	fb01 f303 	mul.w	r3, r1, r3
 8003106:	4413      	add	r3, r2
 8003108:	334c      	adds	r3, #76	; 0x4c
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 80d8 	beq.w	80032c2 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	212c      	movs	r1, #44	; 0x2c
 8003118:	fb01 f303 	mul.w	r3, r1, r3
 800311c:	4413      	add	r3, r2
 800311e:	334c      	adds	r3, #76	; 0x4c
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	202c      	movs	r0, #44	; 0x2c
 8003128:	fb00 f202 	mul.w	r2, r0, r2
 800312c:	440a      	add	r2, r1
 800312e:	3240      	adds	r2, #64	; 0x40
 8003130:	8812      	ldrh	r2, [r2, #0]
 8003132:	4413      	add	r3, r2
 8003134:	3b01      	subs	r3, #1
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	202c      	movs	r0, #44	; 0x2c
 800313c:	fb00 f202 	mul.w	r2, r0, r2
 8003140:	440a      	add	r2, r1
 8003142:	3240      	adds	r2, #64	; 0x40
 8003144:	8812      	ldrh	r2, [r2, #0]
 8003146:	fbb3 f3f2 	udiv	r3, r3, r2
 800314a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 80b5 	beq.w	80032c2 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	212c      	movs	r1, #44	; 0x2c
 800315e:	fb01 f303 	mul.w	r3, r1, r3
 8003162:	4413      	add	r3, r2
 8003164:	3355      	adds	r3, #85	; 0x55
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	f083 0301 	eor.w	r3, r3, #1
 800316c:	b2d8      	uxtb	r0, r3
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	212c      	movs	r1, #44	; 0x2c
 8003174:	fb01 f303 	mul.w	r3, r1, r3
 8003178:	4413      	add	r3, r2
 800317a:	3355      	adds	r3, #85	; 0x55
 800317c:	4602      	mov	r2, r0
 800317e:	701a      	strb	r2, [r3, #0]
 8003180:	e09f      	b.n	80032c2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	212c      	movs	r1, #44	; 0x2c
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	4413      	add	r3, r2
 800318e:	3361      	adds	r3, #97	; 0x61
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b03      	cmp	r3, #3
 8003194:	d109      	bne.n	80031aa <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	212c      	movs	r1, #44	; 0x2c
 800319c:	fb01 f303 	mul.w	r3, r1, r3
 80031a0:	4413      	add	r3, r2
 80031a2:	3360      	adds	r3, #96	; 0x60
 80031a4:	2202      	movs	r2, #2
 80031a6:	701a      	strb	r2, [r3, #0]
 80031a8:	e08b      	b.n	80032c2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	212c      	movs	r1, #44	; 0x2c
 80031b0:	fb01 f303 	mul.w	r3, r1, r3
 80031b4:	4413      	add	r3, r2
 80031b6:	3361      	adds	r3, #97	; 0x61
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d109      	bne.n	80031d2 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	212c      	movs	r1, #44	; 0x2c
 80031c4:	fb01 f303 	mul.w	r3, r1, r3
 80031c8:	4413      	add	r3, r2
 80031ca:	3360      	adds	r3, #96	; 0x60
 80031cc:	2202      	movs	r2, #2
 80031ce:	701a      	strb	r2, [r3, #0]
 80031d0:	e077      	b.n	80032c2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	212c      	movs	r1, #44	; 0x2c
 80031d8:	fb01 f303 	mul.w	r3, r1, r3
 80031dc:	4413      	add	r3, r2
 80031de:	3361      	adds	r3, #97	; 0x61
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b05      	cmp	r3, #5
 80031e4:	d109      	bne.n	80031fa <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	212c      	movs	r1, #44	; 0x2c
 80031ec:	fb01 f303 	mul.w	r3, r1, r3
 80031f0:	4413      	add	r3, r2
 80031f2:	3360      	adds	r3, #96	; 0x60
 80031f4:	2205      	movs	r2, #5
 80031f6:	701a      	strb	r2, [r3, #0]
 80031f8:	e063      	b.n	80032c2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	212c      	movs	r1, #44	; 0x2c
 8003200:	fb01 f303 	mul.w	r3, r1, r3
 8003204:	4413      	add	r3, r2
 8003206:	3361      	adds	r3, #97	; 0x61
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b06      	cmp	r3, #6
 800320c:	d009      	beq.n	8003222 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	212c      	movs	r1, #44	; 0x2c
 8003214:	fb01 f303 	mul.w	r3, r1, r3
 8003218:	4413      	add	r3, r2
 800321a:	3361      	adds	r3, #97	; 0x61
 800321c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800321e:	2b08      	cmp	r3, #8
 8003220:	d14f      	bne.n	80032c2 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	212c      	movs	r1, #44	; 0x2c
 8003228:	fb01 f303 	mul.w	r3, r1, r3
 800322c:	4413      	add	r3, r2
 800322e:	335c      	adds	r3, #92	; 0x5c
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	202c      	movs	r0, #44	; 0x2c
 800323a:	fb00 f303 	mul.w	r3, r0, r3
 800323e:	440b      	add	r3, r1
 8003240:	335c      	adds	r3, #92	; 0x5c
 8003242:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	212c      	movs	r1, #44	; 0x2c
 800324a:	fb01 f303 	mul.w	r3, r1, r3
 800324e:	4413      	add	r3, r2
 8003250:	335c      	adds	r3, #92	; 0x5c
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b02      	cmp	r3, #2
 8003256:	d912      	bls.n	800327e <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	212c      	movs	r1, #44	; 0x2c
 800325e:	fb01 f303 	mul.w	r3, r1, r3
 8003262:	4413      	add	r3, r2
 8003264:	335c      	adds	r3, #92	; 0x5c
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	212c      	movs	r1, #44	; 0x2c
 8003270:	fb01 f303 	mul.w	r3, r1, r3
 8003274:	4413      	add	r3, r2
 8003276:	3360      	adds	r3, #96	; 0x60
 8003278:	2204      	movs	r2, #4
 800327a:	701a      	strb	r2, [r3, #0]
 800327c:	e021      	b.n	80032c2 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	212c      	movs	r1, #44	; 0x2c
 8003284:	fb01 f303 	mul.w	r3, r1, r3
 8003288:	4413      	add	r3, r2
 800328a:	3360      	adds	r3, #96	; 0x60
 800328c:	2202      	movs	r2, #2
 800328e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	4413      	add	r3, r2
 8003298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032a6:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032ae:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	015a      	lsls	r2, r3, #5
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032bc:	461a      	mov	r2, r3
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	015a      	lsls	r2, r3, #5
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	4413      	add	r3, r2
 80032ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ce:	461a      	mov	r2, r3
 80032d0:	2302      	movs	r3, #2
 80032d2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	b2d9      	uxtb	r1, r3
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	202c      	movs	r0, #44	; 0x2c
 80032de:	fb00 f303 	mul.w	r3, r0, r3
 80032e2:	4413      	add	r3, r2
 80032e4:	3360      	adds	r3, #96	; 0x60
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	461a      	mov	r2, r3
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f004 f9d6 	bl	800769c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80032f0:	bf00      	nop
 80032f2:	3720      	adds	r7, #32
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08a      	sub	sp, #40	; 0x28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	f003 030f 	and.w	r3, r3, #15
 8003318:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	0c5b      	lsrs	r3, r3, #17
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	091b      	lsrs	r3, r3, #4
 8003328:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800332c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	2b02      	cmp	r3, #2
 8003332:	d004      	beq.n	800333e <HCD_RXQLVL_IRQHandler+0x46>
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	2b05      	cmp	r3, #5
 8003338:	f000 80a9 	beq.w	800348e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800333c:	e0aa      	b.n	8003494 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 80a6 	beq.w	8003492 <HCD_RXQLVL_IRQHandler+0x19a>
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	212c      	movs	r1, #44	; 0x2c
 800334c:	fb01 f303 	mul.w	r3, r1, r3
 8003350:	4413      	add	r3, r2
 8003352:	3344      	adds	r3, #68	; 0x44
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 809b 	beq.w	8003492 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	212c      	movs	r1, #44	; 0x2c
 8003362:	fb01 f303 	mul.w	r3, r1, r3
 8003366:	4413      	add	r3, r2
 8003368:	3350      	adds	r3, #80	; 0x50
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	441a      	add	r2, r3
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	202c      	movs	r0, #44	; 0x2c
 8003376:	fb00 f303 	mul.w	r3, r0, r3
 800337a:	440b      	add	r3, r1
 800337c:	334c      	adds	r3, #76	; 0x4c
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d87a      	bhi.n	800347a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6818      	ldr	r0, [r3, #0]
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	212c      	movs	r1, #44	; 0x2c
 800338e:	fb01 f303 	mul.w	r3, r1, r3
 8003392:	4413      	add	r3, r2
 8003394:	3344      	adds	r3, #68	; 0x44
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	b292      	uxth	r2, r2
 800339c:	4619      	mov	r1, r3
 800339e:	f001 fb39 	bl	8004a14 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	212c      	movs	r1, #44	; 0x2c
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	4413      	add	r3, r2
 80033ae:	3344      	adds	r3, #68	; 0x44
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	441a      	add	r2, r3
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	202c      	movs	r0, #44	; 0x2c
 80033bc:	fb00 f303 	mul.w	r3, r0, r3
 80033c0:	440b      	add	r3, r1
 80033c2:	3344      	adds	r3, #68	; 0x44
 80033c4:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	212c      	movs	r1, #44	; 0x2c
 80033cc:	fb01 f303 	mul.w	r3, r1, r3
 80033d0:	4413      	add	r3, r2
 80033d2:	3350      	adds	r3, #80	; 0x50
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	441a      	add	r2, r3
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	202c      	movs	r0, #44	; 0x2c
 80033e0:	fb00 f303 	mul.w	r3, r0, r3
 80033e4:	440b      	add	r3, r1
 80033e6:	3350      	adds	r3, #80	; 0x50
 80033e8:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	0cdb      	lsrs	r3, r3, #19
 80033fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033fe:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	212c      	movs	r1, #44	; 0x2c
 8003406:	fb01 f303 	mul.w	r3, r1, r3
 800340a:	4413      	add	r3, r2
 800340c:	3340      	adds	r3, #64	; 0x40
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	461a      	mov	r2, r3
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	4293      	cmp	r3, r2
 8003416:	d13c      	bne.n	8003492 <HCD_RXQLVL_IRQHandler+0x19a>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d039      	beq.n	8003492 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	015a      	lsls	r2, r3, #5
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	4413      	add	r3, r2
 8003426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003434:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800343c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	015a      	lsls	r2, r3, #5
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	4413      	add	r3, r2
 8003446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800344a:	461a      	mov	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	212c      	movs	r1, #44	; 0x2c
 8003456:	fb01 f303 	mul.w	r3, r1, r3
 800345a:	4413      	add	r3, r2
 800345c:	3354      	adds	r3, #84	; 0x54
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	f083 0301 	eor.w	r3, r3, #1
 8003464:	b2d8      	uxtb	r0, r3
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	212c      	movs	r1, #44	; 0x2c
 800346c:	fb01 f303 	mul.w	r3, r1, r3
 8003470:	4413      	add	r3, r2
 8003472:	3354      	adds	r3, #84	; 0x54
 8003474:	4602      	mov	r2, r0
 8003476:	701a      	strb	r2, [r3, #0]
      break;
 8003478:	e00b      	b.n	8003492 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	212c      	movs	r1, #44	; 0x2c
 8003480:	fb01 f303 	mul.w	r3, r1, r3
 8003484:	4413      	add	r3, r2
 8003486:	3360      	adds	r3, #96	; 0x60
 8003488:	2204      	movs	r2, #4
 800348a:	701a      	strb	r2, [r3, #0]
      break;
 800348c:	e001      	b.n	8003492 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800348e:	bf00      	nop
 8003490:	e000      	b.n	8003494 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003492:	bf00      	nop
  }
}
 8003494:	bf00      	nop
 8003496:	3728      	adds	r7, #40	; 0x28
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80034c8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d10b      	bne.n	80034ec <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d102      	bne.n	80034e4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f004 f8c0 	bl	8007664 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f043 0302 	orr.w	r3, r3, #2
 80034ea:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d132      	bne.n	800355c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f043 0308 	orr.w	r3, r3, #8
 80034fc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b04      	cmp	r3, #4
 8003506:	d126      	bne.n	8003556 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	2b02      	cmp	r3, #2
 800350e:	d113      	bne.n	8003538 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003516:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800351a:	d106      	bne.n	800352a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2102      	movs	r1, #2
 8003522:	4618      	mov	r0, r3
 8003524:	f001 fbd6 	bl	8004cd4 <USB_InitFSLSPClkSel>
 8003528:	e011      	b.n	800354e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2101      	movs	r1, #1
 8003530:	4618      	mov	r0, r3
 8003532:	f001 fbcf 	bl	8004cd4 <USB_InitFSLSPClkSel>
 8003536:	e00a      	b.n	800354e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d106      	bne.n	800354e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003546:	461a      	mov	r2, r3
 8003548:	f64e 2360 	movw	r3, #60000	; 0xea60
 800354c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f004 f8b2 	bl	80076b8 <HAL_HCD_PortEnabled_Callback>
 8003554:	e002      	b.n	800355c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f004 f8bc 	bl	80076d4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b20      	cmp	r3, #32
 8003564:	d103      	bne.n	800356e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f043 0320 	orr.w	r3, r3, #32
 800356c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003574:	461a      	mov	r2, r3
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	6013      	str	r3, [r2, #0]
}
 800357a:	bf00      	nop
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
	...

08003584 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e264      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d075      	beq.n	800368e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035a2:	4ba3      	ldr	r3, [pc, #652]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d00c      	beq.n	80035c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ae:	4ba0      	ldr	r3, [pc, #640]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d112      	bne.n	80035e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ba:	4b9d      	ldr	r3, [pc, #628]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c6:	d10b      	bne.n	80035e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c8:	4b99      	ldr	r3, [pc, #612]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d05b      	beq.n	800368c <HAL_RCC_OscConfig+0x108>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d157      	bne.n	800368c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e23f      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e8:	d106      	bne.n	80035f8 <HAL_RCC_OscConfig+0x74>
 80035ea:	4b91      	ldr	r3, [pc, #580]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a90      	ldr	r2, [pc, #576]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80035f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	e01d      	b.n	8003634 <HAL_RCC_OscConfig+0xb0>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003600:	d10c      	bne.n	800361c <HAL_RCC_OscConfig+0x98>
 8003602:	4b8b      	ldr	r3, [pc, #556]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a8a      	ldr	r2, [pc, #552]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	4b88      	ldr	r3, [pc, #544]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a87      	ldr	r2, [pc, #540]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	e00b      	b.n	8003634 <HAL_RCC_OscConfig+0xb0>
 800361c:	4b84      	ldr	r3, [pc, #528]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a83      	ldr	r2, [pc, #524]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	4b81      	ldr	r3, [pc, #516]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a80      	ldr	r2, [pc, #512]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 800362e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d013      	beq.n	8003664 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7fd fc50 	bl	8000ee0 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003644:	f7fd fc4c 	bl	8000ee0 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b64      	cmp	r3, #100	; 0x64
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e204      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003656:	4b76      	ldr	r3, [pc, #472]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0xc0>
 8003662:	e014      	b.n	800368e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003664:	f7fd fc3c 	bl	8000ee0 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800366c:	f7fd fc38 	bl	8000ee0 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b64      	cmp	r3, #100	; 0x64
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e1f0      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367e:	4b6c      	ldr	r3, [pc, #432]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <HAL_RCC_OscConfig+0xe8>
 800368a:	e000      	b.n	800368e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d063      	beq.n	8003762 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800369a:	4b65      	ldr	r3, [pc, #404]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00b      	beq.n	80036be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036a6:	4b62      	ldr	r3, [pc, #392]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d11c      	bne.n	80036ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036b2:	4b5f      	ldr	r3, [pc, #380]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d116      	bne.n	80036ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036be:	4b5c      	ldr	r3, [pc, #368]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d005      	beq.n	80036d6 <HAL_RCC_OscConfig+0x152>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d001      	beq.n	80036d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e1c4      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d6:	4b56      	ldr	r3, [pc, #344]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4952      	ldr	r1, [pc, #328]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ea:	e03a      	b.n	8003762 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d020      	beq.n	8003736 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036f4:	4b4f      	ldr	r3, [pc, #316]	; (8003834 <HAL_RCC_OscConfig+0x2b0>)
 80036f6:	2201      	movs	r2, #1
 80036f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fa:	f7fd fbf1 	bl	8000ee0 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003702:	f7fd fbed 	bl	8000ee0 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e1a5      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003714:	4b46      	ldr	r3, [pc, #280]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0f0      	beq.n	8003702 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003720:	4b43      	ldr	r3, [pc, #268]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	4940      	ldr	r1, [pc, #256]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003730:	4313      	orrs	r3, r2
 8003732:	600b      	str	r3, [r1, #0]
 8003734:	e015      	b.n	8003762 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003736:	4b3f      	ldr	r3, [pc, #252]	; (8003834 <HAL_RCC_OscConfig+0x2b0>)
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373c:	f7fd fbd0 	bl	8000ee0 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003744:	f7fd fbcc 	bl	8000ee0 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e184      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003756:	4b36      	ldr	r3, [pc, #216]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f0      	bne.n	8003744 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d030      	beq.n	80037d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d016      	beq.n	80037a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003776:	4b30      	ldr	r3, [pc, #192]	; (8003838 <HAL_RCC_OscConfig+0x2b4>)
 8003778:	2201      	movs	r2, #1
 800377a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377c:	f7fd fbb0 	bl	8000ee0 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003784:	f7fd fbac 	bl	8000ee0 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e164      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003796:	4b26      	ldr	r3, [pc, #152]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0x200>
 80037a2:	e015      	b.n	80037d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037a4:	4b24      	ldr	r3, [pc, #144]	; (8003838 <HAL_RCC_OscConfig+0x2b4>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037aa:	f7fd fb99 	bl	8000ee0 <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b0:	e008      	b.n	80037c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037b2:	f7fd fb95 	bl	8000ee0 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e14d      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c4:	4b1a      	ldr	r3, [pc, #104]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80037c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1f0      	bne.n	80037b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 80a0 	beq.w	800391e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037de:	2300      	movs	r3, #0
 80037e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037e2:	4b13      	ldr	r3, [pc, #76]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10f      	bne.n	800380e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	60bb      	str	r3, [r7, #8]
 80037f2:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	4a0e      	ldr	r2, [pc, #56]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80037f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037fc:	6413      	str	r3, [r2, #64]	; 0x40
 80037fe:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003806:	60bb      	str	r3, [r7, #8]
 8003808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800380a:	2301      	movs	r3, #1
 800380c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380e:	4b0b      	ldr	r3, [pc, #44]	; (800383c <HAL_RCC_OscConfig+0x2b8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003816:	2b00      	cmp	r3, #0
 8003818:	d121      	bne.n	800385e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800381a:	4b08      	ldr	r3, [pc, #32]	; (800383c <HAL_RCC_OscConfig+0x2b8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a07      	ldr	r2, [pc, #28]	; (800383c <HAL_RCC_OscConfig+0x2b8>)
 8003820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003826:	f7fd fb5b 	bl	8000ee0 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800382c:	e011      	b.n	8003852 <HAL_RCC_OscConfig+0x2ce>
 800382e:	bf00      	nop
 8003830:	40023800 	.word	0x40023800
 8003834:	42470000 	.word	0x42470000
 8003838:	42470e80 	.word	0x42470e80
 800383c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003840:	f7fd fb4e 	bl	8000ee0 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e106      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003852:	4b85      	ldr	r3, [pc, #532]	; (8003a68 <HAL_RCC_OscConfig+0x4e4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d106      	bne.n	8003874 <HAL_RCC_OscConfig+0x2f0>
 8003866:	4b81      	ldr	r3, [pc, #516]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386a:	4a80      	ldr	r2, [pc, #512]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 800386c:	f043 0301 	orr.w	r3, r3, #1
 8003870:	6713      	str	r3, [r2, #112]	; 0x70
 8003872:	e01c      	b.n	80038ae <HAL_RCC_OscConfig+0x32a>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2b05      	cmp	r3, #5
 800387a:	d10c      	bne.n	8003896 <HAL_RCC_OscConfig+0x312>
 800387c:	4b7b      	ldr	r3, [pc, #492]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 800387e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003880:	4a7a      	ldr	r2, [pc, #488]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 8003882:	f043 0304 	orr.w	r3, r3, #4
 8003886:	6713      	str	r3, [r2, #112]	; 0x70
 8003888:	4b78      	ldr	r3, [pc, #480]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 800388a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388c:	4a77      	ldr	r2, [pc, #476]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 800388e:	f043 0301 	orr.w	r3, r3, #1
 8003892:	6713      	str	r3, [r2, #112]	; 0x70
 8003894:	e00b      	b.n	80038ae <HAL_RCC_OscConfig+0x32a>
 8003896:	4b75      	ldr	r3, [pc, #468]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 8003898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389a:	4a74      	ldr	r2, [pc, #464]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 800389c:	f023 0301 	bic.w	r3, r3, #1
 80038a0:	6713      	str	r3, [r2, #112]	; 0x70
 80038a2:	4b72      	ldr	r3, [pc, #456]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 80038a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a6:	4a71      	ldr	r2, [pc, #452]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 80038a8:	f023 0304 	bic.w	r3, r3, #4
 80038ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d015      	beq.n	80038e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b6:	f7fd fb13 	bl	8000ee0 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038bc:	e00a      	b.n	80038d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038be:	f7fd fb0f 	bl	8000ee0 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e0c5      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d4:	4b65      	ldr	r3, [pc, #404]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 80038d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0ee      	beq.n	80038be <HAL_RCC_OscConfig+0x33a>
 80038e0:	e014      	b.n	800390c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e2:	f7fd fafd 	bl	8000ee0 <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e8:	e00a      	b.n	8003900 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038ea:	f7fd faf9 	bl	8000ee0 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e0af      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003900:	4b5a      	ldr	r3, [pc, #360]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 8003902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1ee      	bne.n	80038ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800390c:	7dfb      	ldrb	r3, [r7, #23]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d105      	bne.n	800391e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003912:	4b56      	ldr	r3, [pc, #344]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	4a55      	ldr	r2, [pc, #340]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 8003918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800391c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 809b 	beq.w	8003a5e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003928:	4b50      	ldr	r3, [pc, #320]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 030c 	and.w	r3, r3, #12
 8003930:	2b08      	cmp	r3, #8
 8003932:	d05c      	beq.n	80039ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	2b02      	cmp	r3, #2
 800393a:	d141      	bne.n	80039c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393c:	4b4c      	ldr	r3, [pc, #304]	; (8003a70 <HAL_RCC_OscConfig+0x4ec>)
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003942:	f7fd facd 	bl	8000ee0 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003948:	e008      	b.n	800395c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800394a:	f7fd fac9 	bl	8000ee0 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e081      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395c:	4b43      	ldr	r3, [pc, #268]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1f0      	bne.n	800394a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	69da      	ldr	r2, [r3, #28]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	431a      	orrs	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	019b      	lsls	r3, r3, #6
 8003978:	431a      	orrs	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397e:	085b      	lsrs	r3, r3, #1
 8003980:	3b01      	subs	r3, #1
 8003982:	041b      	lsls	r3, r3, #16
 8003984:	431a      	orrs	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398a:	061b      	lsls	r3, r3, #24
 800398c:	4937      	ldr	r1, [pc, #220]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 800398e:	4313      	orrs	r3, r2
 8003990:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003992:	4b37      	ldr	r3, [pc, #220]	; (8003a70 <HAL_RCC_OscConfig+0x4ec>)
 8003994:	2201      	movs	r2, #1
 8003996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003998:	f7fd faa2 	bl	8000ee0 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a0:	f7fd fa9e 	bl	8000ee0 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e056      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b2:	4b2e      	ldr	r3, [pc, #184]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0f0      	beq.n	80039a0 <HAL_RCC_OscConfig+0x41c>
 80039be:	e04e      	b.n	8003a5e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c0:	4b2b      	ldr	r3, [pc, #172]	; (8003a70 <HAL_RCC_OscConfig+0x4ec>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c6:	f7fd fa8b 	bl	8000ee0 <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ce:	f7fd fa87 	bl	8000ee0 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e03f      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e0:	4b22      	ldr	r3, [pc, #136]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1f0      	bne.n	80039ce <HAL_RCC_OscConfig+0x44a>
 80039ec:	e037      	b.n	8003a5e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e032      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039fa:	4b1c      	ldr	r3, [pc, #112]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d028      	beq.n	8003a5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d121      	bne.n	8003a5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d11a      	bne.n	8003a5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a30:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d111      	bne.n	8003a5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a40:	085b      	lsrs	r3, r3, #1
 8003a42:	3b01      	subs	r3, #1
 8003a44:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d107      	bne.n	8003a5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d001      	beq.n	8003a5e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e000      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3718      	adds	r7, #24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40007000 	.word	0x40007000
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	42470060 	.word	0x42470060

08003a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0cc      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a88:	4b68      	ldr	r3, [pc, #416]	; (8003c2c <HAL_RCC_ClockConfig+0x1b8>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d90c      	bls.n	8003ab0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a96:	4b65      	ldr	r3, [pc, #404]	; (8003c2c <HAL_RCC_ClockConfig+0x1b8>)
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	b2d2      	uxtb	r2, r2
 8003a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9e:	4b63      	ldr	r3, [pc, #396]	; (8003c2c <HAL_RCC_ClockConfig+0x1b8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d001      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e0b8      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d020      	beq.n	8003afe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d005      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ac8:	4b59      	ldr	r3, [pc, #356]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	4a58      	ldr	r2, [pc, #352]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ad2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0308 	and.w	r3, r3, #8
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d005      	beq.n	8003aec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ae0:	4b53      	ldr	r3, [pc, #332]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	4a52      	ldr	r2, [pc, #328]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003aea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aec:	4b50      	ldr	r3, [pc, #320]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	494d      	ldr	r1, [pc, #308]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d044      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d107      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b12:	4b47      	ldr	r3, [pc, #284]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d119      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e07f      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d003      	beq.n	8003b32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d107      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b32:	4b3f      	ldr	r3, [pc, #252]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d109      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e06f      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b42:	4b3b      	ldr	r3, [pc, #236]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e067      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b52:	4b37      	ldr	r3, [pc, #220]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f023 0203 	bic.w	r2, r3, #3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	4934      	ldr	r1, [pc, #208]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b64:	f7fd f9bc 	bl	8000ee0 <HAL_GetTick>
 8003b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6a:	e00a      	b.n	8003b82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b6c:	f7fd f9b8 	bl	8000ee0 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e04f      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b82:	4b2b      	ldr	r3, [pc, #172]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 020c 	and.w	r2, r3, #12
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d1eb      	bne.n	8003b6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b94:	4b25      	ldr	r3, [pc, #148]	; (8003c2c <HAL_RCC_ClockConfig+0x1b8>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d20c      	bcs.n	8003bbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba2:	4b22      	ldr	r3, [pc, #136]	; (8003c2c <HAL_RCC_ClockConfig+0x1b8>)
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003baa:	4b20      	ldr	r3, [pc, #128]	; (8003c2c <HAL_RCC_ClockConfig+0x1b8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d001      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e032      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d008      	beq.n	8003bda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bc8:	4b19      	ldr	r3, [pc, #100]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	4916      	ldr	r1, [pc, #88]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d009      	beq.n	8003bfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003be6:	4b12      	ldr	r3, [pc, #72]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	490e      	ldr	r1, [pc, #56]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bfa:	f000 f821 	bl	8003c40 <HAL_RCC_GetSysClockFreq>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	4b0b      	ldr	r3, [pc, #44]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	091b      	lsrs	r3, r3, #4
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	490a      	ldr	r1, [pc, #40]	; (8003c34 <HAL_RCC_ClockConfig+0x1c0>)
 8003c0c:	5ccb      	ldrb	r3, [r1, r3]
 8003c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c12:	4a09      	ldr	r2, [pc, #36]	; (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c16:	4b09      	ldr	r3, [pc, #36]	; (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fd f91c 	bl	8000e58 <HAL_InitTick>

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40023c00 	.word	0x40023c00
 8003c30:	40023800 	.word	0x40023800
 8003c34:	08007d1c 	.word	0x08007d1c
 8003c38:	20000000 	.word	0x20000000
 8003c3c:	20000004 	.word	0x20000004

08003c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003c44:	b084      	sub	sp, #16
 8003c46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	607b      	str	r3, [r7, #4]
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	2300      	movs	r3, #0
 8003c52:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c58:	4b67      	ldr	r3, [pc, #412]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 030c 	and.w	r3, r3, #12
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	d00d      	beq.n	8003c80 <HAL_RCC_GetSysClockFreq+0x40>
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	f200 80bd 	bhi.w	8003de4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <HAL_RCC_GetSysClockFreq+0x34>
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d003      	beq.n	8003c7a <HAL_RCC_GetSysClockFreq+0x3a>
 8003c72:	e0b7      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c74:	4b61      	ldr	r3, [pc, #388]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c76:	60bb      	str	r3, [r7, #8]
       break;
 8003c78:	e0b7      	b.n	8003dea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c7a:	4b61      	ldr	r3, [pc, #388]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003c7c:	60bb      	str	r3, [r7, #8]
      break;
 8003c7e:	e0b4      	b.n	8003dea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c80:	4b5d      	ldr	r3, [pc, #372]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c8a:	4b5b      	ldr	r3, [pc, #364]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d04d      	beq.n	8003d32 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c96:	4b58      	ldr	r3, [pc, #352]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	099b      	lsrs	r3, r3, #6
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ca6:	f04f 0100 	mov.w	r1, #0
 8003caa:	ea02 0800 	and.w	r8, r2, r0
 8003cae:	ea03 0901 	and.w	r9, r3, r1
 8003cb2:	4640      	mov	r0, r8
 8003cb4:	4649      	mov	r1, r9
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	f04f 0300 	mov.w	r3, #0
 8003cbe:	014b      	lsls	r3, r1, #5
 8003cc0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003cc4:	0142      	lsls	r2, r0, #5
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	4619      	mov	r1, r3
 8003cca:	ebb0 0008 	subs.w	r0, r0, r8
 8003cce:	eb61 0109 	sbc.w	r1, r1, r9
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	f04f 0300 	mov.w	r3, #0
 8003cda:	018b      	lsls	r3, r1, #6
 8003cdc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ce0:	0182      	lsls	r2, r0, #6
 8003ce2:	1a12      	subs	r2, r2, r0
 8003ce4:	eb63 0301 	sbc.w	r3, r3, r1
 8003ce8:	f04f 0000 	mov.w	r0, #0
 8003cec:	f04f 0100 	mov.w	r1, #0
 8003cf0:	00d9      	lsls	r1, r3, #3
 8003cf2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cf6:	00d0      	lsls	r0, r2, #3
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	eb12 0208 	adds.w	r2, r2, r8
 8003d00:	eb43 0309 	adc.w	r3, r3, r9
 8003d04:	f04f 0000 	mov.w	r0, #0
 8003d08:	f04f 0100 	mov.w	r1, #0
 8003d0c:	0259      	lsls	r1, r3, #9
 8003d0e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003d12:	0250      	lsls	r0, r2, #9
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4610      	mov	r0, r2
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	f04f 0300 	mov.w	r3, #0
 8003d24:	f7fc fa58 	bl	80001d8 <__aeabi_uldivmod>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	e04a      	b.n	8003dc8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d32:	4b31      	ldr	r3, [pc, #196]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	099b      	lsrs	r3, r3, #6
 8003d38:	461a      	mov	r2, r3
 8003d3a:	f04f 0300 	mov.w	r3, #0
 8003d3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d42:	f04f 0100 	mov.w	r1, #0
 8003d46:	ea02 0400 	and.w	r4, r2, r0
 8003d4a:	ea03 0501 	and.w	r5, r3, r1
 8003d4e:	4620      	mov	r0, r4
 8003d50:	4629      	mov	r1, r5
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	f04f 0300 	mov.w	r3, #0
 8003d5a:	014b      	lsls	r3, r1, #5
 8003d5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d60:	0142      	lsls	r2, r0, #5
 8003d62:	4610      	mov	r0, r2
 8003d64:	4619      	mov	r1, r3
 8003d66:	1b00      	subs	r0, r0, r4
 8003d68:	eb61 0105 	sbc.w	r1, r1, r5
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	018b      	lsls	r3, r1, #6
 8003d76:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d7a:	0182      	lsls	r2, r0, #6
 8003d7c:	1a12      	subs	r2, r2, r0
 8003d7e:	eb63 0301 	sbc.w	r3, r3, r1
 8003d82:	f04f 0000 	mov.w	r0, #0
 8003d86:	f04f 0100 	mov.w	r1, #0
 8003d8a:	00d9      	lsls	r1, r3, #3
 8003d8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d90:	00d0      	lsls	r0, r2, #3
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	1912      	adds	r2, r2, r4
 8003d98:	eb45 0303 	adc.w	r3, r5, r3
 8003d9c:	f04f 0000 	mov.w	r0, #0
 8003da0:	f04f 0100 	mov.w	r1, #0
 8003da4:	0299      	lsls	r1, r3, #10
 8003da6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003daa:	0290      	lsls	r0, r2, #10
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4610      	mov	r0, r2
 8003db2:	4619      	mov	r1, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	461a      	mov	r2, r3
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	f7fc fa0c 	bl	80001d8 <__aeabi_uldivmod>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	0c1b      	lsrs	r3, r3, #16
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de0:	60bb      	str	r3, [r7, #8]
      break;
 8003de2:	e002      	b.n	8003dea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003de6:	60bb      	str	r3, [r7, #8]
      break;
 8003de8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dea:	68bb      	ldr	r3, [r7, #8]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003df6:	bf00      	nop
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	00f42400 	.word	0x00f42400
 8003e00:	007a1200 	.word	0x007a1200

08003e04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e08:	4b03      	ldr	r3, [pc, #12]	; (8003e18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	20000000 	.word	0x20000000

08003e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e20:	f7ff fff0 	bl	8003e04 <HAL_RCC_GetHCLKFreq>
 8003e24:	4602      	mov	r2, r0
 8003e26:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	0a9b      	lsrs	r3, r3, #10
 8003e2c:	f003 0307 	and.w	r3, r3, #7
 8003e30:	4903      	ldr	r1, [pc, #12]	; (8003e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e32:	5ccb      	ldrb	r3, [r1, r3]
 8003e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	08007d2c 	.word	0x08007d2c

08003e44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e48:	f7ff ffdc 	bl	8003e04 <HAL_RCC_GetHCLKFreq>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	0b5b      	lsrs	r3, r3, #13
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	4903      	ldr	r1, [pc, #12]	; (8003e68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e5a:	5ccb      	ldrb	r3, [r1, r3]
 8003e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40023800 	.word	0x40023800
 8003e68:	08007d2c 	.word	0x08007d2c

08003e6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e041      	b.n	8003f02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d106      	bne.n	8003e98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fc fe50 	bl	8000b38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4610      	mov	r0, r2
 8003eac:	f000 f82e 	bl	8003f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
	...

08003f0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a40      	ldr	r2, [pc, #256]	; (8004020 <TIM_Base_SetConfig+0x114>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d013      	beq.n	8003f4c <TIM_Base_SetConfig+0x40>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f2a:	d00f      	beq.n	8003f4c <TIM_Base_SetConfig+0x40>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a3d      	ldr	r2, [pc, #244]	; (8004024 <TIM_Base_SetConfig+0x118>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d00b      	beq.n	8003f4c <TIM_Base_SetConfig+0x40>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a3c      	ldr	r2, [pc, #240]	; (8004028 <TIM_Base_SetConfig+0x11c>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d007      	beq.n	8003f4c <TIM_Base_SetConfig+0x40>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a3b      	ldr	r2, [pc, #236]	; (800402c <TIM_Base_SetConfig+0x120>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d003      	beq.n	8003f4c <TIM_Base_SetConfig+0x40>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a3a      	ldr	r2, [pc, #232]	; (8004030 <TIM_Base_SetConfig+0x124>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d108      	bne.n	8003f5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a2f      	ldr	r2, [pc, #188]	; (8004020 <TIM_Base_SetConfig+0x114>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d02b      	beq.n	8003fbe <TIM_Base_SetConfig+0xb2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f6c:	d027      	beq.n	8003fbe <TIM_Base_SetConfig+0xb2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a2c      	ldr	r2, [pc, #176]	; (8004024 <TIM_Base_SetConfig+0x118>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d023      	beq.n	8003fbe <TIM_Base_SetConfig+0xb2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a2b      	ldr	r2, [pc, #172]	; (8004028 <TIM_Base_SetConfig+0x11c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d01f      	beq.n	8003fbe <TIM_Base_SetConfig+0xb2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a2a      	ldr	r2, [pc, #168]	; (800402c <TIM_Base_SetConfig+0x120>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d01b      	beq.n	8003fbe <TIM_Base_SetConfig+0xb2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a29      	ldr	r2, [pc, #164]	; (8004030 <TIM_Base_SetConfig+0x124>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d017      	beq.n	8003fbe <TIM_Base_SetConfig+0xb2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a28      	ldr	r2, [pc, #160]	; (8004034 <TIM_Base_SetConfig+0x128>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d013      	beq.n	8003fbe <TIM_Base_SetConfig+0xb2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a27      	ldr	r2, [pc, #156]	; (8004038 <TIM_Base_SetConfig+0x12c>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00f      	beq.n	8003fbe <TIM_Base_SetConfig+0xb2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a26      	ldr	r2, [pc, #152]	; (800403c <TIM_Base_SetConfig+0x130>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d00b      	beq.n	8003fbe <TIM_Base_SetConfig+0xb2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a25      	ldr	r2, [pc, #148]	; (8004040 <TIM_Base_SetConfig+0x134>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d007      	beq.n	8003fbe <TIM_Base_SetConfig+0xb2>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a24      	ldr	r2, [pc, #144]	; (8004044 <TIM_Base_SetConfig+0x138>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d003      	beq.n	8003fbe <TIM_Base_SetConfig+0xb2>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a23      	ldr	r2, [pc, #140]	; (8004048 <TIM_Base_SetConfig+0x13c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d108      	bne.n	8003fd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a0a      	ldr	r2, [pc, #40]	; (8004020 <TIM_Base_SetConfig+0x114>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d003      	beq.n	8004004 <TIM_Base_SetConfig+0xf8>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a0c      	ldr	r2, [pc, #48]	; (8004030 <TIM_Base_SetConfig+0x124>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d103      	bne.n	800400c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	615a      	str	r2, [r3, #20]
}
 8004012:	bf00      	nop
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	40010000 	.word	0x40010000
 8004024:	40000400 	.word	0x40000400
 8004028:	40000800 	.word	0x40000800
 800402c:	40000c00 	.word	0x40000c00
 8004030:	40010400 	.word	0x40010400
 8004034:	40014000 	.word	0x40014000
 8004038:	40014400 	.word	0x40014400
 800403c:	40014800 	.word	0x40014800
 8004040:	40001800 	.word	0x40001800
 8004044:	40001c00 	.word	0x40001c00
 8004048:	40002000 	.word	0x40002000

0800404c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004060:	2302      	movs	r3, #2
 8004062:	e05a      	b.n	800411a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800408a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a21      	ldr	r2, [pc, #132]	; (8004128 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d022      	beq.n	80040ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b0:	d01d      	beq.n	80040ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a1d      	ldr	r2, [pc, #116]	; (800412c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d018      	beq.n	80040ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a1b      	ldr	r2, [pc, #108]	; (8004130 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d013      	beq.n	80040ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a1a      	ldr	r2, [pc, #104]	; (8004134 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d00e      	beq.n	80040ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a18      	ldr	r2, [pc, #96]	; (8004138 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d009      	beq.n	80040ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a17      	ldr	r2, [pc, #92]	; (800413c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d004      	beq.n	80040ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a15      	ldr	r2, [pc, #84]	; (8004140 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d10c      	bne.n	8004108 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40010000 	.word	0x40010000
 800412c:	40000400 	.word	0x40000400
 8004130:	40000800 	.word	0x40000800
 8004134:	40000c00 	.word	0x40000c00
 8004138:	40010400 	.word	0x40010400
 800413c:	40014000 	.word	0x40014000
 8004140:	40001800 	.word	0x40001800

08004144 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e03f      	b.n	80041d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d106      	bne.n	8004170 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7fc fd06 	bl	8000b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2224      	movs	r2, #36	; 0x24
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004186:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f929 	bl	80043e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	691a      	ldr	r2, [r3, #16]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800419c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695a      	ldr	r2, [r3, #20]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b08a      	sub	sp, #40	; 0x28
 80041e2:	af02      	add	r7, sp, #8
 80041e4:	60f8      	str	r0, [r7, #12]
 80041e6:	60b9      	str	r1, [r7, #8]
 80041e8:	603b      	str	r3, [r7, #0]
 80041ea:	4613      	mov	r3, r2
 80041ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b20      	cmp	r3, #32
 80041fc:	d17c      	bne.n	80042f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <HAL_UART_Transmit+0x2c>
 8004204:	88fb      	ldrh	r3, [r7, #6]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e075      	b.n	80042fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004214:	2b01      	cmp	r3, #1
 8004216:	d101      	bne.n	800421c <HAL_UART_Transmit+0x3e>
 8004218:	2302      	movs	r3, #2
 800421a:	e06e      	b.n	80042fa <HAL_UART_Transmit+0x11c>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2221      	movs	r2, #33	; 0x21
 800422e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004232:	f7fc fe55 	bl	8000ee0 <HAL_GetTick>
 8004236:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	88fa      	ldrh	r2, [r7, #6]
 800423c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	88fa      	ldrh	r2, [r7, #6]
 8004242:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800424c:	d108      	bne.n	8004260 <HAL_UART_Transmit+0x82>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d104      	bne.n	8004260 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004256:	2300      	movs	r3, #0
 8004258:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	61bb      	str	r3, [r7, #24]
 800425e:	e003      	b.n	8004268 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004264:	2300      	movs	r3, #0
 8004266:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004270:	e02a      	b.n	80042c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2200      	movs	r2, #0
 800427a:	2180      	movs	r1, #128	; 0x80
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 f840 	bl	8004302 <UART_WaitOnFlagUntilTimeout>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e036      	b.n	80042fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10b      	bne.n	80042aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	461a      	mov	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	3302      	adds	r3, #2
 80042a6:	61bb      	str	r3, [r7, #24]
 80042a8:	e007      	b.n	80042ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	781a      	ldrb	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	3301      	adds	r3, #1
 80042b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042be:	b29b      	uxth	r3, r3
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1cf      	bne.n	8004272 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	2200      	movs	r2, #0
 80042da:	2140      	movs	r1, #64	; 0x40
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f000 f810 	bl	8004302 <UART_WaitOnFlagUntilTimeout>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e006      	b.n	80042fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80042f4:	2300      	movs	r3, #0
 80042f6:	e000      	b.n	80042fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80042f8:	2302      	movs	r3, #2
  }
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3720      	adds	r7, #32
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b090      	sub	sp, #64	; 0x40
 8004306:	af00      	add	r7, sp, #0
 8004308:	60f8      	str	r0, [r7, #12]
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	603b      	str	r3, [r7, #0]
 800430e:	4613      	mov	r3, r2
 8004310:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004312:	e050      	b.n	80043b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431a:	d04c      	beq.n	80043b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800431c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800431e:	2b00      	cmp	r3, #0
 8004320:	d007      	beq.n	8004332 <UART_WaitOnFlagUntilTimeout+0x30>
 8004322:	f7fc fddd 	bl	8000ee0 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800432e:	429a      	cmp	r2, r3
 8004330:	d241      	bcs.n	80043b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	330c      	adds	r3, #12
 8004338:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433c:	e853 3f00 	ldrex	r3, [r3]
 8004340:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004348:	63fb      	str	r3, [r7, #60]	; 0x3c
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	330c      	adds	r3, #12
 8004350:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004352:	637a      	str	r2, [r7, #52]	; 0x34
 8004354:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004356:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004358:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800435a:	e841 2300 	strex	r3, r2, [r1]
 800435e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1e5      	bne.n	8004332 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3314      	adds	r3, #20
 800436c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	e853 3f00 	ldrex	r3, [r3]
 8004374:	613b      	str	r3, [r7, #16]
   return(result);
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f023 0301 	bic.w	r3, r3, #1
 800437c:	63bb      	str	r3, [r7, #56]	; 0x38
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3314      	adds	r3, #20
 8004384:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004386:	623a      	str	r2, [r7, #32]
 8004388:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438a:	69f9      	ldr	r1, [r7, #28]
 800438c:	6a3a      	ldr	r2, [r7, #32]
 800438e:	e841 2300 	strex	r3, r2, [r1]
 8004392:	61bb      	str	r3, [r7, #24]
   return(result);
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1e5      	bne.n	8004366 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2220      	movs	r2, #32
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2220      	movs	r2, #32
 80043a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e00f      	b.n	80043d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	4013      	ands	r3, r2
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	bf0c      	ite	eq
 80043c6:	2301      	moveq	r3, #1
 80043c8:	2300      	movne	r3, #0
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	461a      	mov	r2, r3
 80043ce:	79fb      	ldrb	r3, [r7, #7]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d09f      	beq.n	8004314 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3740      	adds	r7, #64	; 0x40
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
	...

080043e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e4:	b09f      	sub	sp, #124	; 0x7c
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f6:	68d9      	ldr	r1, [r3, #12]
 80043f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	ea40 0301 	orr.w	r3, r0, r1
 8004400:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	431a      	orrs	r2, r3
 800440c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	431a      	orrs	r2, r3
 8004412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	4313      	orrs	r3, r2
 8004418:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800441a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004424:	f021 010c 	bic.w	r1, r1, #12
 8004428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800442e:	430b      	orrs	r3, r1
 8004430:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800443c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800443e:	6999      	ldr	r1, [r3, #24]
 8004440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	ea40 0301 	orr.w	r3, r0, r1
 8004448:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800444a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	4bc5      	ldr	r3, [pc, #788]	; (8004764 <UART_SetConfig+0x384>)
 8004450:	429a      	cmp	r2, r3
 8004452:	d004      	beq.n	800445e <UART_SetConfig+0x7e>
 8004454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	4bc3      	ldr	r3, [pc, #780]	; (8004768 <UART_SetConfig+0x388>)
 800445a:	429a      	cmp	r2, r3
 800445c:	d103      	bne.n	8004466 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800445e:	f7ff fcf1 	bl	8003e44 <HAL_RCC_GetPCLK2Freq>
 8004462:	6778      	str	r0, [r7, #116]	; 0x74
 8004464:	e002      	b.n	800446c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004466:	f7ff fcd9 	bl	8003e1c <HAL_RCC_GetPCLK1Freq>
 800446a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800446c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004474:	f040 80b6 	bne.w	80045e4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004478:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800447a:	461c      	mov	r4, r3
 800447c:	f04f 0500 	mov.w	r5, #0
 8004480:	4622      	mov	r2, r4
 8004482:	462b      	mov	r3, r5
 8004484:	1891      	adds	r1, r2, r2
 8004486:	6439      	str	r1, [r7, #64]	; 0x40
 8004488:	415b      	adcs	r3, r3
 800448a:	647b      	str	r3, [r7, #68]	; 0x44
 800448c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004490:	1912      	adds	r2, r2, r4
 8004492:	eb45 0303 	adc.w	r3, r5, r3
 8004496:	f04f 0000 	mov.w	r0, #0
 800449a:	f04f 0100 	mov.w	r1, #0
 800449e:	00d9      	lsls	r1, r3, #3
 80044a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044a4:	00d0      	lsls	r0, r2, #3
 80044a6:	4602      	mov	r2, r0
 80044a8:	460b      	mov	r3, r1
 80044aa:	1911      	adds	r1, r2, r4
 80044ac:	6639      	str	r1, [r7, #96]	; 0x60
 80044ae:	416b      	adcs	r3, r5
 80044b0:	667b      	str	r3, [r7, #100]	; 0x64
 80044b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	461a      	mov	r2, r3
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	1891      	adds	r1, r2, r2
 80044be:	63b9      	str	r1, [r7, #56]	; 0x38
 80044c0:	415b      	adcs	r3, r3
 80044c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80044cc:	f7fb fe84 	bl	80001d8 <__aeabi_uldivmod>
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	4ba5      	ldr	r3, [pc, #660]	; (800476c <UART_SetConfig+0x38c>)
 80044d6:	fba3 2302 	umull	r2, r3, r3, r2
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	011e      	lsls	r6, r3, #4
 80044de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044e0:	461c      	mov	r4, r3
 80044e2:	f04f 0500 	mov.w	r5, #0
 80044e6:	4622      	mov	r2, r4
 80044e8:	462b      	mov	r3, r5
 80044ea:	1891      	adds	r1, r2, r2
 80044ec:	6339      	str	r1, [r7, #48]	; 0x30
 80044ee:	415b      	adcs	r3, r3
 80044f0:	637b      	str	r3, [r7, #52]	; 0x34
 80044f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80044f6:	1912      	adds	r2, r2, r4
 80044f8:	eb45 0303 	adc.w	r3, r5, r3
 80044fc:	f04f 0000 	mov.w	r0, #0
 8004500:	f04f 0100 	mov.w	r1, #0
 8004504:	00d9      	lsls	r1, r3, #3
 8004506:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800450a:	00d0      	lsls	r0, r2, #3
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	1911      	adds	r1, r2, r4
 8004512:	65b9      	str	r1, [r7, #88]	; 0x58
 8004514:	416b      	adcs	r3, r5
 8004516:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	461a      	mov	r2, r3
 800451e:	f04f 0300 	mov.w	r3, #0
 8004522:	1891      	adds	r1, r2, r2
 8004524:	62b9      	str	r1, [r7, #40]	; 0x28
 8004526:	415b      	adcs	r3, r3
 8004528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800452a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800452e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004532:	f7fb fe51 	bl	80001d8 <__aeabi_uldivmod>
 8004536:	4602      	mov	r2, r0
 8004538:	460b      	mov	r3, r1
 800453a:	4b8c      	ldr	r3, [pc, #560]	; (800476c <UART_SetConfig+0x38c>)
 800453c:	fba3 1302 	umull	r1, r3, r3, r2
 8004540:	095b      	lsrs	r3, r3, #5
 8004542:	2164      	movs	r1, #100	; 0x64
 8004544:	fb01 f303 	mul.w	r3, r1, r3
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	3332      	adds	r3, #50	; 0x32
 800454e:	4a87      	ldr	r2, [pc, #540]	; (800476c <UART_SetConfig+0x38c>)
 8004550:	fba2 2303 	umull	r2, r3, r2, r3
 8004554:	095b      	lsrs	r3, r3, #5
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800455c:	441e      	add	r6, r3
 800455e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004560:	4618      	mov	r0, r3
 8004562:	f04f 0100 	mov.w	r1, #0
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	1894      	adds	r4, r2, r2
 800456c:	623c      	str	r4, [r7, #32]
 800456e:	415b      	adcs	r3, r3
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
 8004572:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004576:	1812      	adds	r2, r2, r0
 8004578:	eb41 0303 	adc.w	r3, r1, r3
 800457c:	f04f 0400 	mov.w	r4, #0
 8004580:	f04f 0500 	mov.w	r5, #0
 8004584:	00dd      	lsls	r5, r3, #3
 8004586:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800458a:	00d4      	lsls	r4, r2, #3
 800458c:	4622      	mov	r2, r4
 800458e:	462b      	mov	r3, r5
 8004590:	1814      	adds	r4, r2, r0
 8004592:	653c      	str	r4, [r7, #80]	; 0x50
 8004594:	414b      	adcs	r3, r1
 8004596:	657b      	str	r3, [r7, #84]	; 0x54
 8004598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	461a      	mov	r2, r3
 800459e:	f04f 0300 	mov.w	r3, #0
 80045a2:	1891      	adds	r1, r2, r2
 80045a4:	61b9      	str	r1, [r7, #24]
 80045a6:	415b      	adcs	r3, r3
 80045a8:	61fb      	str	r3, [r7, #28]
 80045aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80045b2:	f7fb fe11 	bl	80001d8 <__aeabi_uldivmod>
 80045b6:	4602      	mov	r2, r0
 80045b8:	460b      	mov	r3, r1
 80045ba:	4b6c      	ldr	r3, [pc, #432]	; (800476c <UART_SetConfig+0x38c>)
 80045bc:	fba3 1302 	umull	r1, r3, r3, r2
 80045c0:	095b      	lsrs	r3, r3, #5
 80045c2:	2164      	movs	r1, #100	; 0x64
 80045c4:	fb01 f303 	mul.w	r3, r1, r3
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	3332      	adds	r3, #50	; 0x32
 80045ce:	4a67      	ldr	r2, [pc, #412]	; (800476c <UART_SetConfig+0x38c>)
 80045d0:	fba2 2303 	umull	r2, r3, r2, r3
 80045d4:	095b      	lsrs	r3, r3, #5
 80045d6:	f003 0207 	and.w	r2, r3, #7
 80045da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4432      	add	r2, r6
 80045e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045e2:	e0b9      	b.n	8004758 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045e6:	461c      	mov	r4, r3
 80045e8:	f04f 0500 	mov.w	r5, #0
 80045ec:	4622      	mov	r2, r4
 80045ee:	462b      	mov	r3, r5
 80045f0:	1891      	adds	r1, r2, r2
 80045f2:	6139      	str	r1, [r7, #16]
 80045f4:	415b      	adcs	r3, r3
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80045fc:	1912      	adds	r2, r2, r4
 80045fe:	eb45 0303 	adc.w	r3, r5, r3
 8004602:	f04f 0000 	mov.w	r0, #0
 8004606:	f04f 0100 	mov.w	r1, #0
 800460a:	00d9      	lsls	r1, r3, #3
 800460c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004610:	00d0      	lsls	r0, r2, #3
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	eb12 0804 	adds.w	r8, r2, r4
 800461a:	eb43 0905 	adc.w	r9, r3, r5
 800461e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	4618      	mov	r0, r3
 8004624:	f04f 0100 	mov.w	r1, #0
 8004628:	f04f 0200 	mov.w	r2, #0
 800462c:	f04f 0300 	mov.w	r3, #0
 8004630:	008b      	lsls	r3, r1, #2
 8004632:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004636:	0082      	lsls	r2, r0, #2
 8004638:	4640      	mov	r0, r8
 800463a:	4649      	mov	r1, r9
 800463c:	f7fb fdcc 	bl	80001d8 <__aeabi_uldivmod>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4b49      	ldr	r3, [pc, #292]	; (800476c <UART_SetConfig+0x38c>)
 8004646:	fba3 2302 	umull	r2, r3, r3, r2
 800464a:	095b      	lsrs	r3, r3, #5
 800464c:	011e      	lsls	r6, r3, #4
 800464e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004650:	4618      	mov	r0, r3
 8004652:	f04f 0100 	mov.w	r1, #0
 8004656:	4602      	mov	r2, r0
 8004658:	460b      	mov	r3, r1
 800465a:	1894      	adds	r4, r2, r2
 800465c:	60bc      	str	r4, [r7, #8]
 800465e:	415b      	adcs	r3, r3
 8004660:	60fb      	str	r3, [r7, #12]
 8004662:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004666:	1812      	adds	r2, r2, r0
 8004668:	eb41 0303 	adc.w	r3, r1, r3
 800466c:	f04f 0400 	mov.w	r4, #0
 8004670:	f04f 0500 	mov.w	r5, #0
 8004674:	00dd      	lsls	r5, r3, #3
 8004676:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800467a:	00d4      	lsls	r4, r2, #3
 800467c:	4622      	mov	r2, r4
 800467e:	462b      	mov	r3, r5
 8004680:	1814      	adds	r4, r2, r0
 8004682:	64bc      	str	r4, [r7, #72]	; 0x48
 8004684:	414b      	adcs	r3, r1
 8004686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	4618      	mov	r0, r3
 800468e:	f04f 0100 	mov.w	r1, #0
 8004692:	f04f 0200 	mov.w	r2, #0
 8004696:	f04f 0300 	mov.w	r3, #0
 800469a:	008b      	lsls	r3, r1, #2
 800469c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046a0:	0082      	lsls	r2, r0, #2
 80046a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80046a6:	f7fb fd97 	bl	80001d8 <__aeabi_uldivmod>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4b2f      	ldr	r3, [pc, #188]	; (800476c <UART_SetConfig+0x38c>)
 80046b0:	fba3 1302 	umull	r1, r3, r3, r2
 80046b4:	095b      	lsrs	r3, r3, #5
 80046b6:	2164      	movs	r1, #100	; 0x64
 80046b8:	fb01 f303 	mul.w	r3, r1, r3
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	011b      	lsls	r3, r3, #4
 80046c0:	3332      	adds	r3, #50	; 0x32
 80046c2:	4a2a      	ldr	r2, [pc, #168]	; (800476c <UART_SetConfig+0x38c>)
 80046c4:	fba2 2303 	umull	r2, r3, r2, r3
 80046c8:	095b      	lsrs	r3, r3, #5
 80046ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046ce:	441e      	add	r6, r3
 80046d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046d2:	4618      	mov	r0, r3
 80046d4:	f04f 0100 	mov.w	r1, #0
 80046d8:	4602      	mov	r2, r0
 80046da:	460b      	mov	r3, r1
 80046dc:	1894      	adds	r4, r2, r2
 80046de:	603c      	str	r4, [r7, #0]
 80046e0:	415b      	adcs	r3, r3
 80046e2:	607b      	str	r3, [r7, #4]
 80046e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046e8:	1812      	adds	r2, r2, r0
 80046ea:	eb41 0303 	adc.w	r3, r1, r3
 80046ee:	f04f 0400 	mov.w	r4, #0
 80046f2:	f04f 0500 	mov.w	r5, #0
 80046f6:	00dd      	lsls	r5, r3, #3
 80046f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80046fc:	00d4      	lsls	r4, r2, #3
 80046fe:	4622      	mov	r2, r4
 8004700:	462b      	mov	r3, r5
 8004702:	eb12 0a00 	adds.w	sl, r2, r0
 8004706:	eb43 0b01 	adc.w	fp, r3, r1
 800470a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	4618      	mov	r0, r3
 8004710:	f04f 0100 	mov.w	r1, #0
 8004714:	f04f 0200 	mov.w	r2, #0
 8004718:	f04f 0300 	mov.w	r3, #0
 800471c:	008b      	lsls	r3, r1, #2
 800471e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004722:	0082      	lsls	r2, r0, #2
 8004724:	4650      	mov	r0, sl
 8004726:	4659      	mov	r1, fp
 8004728:	f7fb fd56 	bl	80001d8 <__aeabi_uldivmod>
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	4b0e      	ldr	r3, [pc, #56]	; (800476c <UART_SetConfig+0x38c>)
 8004732:	fba3 1302 	umull	r1, r3, r3, r2
 8004736:	095b      	lsrs	r3, r3, #5
 8004738:	2164      	movs	r1, #100	; 0x64
 800473a:	fb01 f303 	mul.w	r3, r1, r3
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	011b      	lsls	r3, r3, #4
 8004742:	3332      	adds	r3, #50	; 0x32
 8004744:	4a09      	ldr	r2, [pc, #36]	; (800476c <UART_SetConfig+0x38c>)
 8004746:	fba2 2303 	umull	r2, r3, r2, r3
 800474a:	095b      	lsrs	r3, r3, #5
 800474c:	f003 020f 	and.w	r2, r3, #15
 8004750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4432      	add	r2, r6
 8004756:	609a      	str	r2, [r3, #8]
}
 8004758:	bf00      	nop
 800475a:	377c      	adds	r7, #124	; 0x7c
 800475c:	46bd      	mov	sp, r7
 800475e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004762:	bf00      	nop
 8004764:	40011000 	.word	0x40011000
 8004768:	40011400 	.word	0x40011400
 800476c:	51eb851f 	.word	0x51eb851f

08004770 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004770:	b084      	sub	sp, #16
 8004772:	b580      	push	{r7, lr}
 8004774:	b084      	sub	sp, #16
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
 800477a:	f107 001c 	add.w	r0, r7, #28
 800477e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004784:	2b01      	cmp	r3, #1
 8004786:	d122      	bne.n	80047ce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800479c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80047b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d105      	bne.n	80047c2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f9a0 	bl	8004b08 <USB_CoreReset>
 80047c8:	4603      	mov	r3, r0
 80047ca:	73fb      	strb	r3, [r7, #15]
 80047cc:	e01a      	b.n	8004804 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f994 	bl	8004b08 <USB_CoreReset>
 80047e0:	4603      	mov	r3, r0
 80047e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80047e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d106      	bne.n	80047f8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	639a      	str	r2, [r3, #56]	; 0x38
 80047f6:	e005      	b.n	8004804 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004806:	2b01      	cmp	r3, #1
 8004808:	d10b      	bne.n	8004822 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f043 0206 	orr.w	r2, r3, #6
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f043 0220 	orr.w	r2, r3, #32
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004822:	7bfb      	ldrb	r3, [r7, #15]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800482e:	b004      	add	sp, #16
 8004830:	4770      	bx	lr

08004832 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f043 0201 	orr.w	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f023 0201 	bic.w	r2, r3, #1
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b084      	sub	sp, #16
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	460b      	mov	r3, r1
 8004880:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004892:	78fb      	ldrb	r3, [r7, #3]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d115      	bne.n	80048c4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048a4:	2001      	movs	r0, #1
 80048a6:	f7fc fb27 	bl	8000ef8 <HAL_Delay>
      ms++;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	3301      	adds	r3, #1
 80048ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 f91a 	bl	8004aea <USB_GetMode>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d01e      	beq.n	80048fa <USB_SetCurrentMode+0x84>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b31      	cmp	r3, #49	; 0x31
 80048c0:	d9f0      	bls.n	80048a4 <USB_SetCurrentMode+0x2e>
 80048c2:	e01a      	b.n	80048fa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80048c4:	78fb      	ldrb	r3, [r7, #3]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d115      	bne.n	80048f6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048d6:	2001      	movs	r0, #1
 80048d8:	f7fc fb0e 	bl	8000ef8 <HAL_Delay>
      ms++;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	3301      	adds	r3, #1
 80048e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f901 	bl	8004aea <USB_GetMode>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d005      	beq.n	80048fa <USB_SetCurrentMode+0x84>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2b31      	cmp	r3, #49	; 0x31
 80048f2:	d9f0      	bls.n	80048d6 <USB_SetCurrentMode+0x60>
 80048f4:	e001      	b.n	80048fa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e005      	b.n	8004906 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2b32      	cmp	r3, #50	; 0x32
 80048fe:	d101      	bne.n	8004904 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e000      	b.n	8004906 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
	...

08004910 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800491a:	2300      	movs	r3, #0
 800491c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	019b      	lsls	r3, r3, #6
 8004922:	f043 0220 	orr.w	r2, r3, #32
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	3301      	adds	r3, #1
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	4a08      	ldr	r2, [pc, #32]	; (8004954 <USB_FlushTxFifo+0x44>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d901      	bls.n	800493a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e006      	b.n	8004948 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f003 0320 	and.w	r3, r3, #32
 8004942:	2b20      	cmp	r3, #32
 8004944:	d0f1      	beq.n	800492a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	00030d40 	.word	0x00030d40

08004958 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2210      	movs	r2, #16
 8004968:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	3301      	adds	r3, #1
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	4a08      	ldr	r2, [pc, #32]	; (8004994 <USB_FlushRxFifo+0x3c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d901      	bls.n	800497a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e006      	b.n	8004988 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f003 0310 	and.w	r3, r3, #16
 8004982:	2b10      	cmp	r3, #16
 8004984:	d0f1      	beq.n	800496a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	00030d40 	.word	0x00030d40

08004998 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004998:	b480      	push	{r7}
 800499a:	b089      	sub	sp, #36	; 0x24
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	4611      	mov	r1, r2
 80049a4:	461a      	mov	r2, r3
 80049a6:	460b      	mov	r3, r1
 80049a8:	71fb      	strb	r3, [r7, #7]
 80049aa:	4613      	mov	r3, r2
 80049ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80049b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d123      	bne.n	8004a06 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80049be:	88bb      	ldrh	r3, [r7, #4]
 80049c0:	3303      	adds	r3, #3
 80049c2:	089b      	lsrs	r3, r3, #2
 80049c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80049c6:	2300      	movs	r3, #0
 80049c8:	61bb      	str	r3, [r7, #24]
 80049ca:	e018      	b.n	80049fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80049cc:	79fb      	ldrb	r3, [r7, #7]
 80049ce:	031a      	lsls	r2, r3, #12
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049d8:	461a      	mov	r2, r3
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	3301      	adds	r3, #1
 80049e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	3301      	adds	r3, #1
 80049ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	3301      	adds	r3, #1
 80049f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	3301      	adds	r3, #1
 80049f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	3301      	adds	r3, #1
 80049fc:	61bb      	str	r3, [r7, #24]
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d3e2      	bcc.n	80049cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3724      	adds	r7, #36	; 0x24
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b08b      	sub	sp, #44	; 0x2c
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004a2a:	88fb      	ldrh	r3, [r7, #6]
 8004a2c:	089b      	lsrs	r3, r3, #2
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004a32:	88fb      	ldrh	r3, [r7, #6]
 8004a34:	f003 0303 	and.w	r3, r3, #3
 8004a38:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	623b      	str	r3, [r7, #32]
 8004a3e:	e014      	b.n	8004a6a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	3301      	adds	r3, #1
 8004a50:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	3301      	adds	r3, #1
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	3301      	adds	r3, #1
 8004a62:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	3301      	adds	r3, #1
 8004a68:	623b      	str	r3, [r7, #32]
 8004a6a:	6a3a      	ldr	r2, [r7, #32]
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d3e6      	bcc.n	8004a40 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004a72:	8bfb      	ldrh	r3, [r7, #30]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d01e      	beq.n	8004ab6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a82:	461a      	mov	r2, r3
 8004a84:	f107 0310 	add.w	r3, r7, #16
 8004a88:	6812      	ldr	r2, [r2, #0]
 8004a8a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	6a3b      	ldr	r3, [r7, #32]
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	fa22 f303 	lsr.w	r3, r2, r3
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	701a      	strb	r2, [r3, #0]
      i++;
 8004a9e:	6a3b      	ldr	r3, [r7, #32]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	623b      	str	r3, [r7, #32]
      pDest++;
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004aaa:	8bfb      	ldrh	r3, [r7, #30]
 8004aac:	3b01      	subs	r3, #1
 8004aae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004ab0:	8bfb      	ldrh	r3, [r7, #30]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1ea      	bne.n	8004a8c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	372c      	adds	r7, #44	; 0x2c
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004adc:	68fb      	ldr	r3, [r7, #12]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004aea:	b480      	push	{r7}
 8004aec:	b083      	sub	sp, #12
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	f003 0301 	and.w	r3, r3, #1
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
	...

08004b08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	3301      	adds	r3, #1
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	4a13      	ldr	r2, [pc, #76]	; (8004b68 <USB_CoreReset+0x60>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d901      	bls.n	8004b24 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e01a      	b.n	8004b5a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	daf3      	bge.n	8004b14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	f043 0201 	orr.w	r2, r3, #1
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	60fb      	str	r3, [r7, #12]
 8004b42:	4a09      	ldr	r2, [pc, #36]	; (8004b68 <USB_CoreReset+0x60>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d901      	bls.n	8004b4c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e006      	b.n	8004b5a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d0f1      	beq.n	8004b3c <USB_CoreReset+0x34>

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	00030d40 	.word	0x00030d40

08004b6c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b084      	sub	sp, #16
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
 8004b76:	f107 001c 	add.w	r0, r7, #28
 8004b7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b88:	461a      	mov	r2, r3
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004baa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d018      	beq.n	8004bf0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d10a      	bne.n	8004bda <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bd2:	f043 0304 	orr.w	r3, r3, #4
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	e014      	b.n	8004c04 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004be8:	f023 0304 	bic.w	r3, r3, #4
 8004bec:	6013      	str	r3, [r2, #0]
 8004bee:	e009      	b.n	8004c04 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bfe:	f023 0304 	bic.w	r3, r3, #4
 8004c02:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004c04:	2110      	movs	r1, #16
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff fe82 	bl	8004910 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f7ff fea3 	bl	8004958 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	e015      	b.n	8004c44 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c24:	461a      	mov	r2, r3
 8004c26:	f04f 33ff 	mov.w	r3, #4294967295
 8004c2a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c38:	461a      	mov	r2, r3
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	3301      	adds	r3, #1
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d3e5      	bcc.n	8004c18 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f04f 32ff 	mov.w	r2, #4294967295
 8004c58:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00b      	beq.n	8004c7e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c6c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a13      	ldr	r2, [pc, #76]	; (8004cc0 <USB_HostInit+0x154>)
 8004c72:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a13      	ldr	r2, [pc, #76]	; (8004cc4 <USB_HostInit+0x158>)
 8004c78:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004c7c:	e009      	b.n	8004c92 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2280      	movs	r2, #128	; 0x80
 8004c82:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a10      	ldr	r2, [pc, #64]	; (8004cc8 <USB_HostInit+0x15c>)
 8004c88:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a0f      	ldr	r2, [pc, #60]	; (8004ccc <USB_HostInit+0x160>)
 8004c8e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d105      	bne.n	8004ca4 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	f043 0210 	orr.w	r2, r3, #16
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	699a      	ldr	r2, [r3, #24]
 8004ca8:	4b09      	ldr	r3, [pc, #36]	; (8004cd0 <USB_HostInit+0x164>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cbc:	b004      	add	sp, #16
 8004cbe:	4770      	bx	lr
 8004cc0:	01000200 	.word	0x01000200
 8004cc4:	00e00300 	.word	0x00e00300
 8004cc8:	00600080 	.word	0x00600080
 8004ccc:	004000e0 	.word	0x004000e0
 8004cd0:	a3200008 	.word	0xa3200008

08004cd4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	460b      	mov	r3, r1
 8004cde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cf2:	f023 0303 	bic.w	r3, r3, #3
 8004cf6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	78fb      	ldrb	r3, [r7, #3]
 8004d02:	f003 0303 	and.w	r3, r3, #3
 8004d06:	68f9      	ldr	r1, [r7, #12]
 8004d08:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004d10:	78fb      	ldrb	r3, [r7, #3]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d107      	bne.n	8004d26 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004d22:	6053      	str	r3, [r2, #4]
 8004d24:	e009      	b.n	8004d3a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004d26:	78fb      	ldrb	r3, [r7, #3]
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d106      	bne.n	8004d3a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d32:	461a      	mov	r2, r3
 8004d34:	f241 7370 	movw	r3, #6000	; 0x1770
 8004d38:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004d68:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d76:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004d78:	2064      	movs	r0, #100	; 0x64
 8004d7a:	f7fc f8bd 	bl	8000ef8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d8a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004d8c:	200a      	movs	r0, #10
 8004d8e:	f7fc f8b3 	bl	8000ef8 <HAL_Delay>

  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	460b      	mov	r3, r1
 8004da6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004dc0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d109      	bne.n	8004de0 <USB_DriveVbus+0x44>
 8004dcc:	78fb      	ldrb	r3, [r7, #3]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d106      	bne.n	8004de0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004dda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004dde:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dea:	d109      	bne.n	8004e00 <USB_DriveVbus+0x64>
 8004dec:	78fb      	ldrb	r3, [r7, #3]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d106      	bne.n	8004e00 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004dfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dfe:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b085      	sub	sp, #20
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	0c5b      	lsrs	r3, r3, #17
 8004e2c:	f003 0303 	and.w	r3, r3, #3
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	b29b      	uxth	r3, r3
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3714      	adds	r7, #20
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
	...

08004e60 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b088      	sub	sp, #32
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	4608      	mov	r0, r1
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	4603      	mov	r3, r0
 8004e70:	70fb      	strb	r3, [r7, #3]
 8004e72:	460b      	mov	r3, r1
 8004e74:	70bb      	strb	r3, [r7, #2]
 8004e76:	4613      	mov	r3, r2
 8004e78:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004e82:	78fb      	ldrb	r3, [r7, #3]
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e8e:	461a      	mov	r2, r3
 8004e90:	f04f 33ff 	mov.w	r3, #4294967295
 8004e94:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004e96:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	d87e      	bhi.n	8004f9c <USB_HC_Init+0x13c>
 8004e9e:	a201      	add	r2, pc, #4	; (adr r2, 8004ea4 <USB_HC_Init+0x44>)
 8004ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea4:	08004eb5 	.word	0x08004eb5
 8004ea8:	08004f5f 	.word	0x08004f5f
 8004eac:	08004eb5 	.word	0x08004eb5
 8004eb0:	08004f21 	.word	0x08004f21
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004eb4:	78fb      	ldrb	r3, [r7, #3]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	f240 439d 	movw	r3, #1181	; 0x49d
 8004ec6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004ec8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	da10      	bge.n	8004ef2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004ed0:	78fb      	ldrb	r3, [r7, #3]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	78fa      	ldrb	r2, [r7, #3]
 8004ee0:	0151      	lsls	r1, r2, #5
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	440a      	add	r2, r1
 8004ee6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eee:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004ef0:	e057      	b.n	8004fa2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d051      	beq.n	8004fa2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004efe:	78fb      	ldrb	r3, [r7, #3]
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	78fa      	ldrb	r2, [r7, #3]
 8004f0e:	0151      	lsls	r1, r2, #5
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	440a      	add	r2, r1
 8004f14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f18:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004f1c:	60d3      	str	r3, [r2, #12]
      break;
 8004f1e:	e040      	b.n	8004fa2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004f20:	78fb      	ldrb	r3, [r7, #3]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	f240 639d 	movw	r3, #1693	; 0x69d
 8004f32:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004f34:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	da34      	bge.n	8004fa6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004f3c:	78fb      	ldrb	r3, [r7, #3]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	78fa      	ldrb	r2, [r7, #3]
 8004f4c:	0151      	lsls	r1, r2, #5
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	440a      	add	r2, r1
 8004f52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f5a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004f5c:	e023      	b.n	8004fa6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004f5e:	78fb      	ldrb	r3, [r7, #3]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	f240 2325 	movw	r3, #549	; 0x225
 8004f70:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004f72:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	da17      	bge.n	8004faa <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004f7a:	78fb      	ldrb	r3, [r7, #3]
 8004f7c:	015a      	lsls	r2, r3, #5
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	4413      	add	r3, r2
 8004f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	78fa      	ldrb	r2, [r7, #3]
 8004f8a:	0151      	lsls	r1, r2, #5
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	440a      	add	r2, r1
 8004f90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f94:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004f98:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004f9a:	e006      	b.n	8004faa <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	77fb      	strb	r3, [r7, #31]
      break;
 8004fa0:	e004      	b.n	8004fac <USB_HC_Init+0x14c>
      break;
 8004fa2:	bf00      	nop
 8004fa4:	e002      	b.n	8004fac <USB_HC_Init+0x14c>
      break;
 8004fa6:	bf00      	nop
 8004fa8:	e000      	b.n	8004fac <USB_HC_Init+0x14c>
      break;
 8004faa:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fb2:	699a      	ldr	r2, [r3, #24]
 8004fb4:	78fb      	ldrb	r3, [r7, #3]
 8004fb6:	f003 030f 	and.w	r3, r3, #15
 8004fba:	2101      	movs	r1, #1
 8004fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc0:	6939      	ldr	r1, [r7, #16]
 8004fc2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004fd6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	da03      	bge.n	8004fe6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fe2:	61bb      	str	r3, [r7, #24]
 8004fe4:	e001      	b.n	8004fea <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7ff ff0f 	bl	8004e0e <USB_GetHostSpeed>
 8004ff0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004ff2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d106      	bne.n	8005008 <USB_HC_Init+0x1a8>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d003      	beq.n	8005008 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005000:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005004:	617b      	str	r3, [r7, #20]
 8005006:	e001      	b.n	800500c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800500c:	787b      	ldrb	r3, [r7, #1]
 800500e:	059b      	lsls	r3, r3, #22
 8005010:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005014:	78bb      	ldrb	r3, [r7, #2]
 8005016:	02db      	lsls	r3, r3, #11
 8005018:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800501c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800501e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005022:	049b      	lsls	r3, r3, #18
 8005024:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005028:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800502a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800502c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005030:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005036:	78fb      	ldrb	r3, [r7, #3]
 8005038:	0159      	lsls	r1, r3, #5
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	440b      	add	r3, r1
 800503e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005042:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005048:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800504a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800504e:	2b03      	cmp	r3, #3
 8005050:	d10f      	bne.n	8005072 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005052:	78fb      	ldrb	r3, [r7, #3]
 8005054:	015a      	lsls	r2, r3, #5
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	4413      	add	r3, r2
 800505a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	78fa      	ldrb	r2, [r7, #3]
 8005062:	0151      	lsls	r1, r2, #5
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	440a      	add	r2, r1
 8005068:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800506c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005070:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005072:	7ffb      	ldrb	r3, [r7, #31]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3720      	adds	r7, #32
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b08c      	sub	sp, #48	; 0x30
 8005080:	af02      	add	r7, sp, #8
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	4613      	mov	r3, r2
 8005088:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	785b      	ldrb	r3, [r3, #1]
 8005092:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005094:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005098:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800509e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d02d      	beq.n	8005102 <USB_HC_StartXfer+0x86>
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	791b      	ldrb	r3, [r3, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d129      	bne.n	8005102 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80050ae:	79fb      	ldrb	r3, [r7, #7]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d117      	bne.n	80050e4 <USB_HC_StartXfer+0x68>
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	79db      	ldrb	r3, [r3, #7]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d003      	beq.n	80050c4 <USB_HC_StartXfer+0x48>
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	79db      	ldrb	r3, [r3, #7]
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d10f      	bne.n	80050e4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	69fa      	ldr	r2, [r7, #28]
 80050d4:	0151      	lsls	r1, r2, #5
 80050d6:	6a3a      	ldr	r2, [r7, #32]
 80050d8:	440a      	add	r2, r1
 80050da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80050e4:	79fb      	ldrb	r3, [r7, #7]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10b      	bne.n	8005102 <USB_HC_StartXfer+0x86>
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	795b      	ldrb	r3, [r3, #5]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d107      	bne.n	8005102 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	785b      	ldrb	r3, [r3, #1]
 80050f6:	4619      	mov	r1, r3
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 fa2f 	bl	800555c <USB_DoPing>
      return HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	e0f8      	b.n	80052f4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d018      	beq.n	800513c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	8912      	ldrh	r2, [r2, #8]
 8005112:	4413      	add	r3, r2
 8005114:	3b01      	subs	r3, #1
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	8912      	ldrh	r2, [r2, #8]
 800511a:	fbb3 f3f2 	udiv	r3, r3, r2
 800511e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005120:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005122:	8b7b      	ldrh	r3, [r7, #26]
 8005124:	429a      	cmp	r2, r3
 8005126:	d90b      	bls.n	8005140 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005128:	8b7b      	ldrh	r3, [r7, #26]
 800512a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800512c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	8912      	ldrh	r2, [r2, #8]
 8005132:	fb02 f203 	mul.w	r2, r2, r3
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	611a      	str	r2, [r3, #16]
 800513a:	e001      	b.n	8005140 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800513c:	2301      	movs	r3, #1
 800513e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	78db      	ldrb	r3, [r3, #3]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d007      	beq.n	8005158 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005148:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	8912      	ldrh	r2, [r2, #8]
 800514e:	fb02 f203 	mul.w	r2, r2, r3
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	611a      	str	r2, [r3, #16]
 8005156:	e003      	b.n	8005160 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	695a      	ldr	r2, [r3, #20]
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005168:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800516a:	04d9      	lsls	r1, r3, #19
 800516c:	4b63      	ldr	r3, [pc, #396]	; (80052fc <USB_HC_StartXfer+0x280>)
 800516e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005170:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	7a9b      	ldrb	r3, [r3, #10]
 8005176:	075b      	lsls	r3, r3, #29
 8005178:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800517c:	69f9      	ldr	r1, [r7, #28]
 800517e:	0148      	lsls	r0, r1, #5
 8005180:	6a39      	ldr	r1, [r7, #32]
 8005182:	4401      	add	r1, r0
 8005184:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005188:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800518a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800518c:	79fb      	ldrb	r3, [r7, #7]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d009      	beq.n	80051a6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	68d9      	ldr	r1, [r3, #12]
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	4413      	add	r3, r2
 800519e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a2:	460a      	mov	r2, r1
 80051a4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	bf0c      	ite	eq
 80051b6:	2301      	moveq	r3, #1
 80051b8:	2300      	movne	r3, #0
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	0151      	lsls	r1, r2, #5
 80051d0:	6a3a      	ldr	r2, [r7, #32]
 80051d2:	440a      	add	r2, r1
 80051d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051d8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80051dc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	6a3b      	ldr	r3, [r7, #32]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	7e7b      	ldrb	r3, [r7, #25]
 80051ee:	075b      	lsls	r3, r3, #29
 80051f0:	69f9      	ldr	r1, [r7, #28]
 80051f2:	0148      	lsls	r0, r1, #5
 80051f4:	6a39      	ldr	r1, [r7, #32]
 80051f6:	4401      	add	r1, r0
 80051f8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80051fc:	4313      	orrs	r3, r2
 80051fe:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	4413      	add	r3, r2
 8005208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005216:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	78db      	ldrb	r3, [r3, #3]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d004      	beq.n	800522a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005226:	613b      	str	r3, [r7, #16]
 8005228:	e003      	b.n	8005232 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005230:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005238:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	4413      	add	r3, r2
 8005242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005246:	461a      	mov	r2, r3
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800524c:	79fb      	ldrb	r3, [r7, #7]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005252:	2300      	movs	r3, #0
 8005254:	e04e      	b.n	80052f4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	78db      	ldrb	r3, [r3, #3]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d149      	bne.n	80052f2 <USB_HC_StartXfer+0x276>
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d045      	beq.n	80052f2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	79db      	ldrb	r3, [r3, #7]
 800526a:	2b03      	cmp	r3, #3
 800526c:	d830      	bhi.n	80052d0 <USB_HC_StartXfer+0x254>
 800526e:	a201      	add	r2, pc, #4	; (adr r2, 8005274 <USB_HC_StartXfer+0x1f8>)
 8005270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005274:	08005285 	.word	0x08005285
 8005278:	080052a9 	.word	0x080052a9
 800527c:	08005285 	.word	0x08005285
 8005280:	080052a9 	.word	0x080052a9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	3303      	adds	r3, #3
 800528a:	089b      	lsrs	r3, r3, #2
 800528c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800528e:	8afa      	ldrh	r2, [r7, #22]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005294:	b29b      	uxth	r3, r3
 8005296:	429a      	cmp	r2, r3
 8005298:	d91c      	bls.n	80052d4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	f043 0220 	orr.w	r2, r3, #32
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	619a      	str	r2, [r3, #24]
        }
        break;
 80052a6:	e015      	b.n	80052d4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	3303      	adds	r3, #3
 80052ae:	089b      	lsrs	r3, r3, #2
 80052b0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80052b2:	8afa      	ldrh	r2, [r7, #22]
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	429a      	cmp	r2, r3
 80052c0:	d90a      	bls.n	80052d8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	619a      	str	r2, [r3, #24]
        }
        break;
 80052ce:	e003      	b.n	80052d8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80052d0:	bf00      	nop
 80052d2:	e002      	b.n	80052da <USB_HC_StartXfer+0x25e>
        break;
 80052d4:	bf00      	nop
 80052d6:	e000      	b.n	80052da <USB_HC_StartXfer+0x25e>
        break;
 80052d8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	68d9      	ldr	r1, [r3, #12]
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	785a      	ldrb	r2, [r3, #1]
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	2000      	movs	r0, #0
 80052ea:	9000      	str	r0, [sp, #0]
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f7ff fb53 	bl	8004998 <USB_WritePacket>
  }

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3728      	adds	r7, #40	; 0x28
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	1ff80000 	.word	0x1ff80000

08005300 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	b29b      	uxth	r3, r3
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005322:	b480      	push	{r7}
 8005324:	b089      	sub	sp, #36	; 0x24
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	460b      	mov	r3, r1
 800532c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005332:	78fb      	ldrb	r3, [r7, #3]
 8005334:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005336:	2300      	movs	r3, #0
 8005338:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	4413      	add	r3, r2
 8005342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	0c9b      	lsrs	r3, r3, #18
 800534a:	f003 0303 	and.w	r3, r3, #3
 800534e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	4413      	add	r3, r2
 8005358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	0fdb      	lsrs	r3, r3, #31
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 0320 	and.w	r3, r3, #32
 800536e:	2b20      	cmp	r3, #32
 8005370:	d104      	bne.n	800537c <USB_HC_Halt+0x5a>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005378:	2300      	movs	r3, #0
 800537a:	e0e8      	b.n	800554e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d002      	beq.n	8005388 <USB_HC_Halt+0x66>
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	2b02      	cmp	r3, #2
 8005386:	d173      	bne.n	8005470 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	4413      	add	r3, r2
 8005390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	0151      	lsls	r1, r2, #5
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	440a      	add	r2, r1
 800539e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053a6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f003 0320 	and.w	r3, r3, #32
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f040 80cb 	bne.w	800554c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d143      	bne.n	800544a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	0151      	lsls	r1, r2, #5
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	440a      	add	r2, r1
 80053d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053e0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	0151      	lsls	r1, r2, #5
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	440a      	add	r2, r1
 80053f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005400:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	4413      	add	r3, r2
 800540a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	0151      	lsls	r1, r2, #5
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	440a      	add	r2, r1
 8005418:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800541c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005420:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	3301      	adds	r3, #1
 8005426:	61fb      	str	r3, [r7, #28]
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800542e:	d81d      	bhi.n	800546c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	4413      	add	r3, r2
 8005438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005442:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005446:	d0ec      	beq.n	8005422 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005448:	e080      	b.n	800554c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	4413      	add	r3, r2
 8005452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	0151      	lsls	r1, r2, #5
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	440a      	add	r2, r1
 8005460:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005464:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005468:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800546a:	e06f      	b.n	800554c <USB_HC_Halt+0x22a>
            break;
 800546c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800546e:	e06d      	b.n	800554c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	015a      	lsls	r2, r3, #5
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	4413      	add	r3, r2
 8005478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	0151      	lsls	r1, r2, #5
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	440a      	add	r2, r1
 8005486:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800548a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800548e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d143      	bne.n	8005528 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	0151      	lsls	r1, r2, #5
 80054b2:	69ba      	ldr	r2, [r7, #24]
 80054b4:	440a      	add	r2, r1
 80054b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054be:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	0151      	lsls	r1, r2, #5
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	440a      	add	r2, r1
 80054d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054de:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	0151      	lsls	r1, r2, #5
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	440a      	add	r2, r1
 80054f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054fe:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	3301      	adds	r3, #1
 8005504:	61fb      	str	r3, [r7, #28]
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800550c:	d81d      	bhi.n	800554a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	4413      	add	r3, r2
 8005516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005520:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005524:	d0ec      	beq.n	8005500 <USB_HC_Halt+0x1de>
 8005526:	e011      	b.n	800554c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	4413      	add	r3, r2
 8005530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	0151      	lsls	r1, r2, #5
 800553a:	69ba      	ldr	r2, [r7, #24]
 800553c:	440a      	add	r2, r1
 800553e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005542:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005546:	6013      	str	r3, [r2, #0]
 8005548:	e000      	b.n	800554c <USB_HC_Halt+0x22a>
          break;
 800554a:	bf00      	nop
    }
  }

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3724      	adds	r7, #36	; 0x24
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
	...

0800555c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	460b      	mov	r3, r1
 8005566:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800556c:	78fb      	ldrb	r3, [r7, #3]
 800556e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005570:	2301      	movs	r3, #1
 8005572:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	04da      	lsls	r2, r3, #19
 8005578:	4b15      	ldr	r3, [pc, #84]	; (80055d0 <USB_DoPing+0x74>)
 800557a:	4013      	ands	r3, r2
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	0151      	lsls	r1, r2, #5
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	440a      	add	r2, r1
 8005584:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005588:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800558c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	4413      	add	r3, r2
 8005596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055a4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055ac:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	015a      	lsls	r2, r3, #5
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	4413      	add	r3, r2
 80055b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ba:	461a      	mov	r2, r3
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	371c      	adds	r7, #28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	1ff80000 	.word	0x1ff80000

080055d4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7ff f935 	bl	8004854 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80055ea:	2110      	movs	r1, #16
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7ff f98f 	bl	8004910 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7ff f9b0 	bl	8004958 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80055f8:	2300      	movs	r3, #0
 80055fa:	613b      	str	r3, [r7, #16]
 80055fc:	e01f      	b.n	800563e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4413      	add	r3, r2
 8005606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005614:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800561c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005624:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	4413      	add	r3, r2
 800562e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005632:	461a      	mov	r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	3301      	adds	r3, #1
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	2b0f      	cmp	r3, #15
 8005642:	d9dc      	bls.n	80055fe <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005644:	2300      	movs	r3, #0
 8005646:	613b      	str	r3, [r7, #16]
 8005648:	e034      	b.n	80056b4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	4413      	add	r3, r2
 8005652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005660:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005668:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005670:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4413      	add	r3, r2
 800567a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800567e:	461a      	mov	r2, r3
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	3301      	adds	r3, #1
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005690:	d80c      	bhi.n	80056ac <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4413      	add	r3, r2
 800569a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056a8:	d0ec      	beq.n	8005684 <USB_StopHost+0xb0>
 80056aa:	e000      	b.n	80056ae <USB_StopHost+0xda>
        break;
 80056ac:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	3301      	adds	r3, #1
 80056b2:	613b      	str	r3, [r7, #16]
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	2b0f      	cmp	r3, #15
 80056b8:	d9c7      	bls.n	800564a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056c0:	461a      	mov	r2, r3
 80056c2:	f04f 33ff 	mov.w	r3, #4294967295
 80056c6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f04f 32ff 	mov.w	r2, #4294967295
 80056ce:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f7ff f8ae 	bl	8004832 <USB_EnableGlobalInt>

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3718      	adds	r7, #24
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80056e0:	b590      	push	{r4, r7, lr}
 80056e2:	b089      	sub	sp, #36	; 0x24
 80056e4:	af04      	add	r7, sp, #16
 80056e6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80056e8:	2301      	movs	r3, #1
 80056ea:	2202      	movs	r2, #2
 80056ec:	2102      	movs	r1, #2
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fc66 	bl	8005fc0 <USBH_FindInterface>
 80056f4:	4603      	mov	r3, r0
 80056f6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
 80056fa:	2bff      	cmp	r3, #255	; 0xff
 80056fc:	d002      	beq.n	8005704 <USBH_CDC_InterfaceInit+0x24>
 80056fe:	7bfb      	ldrb	r3, [r7, #15]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d901      	bls.n	8005708 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005704:	2302      	movs	r3, #2
 8005706:	e13d      	b.n	8005984 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005708:	7bfb      	ldrb	r3, [r7, #15]
 800570a:	4619      	mov	r1, r3
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 fc3b 	bl	8005f88 <USBH_SelectInterface>
 8005712:	4603      	mov	r3, r0
 8005714:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005716:	7bbb      	ldrb	r3, [r7, #14]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800571c:	2302      	movs	r3, #2
 800571e:	e131      	b.n	8005984 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005726:	2050      	movs	r0, #80	; 0x50
 8005728:	f002 fa00 	bl	8007b2c <malloc>
 800572c:	4603      	mov	r3, r0
 800572e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005736:	69db      	ldr	r3, [r3, #28]
 8005738:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005740:	2302      	movs	r3, #2
 8005742:	e11f      	b.n	8005984 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005744:	2250      	movs	r2, #80	; 0x50
 8005746:	2100      	movs	r1, #0
 8005748:	68b8      	ldr	r0, [r7, #8]
 800574a:	f002 f9ff 	bl	8007b4c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800574e:	7bfb      	ldrb	r3, [r7, #15]
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	211a      	movs	r1, #26
 8005754:	fb01 f303 	mul.w	r3, r1, r3
 8005758:	4413      	add	r3, r2
 800575a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	b25b      	sxtb	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	da15      	bge.n	8005792 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005766:	7bfb      	ldrb	r3, [r7, #15]
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	211a      	movs	r1, #26
 800576c:	fb01 f303 	mul.w	r3, r1, r3
 8005770:	4413      	add	r3, r2
 8005772:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005776:	781a      	ldrb	r2, [r3, #0]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800577c:	7bfb      	ldrb	r3, [r7, #15]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	211a      	movs	r1, #26
 8005782:	fb01 f303 	mul.w	r3, r1, r3
 8005786:	4413      	add	r3, r2
 8005788:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800578c:	881a      	ldrh	r2, [r3, #0]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	785b      	ldrb	r3, [r3, #1]
 8005796:	4619      	mov	r1, r3
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f001 fe32 	bl	8007402 <USBH_AllocPipe>
 800579e:	4603      	mov	r3, r0
 80057a0:	461a      	mov	r2, r3
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	7819      	ldrb	r1, [r3, #0]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	7858      	ldrb	r0, [r3, #1]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	8952      	ldrh	r2, [r2, #10]
 80057be:	9202      	str	r2, [sp, #8]
 80057c0:	2203      	movs	r2, #3
 80057c2:	9201      	str	r2, [sp, #4]
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	4623      	mov	r3, r4
 80057c8:	4602      	mov	r2, r0
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f001 fdea 	bl	80073a4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	2200      	movs	r2, #0
 80057d6:	4619      	mov	r1, r3
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f002 f8f9 	bl	80079d0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80057de:	2300      	movs	r3, #0
 80057e0:	2200      	movs	r2, #0
 80057e2:	210a      	movs	r1, #10
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fbeb 	bl	8005fc0 <USBH_FindInterface>
 80057ea:	4603      	mov	r3, r0
 80057ec:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80057ee:	7bfb      	ldrb	r3, [r7, #15]
 80057f0:	2bff      	cmp	r3, #255	; 0xff
 80057f2:	d002      	beq.n	80057fa <USBH_CDC_InterfaceInit+0x11a>
 80057f4:	7bfb      	ldrb	r3, [r7, #15]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d901      	bls.n	80057fe <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80057fa:	2302      	movs	r3, #2
 80057fc:	e0c2      	b.n	8005984 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	211a      	movs	r1, #26
 8005804:	fb01 f303 	mul.w	r3, r1, r3
 8005808:	4413      	add	r3, r2
 800580a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	b25b      	sxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	da16      	bge.n	8005844 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005816:	7bfb      	ldrb	r3, [r7, #15]
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	211a      	movs	r1, #26
 800581c:	fb01 f303 	mul.w	r3, r1, r3
 8005820:	4413      	add	r3, r2
 8005822:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005826:	781a      	ldrb	r2, [r3, #0]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800582c:	7bfb      	ldrb	r3, [r7, #15]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	211a      	movs	r1, #26
 8005832:	fb01 f303 	mul.w	r3, r1, r3
 8005836:	4413      	add	r3, r2
 8005838:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800583c:	881a      	ldrh	r2, [r3, #0]
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	835a      	strh	r2, [r3, #26]
 8005842:	e015      	b.n	8005870 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005844:	7bfb      	ldrb	r3, [r7, #15]
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	211a      	movs	r1, #26
 800584a:	fb01 f303 	mul.w	r3, r1, r3
 800584e:	4413      	add	r3, r2
 8005850:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005854:	781a      	ldrb	r2, [r3, #0]
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800585a:	7bfb      	ldrb	r3, [r7, #15]
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	211a      	movs	r1, #26
 8005860:	fb01 f303 	mul.w	r3, r1, r3
 8005864:	4413      	add	r3, r2
 8005866:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800586a:	881a      	ldrh	r2, [r3, #0]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005870:	7bfb      	ldrb	r3, [r7, #15]
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	211a      	movs	r1, #26
 8005876:	fb01 f303 	mul.w	r3, r1, r3
 800587a:	4413      	add	r3, r2
 800587c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	b25b      	sxtb	r3, r3
 8005884:	2b00      	cmp	r3, #0
 8005886:	da16      	bge.n	80058b6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005888:	7bfb      	ldrb	r3, [r7, #15]
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	211a      	movs	r1, #26
 800588e:	fb01 f303 	mul.w	r3, r1, r3
 8005892:	4413      	add	r3, r2
 8005894:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005898:	781a      	ldrb	r2, [r3, #0]
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800589e:	7bfb      	ldrb	r3, [r7, #15]
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	211a      	movs	r1, #26
 80058a4:	fb01 f303 	mul.w	r3, r1, r3
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80058ae:	881a      	ldrh	r2, [r3, #0]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	835a      	strh	r2, [r3, #26]
 80058b4:	e015      	b.n	80058e2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80058b6:	7bfb      	ldrb	r3, [r7, #15]
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	211a      	movs	r1, #26
 80058bc:	fb01 f303 	mul.w	r3, r1, r3
 80058c0:	4413      	add	r3, r2
 80058c2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80058c6:	781a      	ldrb	r2, [r3, #0]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80058cc:	7bfb      	ldrb	r3, [r7, #15]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	211a      	movs	r1, #26
 80058d2:	fb01 f303 	mul.w	r3, r1, r3
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80058dc:	881a      	ldrh	r2, [r3, #0]
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	7b9b      	ldrb	r3, [r3, #14]
 80058e6:	4619      	mov	r1, r3
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f001 fd8a 	bl	8007402 <USBH_AllocPipe>
 80058ee:	4603      	mov	r3, r0
 80058f0:	461a      	mov	r2, r3
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	7bdb      	ldrb	r3, [r3, #15]
 80058fa:	4619      	mov	r1, r3
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f001 fd80 	bl	8007402 <USBH_AllocPipe>
 8005902:	4603      	mov	r3, r0
 8005904:	461a      	mov	r2, r3
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	7b59      	ldrb	r1, [r3, #13]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	7b98      	ldrb	r0, [r3, #14]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	8b12      	ldrh	r2, [r2, #24]
 8005922:	9202      	str	r2, [sp, #8]
 8005924:	2202      	movs	r2, #2
 8005926:	9201      	str	r2, [sp, #4]
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	4623      	mov	r3, r4
 800592c:	4602      	mov	r2, r0
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f001 fd38 	bl	80073a4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	7b19      	ldrb	r1, [r3, #12]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	7bd8      	ldrb	r0, [r3, #15]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	8b52      	ldrh	r2, [r2, #26]
 800594c:	9202      	str	r2, [sp, #8]
 800594e:	2202      	movs	r2, #2
 8005950:	9201      	str	r2, [sp, #4]
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	4623      	mov	r3, r4
 8005956:	4602      	mov	r2, r0
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f001 fd23 	bl	80073a4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	7b5b      	ldrb	r3, [r3, #13]
 800596a:	2200      	movs	r2, #0
 800596c:	4619      	mov	r1, r3
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f002 f82e 	bl	80079d0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	7b1b      	ldrb	r3, [r3, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	4619      	mov	r1, r3
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f002 f827 	bl	80079d0 <USBH_LL_SetToggle>

  return USBH_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	bd90      	pop	{r4, r7, pc}

0800598c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00e      	beq.n	80059c4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	4619      	mov	r1, r3
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f001 fd18 	bl	80073e2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	4619      	mov	r1, r3
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f001 fd43 	bl	8007444 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	7b1b      	ldrb	r3, [r3, #12]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00e      	beq.n	80059ea <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	7b1b      	ldrb	r3, [r3, #12]
 80059d0:	4619      	mov	r1, r3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f001 fd05 	bl	80073e2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	7b1b      	ldrb	r3, [r3, #12]
 80059dc:	4619      	mov	r1, r3
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f001 fd30 	bl	8007444 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	7b5b      	ldrb	r3, [r3, #13]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00e      	beq.n	8005a10 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	7b5b      	ldrb	r3, [r3, #13]
 80059f6:	4619      	mov	r1, r3
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f001 fcf2 	bl	80073e2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	7b5b      	ldrb	r3, [r3, #13]
 8005a02:	4619      	mov	r1, r3
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f001 fd1d 	bl	8007444 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a16:	69db      	ldr	r3, [r3, #28]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00b      	beq.n	8005a34 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a22:	69db      	ldr	r3, [r3, #28]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f002 f889 	bl	8007b3c <free>
    phost->pActiveClass->pData = 0U;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a30:	2200      	movs	r2, #0
 8005a32:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b084      	sub	sp, #16
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	3340      	adds	r3, #64	; 0x40
 8005a54:	4619      	mov	r1, r3
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f8b1 	bl	8005bbe <GetLineCoding>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005a60:	7afb      	ldrb	r3, [r7, #11]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d105      	bne.n	8005a72 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005a6c:	2102      	movs	r1, #2
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005a72:	7afb      	ldrb	r3, [r7, #11]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005a84:	2301      	movs	r3, #1
 8005a86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a92:	69db      	ldr	r3, [r3, #28]
 8005a94:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005a9c:	2b04      	cmp	r3, #4
 8005a9e:	d877      	bhi.n	8005b90 <USBH_CDC_Process+0x114>
 8005aa0:	a201      	add	r2, pc, #4	; (adr r2, 8005aa8 <USBH_CDC_Process+0x2c>)
 8005aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa6:	bf00      	nop
 8005aa8:	08005abd 	.word	0x08005abd
 8005aac:	08005ac3 	.word	0x08005ac3
 8005ab0:	08005af3 	.word	0x08005af3
 8005ab4:	08005b67 	.word	0x08005b67
 8005ab8:	08005b75 	.word	0x08005b75
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005abc:	2300      	movs	r3, #0
 8005abe:	73fb      	strb	r3, [r7, #15]
      break;
 8005ac0:	e06d      	b.n	8005b9e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f897 	bl	8005bfc <SetLineCoding>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005ad2:	7bbb      	ldrb	r3, [r7, #14]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d104      	bne.n	8005ae2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	2202      	movs	r2, #2
 8005adc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005ae0:	e058      	b.n	8005b94 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005ae2:	7bbb      	ldrb	r3, [r7, #14]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d055      	beq.n	8005b94 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2204      	movs	r2, #4
 8005aec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005af0:	e050      	b.n	8005b94 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	3340      	adds	r3, #64	; 0x40
 8005af6:	4619      	mov	r1, r3
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f860 	bl	8005bbe <GetLineCoding>
 8005afe:	4603      	mov	r3, r0
 8005b00:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005b02:	7bbb      	ldrb	r3, [r7, #14]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d126      	bne.n	8005b56 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b1a:	791b      	ldrb	r3, [r3, #4]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d13b      	bne.n	8005b98 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b2a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d133      	bne.n	8005b98 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b3a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d12b      	bne.n	8005b98 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b48:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d124      	bne.n	8005b98 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f958 	bl	8005e04 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005b54:	e020      	b.n	8005b98 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005b56:	7bbb      	ldrb	r3, [r7, #14]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d01d      	beq.n	8005b98 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2204      	movs	r2, #4
 8005b60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005b64:	e018      	b.n	8005b98 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f867 	bl	8005c3a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f8da 	bl	8005d26 <CDC_ProcessReception>
      break;
 8005b72:	e014      	b.n	8005b9e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005b74:	2100      	movs	r1, #0
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 ffe3 	bl	8006b42 <USBH_ClrFeature>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005b80:	7bbb      	ldrb	r3, [r7, #14]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10a      	bne.n	8005b9c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005b8e:	e005      	b.n	8005b9c <USBH_CDC_Process+0x120>

    default:
      break;
 8005b90:	bf00      	nop
 8005b92:	e004      	b.n	8005b9e <USBH_CDC_Process+0x122>
      break;
 8005b94:	bf00      	nop
 8005b96:	e002      	b.n	8005b9e <USBH_CDC_Process+0x122>
      break;
 8005b98:	bf00      	nop
 8005b9a:	e000      	b.n	8005b9e <USBH_CDC_Process+0x122>
      break;
 8005b9c:	bf00      	nop

  }

  return status;
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b082      	sub	sp, #8
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
 8005bc6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	22a1      	movs	r2, #161	; 0xa1
 8005bcc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2221      	movs	r2, #33	; 0x21
 8005bd2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2207      	movs	r2, #7
 8005be4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2207      	movs	r2, #7
 8005bea:	4619      	mov	r1, r3
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f001 f988 	bl	8006f02 <USBH_CtlReq>
 8005bf2:	4603      	mov	r3, r0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3708      	adds	r7, #8
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2221      	movs	r2, #33	; 0x21
 8005c0a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2207      	movs	r2, #7
 8005c22:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	2207      	movs	r2, #7
 8005c28:	4619      	mov	r1, r3
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f001 f969 	bl	8006f02 <USBH_CtlReq>
 8005c30:	4603      	mov	r3, r0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b086      	sub	sp, #24
 8005c3e:	af02      	add	r7, sp, #8
 8005c40:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d002      	beq.n	8005c60 <CDC_ProcessTransmission+0x26>
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d023      	beq.n	8005ca6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005c5e:	e05e      	b.n	8005d1e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	8b12      	ldrh	r2, [r2, #24]
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d90b      	bls.n	8005c84 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	69d9      	ldr	r1, [r3, #28]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8b1a      	ldrh	r2, [r3, #24]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	7b5b      	ldrb	r3, [r3, #13]
 8005c78:	2001      	movs	r0, #1
 8005c7a:	9000      	str	r0, [sp, #0]
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f001 fb4e 	bl	800731e <USBH_BulkSendData>
 8005c82:	e00b      	b.n	8005c9c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	7b5b      	ldrb	r3, [r3, #13]
 8005c92:	2001      	movs	r0, #1
 8005c94:	9000      	str	r0, [sp, #0]
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f001 fb41 	bl	800731e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005ca4:	e03b      	b.n	8005d1e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	7b5b      	ldrb	r3, [r3, #13]
 8005caa:	4619      	mov	r1, r3
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f001 fe65 	bl	800797c <USBH_LL_GetURBState>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005cb6:	7afb      	ldrb	r3, [r7, #11]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d128      	bne.n	8005d0e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	8b12      	ldrh	r2, [r2, #24]
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d90e      	bls.n	8005ce6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	8b12      	ldrh	r2, [r2, #24]
 8005cd0:	1a9a      	subs	r2, r3, r2
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	8b12      	ldrh	r2, [r2, #24]
 8005cde:	441a      	add	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	61da      	str	r2, [r3, #28]
 8005ce4:	e002      	b.n	8005cec <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d004      	beq.n	8005cfe <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005cfc:	e00e      	b.n	8005d1c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f868 	bl	8005ddc <USBH_CDC_TransmitCallback>
      break;
 8005d0c:	e006      	b.n	8005d1c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005d0e:	7afb      	ldrb	r3, [r7, #11]
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d103      	bne.n	8005d1c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005d1c:	bf00      	nop
  }
}
 8005d1e:	bf00      	nop
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b086      	sub	sp, #24
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005d42:	2b03      	cmp	r3, #3
 8005d44:	d002      	beq.n	8005d4c <CDC_ProcessReception+0x26>
 8005d46:	2b04      	cmp	r3, #4
 8005d48:	d00e      	beq.n	8005d68 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005d4a:	e043      	b.n	8005dd4 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	6a19      	ldr	r1, [r3, #32]
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	8b5a      	ldrh	r2, [r3, #26]
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	7b1b      	ldrb	r3, [r3, #12]
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f001 fb05 	bl	8007368 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	2204      	movs	r2, #4
 8005d62:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005d66:	e035      	b.n	8005dd4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	7b1b      	ldrb	r3, [r3, #12]
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f001 fe04 	bl	800797c <USBH_LL_GetURBState>
 8005d74:	4603      	mov	r3, r0
 8005d76:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005d78:	7cfb      	ldrb	r3, [r7, #19]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d129      	bne.n	8005dd2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	7b1b      	ldrb	r3, [r3, #12]
 8005d82:	4619      	mov	r1, r3
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f001 fd67 	bl	8007858 <USBH_LL_GetLastXferSize>
 8005d8a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d016      	beq.n	8005dc4 <CDC_ProcessReception+0x9e>
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	8b5b      	ldrh	r3, [r3, #26]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d910      	bls.n	8005dc4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	1ad2      	subs	r2, r2, r3
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	6a1a      	ldr	r2, [r3, #32]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	441a      	add	r2, r3
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2203      	movs	r2, #3
 8005dbe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005dc2:	e006      	b.n	8005dd2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 f80f 	bl	8005df0 <USBH_CDC_ReceiveCallback>
      break;
 8005dd2:	bf00      	nop
  }
}
 8005dd4:	bf00      	nop
 8005dd6:	3718      	adds	r7, #24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	4613      	mov	r3, r2
 8005e24:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d101      	bne.n	8005e30 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	e029      	b.n	8005e84 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	79fa      	ldrb	r2, [r7, #7]
 8005e34:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f000 f81f 	bl	8005e8c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d003      	beq.n	8005e7c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f001 fc37 	bl	80076f0 <USBH_LL_Init>

  return USBH_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005e98:	2300      	movs	r3, #0
 8005e9a:	60fb      	str	r3, [r7, #12]
 8005e9c:	e009      	b.n	8005eb2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	33e0      	adds	r3, #224	; 0xe0
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4413      	add	r3, r2
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2b0e      	cmp	r3, #14
 8005eb6:	d9f2      	bls.n	8005e9e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005eb8:	2300      	movs	r3, #0
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	e009      	b.n	8005ed2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005ec8:	2200      	movs	r2, #0
 8005eca:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	60fb      	str	r3, [r7, #12]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ed8:	d3f1      	bcc.n	8005ebe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2240      	movs	r2, #64	; 0x40
 8005efe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d016      	beq.n	8005f76 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10e      	bne.n	8005f70 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005f58:	1c59      	adds	r1, r3, #1
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	33de      	adds	r3, #222	; 0xde
 8005f64:	6839      	ldr	r1, [r7, #0]
 8005f66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	73fb      	strb	r3, [r7, #15]
 8005f6e:	e004      	b.n	8005f7a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005f70:	2302      	movs	r3, #2
 8005f72:	73fb      	strb	r3, [r7, #15]
 8005f74:	e001      	b.n	8005f7a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005f76:	2302      	movs	r3, #2
 8005f78:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	460b      	mov	r3, r1
 8005f92:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005f94:	2300      	movs	r3, #0
 8005f96:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005f9e:	78fa      	ldrb	r2, [r7, #3]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d204      	bcs.n	8005fae <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	78fa      	ldrb	r2, [r7, #3]
 8005fa8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005fac:	e001      	b.n	8005fb2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005fae:	2302      	movs	r3, #2
 8005fb0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	4608      	mov	r0, r1
 8005fca:	4611      	mov	r1, r2
 8005fcc:	461a      	mov	r2, r3
 8005fce:	4603      	mov	r3, r0
 8005fd0:	70fb      	strb	r3, [r7, #3]
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	70bb      	strb	r3, [r7, #2]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005fe8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005fea:	e025      	b.n	8006038 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005fec:	7dfb      	ldrb	r3, [r7, #23]
 8005fee:	221a      	movs	r2, #26
 8005ff0:	fb02 f303 	mul.w	r3, r2, r3
 8005ff4:	3308      	adds	r3, #8
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	3302      	adds	r3, #2
 8005ffc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	795b      	ldrb	r3, [r3, #5]
 8006002:	78fa      	ldrb	r2, [r7, #3]
 8006004:	429a      	cmp	r2, r3
 8006006:	d002      	beq.n	800600e <USBH_FindInterface+0x4e>
 8006008:	78fb      	ldrb	r3, [r7, #3]
 800600a:	2bff      	cmp	r3, #255	; 0xff
 800600c:	d111      	bne.n	8006032 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006012:	78ba      	ldrb	r2, [r7, #2]
 8006014:	429a      	cmp	r2, r3
 8006016:	d002      	beq.n	800601e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006018:	78bb      	ldrb	r3, [r7, #2]
 800601a:	2bff      	cmp	r3, #255	; 0xff
 800601c:	d109      	bne.n	8006032 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006022:	787a      	ldrb	r2, [r7, #1]
 8006024:	429a      	cmp	r2, r3
 8006026:	d002      	beq.n	800602e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006028:	787b      	ldrb	r3, [r7, #1]
 800602a:	2bff      	cmp	r3, #255	; 0xff
 800602c:	d101      	bne.n	8006032 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800602e:	7dfb      	ldrb	r3, [r7, #23]
 8006030:	e006      	b.n	8006040 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006032:	7dfb      	ldrb	r3, [r7, #23]
 8006034:	3301      	adds	r3, #1
 8006036:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006038:	7dfb      	ldrb	r3, [r7, #23]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d9d6      	bls.n	8005fec <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800603e:	23ff      	movs	r3, #255	; 0xff
}
 8006040:	4618      	mov	r0, r3
 8006042:	371c      	adds	r7, #28
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f001 fb87 	bl	8007768 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800605a:	2101      	movs	r1, #1
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f001 fca0 	bl	80079a2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3708      	adds	r7, #8
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af04      	add	r7, sp, #16
 8006072:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006074:	2302      	movs	r3, #2
 8006076:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b01      	cmp	r3, #1
 8006086:	d102      	bne.n	800608e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2203      	movs	r2, #3
 800608c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b0b      	cmp	r3, #11
 8006096:	f200 81b3 	bhi.w	8006400 <USBH_Process+0x394>
 800609a:	a201      	add	r2, pc, #4	; (adr r2, 80060a0 <USBH_Process+0x34>)
 800609c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a0:	080060d1 	.word	0x080060d1
 80060a4:	08006103 	.word	0x08006103
 80060a8:	0800616b 	.word	0x0800616b
 80060ac:	0800639b 	.word	0x0800639b
 80060b0:	08006401 	.word	0x08006401
 80060b4:	0800620f 	.word	0x0800620f
 80060b8:	08006341 	.word	0x08006341
 80060bc:	08006245 	.word	0x08006245
 80060c0:	08006265 	.word	0x08006265
 80060c4:	08006285 	.word	0x08006285
 80060c8:	080062b3 	.word	0x080062b3
 80060cc:	08006383 	.word	0x08006383
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f000 8193 	beq.w	8006404 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80060e4:	20c8      	movs	r0, #200	; 0xc8
 80060e6:	f001 fca3 	bl	8007a30 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f001 fb99 	bl	8007822 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006100:	e180      	b.n	8006404 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006108:	2b01      	cmp	r3, #1
 800610a:	d107      	bne.n	800611c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2202      	movs	r2, #2
 8006118:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800611a:	e182      	b.n	8006422 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006122:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006126:	d914      	bls.n	8006152 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800612e:	3301      	adds	r3, #1
 8006130:	b2da      	uxtb	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800613e:	2b03      	cmp	r3, #3
 8006140:	d903      	bls.n	800614a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	220d      	movs	r2, #13
 8006146:	701a      	strb	r2, [r3, #0]
      break;
 8006148:	e16b      	b.n	8006422 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	701a      	strb	r2, [r3, #0]
      break;
 8006150:	e167      	b.n	8006422 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006158:	f103 020a 	add.w	r2, r3, #10
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006162:	200a      	movs	r0, #10
 8006164:	f001 fc64 	bl	8007a30 <USBH_Delay>
      break;
 8006168:	e15b      	b.n	8006422 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006170:	2b00      	cmp	r3, #0
 8006172:	d005      	beq.n	8006180 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800617a:	2104      	movs	r1, #4
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006180:	2064      	movs	r0, #100	; 0x64
 8006182:	f001 fc55 	bl	8007a30 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f001 fb24 	bl	80077d4 <USBH_LL_GetSpeed>
 800618c:	4603      	mov	r3, r0
 800618e:	461a      	mov	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2205      	movs	r2, #5
 800619a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800619c:	2100      	movs	r1, #0
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f001 f92f 	bl	8007402 <USBH_AllocPipe>
 80061a4:	4603      	mov	r3, r0
 80061a6:	461a      	mov	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80061ac:	2180      	movs	r1, #128	; 0x80
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f001 f927 	bl	8007402 <USBH_AllocPipe>
 80061b4:	4603      	mov	r3, r0
 80061b6:	461a      	mov	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	7919      	ldrb	r1, [r3, #4]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80061d0:	b292      	uxth	r2, r2
 80061d2:	9202      	str	r2, [sp, #8]
 80061d4:	2200      	movs	r2, #0
 80061d6:	9201      	str	r2, [sp, #4]
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	4603      	mov	r3, r0
 80061dc:	2280      	movs	r2, #128	; 0x80
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f001 f8e0 	bl	80073a4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	7959      	ldrb	r1, [r3, #5]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80061f8:	b292      	uxth	r2, r2
 80061fa:	9202      	str	r2, [sp, #8]
 80061fc:	2200      	movs	r2, #0
 80061fe:	9201      	str	r2, [sp, #4]
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	4603      	mov	r3, r0
 8006204:	2200      	movs	r2, #0
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f001 f8cc 	bl	80073a4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800620c:	e109      	b.n	8006422 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f90c 	bl	800642c <USBH_HandleEnum>
 8006214:	4603      	mov	r3, r0
 8006216:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006218:	7bbb      	ldrb	r3, [r7, #14]
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b00      	cmp	r3, #0
 800621e:	f040 80f3 	bne.w	8006408 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006230:	2b01      	cmp	r3, #1
 8006232:	d103      	bne.n	800623c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2208      	movs	r2, #8
 8006238:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800623a:	e0e5      	b.n	8006408 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2207      	movs	r2, #7
 8006240:	701a      	strb	r2, [r3, #0]
      break;
 8006242:	e0e1      	b.n	8006408 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800624a:	2b00      	cmp	r3, #0
 800624c:	f000 80de 	beq.w	800640c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006256:	2101      	movs	r1, #1
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2208      	movs	r2, #8
 8006260:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006262:	e0d3      	b.n	800640c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800626a:	b29b      	uxth	r3, r3
 800626c:	4619      	mov	r1, r3
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fc20 	bl	8006ab4 <USBH_SetCfg>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	f040 80ca 	bne.w	8006410 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2209      	movs	r2, #9
 8006280:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006282:	e0c5      	b.n	8006410 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800628a:	f003 0320 	and.w	r3, r3, #32
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00b      	beq.n	80062aa <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006292:	2101      	movs	r1, #1
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fc30 	bl	8006afa <USBH_SetFeature>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	f040 80b9 	bne.w	8006414 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	220a      	movs	r2, #10
 80062a6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80062a8:	e0b4      	b.n	8006414 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	220a      	movs	r2, #10
 80062ae:	701a      	strb	r2, [r3, #0]
      break;
 80062b0:	e0b0      	b.n	8006414 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f000 80ad 	beq.w	8006418 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80062c6:	2300      	movs	r3, #0
 80062c8:	73fb      	strb	r3, [r7, #15]
 80062ca:	e016      	b.n	80062fa <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80062cc:	7bfa      	ldrb	r2, [r7, #15]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	32de      	adds	r2, #222	; 0xde
 80062d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d6:	791a      	ldrb	r2, [r3, #4]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80062de:	429a      	cmp	r2, r3
 80062e0:	d108      	bne.n	80062f4 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80062e2:	7bfa      	ldrb	r2, [r7, #15]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	32de      	adds	r2, #222	; 0xde
 80062e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80062f2:	e005      	b.n	8006300 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80062f4:	7bfb      	ldrb	r3, [r7, #15]
 80062f6:	3301      	adds	r3, #1
 80062f8:	73fb      	strb	r3, [r7, #15]
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0e5      	beq.n	80062cc <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006306:	2b00      	cmp	r3, #0
 8006308:	d016      	beq.n	8006338 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	4798      	blx	r3
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d109      	bne.n	8006330 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2206      	movs	r2, #6
 8006320:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006328:	2103      	movs	r1, #3
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800632e:	e073      	b.n	8006418 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	220d      	movs	r2, #13
 8006334:	701a      	strb	r2, [r3, #0]
      break;
 8006336:	e06f      	b.n	8006418 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	220d      	movs	r2, #13
 800633c:	701a      	strb	r2, [r3, #0]
      break;
 800633e:	e06b      	b.n	8006418 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006346:	2b00      	cmp	r3, #0
 8006348:	d017      	beq.n	800637a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	4798      	blx	r3
 8006356:	4603      	mov	r3, r0
 8006358:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800635a:	7bbb      	ldrb	r3, [r7, #14]
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d103      	bne.n	800636a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	220b      	movs	r2, #11
 8006366:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006368:	e058      	b.n	800641c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800636a:	7bbb      	ldrb	r3, [r7, #14]
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b02      	cmp	r3, #2
 8006370:	d154      	bne.n	800641c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	220d      	movs	r2, #13
 8006376:	701a      	strb	r2, [r3, #0]
      break;
 8006378:	e050      	b.n	800641c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	220d      	movs	r2, #13
 800637e:	701a      	strb	r2, [r3, #0]
      break;
 8006380:	e04c      	b.n	800641c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006388:	2b00      	cmp	r3, #0
 800638a:	d049      	beq.n	8006420 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	4798      	blx	r3
      }
      break;
 8006398:	e042      	b.n	8006420 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f7ff fd72 	bl	8005e8c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d009      	beq.n	80063c6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d005      	beq.n	80063dc <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80063d6:	2105      	movs	r1, #5
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d107      	bne.n	80063f8 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7ff fe2b 	bl	800604c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80063f6:	e014      	b.n	8006422 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f001 f9b5 	bl	8007768 <USBH_LL_Start>
      break;
 80063fe:	e010      	b.n	8006422 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006400:	bf00      	nop
 8006402:	e00e      	b.n	8006422 <USBH_Process+0x3b6>
      break;
 8006404:	bf00      	nop
 8006406:	e00c      	b.n	8006422 <USBH_Process+0x3b6>
      break;
 8006408:	bf00      	nop
 800640a:	e00a      	b.n	8006422 <USBH_Process+0x3b6>
    break;
 800640c:	bf00      	nop
 800640e:	e008      	b.n	8006422 <USBH_Process+0x3b6>
      break;
 8006410:	bf00      	nop
 8006412:	e006      	b.n	8006422 <USBH_Process+0x3b6>
      break;
 8006414:	bf00      	nop
 8006416:	e004      	b.n	8006422 <USBH_Process+0x3b6>
      break;
 8006418:	bf00      	nop
 800641a:	e002      	b.n	8006422 <USBH_Process+0x3b6>
      break;
 800641c:	bf00      	nop
 800641e:	e000      	b.n	8006422 <USBH_Process+0x3b6>
      break;
 8006420:	bf00      	nop
  }
  return USBH_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b088      	sub	sp, #32
 8006430:	af04      	add	r7, sp, #16
 8006432:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006434:	2301      	movs	r3, #1
 8006436:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006438:	2301      	movs	r3, #1
 800643a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	785b      	ldrb	r3, [r3, #1]
 8006440:	2b07      	cmp	r3, #7
 8006442:	f200 81c1 	bhi.w	80067c8 <USBH_HandleEnum+0x39c>
 8006446:	a201      	add	r2, pc, #4	; (adr r2, 800644c <USBH_HandleEnum+0x20>)
 8006448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644c:	0800646d 	.word	0x0800646d
 8006450:	0800652b 	.word	0x0800652b
 8006454:	08006595 	.word	0x08006595
 8006458:	08006623 	.word	0x08006623
 800645c:	0800668d 	.word	0x0800668d
 8006460:	080066fd 	.word	0x080066fd
 8006464:	08006743 	.word	0x08006743
 8006468:	08006789 	.word	0x08006789
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800646c:	2108      	movs	r1, #8
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fa50 	bl	8006914 <USBH_Get_DevDesc>
 8006474:	4603      	mov	r3, r0
 8006476:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006478:	7bbb      	ldrb	r3, [r7, #14]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d130      	bne.n	80064e0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	7919      	ldrb	r1, [r3, #4]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80064a2:	b292      	uxth	r2, r2
 80064a4:	9202      	str	r2, [sp, #8]
 80064a6:	2200      	movs	r2, #0
 80064a8:	9201      	str	r2, [sp, #4]
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	4603      	mov	r3, r0
 80064ae:	2280      	movs	r2, #128	; 0x80
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 ff77 	bl	80073a4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	7959      	ldrb	r1, [r3, #5]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80064ca:	b292      	uxth	r2, r2
 80064cc:	9202      	str	r2, [sp, #8]
 80064ce:	2200      	movs	r2, #0
 80064d0:	9201      	str	r2, [sp, #4]
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	4603      	mov	r3, r0
 80064d6:	2200      	movs	r2, #0
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 ff63 	bl	80073a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80064de:	e175      	b.n	80067cc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80064e0:	7bbb      	ldrb	r3, [r7, #14]
 80064e2:	2b03      	cmp	r3, #3
 80064e4:	f040 8172 	bne.w	80067cc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80064ee:	3301      	adds	r3, #1
 80064f0:	b2da      	uxtb	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80064fe:	2b03      	cmp	r3, #3
 8006500:	d903      	bls.n	800650a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	220d      	movs	r2, #13
 8006506:	701a      	strb	r2, [r3, #0]
      break;
 8006508:	e160      	b.n	80067cc <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	795b      	ldrb	r3, [r3, #5]
 800650e:	4619      	mov	r1, r3
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 ff97 	bl	8007444 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	791b      	ldrb	r3, [r3, #4]
 800651a:	4619      	mov	r1, r3
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 ff91 	bl	8007444 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	701a      	strb	r2, [r3, #0]
      break;
 8006528:	e150      	b.n	80067cc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800652a:	2112      	movs	r1, #18
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f9f1 	bl	8006914 <USBH_Get_DevDesc>
 8006532:	4603      	mov	r3, r0
 8006534:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006536:	7bbb      	ldrb	r3, [r7, #14]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d103      	bne.n	8006544 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2202      	movs	r2, #2
 8006540:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006542:	e145      	b.n	80067d0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006544:	7bbb      	ldrb	r3, [r7, #14]
 8006546:	2b03      	cmp	r3, #3
 8006548:	f040 8142 	bne.w	80067d0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006552:	3301      	adds	r3, #1
 8006554:	b2da      	uxtb	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006562:	2b03      	cmp	r3, #3
 8006564:	d903      	bls.n	800656e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	220d      	movs	r2, #13
 800656a:	701a      	strb	r2, [r3, #0]
      break;
 800656c:	e130      	b.n	80067d0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	795b      	ldrb	r3, [r3, #5]
 8006572:	4619      	mov	r1, r3
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 ff65 	bl	8007444 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	791b      	ldrb	r3, [r3, #4]
 800657e:	4619      	mov	r1, r3
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 ff5f 	bl	8007444 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	701a      	strb	r2, [r3, #0]
      break;
 8006592:	e11d      	b.n	80067d0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006594:	2101      	movs	r1, #1
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fa68 	bl	8006a6c <USBH_SetAddress>
 800659c:	4603      	mov	r3, r0
 800659e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80065a0:	7bbb      	ldrb	r3, [r7, #14]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d132      	bne.n	800660c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80065a6:	2002      	movs	r0, #2
 80065a8:	f001 fa42 	bl	8007a30 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2203      	movs	r2, #3
 80065b8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	7919      	ldrb	r1, [r3, #4]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80065ce:	b292      	uxth	r2, r2
 80065d0:	9202      	str	r2, [sp, #8]
 80065d2:	2200      	movs	r2, #0
 80065d4:	9201      	str	r2, [sp, #4]
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	4603      	mov	r3, r0
 80065da:	2280      	movs	r2, #128	; 0x80
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fee1 	bl	80073a4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	7959      	ldrb	r1, [r3, #5]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80065f6:	b292      	uxth	r2, r2
 80065f8:	9202      	str	r2, [sp, #8]
 80065fa:	2200      	movs	r2, #0
 80065fc:	9201      	str	r2, [sp, #4]
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	4603      	mov	r3, r0
 8006602:	2200      	movs	r2, #0
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 fecd 	bl	80073a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800660a:	e0e3      	b.n	80067d4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800660c:	7bbb      	ldrb	r3, [r7, #14]
 800660e:	2b03      	cmp	r3, #3
 8006610:	f040 80e0 	bne.w	80067d4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	220d      	movs	r2, #13
 8006618:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	705a      	strb	r2, [r3, #1]
      break;
 8006620:	e0d8      	b.n	80067d4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006622:	2109      	movs	r1, #9
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f99d 	bl	8006964 <USBH_Get_CfgDesc>
 800662a:	4603      	mov	r3, r0
 800662c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800662e:	7bbb      	ldrb	r3, [r7, #14]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d103      	bne.n	800663c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2204      	movs	r2, #4
 8006638:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800663a:	e0cd      	b.n	80067d8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800663c:	7bbb      	ldrb	r3, [r7, #14]
 800663e:	2b03      	cmp	r3, #3
 8006640:	f040 80ca 	bne.w	80067d8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800664a:	3301      	adds	r3, #1
 800664c:	b2da      	uxtb	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800665a:	2b03      	cmp	r3, #3
 800665c:	d903      	bls.n	8006666 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	220d      	movs	r2, #13
 8006662:	701a      	strb	r2, [r3, #0]
      break;
 8006664:	e0b8      	b.n	80067d8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	795b      	ldrb	r3, [r3, #5]
 800666a:	4619      	mov	r1, r3
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fee9 	bl	8007444 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	791b      	ldrb	r3, [r3, #4]
 8006676:	4619      	mov	r1, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 fee3 	bl	8007444 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	701a      	strb	r2, [r3, #0]
      break;
 800668a:	e0a5      	b.n	80067d8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006692:	4619      	mov	r1, r3
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f965 	bl	8006964 <USBH_Get_CfgDesc>
 800669a:	4603      	mov	r3, r0
 800669c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800669e:	7bbb      	ldrb	r3, [r7, #14]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d103      	bne.n	80066ac <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2205      	movs	r2, #5
 80066a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80066aa:	e097      	b.n	80067dc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80066ac:	7bbb      	ldrb	r3, [r7, #14]
 80066ae:	2b03      	cmp	r3, #3
 80066b0:	f040 8094 	bne.w	80067dc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80066ba:	3301      	adds	r3, #1
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80066ca:	2b03      	cmp	r3, #3
 80066cc:	d903      	bls.n	80066d6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	220d      	movs	r2, #13
 80066d2:	701a      	strb	r2, [r3, #0]
      break;
 80066d4:	e082      	b.n	80067dc <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	795b      	ldrb	r3, [r3, #5]
 80066da:	4619      	mov	r1, r3
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 feb1 	bl	8007444 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	791b      	ldrb	r3, [r3, #4]
 80066e6:	4619      	mov	r1, r3
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 feab 	bl	8007444 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	701a      	strb	r2, [r3, #0]
      break;
 80066fa:	e06f      	b.n	80067dc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006702:	2b00      	cmp	r3, #0
 8006704:	d019      	beq.n	800673a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006712:	23ff      	movs	r3, #255	; 0xff
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 f949 	bl	80069ac <USBH_Get_StringDesc>
 800671a:	4603      	mov	r3, r0
 800671c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800671e:	7bbb      	ldrb	r3, [r7, #14]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d103      	bne.n	800672c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2206      	movs	r2, #6
 8006728:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800672a:	e059      	b.n	80067e0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800672c:	7bbb      	ldrb	r3, [r7, #14]
 800672e:	2b03      	cmp	r3, #3
 8006730:	d156      	bne.n	80067e0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2206      	movs	r2, #6
 8006736:	705a      	strb	r2, [r3, #1]
      break;
 8006738:	e052      	b.n	80067e0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2206      	movs	r2, #6
 800673e:	705a      	strb	r2, [r3, #1]
      break;
 8006740:	e04e      	b.n	80067e0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006748:	2b00      	cmp	r3, #0
 800674a:	d019      	beq.n	8006780 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006758:	23ff      	movs	r3, #255	; 0xff
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f926 	bl	80069ac <USBH_Get_StringDesc>
 8006760:	4603      	mov	r3, r0
 8006762:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006764:	7bbb      	ldrb	r3, [r7, #14]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d103      	bne.n	8006772 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2207      	movs	r2, #7
 800676e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006770:	e038      	b.n	80067e4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006772:	7bbb      	ldrb	r3, [r7, #14]
 8006774:	2b03      	cmp	r3, #3
 8006776:	d135      	bne.n	80067e4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2207      	movs	r2, #7
 800677c:	705a      	strb	r2, [r3, #1]
      break;
 800677e:	e031      	b.n	80067e4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2207      	movs	r2, #7
 8006784:	705a      	strb	r2, [r3, #1]
      break;
 8006786:	e02d      	b.n	80067e4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800678e:	2b00      	cmp	r3, #0
 8006790:	d017      	beq.n	80067c2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800679e:	23ff      	movs	r3, #255	; 0xff
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f903 	bl	80069ac <USBH_Get_StringDesc>
 80067a6:	4603      	mov	r3, r0
 80067a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80067aa:	7bbb      	ldrb	r3, [r7, #14]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d102      	bne.n	80067b6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80067b0:	2300      	movs	r3, #0
 80067b2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80067b4:	e018      	b.n	80067e8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80067b6:	7bbb      	ldrb	r3, [r7, #14]
 80067b8:	2b03      	cmp	r3, #3
 80067ba:	d115      	bne.n	80067e8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	73fb      	strb	r3, [r7, #15]
      break;
 80067c0:	e012      	b.n	80067e8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80067c2:	2300      	movs	r3, #0
 80067c4:	73fb      	strb	r3, [r7, #15]
      break;
 80067c6:	e00f      	b.n	80067e8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80067c8:	bf00      	nop
 80067ca:	e00e      	b.n	80067ea <USBH_HandleEnum+0x3be>
      break;
 80067cc:	bf00      	nop
 80067ce:	e00c      	b.n	80067ea <USBH_HandleEnum+0x3be>
      break;
 80067d0:	bf00      	nop
 80067d2:	e00a      	b.n	80067ea <USBH_HandleEnum+0x3be>
      break;
 80067d4:	bf00      	nop
 80067d6:	e008      	b.n	80067ea <USBH_HandleEnum+0x3be>
      break;
 80067d8:	bf00      	nop
 80067da:	e006      	b.n	80067ea <USBH_HandleEnum+0x3be>
      break;
 80067dc:	bf00      	nop
 80067de:	e004      	b.n	80067ea <USBH_HandleEnum+0x3be>
      break;
 80067e0:	bf00      	nop
 80067e2:	e002      	b.n	80067ea <USBH_HandleEnum+0x3be>
      break;
 80067e4:	bf00      	nop
 80067e6:	e000      	b.n	80067ea <USBH_HandleEnum+0x3be>
      break;
 80067e8:	bf00      	nop
  }
  return Status;
 80067ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006806:	bf00      	nop
 8006808:	370c      	adds	r7, #12
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr

08006812 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b082      	sub	sp, #8
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 f804 	bl	8006836 <USBH_HandleSof>
}
 800682e:	bf00      	nop
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b082      	sub	sp, #8
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b0b      	cmp	r3, #11
 8006846:	d10a      	bne.n	800685e <USBH_HandleSof+0x28>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800684e:	2b00      	cmp	r3, #0
 8006850:	d005      	beq.n	800685e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	4798      	blx	r3
  }
}
 800685e:	bf00      	nop
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006866:	b480      	push	{r7}
 8006868:	b083      	sub	sp, #12
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8006876:	bf00      	nop
}
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006882:	b480      	push	{r7}
 8006884:	b083      	sub	sp, #12
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006892:	bf00      	nop
}
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 ff56 	bl	800779e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	791b      	ldrb	r3, [r3, #4]
 80068f6:	4619      	mov	r1, r3
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fda3 	bl	8007444 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	795b      	ldrb	r3, [r3, #5]
 8006902:	4619      	mov	r1, r3
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 fd9d 	bl	8007444 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3708      	adds	r7, #8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b086      	sub	sp, #24
 8006918:	af02      	add	r7, sp, #8
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	460b      	mov	r3, r1
 800691e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006926:	78fb      	ldrb	r3, [r7, #3]
 8006928:	b29b      	uxth	r3, r3
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	4613      	mov	r3, r2
 800692e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006932:	2100      	movs	r1, #0
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 f864 	bl	8006a02 <USBH_GetDescriptor>
 800693a:	4603      	mov	r3, r0
 800693c:	73fb      	strb	r3, [r7, #15]
 800693e:	7bfb      	ldrb	r3, [r7, #15]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10a      	bne.n	800695a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f203 3026 	addw	r0, r3, #806	; 0x326
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006950:	78fa      	ldrb	r2, [r7, #3]
 8006952:	b292      	uxth	r2, r2
 8006954:	4619      	mov	r1, r3
 8006956:	f000 f918 	bl	8006b8a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800695a:	7bfb      	ldrb	r3, [r7, #15]
}
 800695c:	4618      	mov	r0, r3
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006964:	b580      	push	{r7, lr}
 8006966:	b086      	sub	sp, #24
 8006968:	af02      	add	r7, sp, #8
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	460b      	mov	r3, r1
 800696e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	331c      	adds	r3, #28
 8006974:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006976:	887b      	ldrh	r3, [r7, #2]
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006980:	2100      	movs	r1, #0
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f83d 	bl	8006a02 <USBH_GetDescriptor>
 8006988:	4603      	mov	r3, r0
 800698a:	72fb      	strb	r3, [r7, #11]
 800698c:	7afb      	ldrb	r3, [r7, #11]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d107      	bne.n	80069a2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006998:	887a      	ldrh	r2, [r7, #2]
 800699a:	68f9      	ldr	r1, [r7, #12]
 800699c:	4618      	mov	r0, r3
 800699e:	f000 f964 	bl	8006c6a <USBH_ParseCfgDesc>
  }

  return status;
 80069a2:	7afb      	ldrb	r3, [r7, #11]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b088      	sub	sp, #32
 80069b0:	af02      	add	r7, sp, #8
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	607a      	str	r2, [r7, #4]
 80069b6:	461a      	mov	r2, r3
 80069b8:	460b      	mov	r3, r1
 80069ba:	72fb      	strb	r3, [r7, #11]
 80069bc:	4613      	mov	r3, r2
 80069be:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80069c0:	7afb      	ldrb	r3, [r7, #11]
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80069c8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80069d0:	893b      	ldrh	r3, [r7, #8]
 80069d2:	9300      	str	r3, [sp, #0]
 80069d4:	460b      	mov	r3, r1
 80069d6:	2100      	movs	r1, #0
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f000 f812 	bl	8006a02 <USBH_GetDescriptor>
 80069de:	4603      	mov	r3, r0
 80069e0:	75fb      	strb	r3, [r7, #23]
 80069e2:	7dfb      	ldrb	r3, [r7, #23]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d107      	bne.n	80069f8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80069ee:	893a      	ldrh	r2, [r7, #8]
 80069f0:	6879      	ldr	r1, [r7, #4]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 fa37 	bl	8006e66 <USBH_ParseStringDesc>
  }

  return status;
 80069f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3718      	adds	r7, #24
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b084      	sub	sp, #16
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	60f8      	str	r0, [r7, #12]
 8006a0a:	607b      	str	r3, [r7, #4]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	72fb      	strb	r3, [r7, #11]
 8006a10:	4613      	mov	r3, r2
 8006a12:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	789b      	ldrb	r3, [r3, #2]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d11c      	bne.n	8006a56 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006a1c:	7afb      	ldrb	r3, [r7, #11]
 8006a1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a22:	b2da      	uxtb	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2206      	movs	r2, #6
 8006a2c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	893a      	ldrh	r2, [r7, #8]
 8006a32:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006a34:	893b      	ldrh	r3, [r7, #8]
 8006a36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006a3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a3e:	d104      	bne.n	8006a4a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f240 4209 	movw	r2, #1033	; 0x409
 8006a46:	829a      	strh	r2, [r3, #20]
 8006a48:	e002      	b.n	8006a50 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	8b3a      	ldrh	r2, [r7, #24]
 8006a54:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006a56:	8b3b      	ldrh	r3, [r7, #24]
 8006a58:	461a      	mov	r2, r3
 8006a5a:	6879      	ldr	r1, [r7, #4]
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f000 fa50 	bl	8006f02 <USBH_CtlReq>
 8006a62:	4603      	mov	r3, r0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	460b      	mov	r3, r1
 8006a76:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	789b      	ldrb	r3, [r3, #2]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d10f      	bne.n	8006aa0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2205      	movs	r2, #5
 8006a8a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006a8c:	78fb      	ldrb	r3, [r7, #3]
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 fa2c 	bl	8006f02 <USBH_CtlReq>
 8006aaa:	4603      	mov	r3, r0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	460b      	mov	r3, r1
 8006abe:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	789b      	ldrb	r3, [r3, #2]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d10e      	bne.n	8006ae6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2209      	movs	r2, #9
 8006ad2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	887a      	ldrh	r2, [r7, #2]
 8006ad8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	2100      	movs	r1, #0
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 fa09 	bl	8006f02 <USBH_CtlReq>
 8006af0:	4603      	mov	r3, r0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3708      	adds	r7, #8
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b082      	sub	sp, #8
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	460b      	mov	r3, r1
 8006b04:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	789b      	ldrb	r3, [r3, #2]
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d10f      	bne.n	8006b2e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2203      	movs	r2, #3
 8006b18:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006b1a:	78fb      	ldrb	r3, [r7, #3]
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006b2e:	2200      	movs	r2, #0
 8006b30:	2100      	movs	r1, #0
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f9e5 	bl	8006f02 <USBH_CtlReq>
 8006b38:	4603      	mov	r3, r0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3708      	adds	r7, #8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b082      	sub	sp, #8
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	789b      	ldrb	r3, [r3, #2]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d10f      	bne.n	8006b76 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2202      	movs	r2, #2
 8006b5a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006b68:	78fb      	ldrb	r3, [r7, #3]
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006b76:	2200      	movs	r2, #0
 8006b78:	2100      	movs	r1, #0
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f9c1 	bl	8006f02 <USBH_CtlReq>
 8006b80:	4603      	mov	r3, r0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006b8a:	b480      	push	{r7}
 8006b8c:	b085      	sub	sp, #20
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	60f8      	str	r0, [r7, #12]
 8006b92:	60b9      	str	r1, [r7, #8]
 8006b94:	4613      	mov	r3, r2
 8006b96:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	781a      	ldrb	r2, [r3, #0]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	785a      	ldrb	r2, [r3, #1]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	3302      	adds	r3, #2
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	3303      	adds	r3, #3
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	021b      	lsls	r3, r3, #8
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	791a      	ldrb	r2, [r3, #4]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	795a      	ldrb	r2, [r3, #5]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	799a      	ldrb	r2, [r3, #6]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	79da      	ldrb	r2, [r3, #7]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006be4:	88fb      	ldrh	r3, [r7, #6]
 8006be6:	2b08      	cmp	r3, #8
 8006be8:	d939      	bls.n	8006c5e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	3308      	adds	r3, #8
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	3309      	adds	r3, #9
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	021b      	lsls	r3, r3, #8
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	330a      	adds	r3, #10
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	330b      	adds	r3, #11
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	021b      	lsls	r3, r3, #8
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	330c      	adds	r3, #12
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	b29a      	uxth	r2, r3
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	330d      	adds	r3, #13
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	021b      	lsls	r3, r3, #8
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	4313      	orrs	r3, r2
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	7b9a      	ldrb	r2, [r3, #14]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	7bda      	ldrb	r2, [r3, #15]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	7c1a      	ldrb	r2, [r3, #16]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	7c5a      	ldrb	r2, [r3, #17]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	745a      	strb	r2, [r3, #17]
  }
}
 8006c5e:	bf00      	nop
 8006c60:	3714      	adds	r7, #20
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b08a      	sub	sp, #40	; 0x28
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	60f8      	str	r0, [r7, #12]
 8006c72:	60b9      	str	r1, [r7, #8]
 8006c74:	4613      	mov	r3, r2
 8006c76:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	781a      	ldrb	r2, [r3, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	785a      	ldrb	r2, [r3, #1]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	3302      	adds	r3, #2
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	3303      	adds	r3, #3
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	021b      	lsls	r3, r3, #8
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	791a      	ldrb	r2, [r3, #4]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	795a      	ldrb	r2, [r3, #5]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	799a      	ldrb	r2, [r3, #6]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	79da      	ldrb	r2, [r3, #7]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	7a1a      	ldrb	r2, [r3, #8]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006ce0:	88fb      	ldrh	r3, [r7, #6]
 8006ce2:	2b09      	cmp	r3, #9
 8006ce4:	d95f      	bls.n	8006da6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006ce6:	2309      	movs	r3, #9
 8006ce8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006cea:	2300      	movs	r3, #0
 8006cec:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006cee:	e051      	b.n	8006d94 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006cf0:	f107 0316 	add.w	r3, r7, #22
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006cf8:	f000 f8e8 	bl	8006ecc <USBH_GetNextDesc>
 8006cfc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d00:	785b      	ldrb	r3, [r3, #1]
 8006d02:	2b04      	cmp	r3, #4
 8006d04:	d146      	bne.n	8006d94 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006d06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d0a:	221a      	movs	r2, #26
 8006d0c:	fb02 f303 	mul.w	r3, r2, r3
 8006d10:	3308      	adds	r3, #8
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	4413      	add	r3, r2
 8006d16:	3302      	adds	r3, #2
 8006d18:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006d1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d1c:	69f8      	ldr	r0, [r7, #28]
 8006d1e:	f000 f846 	bl	8006dae <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006d22:	2300      	movs	r3, #0
 8006d24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006d2c:	e022      	b.n	8006d74 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006d2e:	f107 0316 	add.w	r3, r7, #22
 8006d32:	4619      	mov	r1, r3
 8006d34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d36:	f000 f8c9 	bl	8006ecc <USBH_GetNextDesc>
 8006d3a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3e:	785b      	ldrb	r3, [r3, #1]
 8006d40:	2b05      	cmp	r3, #5
 8006d42:	d117      	bne.n	8006d74 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006d44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d48:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006d4c:	3201      	adds	r2, #1
 8006d4e:	00d2      	lsls	r2, r2, #3
 8006d50:	211a      	movs	r1, #26
 8006d52:	fb01 f303 	mul.w	r3, r1, r3
 8006d56:	4413      	add	r3, r2
 8006d58:	3308      	adds	r3, #8
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	3304      	adds	r3, #4
 8006d60:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006d62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d64:	69b8      	ldr	r0, [r7, #24]
 8006d66:	f000 f851 	bl	8006e0c <USBH_ParseEPDesc>
            ep_ix++;
 8006d6a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006d6e:	3301      	adds	r3, #1
 8006d70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	791b      	ldrb	r3, [r3, #4]
 8006d78:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d204      	bcs.n	8006d8a <USBH_ParseCfgDesc+0x120>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	885a      	ldrh	r2, [r3, #2]
 8006d84:	8afb      	ldrh	r3, [r7, #22]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d8d1      	bhi.n	8006d2e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006d8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d8e:	3301      	adds	r3, #1
 8006d90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006d94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d804      	bhi.n	8006da6 <USBH_ParseCfgDesc+0x13c>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	885a      	ldrh	r2, [r3, #2]
 8006da0:	8afb      	ldrh	r3, [r7, #22]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d8a4      	bhi.n	8006cf0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006da6:	bf00      	nop
 8006da8:	3728      	adds	r7, #40	; 0x28
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b083      	sub	sp, #12
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
 8006db6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	781a      	ldrb	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	785a      	ldrb	r2, [r3, #1]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	789a      	ldrb	r2, [r3, #2]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	78da      	ldrb	r2, [r3, #3]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	791a      	ldrb	r2, [r3, #4]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	795a      	ldrb	r2, [r3, #5]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	799a      	ldrb	r2, [r3, #6]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	79da      	ldrb	r2, [r3, #7]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	7a1a      	ldrb	r2, [r3, #8]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	721a      	strb	r2, [r3, #8]
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	781a      	ldrb	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	785a      	ldrb	r2, [r3, #1]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	789a      	ldrb	r2, [r3, #2]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	78da      	ldrb	r2, [r3, #3]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	3304      	adds	r3, #4
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	3305      	adds	r3, #5
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	021b      	lsls	r3, r3, #8
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	799a      	ldrb	r2, [r3, #6]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	719a      	strb	r2, [r3, #6]
}
 8006e5a:	bf00      	nop
 8006e5c:	370c      	adds	r7, #12
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b087      	sub	sp, #28
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	60f8      	str	r0, [r7, #12]
 8006e6e:	60b9      	str	r1, [r7, #8]
 8006e70:	4613      	mov	r3, r2
 8006e72:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	3301      	adds	r3, #1
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	2b03      	cmp	r3, #3
 8006e7c:	d120      	bne.n	8006ec0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	1e9a      	subs	r2, r3, #2
 8006e84:	88fb      	ldrh	r3, [r7, #6]
 8006e86:	4293      	cmp	r3, r2
 8006e88:	bf28      	it	cs
 8006e8a:	4613      	movcs	r3, r2
 8006e8c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3302      	adds	r3, #2
 8006e92:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006e94:	2300      	movs	r3, #0
 8006e96:	82fb      	strh	r3, [r7, #22]
 8006e98:	e00b      	b.n	8006eb2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006e9a:	8afb      	ldrh	r3, [r7, #22]
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	781a      	ldrb	r2, [r3, #0]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006eac:	8afb      	ldrh	r3, [r7, #22]
 8006eae:	3302      	adds	r3, #2
 8006eb0:	82fb      	strh	r3, [r7, #22]
 8006eb2:	8afa      	ldrh	r2, [r7, #22]
 8006eb4:	8abb      	ldrh	r3, [r7, #20]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d3ef      	bcc.n	8006e9a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	701a      	strb	r2, [r3, #0]
  }
}
 8006ec0:	bf00      	nop
 8006ec2:	371c      	adds	r7, #28
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	881a      	ldrh	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	4413      	add	r3, r2
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b086      	sub	sp, #24
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	60f8      	str	r0, [r7, #12]
 8006f0a:	60b9      	str	r1, [r7, #8]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006f10:	2301      	movs	r3, #1
 8006f12:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	789b      	ldrb	r3, [r3, #2]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d002      	beq.n	8006f22 <USBH_CtlReq+0x20>
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d00f      	beq.n	8006f40 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006f20:	e027      	b.n	8006f72 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	88fa      	ldrh	r2, [r7, #6]
 8006f2c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2201      	movs	r2, #1
 8006f32:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2202      	movs	r2, #2
 8006f38:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f3e:	e018      	b.n	8006f72 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f000 f81b 	bl	8006f7c <USBH_HandleControl>
 8006f46:	4603      	mov	r3, r0
 8006f48:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006f4a:	7dfb      	ldrb	r3, [r7, #23]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <USBH_CtlReq+0x54>
 8006f50:	7dfb      	ldrb	r3, [r7, #23]
 8006f52:	2b03      	cmp	r3, #3
 8006f54:	d106      	bne.n	8006f64 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	761a      	strb	r2, [r3, #24]
      break;
 8006f62:	e005      	b.n	8006f70 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006f64:	7dfb      	ldrb	r3, [r7, #23]
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d102      	bne.n	8006f70 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	709a      	strb	r2, [r3, #2]
      break;
 8006f70:	bf00      	nop
  }
  return status;
 8006f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3718      	adds	r7, #24
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af02      	add	r7, sp, #8
 8006f82:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006f84:	2301      	movs	r3, #1
 8006f86:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	7e1b      	ldrb	r3, [r3, #24]
 8006f90:	3b01      	subs	r3, #1
 8006f92:	2b0a      	cmp	r3, #10
 8006f94:	f200 8156 	bhi.w	8007244 <USBH_HandleControl+0x2c8>
 8006f98:	a201      	add	r2, pc, #4	; (adr r2, 8006fa0 <USBH_HandleControl+0x24>)
 8006f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9e:	bf00      	nop
 8006fa0:	08006fcd 	.word	0x08006fcd
 8006fa4:	08006fe7 	.word	0x08006fe7
 8006fa8:	08007051 	.word	0x08007051
 8006fac:	08007077 	.word	0x08007077
 8006fb0:	080070af 	.word	0x080070af
 8006fb4:	080070d9 	.word	0x080070d9
 8006fb8:	0800712b 	.word	0x0800712b
 8006fbc:	0800714d 	.word	0x0800714d
 8006fc0:	08007189 	.word	0x08007189
 8006fc4:	080071af 	.word	0x080071af
 8006fc8:	080071ed 	.word	0x080071ed
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f103 0110 	add.w	r1, r3, #16
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	795b      	ldrb	r3, [r3, #5]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f943 	bl	8007264 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2202      	movs	r2, #2
 8006fe2:	761a      	strb	r2, [r3, #24]
      break;
 8006fe4:	e139      	b.n	800725a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	795b      	ldrb	r3, [r3, #5]
 8006fea:	4619      	mov	r1, r3
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fcc5 	bl	800797c <USBH_LL_GetURBState>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006ff6:	7bbb      	ldrb	r3, [r7, #14]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d11e      	bne.n	800703a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	7c1b      	ldrb	r3, [r3, #16]
 8007000:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007004:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	8adb      	ldrh	r3, [r3, #22]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00a      	beq.n	8007024 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800700e:	7b7b      	ldrb	r3, [r7, #13]
 8007010:	2b80      	cmp	r3, #128	; 0x80
 8007012:	d103      	bne.n	800701c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2203      	movs	r2, #3
 8007018:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800701a:	e115      	b.n	8007248 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2205      	movs	r2, #5
 8007020:	761a      	strb	r2, [r3, #24]
      break;
 8007022:	e111      	b.n	8007248 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007024:	7b7b      	ldrb	r3, [r7, #13]
 8007026:	2b80      	cmp	r3, #128	; 0x80
 8007028:	d103      	bne.n	8007032 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2209      	movs	r2, #9
 800702e:	761a      	strb	r2, [r3, #24]
      break;
 8007030:	e10a      	b.n	8007248 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2207      	movs	r2, #7
 8007036:	761a      	strb	r2, [r3, #24]
      break;
 8007038:	e106      	b.n	8007248 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800703a:	7bbb      	ldrb	r3, [r7, #14]
 800703c:	2b04      	cmp	r3, #4
 800703e:	d003      	beq.n	8007048 <USBH_HandleControl+0xcc>
 8007040:	7bbb      	ldrb	r3, [r7, #14]
 8007042:	2b02      	cmp	r3, #2
 8007044:	f040 8100 	bne.w	8007248 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	220b      	movs	r2, #11
 800704c:	761a      	strb	r2, [r3, #24]
      break;
 800704e:	e0fb      	b.n	8007248 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007056:	b29a      	uxth	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6899      	ldr	r1, [r3, #8]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	899a      	ldrh	r2, [r3, #12]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	791b      	ldrb	r3, [r3, #4]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f93a 	bl	80072e2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2204      	movs	r2, #4
 8007072:	761a      	strb	r2, [r3, #24]
      break;
 8007074:	e0f1      	b.n	800725a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	791b      	ldrb	r3, [r3, #4]
 800707a:	4619      	mov	r1, r3
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fc7d 	bl	800797c <USBH_LL_GetURBState>
 8007082:	4603      	mov	r3, r0
 8007084:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007086:	7bbb      	ldrb	r3, [r7, #14]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d102      	bne.n	8007092 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2209      	movs	r2, #9
 8007090:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007092:	7bbb      	ldrb	r3, [r7, #14]
 8007094:	2b05      	cmp	r3, #5
 8007096:	d102      	bne.n	800709e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007098:	2303      	movs	r3, #3
 800709a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800709c:	e0d6      	b.n	800724c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800709e:	7bbb      	ldrb	r3, [r7, #14]
 80070a0:	2b04      	cmp	r3, #4
 80070a2:	f040 80d3 	bne.w	800724c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	220b      	movs	r2, #11
 80070aa:	761a      	strb	r2, [r3, #24]
      break;
 80070ac:	e0ce      	b.n	800724c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6899      	ldr	r1, [r3, #8]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	899a      	ldrh	r2, [r3, #12]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	795b      	ldrb	r3, [r3, #5]
 80070ba:	2001      	movs	r0, #1
 80070bc:	9000      	str	r0, [sp, #0]
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f8ea 	bl	8007298 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2206      	movs	r2, #6
 80070d4:	761a      	strb	r2, [r3, #24]
      break;
 80070d6:	e0c0      	b.n	800725a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	795b      	ldrb	r3, [r3, #5]
 80070dc:	4619      	mov	r1, r3
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 fc4c 	bl	800797c <USBH_LL_GetURBState>
 80070e4:	4603      	mov	r3, r0
 80070e6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80070e8:	7bbb      	ldrb	r3, [r7, #14]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d103      	bne.n	80070f6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2207      	movs	r2, #7
 80070f2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80070f4:	e0ac      	b.n	8007250 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80070f6:	7bbb      	ldrb	r3, [r7, #14]
 80070f8:	2b05      	cmp	r3, #5
 80070fa:	d105      	bne.n	8007108 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	220c      	movs	r2, #12
 8007100:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007102:	2303      	movs	r3, #3
 8007104:	73fb      	strb	r3, [r7, #15]
      break;
 8007106:	e0a3      	b.n	8007250 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007108:	7bbb      	ldrb	r3, [r7, #14]
 800710a:	2b02      	cmp	r3, #2
 800710c:	d103      	bne.n	8007116 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2205      	movs	r2, #5
 8007112:	761a      	strb	r2, [r3, #24]
      break;
 8007114:	e09c      	b.n	8007250 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007116:	7bbb      	ldrb	r3, [r7, #14]
 8007118:	2b04      	cmp	r3, #4
 800711a:	f040 8099 	bne.w	8007250 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	220b      	movs	r2, #11
 8007122:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007124:	2302      	movs	r3, #2
 8007126:	73fb      	strb	r3, [r7, #15]
      break;
 8007128:	e092      	b.n	8007250 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	791b      	ldrb	r3, [r3, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	2100      	movs	r1, #0
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f8d5 	bl	80072e2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800713e:	b29a      	uxth	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2208      	movs	r2, #8
 8007148:	761a      	strb	r2, [r3, #24]

      break;
 800714a:	e086      	b.n	800725a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	791b      	ldrb	r3, [r3, #4]
 8007150:	4619      	mov	r1, r3
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fc12 	bl	800797c <USBH_LL_GetURBState>
 8007158:	4603      	mov	r3, r0
 800715a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800715c:	7bbb      	ldrb	r3, [r7, #14]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d105      	bne.n	800716e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	220d      	movs	r2, #13
 8007166:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007168:	2300      	movs	r3, #0
 800716a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800716c:	e072      	b.n	8007254 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800716e:	7bbb      	ldrb	r3, [r7, #14]
 8007170:	2b04      	cmp	r3, #4
 8007172:	d103      	bne.n	800717c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	220b      	movs	r2, #11
 8007178:	761a      	strb	r2, [r3, #24]
      break;
 800717a:	e06b      	b.n	8007254 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800717c:	7bbb      	ldrb	r3, [r7, #14]
 800717e:	2b05      	cmp	r3, #5
 8007180:	d168      	bne.n	8007254 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007182:	2303      	movs	r3, #3
 8007184:	73fb      	strb	r3, [r7, #15]
      break;
 8007186:	e065      	b.n	8007254 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	795b      	ldrb	r3, [r3, #5]
 800718c:	2201      	movs	r2, #1
 800718e:	9200      	str	r2, [sp, #0]
 8007190:	2200      	movs	r2, #0
 8007192:	2100      	movs	r1, #0
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 f87f 	bl	8007298 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	220a      	movs	r2, #10
 80071aa:	761a      	strb	r2, [r3, #24]
      break;
 80071ac:	e055      	b.n	800725a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	795b      	ldrb	r3, [r3, #5]
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fbe1 	bl	800797c <USBH_LL_GetURBState>
 80071ba:	4603      	mov	r3, r0
 80071bc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80071be:	7bbb      	ldrb	r3, [r7, #14]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d105      	bne.n	80071d0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	220d      	movs	r2, #13
 80071cc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80071ce:	e043      	b.n	8007258 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80071d0:	7bbb      	ldrb	r3, [r7, #14]
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d103      	bne.n	80071de <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2209      	movs	r2, #9
 80071da:	761a      	strb	r2, [r3, #24]
      break;
 80071dc:	e03c      	b.n	8007258 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80071de:	7bbb      	ldrb	r3, [r7, #14]
 80071e0:	2b04      	cmp	r3, #4
 80071e2:	d139      	bne.n	8007258 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	220b      	movs	r2, #11
 80071e8:	761a      	strb	r2, [r3, #24]
      break;
 80071ea:	e035      	b.n	8007258 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	7e5b      	ldrb	r3, [r3, #25]
 80071f0:	3301      	adds	r3, #1
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	765a      	strb	r2, [r3, #25]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	7e5b      	ldrb	r3, [r3, #25]
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d806      	bhi.n	800720e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800720c:	e025      	b.n	800725a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007214:	2106      	movs	r1, #6
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	795b      	ldrb	r3, [r3, #5]
 8007224:	4619      	mov	r1, r3
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f90c 	bl	8007444 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	791b      	ldrb	r3, [r3, #4]
 8007230:	4619      	mov	r1, r3
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 f906 	bl	8007444 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800723e:	2302      	movs	r3, #2
 8007240:	73fb      	strb	r3, [r7, #15]
      break;
 8007242:	e00a      	b.n	800725a <USBH_HandleControl+0x2de>

    default:
      break;
 8007244:	bf00      	nop
 8007246:	e008      	b.n	800725a <USBH_HandleControl+0x2de>
      break;
 8007248:	bf00      	nop
 800724a:	e006      	b.n	800725a <USBH_HandleControl+0x2de>
      break;
 800724c:	bf00      	nop
 800724e:	e004      	b.n	800725a <USBH_HandleControl+0x2de>
      break;
 8007250:	bf00      	nop
 8007252:	e002      	b.n	800725a <USBH_HandleControl+0x2de>
      break;
 8007254:	bf00      	nop
 8007256:	e000      	b.n	800725a <USBH_HandleControl+0x2de>
      break;
 8007258:	bf00      	nop
  }

  return status;
 800725a:	7bfb      	ldrb	r3, [r7, #15]
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b088      	sub	sp, #32
 8007268:	af04      	add	r7, sp, #16
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	4613      	mov	r3, r2
 8007270:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007272:	79f9      	ldrb	r1, [r7, #7]
 8007274:	2300      	movs	r3, #0
 8007276:	9303      	str	r3, [sp, #12]
 8007278:	2308      	movs	r3, #8
 800727a:	9302      	str	r3, [sp, #8]
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	9301      	str	r3, [sp, #4]
 8007280:	2300      	movs	r3, #0
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	2300      	movs	r3, #0
 8007286:	2200      	movs	r2, #0
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 fb46 	bl	800791a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b088      	sub	sp, #32
 800729c:	af04      	add	r7, sp, #16
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	4611      	mov	r1, r2
 80072a4:	461a      	mov	r2, r3
 80072a6:	460b      	mov	r3, r1
 80072a8:	80fb      	strh	r3, [r7, #6]
 80072aa:	4613      	mov	r3, r2
 80072ac:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d001      	beq.n	80072bc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80072bc:	7979      	ldrb	r1, [r7, #5]
 80072be:	7e3b      	ldrb	r3, [r7, #24]
 80072c0:	9303      	str	r3, [sp, #12]
 80072c2:	88fb      	ldrh	r3, [r7, #6]
 80072c4:	9302      	str	r3, [sp, #8]
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	9301      	str	r3, [sp, #4]
 80072ca:	2301      	movs	r3, #1
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	2300      	movs	r3, #0
 80072d0:	2200      	movs	r2, #0
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f000 fb21 	bl	800791a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b088      	sub	sp, #32
 80072e6:	af04      	add	r7, sp, #16
 80072e8:	60f8      	str	r0, [r7, #12]
 80072ea:	60b9      	str	r1, [r7, #8]
 80072ec:	4611      	mov	r1, r2
 80072ee:	461a      	mov	r2, r3
 80072f0:	460b      	mov	r3, r1
 80072f2:	80fb      	strh	r3, [r7, #6]
 80072f4:	4613      	mov	r3, r2
 80072f6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80072f8:	7979      	ldrb	r1, [r7, #5]
 80072fa:	2300      	movs	r3, #0
 80072fc:	9303      	str	r3, [sp, #12]
 80072fe:	88fb      	ldrh	r3, [r7, #6]
 8007300:	9302      	str	r3, [sp, #8]
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	9301      	str	r3, [sp, #4]
 8007306:	2301      	movs	r3, #1
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	2300      	movs	r3, #0
 800730c:	2201      	movs	r2, #1
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f000 fb03 	bl	800791a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007314:	2300      	movs	r3, #0

}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b088      	sub	sp, #32
 8007322:	af04      	add	r7, sp, #16
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	4611      	mov	r1, r2
 800732a:	461a      	mov	r2, r3
 800732c:	460b      	mov	r3, r1
 800732e:	80fb      	strh	r3, [r7, #6]
 8007330:	4613      	mov	r3, r2
 8007332:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800733a:	2b00      	cmp	r3, #0
 800733c:	d001      	beq.n	8007342 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800733e:	2300      	movs	r3, #0
 8007340:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007342:	7979      	ldrb	r1, [r7, #5]
 8007344:	7e3b      	ldrb	r3, [r7, #24]
 8007346:	9303      	str	r3, [sp, #12]
 8007348:	88fb      	ldrh	r3, [r7, #6]
 800734a:	9302      	str	r3, [sp, #8]
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	9301      	str	r3, [sp, #4]
 8007350:	2301      	movs	r3, #1
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	2302      	movs	r3, #2
 8007356:	2200      	movs	r2, #0
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f000 fade 	bl	800791a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b088      	sub	sp, #32
 800736c:	af04      	add	r7, sp, #16
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	4611      	mov	r1, r2
 8007374:	461a      	mov	r2, r3
 8007376:	460b      	mov	r3, r1
 8007378:	80fb      	strh	r3, [r7, #6]
 800737a:	4613      	mov	r3, r2
 800737c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800737e:	7979      	ldrb	r1, [r7, #5]
 8007380:	2300      	movs	r3, #0
 8007382:	9303      	str	r3, [sp, #12]
 8007384:	88fb      	ldrh	r3, [r7, #6]
 8007386:	9302      	str	r3, [sp, #8]
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	9301      	str	r3, [sp, #4]
 800738c:	2301      	movs	r3, #1
 800738e:	9300      	str	r3, [sp, #0]
 8007390:	2302      	movs	r3, #2
 8007392:	2201      	movs	r2, #1
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f000 fac0 	bl	800791a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af04      	add	r7, sp, #16
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	4608      	mov	r0, r1
 80073ae:	4611      	mov	r1, r2
 80073b0:	461a      	mov	r2, r3
 80073b2:	4603      	mov	r3, r0
 80073b4:	70fb      	strb	r3, [r7, #3]
 80073b6:	460b      	mov	r3, r1
 80073b8:	70bb      	strb	r3, [r7, #2]
 80073ba:	4613      	mov	r3, r2
 80073bc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80073be:	7878      	ldrb	r0, [r7, #1]
 80073c0:	78ba      	ldrb	r2, [r7, #2]
 80073c2:	78f9      	ldrb	r1, [r7, #3]
 80073c4:	8b3b      	ldrh	r3, [r7, #24]
 80073c6:	9302      	str	r3, [sp, #8]
 80073c8:	7d3b      	ldrb	r3, [r7, #20]
 80073ca:	9301      	str	r3, [sp, #4]
 80073cc:	7c3b      	ldrb	r3, [r7, #16]
 80073ce:	9300      	str	r3, [sp, #0]
 80073d0:	4603      	mov	r3, r0
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fa53 	bl	800787e <USBH_LL_OpenPipe>

  return USBH_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b082      	sub	sp, #8
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	460b      	mov	r3, r1
 80073ec:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80073ee:	78fb      	ldrb	r3, [r7, #3]
 80073f0:	4619      	mov	r1, r3
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fa72 	bl	80078dc <USBH_LL_ClosePipe>

  return USBH_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3708      	adds	r7, #8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b084      	sub	sp, #16
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
 800740a:	460b      	mov	r3, r1
 800740c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f836 	bl	8007480 <USBH_GetFreePipe>
 8007414:	4603      	mov	r3, r0
 8007416:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007418:	89fb      	ldrh	r3, [r7, #14]
 800741a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800741e:	4293      	cmp	r3, r2
 8007420:	d00a      	beq.n	8007438 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007422:	78fa      	ldrb	r2, [r7, #3]
 8007424:	89fb      	ldrh	r3, [r7, #14]
 8007426:	f003 030f 	and.w	r3, r3, #15
 800742a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800742e:	6879      	ldr	r1, [r7, #4]
 8007430:	33e0      	adds	r3, #224	; 0xe0
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	440b      	add	r3, r1
 8007436:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007438:	89fb      	ldrh	r3, [r7, #14]
 800743a:	b2db      	uxtb	r3, r3
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	460b      	mov	r3, r1
 800744e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007450:	78fb      	ldrb	r3, [r7, #3]
 8007452:	2b0a      	cmp	r3, #10
 8007454:	d80d      	bhi.n	8007472 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007456:	78fb      	ldrb	r3, [r7, #3]
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	33e0      	adds	r3, #224	; 0xe0
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4413      	add	r3, r2
 8007460:	685a      	ldr	r2, [r3, #4]
 8007462:	78fb      	ldrb	r3, [r7, #3]
 8007464:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007468:	6879      	ldr	r1, [r7, #4]
 800746a:	33e0      	adds	r3, #224	; 0xe0
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	440b      	add	r3, r1
 8007470:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007488:	2300      	movs	r3, #0
 800748a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800748c:	2300      	movs	r3, #0
 800748e:	73fb      	strb	r3, [r7, #15]
 8007490:	e00f      	b.n	80074b2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007492:	7bfb      	ldrb	r3, [r7, #15]
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	33e0      	adds	r3, #224	; 0xe0
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4413      	add	r3, r2
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d102      	bne.n	80074ac <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80074a6:	7bfb      	ldrb	r3, [r7, #15]
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	e007      	b.n	80074bc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
 80074ae:	3301      	adds	r3, #1
 80074b0:	73fb      	strb	r3, [r7, #15]
 80074b2:	7bfb      	ldrb	r3, [r7, #15]
 80074b4:	2b0a      	cmp	r3, #10
 80074b6:	d9ec      	bls.n	8007492 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80074b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3714      	adds	r7, #20
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80074cc:	2201      	movs	r2, #1
 80074ce:	490e      	ldr	r1, [pc, #56]	; (8007508 <MX_USB_HOST_Init+0x40>)
 80074d0:	480e      	ldr	r0, [pc, #56]	; (800750c <MX_USB_HOST_Init+0x44>)
 80074d2:	f7fe fca1 	bl	8005e18 <USBH_Init>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d001      	beq.n	80074e0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80074dc:	f7f9 fafe 	bl	8000adc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80074e0:	490b      	ldr	r1, [pc, #44]	; (8007510 <MX_USB_HOST_Init+0x48>)
 80074e2:	480a      	ldr	r0, [pc, #40]	; (800750c <MX_USB_HOST_Init+0x44>)
 80074e4:	f7fe fd26 	bl	8005f34 <USBH_RegisterClass>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d001      	beq.n	80074f2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80074ee:	f7f9 faf5 	bl	8000adc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80074f2:	4806      	ldr	r0, [pc, #24]	; (800750c <MX_USB_HOST_Init+0x44>)
 80074f4:	f7fe fdaa 	bl	800604c <USBH_Start>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80074fe:	f7f9 faed 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007502:	bf00      	nop
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	08007529 	.word	0x08007529
 800750c:	200001c0 	.word	0x200001c0
 8007510:	2000000c 	.word	0x2000000c

08007514 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007518:	4802      	ldr	r0, [pc, #8]	; (8007524 <MX_USB_HOST_Process+0x10>)
 800751a:	f7fe fda7 	bl	800606c <USBH_Process>
}
 800751e:	bf00      	nop
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	200001c0 	.word	0x200001c0

08007528 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	460b      	mov	r3, r1
 8007532:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007534:	78fb      	ldrb	r3, [r7, #3]
 8007536:	3b01      	subs	r3, #1
 8007538:	2b04      	cmp	r3, #4
 800753a:	d819      	bhi.n	8007570 <USBH_UserProcess+0x48>
 800753c:	a201      	add	r2, pc, #4	; (adr r2, 8007544 <USBH_UserProcess+0x1c>)
 800753e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007542:	bf00      	nop
 8007544:	08007571 	.word	0x08007571
 8007548:	08007561 	.word	0x08007561
 800754c:	08007571 	.word	0x08007571
 8007550:	08007569 	.word	0x08007569
 8007554:	08007559 	.word	0x08007559
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007558:	4b09      	ldr	r3, [pc, #36]	; (8007580 <USBH_UserProcess+0x58>)
 800755a:	2203      	movs	r2, #3
 800755c:	701a      	strb	r2, [r3, #0]
  break;
 800755e:	e008      	b.n	8007572 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007560:	4b07      	ldr	r3, [pc, #28]	; (8007580 <USBH_UserProcess+0x58>)
 8007562:	2202      	movs	r2, #2
 8007564:	701a      	strb	r2, [r3, #0]
  break;
 8007566:	e004      	b.n	8007572 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007568:	4b05      	ldr	r3, [pc, #20]	; (8007580 <USBH_UserProcess+0x58>)
 800756a:	2201      	movs	r2, #1
 800756c:	701a      	strb	r2, [r3, #0]
  break;
 800756e:	e000      	b.n	8007572 <USBH_UserProcess+0x4a>

  default:
  break;
 8007570:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007572:	bf00      	nop
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	200000b0 	.word	0x200000b0

08007584 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b08a      	sub	sp, #40	; 0x28
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800758c:	f107 0314 	add.w	r3, r7, #20
 8007590:	2200      	movs	r2, #0
 8007592:	601a      	str	r2, [r3, #0]
 8007594:	605a      	str	r2, [r3, #4]
 8007596:	609a      	str	r2, [r3, #8]
 8007598:	60da      	str	r2, [r3, #12]
 800759a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075a4:	d147      	bne.n	8007636 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075a6:	2300      	movs	r3, #0
 80075a8:	613b      	str	r3, [r7, #16]
 80075aa:	4b25      	ldr	r3, [pc, #148]	; (8007640 <HAL_HCD_MspInit+0xbc>)
 80075ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ae:	4a24      	ldr	r2, [pc, #144]	; (8007640 <HAL_HCD_MspInit+0xbc>)
 80075b0:	f043 0301 	orr.w	r3, r3, #1
 80075b4:	6313      	str	r3, [r2, #48]	; 0x30
 80075b6:	4b22      	ldr	r3, [pc, #136]	; (8007640 <HAL_HCD_MspInit+0xbc>)
 80075b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ba:	f003 0301 	and.w	r3, r3, #1
 80075be:	613b      	str	r3, [r7, #16]
 80075c0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80075c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80075c8:	2300      	movs	r3, #0
 80075ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075cc:	2300      	movs	r3, #0
 80075ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80075d0:	f107 0314 	add.w	r3, r7, #20
 80075d4:	4619      	mov	r1, r3
 80075d6:	481b      	ldr	r0, [pc, #108]	; (8007644 <HAL_HCD_MspInit+0xc0>)
 80075d8:	f7fa f8ae 	bl	8001738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80075dc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80075e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075e2:	2302      	movs	r3, #2
 80075e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075e6:	2300      	movs	r3, #0
 80075e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075ea:	2300      	movs	r3, #0
 80075ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80075ee:	230a      	movs	r3, #10
 80075f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075f2:	f107 0314 	add.w	r3, r7, #20
 80075f6:	4619      	mov	r1, r3
 80075f8:	4812      	ldr	r0, [pc, #72]	; (8007644 <HAL_HCD_MspInit+0xc0>)
 80075fa:	f7fa f89d 	bl	8001738 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80075fe:	4b10      	ldr	r3, [pc, #64]	; (8007640 <HAL_HCD_MspInit+0xbc>)
 8007600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007602:	4a0f      	ldr	r2, [pc, #60]	; (8007640 <HAL_HCD_MspInit+0xbc>)
 8007604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007608:	6353      	str	r3, [r2, #52]	; 0x34
 800760a:	2300      	movs	r3, #0
 800760c:	60fb      	str	r3, [r7, #12]
 800760e:	4b0c      	ldr	r3, [pc, #48]	; (8007640 <HAL_HCD_MspInit+0xbc>)
 8007610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007612:	4a0b      	ldr	r2, [pc, #44]	; (8007640 <HAL_HCD_MspInit+0xbc>)
 8007614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007618:	6453      	str	r3, [r2, #68]	; 0x44
 800761a:	4b09      	ldr	r3, [pc, #36]	; (8007640 <HAL_HCD_MspInit+0xbc>)
 800761c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800761e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007622:	60fb      	str	r3, [r7, #12]
 8007624:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007626:	2200      	movs	r2, #0
 8007628:	2100      	movs	r1, #0
 800762a:	2043      	movs	r0, #67	; 0x43
 800762c:	f7f9 fd63 	bl	80010f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007630:	2043      	movs	r0, #67	; 0x43
 8007632:	f7f9 fd7c 	bl	800112e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007636:	bf00      	nop
 8007638:	3728      	adds	r7, #40	; 0x28
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	40023800 	.word	0x40023800
 8007644:	40020000 	.word	0x40020000

08007648 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007656:	4618      	mov	r0, r3
 8007658:	f7ff f8db 	bl	8006812 <USBH_LL_IncTimer>
}
 800765c:	bf00      	nop
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007672:	4618      	mov	r0, r3
 8007674:	f7ff f913 	bl	800689e <USBH_LL_Connect>
}
 8007678:	bf00      	nop
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800768e:	4618      	mov	r0, r3
 8007690:	f7ff f91c 	bl	80068cc <USBH_LL_Disconnect>
}
 8007694:	bf00      	nop
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	70fb      	strb	r3, [r7, #3]
 80076a8:	4613      	mov	r3, r2
 80076aa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7ff f8cd 	bl	8006866 <USBH_LL_PortEnabled>
}
 80076cc:	bf00      	nop
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7ff f8cd 	bl	8006882 <USBH_LL_PortDisabled>
}
 80076e8:	bf00      	nop
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d12a      	bne.n	8007758 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007702:	4a18      	ldr	r2, [pc, #96]	; (8007764 <USBH_LL_Init+0x74>)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a15      	ldr	r2, [pc, #84]	; (8007764 <USBH_LL_Init+0x74>)
 800770e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007712:	4b14      	ldr	r3, [pc, #80]	; (8007764 <USBH_LL_Init+0x74>)
 8007714:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007718:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800771a:	4b12      	ldr	r3, [pc, #72]	; (8007764 <USBH_LL_Init+0x74>)
 800771c:	2208      	movs	r2, #8
 800771e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007720:	4b10      	ldr	r3, [pc, #64]	; (8007764 <USBH_LL_Init+0x74>)
 8007722:	2201      	movs	r2, #1
 8007724:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007726:	4b0f      	ldr	r3, [pc, #60]	; (8007764 <USBH_LL_Init+0x74>)
 8007728:	2200      	movs	r2, #0
 800772a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800772c:	4b0d      	ldr	r3, [pc, #52]	; (8007764 <USBH_LL_Init+0x74>)
 800772e:	2202      	movs	r2, #2
 8007730:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007732:	4b0c      	ldr	r3, [pc, #48]	; (8007764 <USBH_LL_Init+0x74>)
 8007734:	2200      	movs	r2, #0
 8007736:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007738:	480a      	ldr	r0, [pc, #40]	; (8007764 <USBH_LL_Init+0x74>)
 800773a:	f7fa f9b2 	bl	8001aa2 <HAL_HCD_Init>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d001      	beq.n	8007748 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007744:	f7f9 f9ca 	bl	8000adc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007748:	4806      	ldr	r0, [pc, #24]	; (8007764 <USBH_LL_Init+0x74>)
 800774a:	f7fa fd96 	bl	800227a <HAL_HCD_GetCurrentFrame>
 800774e:	4603      	mov	r3, r0
 8007750:	4619      	mov	r1, r3
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7ff f84e 	bl	80067f4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	20000598 	.word	0x20000598

08007768 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007770:	2300      	movs	r3, #0
 8007772:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007774:	2300      	movs	r3, #0
 8007776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800777e:	4618      	mov	r0, r3
 8007780:	f7fa fd05 	bl	800218e <HAL_HCD_Start>
 8007784:	4603      	mov	r3, r0
 8007786:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007788:	7bfb      	ldrb	r3, [r7, #15]
 800778a:	4618      	mov	r0, r3
 800778c:	f000 f95c 	bl	8007a48 <USBH_Get_USB_Status>
 8007790:	4603      	mov	r3, r0
 8007792:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007794:	7bbb      	ldrb	r3, [r7, #14]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b084      	sub	sp, #16
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7fa fd0d 	bl	80021d4 <HAL_HCD_Stop>
 80077ba:	4603      	mov	r3, r0
 80077bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80077be:	7bfb      	ldrb	r3, [r7, #15]
 80077c0:	4618      	mov	r0, r3
 80077c2:	f000 f941 	bl	8007a48 <USBH_Get_USB_Status>
 80077c6:	4603      	mov	r3, r0
 80077c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80077dc:	2301      	movs	r3, #1
 80077de:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7fa fd55 	bl	8002296 <HAL_HCD_GetCurrentSpeed>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d00c      	beq.n	800780c <USBH_LL_GetSpeed+0x38>
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	d80d      	bhi.n	8007812 <USBH_LL_GetSpeed+0x3e>
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d002      	beq.n	8007800 <USBH_LL_GetSpeed+0x2c>
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d003      	beq.n	8007806 <USBH_LL_GetSpeed+0x32>
 80077fe:	e008      	b.n	8007812 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007800:	2300      	movs	r3, #0
 8007802:	73fb      	strb	r3, [r7, #15]
    break;
 8007804:	e008      	b.n	8007818 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007806:	2301      	movs	r3, #1
 8007808:	73fb      	strb	r3, [r7, #15]
    break;
 800780a:	e005      	b.n	8007818 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800780c:	2302      	movs	r3, #2
 800780e:	73fb      	strb	r3, [r7, #15]
    break;
 8007810:	e002      	b.n	8007818 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007812:	2301      	movs	r3, #1
 8007814:	73fb      	strb	r3, [r7, #15]
    break;
 8007816:	bf00      	nop
  }
  return  speed;
 8007818:	7bfb      	ldrb	r3, [r7, #15]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b084      	sub	sp, #16
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800782e:	2300      	movs	r3, #0
 8007830:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007838:	4618      	mov	r0, r3
 800783a:	f7fa fce8 	bl	800220e <HAL_HCD_ResetPort>
 800783e:	4603      	mov	r3, r0
 8007840:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007842:	7bfb      	ldrb	r3, [r7, #15]
 8007844:	4618      	mov	r0, r3
 8007846:	f000 f8ff 	bl	8007a48 <USBH_Get_USB_Status>
 800784a:	4603      	mov	r3, r0
 800784c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800784e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	460b      	mov	r3, r1
 8007862:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800786a:	78fa      	ldrb	r2, [r7, #3]
 800786c:	4611      	mov	r1, r2
 800786e:	4618      	mov	r0, r3
 8007870:	f7fa fcef 	bl	8002252 <HAL_HCD_HC_GetXferCount>
 8007874:	4603      	mov	r3, r0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800787e:	b590      	push	{r4, r7, lr}
 8007880:	b089      	sub	sp, #36	; 0x24
 8007882:	af04      	add	r7, sp, #16
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	4608      	mov	r0, r1
 8007888:	4611      	mov	r1, r2
 800788a:	461a      	mov	r2, r3
 800788c:	4603      	mov	r3, r0
 800788e:	70fb      	strb	r3, [r7, #3]
 8007890:	460b      	mov	r3, r1
 8007892:	70bb      	strb	r3, [r7, #2]
 8007894:	4613      	mov	r3, r2
 8007896:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007898:	2300      	movs	r3, #0
 800789a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80078a6:	787c      	ldrb	r4, [r7, #1]
 80078a8:	78ba      	ldrb	r2, [r7, #2]
 80078aa:	78f9      	ldrb	r1, [r7, #3]
 80078ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80078ae:	9302      	str	r3, [sp, #8]
 80078b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80078b4:	9301      	str	r3, [sp, #4]
 80078b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	4623      	mov	r3, r4
 80078be:	f7fa f952 	bl	8001b66 <HAL_HCD_HC_Init>
 80078c2:	4603      	mov	r3, r0
 80078c4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80078c6:	7bfb      	ldrb	r3, [r7, #15]
 80078c8:	4618      	mov	r0, r3
 80078ca:	f000 f8bd 	bl	8007a48 <USBH_Get_USB_Status>
 80078ce:	4603      	mov	r3, r0
 80078d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd90      	pop	{r4, r7, pc}

080078dc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	460b      	mov	r3, r1
 80078e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078e8:	2300      	movs	r3, #0
 80078ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80078f6:	78fa      	ldrb	r2, [r7, #3]
 80078f8:	4611      	mov	r1, r2
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7fa f9c2 	bl	8001c84 <HAL_HCD_HC_Halt>
 8007900:	4603      	mov	r3, r0
 8007902:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007904:	7bfb      	ldrb	r3, [r7, #15]
 8007906:	4618      	mov	r0, r3
 8007908:	f000 f89e 	bl	8007a48 <USBH_Get_USB_Status>
 800790c:	4603      	mov	r3, r0
 800790e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007910:	7bbb      	ldrb	r3, [r7, #14]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800791a:	b590      	push	{r4, r7, lr}
 800791c:	b089      	sub	sp, #36	; 0x24
 800791e:	af04      	add	r7, sp, #16
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	4608      	mov	r0, r1
 8007924:	4611      	mov	r1, r2
 8007926:	461a      	mov	r2, r3
 8007928:	4603      	mov	r3, r0
 800792a:	70fb      	strb	r3, [r7, #3]
 800792c:	460b      	mov	r3, r1
 800792e:	70bb      	strb	r3, [r7, #2]
 8007930:	4613      	mov	r3, r2
 8007932:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007938:	2300      	movs	r3, #0
 800793a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007942:	787c      	ldrb	r4, [r7, #1]
 8007944:	78ba      	ldrb	r2, [r7, #2]
 8007946:	78f9      	ldrb	r1, [r7, #3]
 8007948:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800794c:	9303      	str	r3, [sp, #12]
 800794e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007950:	9302      	str	r3, [sp, #8]
 8007952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007954:	9301      	str	r3, [sp, #4]
 8007956:	f897 3020 	ldrb.w	r3, [r7, #32]
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	4623      	mov	r3, r4
 800795e:	f7fa f9b5 	bl	8001ccc <HAL_HCD_HC_SubmitRequest>
 8007962:	4603      	mov	r3, r0
 8007964:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007966:	7bfb      	ldrb	r3, [r7, #15]
 8007968:	4618      	mov	r0, r3
 800796a:	f000 f86d 	bl	8007a48 <USBH_Get_USB_Status>
 800796e:	4603      	mov	r3, r0
 8007970:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007972:	7bbb      	ldrb	r3, [r7, #14]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	bd90      	pop	{r4, r7, pc}

0800797c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	460b      	mov	r3, r1
 8007986:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800798e:	78fa      	ldrb	r2, [r7, #3]
 8007990:	4611      	mov	r1, r2
 8007992:	4618      	mov	r0, r3
 8007994:	f7fa fc49 	bl	800222a <HAL_HCD_HC_GetURBState>
 8007998:	4603      	mov	r3, r0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b082      	sub	sp, #8
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
 80079aa:	460b      	mov	r3, r1
 80079ac:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d103      	bne.n	80079c0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80079b8:	78fb      	ldrb	r3, [r7, #3]
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 f870 	bl	8007aa0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80079c0:	20c8      	movs	r0, #200	; 0xc8
 80079c2:	f7f9 fa99 	bl	8000ef8 <HAL_Delay>
  return USBH_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b085      	sub	sp, #20
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	460b      	mov	r3, r1
 80079da:	70fb      	strb	r3, [r7, #3]
 80079dc:	4613      	mov	r3, r2
 80079de:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80079e6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80079e8:	78fb      	ldrb	r3, [r7, #3]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	212c      	movs	r1, #44	; 0x2c
 80079ee:	fb01 f303 	mul.w	r3, r1, r3
 80079f2:	4413      	add	r3, r2
 80079f4:	333b      	adds	r3, #59	; 0x3b
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d009      	beq.n	8007a10 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80079fc:	78fb      	ldrb	r3, [r7, #3]
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	212c      	movs	r1, #44	; 0x2c
 8007a02:	fb01 f303 	mul.w	r3, r1, r3
 8007a06:	4413      	add	r3, r2
 8007a08:	3354      	adds	r3, #84	; 0x54
 8007a0a:	78ba      	ldrb	r2, [r7, #2]
 8007a0c:	701a      	strb	r2, [r3, #0]
 8007a0e:	e008      	b.n	8007a22 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007a10:	78fb      	ldrb	r3, [r7, #3]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	212c      	movs	r1, #44	; 0x2c
 8007a16:	fb01 f303 	mul.w	r3, r1, r3
 8007a1a:	4413      	add	r3, r2
 8007a1c:	3355      	adds	r3, #85	; 0x55
 8007a1e:	78ba      	ldrb	r2, [r7, #2]
 8007a20:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3714      	adds	r7, #20
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f7f9 fa5d 	bl	8000ef8 <HAL_Delay>
}
 8007a3e:	bf00      	nop
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
	...

08007a48 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	4603      	mov	r3, r0
 8007a50:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a52:	2300      	movs	r3, #0
 8007a54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007a56:	79fb      	ldrb	r3, [r7, #7]
 8007a58:	2b03      	cmp	r3, #3
 8007a5a:	d817      	bhi.n	8007a8c <USBH_Get_USB_Status+0x44>
 8007a5c:	a201      	add	r2, pc, #4	; (adr r2, 8007a64 <USBH_Get_USB_Status+0x1c>)
 8007a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a62:	bf00      	nop
 8007a64:	08007a75 	.word	0x08007a75
 8007a68:	08007a7b 	.word	0x08007a7b
 8007a6c:	08007a81 	.word	0x08007a81
 8007a70:	08007a87 	.word	0x08007a87
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007a74:	2300      	movs	r3, #0
 8007a76:	73fb      	strb	r3, [r7, #15]
    break;
 8007a78:	e00b      	b.n	8007a92 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007a7a:	2302      	movs	r3, #2
 8007a7c:	73fb      	strb	r3, [r7, #15]
    break;
 8007a7e:	e008      	b.n	8007a92 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007a80:	2301      	movs	r3, #1
 8007a82:	73fb      	strb	r3, [r7, #15]
    break;
 8007a84:	e005      	b.n	8007a92 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007a86:	2302      	movs	r3, #2
 8007a88:	73fb      	strb	r3, [r7, #15]
    break;
 8007a8a:	e002      	b.n	8007a92 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8007a90:	bf00      	nop
  }
  return usb_status;
 8007a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3714      	adds	r7, #20
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007aaa:	79fb      	ldrb	r3, [r7, #7]
 8007aac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007aae:	79fb      	ldrb	r3, [r7, #7]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d102      	bne.n	8007aba <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	73fb      	strb	r3, [r7, #15]
 8007ab8:	e001      	b.n	8007abe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007aba:	2301      	movs	r3, #1
 8007abc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007abe:	7bfb      	ldrb	r3, [r7, #15]
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	2101      	movs	r1, #1
 8007ac4:	4803      	ldr	r0, [pc, #12]	; (8007ad4 <MX_DriverVbusFS+0x34>)
 8007ac6:	f7f9 ffd3 	bl	8001a70 <HAL_GPIO_WritePin>
}
 8007aca:	bf00      	nop
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	40020800 	.word	0x40020800

08007ad8 <__errno>:
 8007ad8:	4b01      	ldr	r3, [pc, #4]	; (8007ae0 <__errno+0x8>)
 8007ada:	6818      	ldr	r0, [r3, #0]
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	2000002c 	.word	0x2000002c

08007ae4 <__libc_init_array>:
 8007ae4:	b570      	push	{r4, r5, r6, lr}
 8007ae6:	4d0d      	ldr	r5, [pc, #52]	; (8007b1c <__libc_init_array+0x38>)
 8007ae8:	4c0d      	ldr	r4, [pc, #52]	; (8007b20 <__libc_init_array+0x3c>)
 8007aea:	1b64      	subs	r4, r4, r5
 8007aec:	10a4      	asrs	r4, r4, #2
 8007aee:	2600      	movs	r6, #0
 8007af0:	42a6      	cmp	r6, r4
 8007af2:	d109      	bne.n	8007b08 <__libc_init_array+0x24>
 8007af4:	4d0b      	ldr	r5, [pc, #44]	; (8007b24 <__libc_init_array+0x40>)
 8007af6:	4c0c      	ldr	r4, [pc, #48]	; (8007b28 <__libc_init_array+0x44>)
 8007af8:	f000 f8f8 	bl	8007cec <_init>
 8007afc:	1b64      	subs	r4, r4, r5
 8007afe:	10a4      	asrs	r4, r4, #2
 8007b00:	2600      	movs	r6, #0
 8007b02:	42a6      	cmp	r6, r4
 8007b04:	d105      	bne.n	8007b12 <__libc_init_array+0x2e>
 8007b06:	bd70      	pop	{r4, r5, r6, pc}
 8007b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b0c:	4798      	blx	r3
 8007b0e:	3601      	adds	r6, #1
 8007b10:	e7ee      	b.n	8007af0 <__libc_init_array+0xc>
 8007b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b16:	4798      	blx	r3
 8007b18:	3601      	adds	r6, #1
 8007b1a:	e7f2      	b.n	8007b02 <__libc_init_array+0x1e>
 8007b1c:	08007d44 	.word	0x08007d44
 8007b20:	08007d44 	.word	0x08007d44
 8007b24:	08007d44 	.word	0x08007d44
 8007b28:	08007d48 	.word	0x08007d48

08007b2c <malloc>:
 8007b2c:	4b02      	ldr	r3, [pc, #8]	; (8007b38 <malloc+0xc>)
 8007b2e:	4601      	mov	r1, r0
 8007b30:	6818      	ldr	r0, [r3, #0]
 8007b32:	f000 b863 	b.w	8007bfc <_malloc_r>
 8007b36:	bf00      	nop
 8007b38:	2000002c 	.word	0x2000002c

08007b3c <free>:
 8007b3c:	4b02      	ldr	r3, [pc, #8]	; (8007b48 <free+0xc>)
 8007b3e:	4601      	mov	r1, r0
 8007b40:	6818      	ldr	r0, [r3, #0]
 8007b42:	f000 b80b 	b.w	8007b5c <_free_r>
 8007b46:	bf00      	nop
 8007b48:	2000002c 	.word	0x2000002c

08007b4c <memset>:
 8007b4c:	4402      	add	r2, r0
 8007b4e:	4603      	mov	r3, r0
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d100      	bne.n	8007b56 <memset+0xa>
 8007b54:	4770      	bx	lr
 8007b56:	f803 1b01 	strb.w	r1, [r3], #1
 8007b5a:	e7f9      	b.n	8007b50 <memset+0x4>

08007b5c <_free_r>:
 8007b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b5e:	2900      	cmp	r1, #0
 8007b60:	d048      	beq.n	8007bf4 <_free_r+0x98>
 8007b62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b66:	9001      	str	r0, [sp, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f1a1 0404 	sub.w	r4, r1, #4
 8007b6e:	bfb8      	it	lt
 8007b70:	18e4      	addlt	r4, r4, r3
 8007b72:	f000 f8ad 	bl	8007cd0 <__malloc_lock>
 8007b76:	4a20      	ldr	r2, [pc, #128]	; (8007bf8 <_free_r+0x9c>)
 8007b78:	9801      	ldr	r0, [sp, #4]
 8007b7a:	6813      	ldr	r3, [r2, #0]
 8007b7c:	4615      	mov	r5, r2
 8007b7e:	b933      	cbnz	r3, 8007b8e <_free_r+0x32>
 8007b80:	6063      	str	r3, [r4, #4]
 8007b82:	6014      	str	r4, [r2, #0]
 8007b84:	b003      	add	sp, #12
 8007b86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b8a:	f000 b8a7 	b.w	8007cdc <__malloc_unlock>
 8007b8e:	42a3      	cmp	r3, r4
 8007b90:	d90b      	bls.n	8007baa <_free_r+0x4e>
 8007b92:	6821      	ldr	r1, [r4, #0]
 8007b94:	1862      	adds	r2, r4, r1
 8007b96:	4293      	cmp	r3, r2
 8007b98:	bf04      	itt	eq
 8007b9a:	681a      	ldreq	r2, [r3, #0]
 8007b9c:	685b      	ldreq	r3, [r3, #4]
 8007b9e:	6063      	str	r3, [r4, #4]
 8007ba0:	bf04      	itt	eq
 8007ba2:	1852      	addeq	r2, r2, r1
 8007ba4:	6022      	streq	r2, [r4, #0]
 8007ba6:	602c      	str	r4, [r5, #0]
 8007ba8:	e7ec      	b.n	8007b84 <_free_r+0x28>
 8007baa:	461a      	mov	r2, r3
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	b10b      	cbz	r3, 8007bb4 <_free_r+0x58>
 8007bb0:	42a3      	cmp	r3, r4
 8007bb2:	d9fa      	bls.n	8007baa <_free_r+0x4e>
 8007bb4:	6811      	ldr	r1, [r2, #0]
 8007bb6:	1855      	adds	r5, r2, r1
 8007bb8:	42a5      	cmp	r5, r4
 8007bba:	d10b      	bne.n	8007bd4 <_free_r+0x78>
 8007bbc:	6824      	ldr	r4, [r4, #0]
 8007bbe:	4421      	add	r1, r4
 8007bc0:	1854      	adds	r4, r2, r1
 8007bc2:	42a3      	cmp	r3, r4
 8007bc4:	6011      	str	r1, [r2, #0]
 8007bc6:	d1dd      	bne.n	8007b84 <_free_r+0x28>
 8007bc8:	681c      	ldr	r4, [r3, #0]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	6053      	str	r3, [r2, #4]
 8007bce:	4421      	add	r1, r4
 8007bd0:	6011      	str	r1, [r2, #0]
 8007bd2:	e7d7      	b.n	8007b84 <_free_r+0x28>
 8007bd4:	d902      	bls.n	8007bdc <_free_r+0x80>
 8007bd6:	230c      	movs	r3, #12
 8007bd8:	6003      	str	r3, [r0, #0]
 8007bda:	e7d3      	b.n	8007b84 <_free_r+0x28>
 8007bdc:	6825      	ldr	r5, [r4, #0]
 8007bde:	1961      	adds	r1, r4, r5
 8007be0:	428b      	cmp	r3, r1
 8007be2:	bf04      	itt	eq
 8007be4:	6819      	ldreq	r1, [r3, #0]
 8007be6:	685b      	ldreq	r3, [r3, #4]
 8007be8:	6063      	str	r3, [r4, #4]
 8007bea:	bf04      	itt	eq
 8007bec:	1949      	addeq	r1, r1, r5
 8007bee:	6021      	streq	r1, [r4, #0]
 8007bf0:	6054      	str	r4, [r2, #4]
 8007bf2:	e7c7      	b.n	8007b84 <_free_r+0x28>
 8007bf4:	b003      	add	sp, #12
 8007bf6:	bd30      	pop	{r4, r5, pc}
 8007bf8:	200000b4 	.word	0x200000b4

08007bfc <_malloc_r>:
 8007bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bfe:	1ccd      	adds	r5, r1, #3
 8007c00:	f025 0503 	bic.w	r5, r5, #3
 8007c04:	3508      	adds	r5, #8
 8007c06:	2d0c      	cmp	r5, #12
 8007c08:	bf38      	it	cc
 8007c0a:	250c      	movcc	r5, #12
 8007c0c:	2d00      	cmp	r5, #0
 8007c0e:	4606      	mov	r6, r0
 8007c10:	db01      	blt.n	8007c16 <_malloc_r+0x1a>
 8007c12:	42a9      	cmp	r1, r5
 8007c14:	d903      	bls.n	8007c1e <_malloc_r+0x22>
 8007c16:	230c      	movs	r3, #12
 8007c18:	6033      	str	r3, [r6, #0]
 8007c1a:	2000      	movs	r0, #0
 8007c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c1e:	f000 f857 	bl	8007cd0 <__malloc_lock>
 8007c22:	4921      	ldr	r1, [pc, #132]	; (8007ca8 <_malloc_r+0xac>)
 8007c24:	680a      	ldr	r2, [r1, #0]
 8007c26:	4614      	mov	r4, r2
 8007c28:	b99c      	cbnz	r4, 8007c52 <_malloc_r+0x56>
 8007c2a:	4f20      	ldr	r7, [pc, #128]	; (8007cac <_malloc_r+0xb0>)
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	b923      	cbnz	r3, 8007c3a <_malloc_r+0x3e>
 8007c30:	4621      	mov	r1, r4
 8007c32:	4630      	mov	r0, r6
 8007c34:	f000 f83c 	bl	8007cb0 <_sbrk_r>
 8007c38:	6038      	str	r0, [r7, #0]
 8007c3a:	4629      	mov	r1, r5
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	f000 f837 	bl	8007cb0 <_sbrk_r>
 8007c42:	1c43      	adds	r3, r0, #1
 8007c44:	d123      	bne.n	8007c8e <_malloc_r+0x92>
 8007c46:	230c      	movs	r3, #12
 8007c48:	6033      	str	r3, [r6, #0]
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f000 f846 	bl	8007cdc <__malloc_unlock>
 8007c50:	e7e3      	b.n	8007c1a <_malloc_r+0x1e>
 8007c52:	6823      	ldr	r3, [r4, #0]
 8007c54:	1b5b      	subs	r3, r3, r5
 8007c56:	d417      	bmi.n	8007c88 <_malloc_r+0x8c>
 8007c58:	2b0b      	cmp	r3, #11
 8007c5a:	d903      	bls.n	8007c64 <_malloc_r+0x68>
 8007c5c:	6023      	str	r3, [r4, #0]
 8007c5e:	441c      	add	r4, r3
 8007c60:	6025      	str	r5, [r4, #0]
 8007c62:	e004      	b.n	8007c6e <_malloc_r+0x72>
 8007c64:	6863      	ldr	r3, [r4, #4]
 8007c66:	42a2      	cmp	r2, r4
 8007c68:	bf0c      	ite	eq
 8007c6a:	600b      	streq	r3, [r1, #0]
 8007c6c:	6053      	strne	r3, [r2, #4]
 8007c6e:	4630      	mov	r0, r6
 8007c70:	f000 f834 	bl	8007cdc <__malloc_unlock>
 8007c74:	f104 000b 	add.w	r0, r4, #11
 8007c78:	1d23      	adds	r3, r4, #4
 8007c7a:	f020 0007 	bic.w	r0, r0, #7
 8007c7e:	1ac2      	subs	r2, r0, r3
 8007c80:	d0cc      	beq.n	8007c1c <_malloc_r+0x20>
 8007c82:	1a1b      	subs	r3, r3, r0
 8007c84:	50a3      	str	r3, [r4, r2]
 8007c86:	e7c9      	b.n	8007c1c <_malloc_r+0x20>
 8007c88:	4622      	mov	r2, r4
 8007c8a:	6864      	ldr	r4, [r4, #4]
 8007c8c:	e7cc      	b.n	8007c28 <_malloc_r+0x2c>
 8007c8e:	1cc4      	adds	r4, r0, #3
 8007c90:	f024 0403 	bic.w	r4, r4, #3
 8007c94:	42a0      	cmp	r0, r4
 8007c96:	d0e3      	beq.n	8007c60 <_malloc_r+0x64>
 8007c98:	1a21      	subs	r1, r4, r0
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	f000 f808 	bl	8007cb0 <_sbrk_r>
 8007ca0:	3001      	adds	r0, #1
 8007ca2:	d1dd      	bne.n	8007c60 <_malloc_r+0x64>
 8007ca4:	e7cf      	b.n	8007c46 <_malloc_r+0x4a>
 8007ca6:	bf00      	nop
 8007ca8:	200000b4 	.word	0x200000b4
 8007cac:	200000b8 	.word	0x200000b8

08007cb0 <_sbrk_r>:
 8007cb0:	b538      	push	{r3, r4, r5, lr}
 8007cb2:	4d06      	ldr	r5, [pc, #24]	; (8007ccc <_sbrk_r+0x1c>)
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	4604      	mov	r4, r0
 8007cb8:	4608      	mov	r0, r1
 8007cba:	602b      	str	r3, [r5, #0]
 8007cbc:	f7f9 f838 	bl	8000d30 <_sbrk>
 8007cc0:	1c43      	adds	r3, r0, #1
 8007cc2:	d102      	bne.n	8007cca <_sbrk_r+0x1a>
 8007cc4:	682b      	ldr	r3, [r5, #0]
 8007cc6:	b103      	cbz	r3, 8007cca <_sbrk_r+0x1a>
 8007cc8:	6023      	str	r3, [r4, #0]
 8007cca:	bd38      	pop	{r3, r4, r5, pc}
 8007ccc:	2000089c 	.word	0x2000089c

08007cd0 <__malloc_lock>:
 8007cd0:	4801      	ldr	r0, [pc, #4]	; (8007cd8 <__malloc_lock+0x8>)
 8007cd2:	f000 b809 	b.w	8007ce8 <__retarget_lock_acquire_recursive>
 8007cd6:	bf00      	nop
 8007cd8:	200008a4 	.word	0x200008a4

08007cdc <__malloc_unlock>:
 8007cdc:	4801      	ldr	r0, [pc, #4]	; (8007ce4 <__malloc_unlock+0x8>)
 8007cde:	f000 b804 	b.w	8007cea <__retarget_lock_release_recursive>
 8007ce2:	bf00      	nop
 8007ce4:	200008a4 	.word	0x200008a4

08007ce8 <__retarget_lock_acquire_recursive>:
 8007ce8:	4770      	bx	lr

08007cea <__retarget_lock_release_recursive>:
 8007cea:	4770      	bx	lr

08007cec <_init>:
 8007cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cee:	bf00      	nop
 8007cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cf2:	bc08      	pop	{r3}
 8007cf4:	469e      	mov	lr, r3
 8007cf6:	4770      	bx	lr

08007cf8 <_fini>:
 8007cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfa:	bf00      	nop
 8007cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cfe:	bc08      	pop	{r3}
 8007d00:	469e      	mov	lr, r3
 8007d02:	4770      	bx	lr
